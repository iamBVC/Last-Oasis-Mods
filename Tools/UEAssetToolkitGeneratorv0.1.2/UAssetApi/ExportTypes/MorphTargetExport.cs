namespace UAssetAPI;

public class FMorphTargetDelta {
    public FVector PositionDelta;
    public FVector TangentZDelta;
    public uint SourceIdx;

    public FMorphTargetDelta(AssetBinaryReader reader) {
        PositionDelta = reader.ReadVector();
        if (reader.Ver < UE4Version.VER_UE4_MORPHTARGET_CPU_TANGENTZDELTA_FORMATCHANGE) {
            TangentZDelta = (FVector)new FDeprecatedSerializedPackedNormal(reader);
        } else {
            TangentZDelta = reader.ReadVector();
            SourceIdx = reader.ReadUInt32();
        }
    }

}
public class FMorphTargetLODModel {
    /** vertex data for a single LOD morph mesh */
    public FMorphTargetDelta[] Vertices;
    /** number of original verts in the base mesh */
    public int NumBaseMeshVerts;
    /** list of sections this morph is used */
    public int[] SectionIndices;
    /** Is this LOD generated by reduction setting */
    public bool bGeneratedByEngine;

    public FMorphTargetLODModel(AssetBinaryReader reader) {
        Vertices = reader.ReadArray(() => new FMorphTargetDelta(reader));
        NumBaseMeshVerts = reader.ReadInt32();
        SectionIndices = reader.ReadArray(() => reader.ReadInt32());
        bGeneratedByEngine = reader.ReadIntBoolean();
    }

}


/// <summary>
/// Export for a skeletal mesh asset.
/// </summary>
public class MorphTargetExport : NormalExport { 

    public FMorphTargetLODModel[] MorphLODModels;
    public MorphTargetExport(Export super) : base(super)
    {

    }

    public MorphTargetExport()
    {

    }

    public override void Read(AssetBinaryReader reader, int nextStarting)
    {
        base.Read(reader, nextStarting);
        reader.ReadInt32();

        var stripData = new FStripDataFlags(reader);
        if (!stripData.IsDataStrippedForServer()) {
            MorphLODModels = reader.ReadArray(() => new FMorphTargetLODModel(reader));
        }
    }

    public override void Write(AssetBinaryWriter writer) {
        base.Write(writer);
        writer.Write(0);

    }
}
