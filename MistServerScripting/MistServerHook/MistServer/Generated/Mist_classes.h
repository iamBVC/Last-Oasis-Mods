#pragma once
#include "Foliage_classes.h"
#include "Mist_struct.h"
#include "UMG_classes.h"
#include "AIModule_classes.h"
#include "LevelSequence_classes.h"
#include "MinimapPlugin_classes.h"
#include "AnimationBudgetAllocator_classes.h"
#include "ReplicationGraph_classes.h"
#include "AssetRegistry_struct.h"


// Class Mist.MistEffectManagerBase
// Size: 0x3c8 (Inherited: 0x3c0)
struct AMistEffectManagerBase : AActor {
	float SkipUpdatesPlayerSpeedThreshold; // 0x3c0(0x04)
	bool bIgnoreSkippingUpdates; // 0x3c4(0x01)
	char pad_3C5[0x3]; // 0x3c5(0x03)
};

// Class Mist.AmbientEffectManager
// Size: 0x4b0 (Inherited: 0x3c8)
struct AAmbientEffectManager : AMistEffectManagerBase {
	struct TMap<struct FName, struct FFoliageParticleData> FoliageParticleData; // 0x3c8(0x50)
	struct TArray<struct FFoliageParticleInstanceData> FoliageParticleInstanceData; // 0x418(0x10)
	struct TMap<struct FName, struct FFoliageSoundData> FoliageSoundData; // 0x428(0x50)
	struct TArray<struct FFoliageSoundInstanceData> FoliageSoundInstanceData; // 0x478(0x10)
	float UpdateFrequencyRateSound; // 0x488(0x04)
	float UpdateFrequencyRateEmitters; // 0x48c(0x04)
	char pad_490[0x18]; // 0x490(0x18)
	struct UMistWeightMapCacheComponent* WeightMapCacheComponent; // 0x4a8(0x08)
};

// Class Mist.MistFoliageComponent
// Size: 0xca0 (Inherited: 0x9f0)
struct UMistFoliageComponent : UFoliageInstancedStaticMeshComponent {
	char pad_9F0[0x70]; // 0x9f0(0x70)
	struct UStaticMeshComponent* HighlightMeshComponent; // 0xa60(0x08)
	struct FText InteractionTextDisplay; // 0xa68(0x18)
	bool bCollisionOnClientOnly; // 0xa80(0x01)
	bool bDestructibleByRamming; // 0xa81(0x01)
	bool bRespawn; // 0xa82(0x01)
	char pad_A83[0x1]; // 0xa83(0x01)
	float RespawnInMin; // 0xa84(0x04)
	float RespawnInMax; // 0xa88(0x04)
	float RespawnDistanceFromActivePlayers; // 0xa8c(0x04)
	struct TArray<struct FMistFoliageHarvestingEntry> HarvestingEntries; // 0xa90(0x10)
	struct FMistInteractableProperties InteractableProperties; // 0xaa0(0x14)
	float MaxHealth; // 0xab4(0x04)
	float Armor; // 0xab8(0x04)
	char pad_ABC[0x4]; // 0xabc(0x04)
	struct UParticleSystem* ParticleSystem; // 0xac0(0x08)
	struct USoundBase* Sound; // 0xac8(0x08)
	char pad_AD0[0x70]; // 0xad0(0x70)
	struct TSet<int32_t> RemovedInstances; // 0xb40(0x50)
	struct AActor* ClientInstanceDestroyedActorClass; // 0xb90(0x08)
	char pad_B98[0xb0]; // 0xb98(0xb0)
	struct TMap<int32_t, struct AActor*> ServerInstanceActors; // 0xc48(0x50)
	char pad_C98[0x8]; // 0xc98(0x08)

	void SetInstanceValue(int32_t InstanceIndex, float Value); // Function Mist.MistFoliageComponent.SetInstanceValue // (Final|Native|Public|BlueprintCallable) // @ game+0x10fb5e0
	struct FHitResult ReplaceWithActorOnHit(struct AActor* ReplacementActor, struct FHitResult& OriginalImpact); // Function Mist.MistFoliageComponent.ReplaceWithActorOnHit // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x10fb460
	struct AActor* ReplaceWithActor(struct AActor* ReplacementActor, int32_t Item); // Function Mist.MistFoliageComponent.ReplaceWithActor // (Final|Native|Public|BlueprintCallable) // @ game+0x10fb3a0
	void ReceiveInteract(struct FMistInteraction& Interaction); // Function Mist.MistFoliageComponent.ReceiveInteract // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveEndInteract(struct FMistInteraction& Interaction, bool bCanceled); // Function Mist.MistFoliageComponent.ReceiveEndInteract // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBeginInteract(struct FMistInteraction& Interaction); // Function Mist.MistFoliageComponent.ReceiveBeginInteract // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void OnInstanceReplacedWithActor(struct AActor* ReplacementActor); // Function Mist.MistFoliageComponent.OnInstanceReplacedWithActor // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastPlayEffects(struct FVector Location); // Function Mist.MistFoliageComponent.MulticastPlayEffects // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults) // @ game+0x10fb2d0
	float ModifyDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamageCauser); // Function Mist.MistFoliageComponent.ModifyDamage // (Native|Event|Public|BlueprintEvent) // @ game+0x10fb1c0
	void HandleRadialDamage(struct UPrimitiveComponent* DamagedComponent, float Damage, struct UDamageType* DamageType, struct FVector Origin, struct FDamageSource& DamageSource, struct FHitResult& Hit); // Function Mist.MistFoliageComponent.HandleRadialDamage // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x10faf40
	void HandlePointDamage(struct UPrimitiveComponent* DamagedComponent, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource, struct FHitResult& Hit); // Function Mist.MistFoliageComponent.HandlePointDamage // (Final|Native|Private|HasOutParms) // @ game+0x10fad50
	struct AActor* GetReplacedActor(int32_t Item); // Function Mist.MistFoliageComponent.GetReplacedActor // (Final|Native|Public|BlueprintCallable) // @ game+0x10faba0
	float GetInstanceValue(int32_t InstanceIndex); // Function Mist.MistFoliageComponent.GetInstanceValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10faa40
	struct FTransform GetInitialInstanceTransform(int32_t InstanceIndex, bool bWorldSpace); // Function Mist.MistFoliageComponent.GetInitialInstanceTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10fa940
	void DestroyInstance(int32_t InstanceIndex, bool bReplaceWithClientActor); // Function Mist.MistFoliageComponent.DestroyInstance // (Native|Public|BlueprintCallable) // @ game+0x10fa420
	void BroadcastRespawnInstance(int32_t InstanceIndex); // Function Mist.MistFoliageComponent.BroadcastRespawnInstance // (Final|Net|NetReliableNative|Event|Private) // @ game+0x10fa390
	void BroadcastDestroyInstanceSkipReplaceActor(int32_t InstanceIndex); // Function Mist.MistFoliageComponent.BroadcastDestroyInstanceSkipReplaceActor // (Final|Net|NetReliableNative|Event|Private) // @ game+0x10fa300
	void BroadcastDestroyInstance(int32_t InstanceIndex); // Function Mist.MistFoliageComponent.BroadcastDestroyInstance // (Final|Net|NetReliableNative|Event|Private) // @ game+0x10fa270
};

// Class Mist.AnimalSpawner
// Size: 0xcb0 (Inherited: 0xca0)
struct UAnimalSpawner : UMistFoliageComponent {
	int32_t Population; // 0xca0(0x04)
	int32_t MaxPopulation; // 0xca4(0x04)
	struct AMistAnimal* Animal; // 0xca8(0x08)

	void HandleAnimalStateChanged(struct AMistCharacter* Character, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.AnimalSpawner.HandleAnimalStateChanged // (Final|Native|Private) // @ game+0x10867f0
};

// Class Mist.VirtualLandscapeLayer
// Size: 0x68 (Inherited: 0x30)
struct UVirtualLandscapeLayer : UPrimaryDataAsset {
	struct FMistLandscapeLayersList IncludedLayers; // 0x30(0x10)
	struct TArray<struct UVirtualLandscapeLayer*> IncludedLayerGroups; // 0x40(0x10)
	struct FMistLandscapeLayersList ExcludedLayers; // 0x50(0x10)
	int32_t QualitySeed; // 0x60(0x04)
	float QualityThreshold; // 0x64(0x04)
};

// Class Mist.GroundLandscapeLayer
// Size: 0x88 (Inherited: 0x68)
struct UGroundLandscapeLayer : UVirtualLandscapeLayer {
	float WalkerSandinessAffection; // 0x68(0x04)
	bool GenerateRippleEffect; // 0x6c(0x01)
	bool BlockBuildingNearby; // 0x6d(0x01)
	char pad_6E[0x2]; // 0x6e(0x02)
	struct FText BlockBuildingNearbyWarning; // 0x70(0x18)
};

// Class Mist.MistMannedControlAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UMistMannedControlAnimInstance : UAnimInstance {
	int32_t CurrentLOD; // 0x268(0x04)
	struct UMistMannedControlComponent* CachedControlComponent; // 0x270(0x08)
	char pad_27C[0x4]; // 0x27c(0x04)

	struct UMistMannedControlComponent* GetControlComponent(); // Function Mist.MistMannedControlAnimInstance.GetControlComponent // (Final|Native|Protected|BlueprintCallable) // @ game+0x1130ef0
};

// Class Mist.HoistControlAnimInstance
// Size: 0x2a0 (Inherited: 0x280)
struct UHoistControlAnimInstance : UMistMannedControlAnimInstance {
	bool bIsManned; // 0x278(0x01)
	float ReelingSpeed; // 0x27c(0x04)
	bool bReloading; // 0x280(0x01)
	bool bFiring; // 0x281(0x01)
	float ReloadMultiplier; // 0x284(0x04)
	float ReelPosition; // 0x288(0x04)
	char pad_28F[0x1]; // 0x28f(0x01)
	struct UAnimSequence* ReelInAnimation; // 0x290(0x08)
	struct UAnimSequence* ReloadAnimation; // 0x298(0x08)
};

// Class Mist.MistQuest
// Size: 0x38 (Inherited: 0x28)
struct UMistQuest : UObject {
	struct AMistOasisPlayerState* PlayerState; // 0x28(0x08)
	struct AMistPlayer* ControlledPlayer; // 0x30(0x08)

	struct AMistOasisPlayerState* GetPlayerState(); // Function Mist.MistQuest.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1180900
	struct AMistPlayer* GetPlayer(); // Function Mist.MistQuest.GetPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11808e0
};

// Class Mist.MistTutorialQuest
// Size: 0x110 (Inherited: 0x38)
struct UMistTutorialQuest : UMistQuest {
	struct TArray<struct FMistQuestSubtask> Subtasks; // 0x38(0x10)
	struct FText Description; // 0x48(0x18)
	struct FText LoreText; // 0x60(0x18)
	struct FText SubtitleText; // 0x78(0x18)
	bool bSoundPlayed; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct TArray<struct FItemToHarvest> ItemsToHarvest; // 0x98(0x10)
	struct TArray<struct FTechToUnlock> TechsToUnlock; // 0xa8(0x10)
	struct TMap<struct UMistItemTemplate*, struct FName> ItemsToEquip; // 0xb8(0x50)
	struct UMistTutorialComponent* TutorialComponent; // 0x108(0x08)

	void SetSubtaskProgress(struct FName SubtaskName, int32_t Count, bool IsServer); // Function Mist.MistTutorialQuest.SetSubtaskProgress // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x11c59e0
	void ReceiveUncontrolled(struct AMistPlayer* Player); // Function Mist.MistTutorialQuest.ReceiveUncontrolled // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveControlled(struct AMistPlayer* Player); // Function Mist.MistTutorialQuest.ReceiveControlled // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnTechUnlocked(struct AMistOasisPlayerState* Sender); // Function Mist.MistTutorialQuest.OnTechUnlocked // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void OnQuestStart(); // Function Mist.MistTutorialQuest.OnQuestStart // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void OnQuestFinished(); // Function Mist.MistTutorialQuest.OnQuestFinished // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void NativeTechTreeUnlocked(struct AMistOasisPlayerState* Sender); // Function Mist.MistTutorialQuest.NativeTechTreeUnlocked // (Native|Protected) // @ game+0x11c54f0
	bool IsSubtaskFinished(struct FName SubtaskName); // Function Mist.MistTutorialQuest.IsSubtaskFinished // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c5460
	void IncrementSubtaskProgress(struct FName SubtaskName, bool IsServer); // Function Mist.MistTutorialQuest.IncrementSubtaskProgress // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x11c5390
	void HandleInventoryUpdate(); // Function Mist.MistTutorialQuest.HandleInventoryUpdate // (Native|Protected) // @ game+0x11c4dd0
	void HandleEquipmentUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot Slot); // Function Mist.MistTutorialQuest.HandleEquipmentUpdate // (Native|Protected) // @ game+0x11c4af0
	int32_t GetSubtaskProgress(struct FName SubtaskName); // Function Mist.MistTutorialQuest.GetSubtaskProgress // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c4920
	void FinishSubtaskProgress(struct FName SubtaskName); // Function Mist.MistTutorialQuest.FinishSubtaskProgress // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x11c48a0
	void FinishCurrentQuest(); // Function Mist.MistTutorialQuest.FinishCurrentQuest // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x11c4880
	bool AreAllSubtasksFinished(); // Function Mist.MistTutorialQuest.AreAllSubtasksFinished // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x11c45f0
	void AddSubtaskProgress(struct FName SubtaskName, int32_t Count, bool IsServer); // Function Mist.MistTutorialQuest.AddSubtaskProgress // (Final|Native|Protected|BlueprintCallable|Const) // @ game+0x11c44f0
};

// Class Mist.MistAcceptFlotillaQuestQuest
// Size: 0x118 (Inherited: 0x110)
struct UMistAcceptFlotillaQuestQuest : UMistTutorialQuest {
	struct FName AcceptQuestTaskName; // 0x110(0x08)
};

// Class Mist.MistAccountAuthDataManager
// Size: 0x148 (Inherited: 0x28)
struct UMistAccountAuthDataManager : UObject {
	int32_t TokenRefreshInterval; // 0x28(0x04)
	char pad_2C[0xcc]; // 0x2c(0xcc)
	struct UMistBackendHttpClient* BackendClient; // 0xf8(0x08)
	struct UMistDataManager* DataManager; // 0x100(0x08)
	char pad_108[0x40]; // 0x108(0x40)
};

// Class Mist.MistAccountCharacterData
// Size: 0x110 (Inherited: 0x28)
struct UMistAccountCharacterData : UObject {
	char pad_28[0xe8]; // 0x28(0xe8)
};

// Class Mist.MistAccountCharacterListItemData
// Size: 0x58 (Inherited: 0x28)
struct UMistAccountCharacterListItemData : UObject {
	char pad_28[0x30]; // 0x28(0x30)
};

// Class Mist.MistAccountCharacterListData
// Size: 0x158 (Inherited: 0x28)
struct UMistAccountCharacterListData : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TArray<struct UMistAccountCharacterListItemData*> Items; // 0x98(0x10)
	char pad_A8[0x30]; // 0xa8(0x30)
	struct UMistBackendHttpClient* BackendClient; // 0xd8(0x08)
	struct UMistDataManager* DataManager; // 0xe0(0x08)
	struct UMistAccountDataManager* AccountDataManager; // 0xe8(0x08)
	char pad_F0[0x68]; // 0xf0(0x68)
};

// Class Mist.MistAccountCreateCharacterData
// Size: 0x128 (Inherited: 0x28)
struct UMistAccountCreateCharacterData : UObject {
	char pad_28[0xe8]; // 0x28(0xe8)
	struct UMistBackendHttpClient* BackendClient; // 0x110(0x08)
	char pad_118[0x10]; // 0x118(0x10)
};

// Class Mist.MistAccountDeleteCharacterData
// Size: 0xc8 (Inherited: 0x28)
struct UMistAccountDeleteCharacterData : UObject {
	char pad_28[0x88]; // 0x28(0x88)
	struct UMistBackendHttpClient* BackendClient; // 0xb0(0x08)
	char pad_B8[0x10]; // 0xb8(0x10)
};

// Class Mist.MistAccountDataManager
// Size: 0xb0 (Inherited: 0x28)
struct UMistAccountDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistDataManager* DataManager; // 0x30(0x08)
	struct UMistAccountCharacterListData* CharacterListData; // 0x38(0x08)
	struct TMap<int64_t, struct UMistAccountRealmCharacterData*> RealmCharacterDataItems; // 0x40(0x50)
	char pad_90[0x20]; // 0x90(0x20)
};

// Class Mist.MistAccountRealmCharacterData
// Size: 0x130 (Inherited: 0x28)
struct UMistAccountRealmCharacterData : UObject {
	char pad_28[0x78]; // 0x28(0x78)
	struct UMistAccountRealmData* Realm; // 0xa0(0x08)
	struct UMistAccountCharacterData* Character; // 0xa8(0x08)
	char pad_B0[0x8]; // 0xb0(0x08)
	struct UMistBackendHttpClient* BackendClient; // 0xb8(0x08)
	char pad_C0[0x70]; // 0xc0(0x70)
};

// Class Mist.MistAccountRealmRegionSpawnTileData
// Size: 0x50 (Inherited: 0x28)
struct UMistAccountRealmRegionSpawnTileData : UObject {
	char pad_28[0x28]; // 0x28(0x28)
};

// Class Mist.MistAccountRealmRegionData
// Size: 0xc8 (Inherited: 0x28)
struct UMistAccountRealmRegionData : UObject {
	char pad_28[0x90]; // 0x28(0x90)
	struct TArray<struct UMistAccountRealmRegionSpawnTileData*> SpawnTiles; // 0xb8(0x10)
};

// Class Mist.MistAccountRealmData
// Size: 0x110 (Inherited: 0x28)
struct UMistAccountRealmData : UObject {
	char pad_28[0xa8]; // 0x28(0xa8)
	struct TArray<struct UMistAccountRealmRegionData*> Regions; // 0xd0(0x10)
	char pad_E0[0x30]; // 0xe0(0x30)
};

// Class Mist.MistPlayerControllerComponent
// Size: 0x108 (Inherited: 0xf0)
struct UMistPlayerControllerComponent : UActorComponent {
	struct AMistOasisPlayerController* PlayerControllerOwner; // 0xf0(0x08)
	struct AMistPlayer* ControlledPlayer; // 0xf8(0x08)
	char pad_100[0x8]; // 0x100(0x08)
};

// Class Mist.MistAchievementComponent
// Size: 0x2d8 (Inherited: 0x108)
struct UMistAchievementComponent : UMistPlayerControllerComponent {
	struct FMistAchievement FirstWalkerAchievement; // 0x108(0x10)
	struct FMistAchievement BattleFanWalkerBoost; // 0x118(0x10)
	struct TMap<struct TSoftClassPtr<UObject>, struct FMistAchievement> BuildAchievements; // 0x128(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct FMistAchievementStat> KillAchievementStats; // 0x178(0x50)
	struct FMistAchievement WormHunterAchievement; // 0x1c8(0x10)
	struct FMistAchievement WormSlayerAchievement; // 0x1d8(0x10)
	struct FMistAchievement LeaveDropZoneAchievement; // 0x1e8(0x10)
	struct FMistAchievement TutorialFinishedAchievement; // 0x1f8(0x10)
	struct FMistAchievementStat BlockAchievementStat; // 0x208(0x28)
	struct FMistAchievementStat AttackAchievementStat; // 0x230(0x28)
	struct FMistAchievement CombatMasterAchievement; // 0x258(0x10)
	struct TMap<struct AActor*, struct FMistAchievementStat> LootableActorAchievementStats; // 0x268(0x50)
	struct UMistAchievementSubsystem* AchievementSubsystem; // 0x2b8(0x08)
	char pad_2C0[0x18]; // 0x2c0(0x18)

	void HandleThirstChanged(struct UMistPlayerThirstComponent* StaminaComponent, float Thirst, float PrevThirst); // Function Mist.MistAchievementComponent.HandleThirstChanged // (Final|Native|Private) // @ game+0x108bce0
	void HandleTargetKilled(struct APawn* Target); // Function Mist.MistAchievementComponent.HandleTargetKilled // (Final|Native|Private) // @ game+0x108bc60
	void HandlePlayerTechUnlocked(struct AMistOasisPlayerState* Sender); // Function Mist.MistAchievementComponent.HandlePlayerTechUnlocked // (Final|Native|Private) // @ game+0x108b940
	void HandleInteract(struct FMistInteraction& Interaction); // Function Mist.MistAchievementComponent.HandleInteract // (Final|Native|Private|HasOutParms) // @ game+0x108b7e0
	void HandleHitReceived(struct FMeleeHitInfo HitInfo); // Function Mist.MistAchievementComponent.HandleHitReceived // (Final|Native|Private) // @ game+0x108b620
	void HandleHitDealt(struct FMeleeHitInfo HitInfo); // Function Mist.MistAchievementComponent.HandleHitDealt // (Final|Native|Private) // @ game+0x108b460
	void ClientUnlockAchievement(struct FMistAchievement Achievement); // Function Mist.MistAchievementComponent.ClientUnlockAchievement // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x108b060
	void ClientSetTechtreeUnlocksAchievementStat(struct FString Value); // Function Mist.MistAchievementComponent.ClientSetTechtreeUnlocksAchievementStat // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x108afc0
	void ClientSetAchievementStat(struct FMistAchievementStat AchievementStat, double Value, enum class EMistAchievementStatModificationType Type); // Function Mist.MistAchievementComponent.ClientSetAchievementStat // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x108ae80
	void ClientIncrementHitAchievement(bool bBlock); // Function Mist.MistAchievementComponent.ClientIncrementHitAchievement // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x108adf0
	void ClientIncrementAchievementStat(struct FMistAchievementStat AchievementStat); // Function Mist.MistAchievementComponent.ClientIncrementAchievementStat // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x108ad30
	void AchievementEvent__DelegateSignature(struct FName WrittenAchievementName, float WrittenProgress); // DelegateFunction Mist.MistAchievementComponent.AchievementEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistAchievementSubsystem
// Size: 0x68 (Inherited: 0x30)
struct UMistAchievementSubsystem : UGameInstanceSubsystem {
	char pad_30[0x38]; // 0x30(0x38)
};

// Class Mist.MistUIWidget
// Size: 0x2c0 (Inherited: 0x230)
struct UMistUIWidget : UUserWidget {
	struct UMistBaseToolTipWidget* ToolTipWidgetClass; // 0x230(0x08)
	char pad_238[0x8]; // 0x238(0x08)
	struct TArray<struct FMistTooltipInfo> TooltipWidgets; // 0x240(0x10)
	bool bFocusableWithMouse; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct TMap<int32_t, struct UWidget*> OverriddenDefaultTooltipWidgets; // 0x258(0x50)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	bool bIsBreadcrumbable; // 0x2b0(0x01)
	bool bPreventToolTipOverlaps; // 0x2b1(0x01)
	char pad_2B2[0xe]; // 0x2b2(0x0e)

	void TryRedraw(); // Function Mist.MistUIWidget.TryRedraw // (Final|Native|Public|BlueprintCallable) // @ game+0x11ca5c0
	void ReceiveRedraw(); // Function Mist.MistUIWidget.ReceiveRedraw // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	struct UWidget* GetDefaultSelectedWidget(); // Function Mist.MistUIWidget.GetDefaultSelectedWidget // (Native|Public|BlueprintCallable) // @ game+0x11c9680
	struct UWidget* CreateToolTipWidget(); // Function Mist.MistUIWidget.CreateToolTipWidget // (Native|Protected) // @ game+0x11c93e0
	struct UWidget* CreateGenericToolTipWidget_10(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_10 // (Final|Native|Private) // @ game+0x11c93a0
	struct UWidget* CreateGenericToolTipWidget_9(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_9 // (Final|Native|Private) // @ game+0x11c9360
	struct UWidget* CreateGenericToolTipWidget_8(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_8 // (Final|Native|Private) // @ game+0x11c9320
	struct UWidget* CreateGenericToolTipWidget_7(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_7 // (Final|Native|Private) // @ game+0x11c92e0
	struct UWidget* CreateGenericToolTipWidget_6(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_6 // (Final|Native|Private) // @ game+0x11c92a0
	struct UWidget* CreateGenericToolTipWidget_5(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_5 // (Final|Native|Private) // @ game+0x11c9260
	struct UWidget* CreateGenericToolTipWidget_4(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_4 // (Final|Native|Private) // @ game+0x11c9220
	struct UWidget* CreateGenericToolTipWidget_3(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_3 // (Final|Native|Private) // @ game+0x11c91e0
	struct UWidget* CreateGenericToolTipWidget_2(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_2 // (Final|Native|Private) // @ game+0x11c91a0
	struct UWidget* CreateGenericToolTipWidget_1(); // Function Mist.MistUIWidget.CreateGenericToolTipWidget_1 // (Final|Native|Private) // @ game+0x11c9170
};

// Class Mist.MistBaseToolTipWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistBaseToolTipWidget : UMistUIWidget {
	char pad_2C0[0x20]; // 0x2c0(0x20)
};

// Class Mist.MistActionHintToolTipWidget
// Size: 0x318 (Inherited: 0x2e0)
struct UMistActionHintToolTipWidget : UMistBaseToolTipWidget {
	struct UTextBlock* ToolTipTextWidget; // 0x2e0(0x08)
	struct UPanelWidget* ActionHintPanelWidget; // 0x2e8(0x08)
	struct UPanelWidget* ProgressPanelWidget; // 0x2f0(0x08)
	struct UPanelWidget* ErrorPanelWidget; // 0x2f8(0x08)
	struct UTextBlock* ActionHintTextWidget; // 0x300(0x08)
	struct UTextBlock* ProgressTextWidget; // 0x308(0x08)
	struct UTextBlock* ErrorTextWidget; // 0x310(0x08)
};

// Class Mist.MistStatusEffect
// Size: 0xe0 (Inherited: 0x28)
struct UMistStatusEffect : UObject {
	enum class EMistStatusEffectStackingMode StackingMode; // 0x28(0x01)
	bool bAffectedByVitaminPower; // 0x29(0x01)
	bool bHasDescription; // 0x2a(0x01)
	bool bReplicateToAllPlayers; // 0x2b(0x01)
	bool bIsCancelledByDamage; // 0x2c(0x01)
	char pad_2D[0x3]; // 0x2d(0x03)
	float CancelDamageThreshold; // 0x30(0x04)
	bool bPermanent; // 0x34(0x01)
	char pad_35[0x3]; // 0x35(0x03)
	float Duration; // 0x38(0x04)
	float Interval; // 0x3c(0x04)
	bool bAffectedByTimeElapsed; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct UMistVitaminItemTemplate* RequiredVitamin; // 0x48(0x08)
	struct FRuntimeFloatCurve MagnitudeTimeCurve; // 0x50(0x88)
	float MagnitudeTimeScale; // 0xd8(0x04)
	char pad_DC[0x4]; // 0xdc(0x04)
};

// Class Mist.MistBaseModifierStatusEffect
// Size: 0xf0 (Inherited: 0xe0)
struct UMistBaseModifierStatusEffect : UMistStatusEffect {
	enum class EMistModifierType ModifierType; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	float Value; // 0xe4(0x04)
	struct UCurveFloat* EffectModByMagnitude; // 0xe8(0x08)
};

// Class Mist.MistActionModifierStatusEffect
// Size: 0xf8 (Inherited: 0xf0)
struct UMistActionModifierStatusEffect : UMistBaseModifierStatusEffect {
	enum class EMistActionModifier ActionType; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
};

// Class Mist.MistHUDWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistHUDWidget : UMistUIWidget {
	enum class EMistHUDElementFlags HUDFlag; // 0x2c0(0x04)
	enum class ESlateVisibility DefaultVisibility; // 0x2c4(0x01)
	char pad_2C5[0x3]; // 0x2c5(0x03)
	struct UWidget* MainWidget; // 0x2c8(0x08)
	struct AMistPlayer* BoundPlayer; // 0x2d0(0x08)
	char pad_2D8[0x8]; // 0x2d8(0x08)
};

// Class Mist.MistActiveVitaminsWidget
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMistActiveVitaminsWidget : UMistHUDWidget {
	struct UHorizontalBox* VitaminListWidget; // 0x2e0(0x08)

	void HandleActiveVitaminsChanged(struct UMistVitaminUserComponent* Sender); // Function Mist.MistActiveVitaminsWidget.HandleActiveVitaminsChanged // (Final|Native|Private) // @ game+0x108b100
};

// Class Mist.MistUIDragDropWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistUIDragDropWidget : UMistUIWidget {
	char pad_2C0[0x30]; // 0x2c0(0x30)
	struct UMistHoldButtonWidget* ProxyHoldButtonWidget; // 0x2f0(0x08)
	bool bSupportsDrag; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
	struct UMistUIDragDropOperation* DragOperation; // 0x300(0x08)

	void HandleButtonClicked(); // Function Mist.MistUIDragDropWidget.HandleButtonClicked // (Native|Protected) // @ game+0x11c49f0
};

// Class Mist.MistItemSlotWidget
// Size: 0x4d8 (Inherited: 0x308)
struct UMistItemSlotWidget : UMistUIDragDropWidget {
	struct FSlateSound DragSound; // 0x308(0x18)
	struct FSlateSound DropSound; // 0x320(0x18)
	struct FSlateSound UnequipSound; // 0x338(0x18)
	struct FLinearColor DraggedOverColor; // 0x350(0x10)
	struct FLinearColor DefaultColor; // 0x360(0x10)
	struct UTexture2D* NoItemTexture; // 0x370(0x08)
	struct UMistBasicItemIconWidget* IconWidget; // 0x378(0x08)
	struct UImage* NoItemOverlayWidget; // 0x380(0x08)
	struct UBorder* ItemSlotBackground; // 0x388(0x08)
	struct UGridPanel* ItemSlotPopupContainer; // 0x390(0x08)
	struct UGridPanel* ItemSlotPopupContainerOverride; // 0x398(0x08)
	struct UWidget* ProtectedSlotMark; // 0x3a0(0x08)
	struct UImage* FilteredOutWidget; // 0x3a8(0x08)
	struct UWidget* NewItemIndicatorWidget; // 0x3b0(0x08)
	struct UWidget* CantBeDraggedToIndicatorWidget; // 0x3b8(0x08)
	struct UWidget* DraggedIndicatorWidget; // 0x3c0(0x08)
	struct UTextBlock* StackSizeTextWidget; // 0x3c8(0x08)
	float BackgroundOpacity; // 0x3d0(0x04)
	bool bIsFilteredOut; // 0x3d4(0x01)
	bool bTrackNewStatus; // 0x3d5(0x01)
	bool bShowStackSize; // 0x3d6(0x01)
	char pad_3D7[0x1]; // 0x3d7(0x01)
	struct FMistItem Item; // 0x3d8(0x18)
	int32_t Count; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct FMistInventoryOperationSource Source; // 0x3f8(0x38)
	struct FMistInventoryOperationTarget Target; // 0x430(0x20)
	char pad_450[0x88]; // 0x450(0x88)

	void PlayUnHoveredAnimation(); // Function Mist.MistItemSlotWidget.PlayUnHoveredAnimation // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void PlayHoveredAnimation(); // Function Mist.MistItemSlotWidget.PlayHoveredAnimation // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistActiveVitaminWidget
// Size: 0x500 (Inherited: 0x4d8)
struct UMistActiveVitaminWidget : UMistItemSlotWidget {
	struct UProgressBar* ProgressBarWidget; // 0x4d8(0x08)
	struct FMistActiveVitamin ActiveVitamin; // 0x4e0(0x18)
	char pad_4F8[0x8]; // 0x4f8(0x08)
};

// Class Mist.MistActorAttachmentComponent
// Size: 0x128 (Inherited: 0xf0)
struct UMistActorAttachmentComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	struct USceneComponent* ParentComponent; // 0x110(0x08)
	int32_t ParentIndex; // 0x118(0x04)
	char pad_11C[0xc]; // 0x11c(0x0c)

	void HandleStructurePartInstanceRemoved(struct FTransform& Transform, int32_t ItemIndex); // Function Mist.MistActorAttachmentComponent.HandleStructurePartInstanceRemoved // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x108bb40
	void HandleParentActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistActorAttachmentComponent.HandleParentActorDestroyed // (Final|Native|Private) // @ game+0x108b8c0
	void HandleFoliageInstanceReplaced(struct UMistFoliageComponent* Component, int32_t InstanceIndex, struct AActor* ReplacementActor); // Function Mist.MistActorAttachmentComponent.HandleFoliageInstanceReplaced // (Final|Native|Private) // @ game+0x108b360
	void HandleFoliageInstanceRemoved(struct UMistFoliageComponent* Component, int32_t InstanceIndex); // Function Mist.MistActorAttachmentComponent.HandleFoliageInstanceRemoved // (Final|Native|Private) // @ game+0x108b2a0
};

// Class Mist.MistUIScreen
// Size: 0x3a0 (Inherited: 0x2c0)
struct UMistUIScreen : UMistUIWidget {
	char pad_2C0[0x70]; // 0x2c0(0x70)
	struct FSlateSound OpenedSound; // 0x330(0x18)
	struct FSlateSound ClosedSound; // 0x348(0x18)
	bool bApplyUIScreenMix; // 0x360(0x01)
	char pad_361[0x3]; // 0x361(0x03)
	uint32_t HUDFlags; // 0x364(0x04)
	char pad_368[0x20]; // 0x368(0x20)
	struct TArray<struct UObject*> KeepAliveObjects; // 0x388(0x10)
	char pad_398[0x8]; // 0x398(0x08)

	void CloseWithEscape(); // Function Mist.MistUIScreen.CloseWithEscape // (Native|Protected) // @ game+0x11c49f0
	void Close(); // Function Mist.MistUIScreen.Close // (Native|Public|BlueprintCallable) // @ game+0x10a4190
};

// Class Mist.MistActorSelectionScreen
// Size: 0x428 (Inherited: 0x3a0)
struct UMistActorSelectionScreen : UMistUIScreen {
	char pad_3A0[0x50]; // 0x3a0(0x50)
	struct FMistInteraction SelectedInteraction; // 0x3f0(0x18)
	struct UMistInteractorComponent* InteractorComponent; // 0x408(0x08)
	char pad_410[0x18]; // 0x410(0x18)
};

// Class Mist.MistActorSpawningManager
// Size: 0x28 (Inherited: 0x28)
struct UMistActorSpawningManager : UInterface {
};

// Class Mist.MistUIDialog
// Size: 0x3c0 (Inherited: 0x3a0)
struct UMistUIDialog : UMistUIScreen {
	char pad_3A0[0x18]; // 0x3a0(0x18)
	enum class EMistDialogResult DialogResult; // 0x3b8(0x01)
	char pad_3B9[0x7]; // 0x3b9(0x07)
};

// Class Mist.MistAdminKickBanPlayerDialog
// Size: 0x3d0 (Inherited: 0x3c0)
struct UMistAdminKickBanPlayerDialog : UMistUIDialog {
	struct UScrollBox* PlayerListWidget; // 0x3c0(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x3c8(0x08)
};

// Class Mist.MistAdminKickBanPlayerWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistAdminKickBanPlayerWidget : UMistUIWidget {
	struct UTextBlock* PlayerNameWidget; // 0x2c0(0x08)
	struct UTextBlock* UniqueIdWidget; // 0x2c8(0x08)
	struct UMistBaseButtonWidget* BanButtonWidget; // 0x2d0(0x08)
	struct UMistBaseButtonWidget* KickButtonWidget; // 0x2d8(0x08)
	char pad_2E0[0x30]; // 0x2e0(0x30)
};

// Class Mist.MistAiAggroComponent
// Size: 0x118 (Inherited: 0xf0)
struct UMistAiAggroComponent : UActorComponent {
	float DistanceAggroChangeSpeed; // 0xf0(0x04)
	float DynamicAggroGainSpeed; // 0xf4(0x04)
	float DynamicAggroLossSpeed; // 0xf8(0x04)
	float FirstHitAggroBonus; // 0xfc(0x04)
	char pad_100[0x18]; // 0x100(0x18)

	void HandleReceiveAnyDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistAiAggroComponent.HandleReceiveAnyDamage // (Final|Native|Protected|HasOutParms) // @ game+0x108b9c0
};

// Class Mist.MistAiAggroComponentExperimental
// Size: 0x150 (Inherited: 0x118)
struct UMistAiAggroComponentExperimental : UMistAiAggroComponent {
	float EngageAggro; // 0x118(0x04)
	struct FVector2D DistanceAggroValueRange; // 0x11c(0x08)
	struct FVector2D DynamicAggroValueRange; // 0x124(0x08)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct TArray<struct FTargetDescription> AllowedTargetTypes; // 0x130(0x10)
	struct TArray<struct AActor*> ExcludedActors; // 0x140(0x10)

	void RemoveExcludedActor(struct AActor* Target); // Function Mist.MistAiAggroComponentExperimental.RemoveExcludedActor // (Final|Native|Public) // @ game+0x108bec0
};

// Class Mist.MistAiBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistAiBehaviorHandler : UDataAsset {

	void UpdateBehavior(struct AMistMobController* Controller); // Function Mist.MistAiBehaviorHandler.UpdateBehavior // (Native|Event|Public|BlueprintEvent) // @ game+0x108bf40
	void HandleBehaviorSucceeded(struct AMistMobController* Controller); // Function Mist.MistAiBehaviorHandler.HandleBehaviorSucceeded // (Native|Event|Public|BlueprintEvent) // @ game+0x108b210
	void HandleBehaviorFailed(struct AMistMobController* Controller); // Function Mist.MistAiBehaviorHandler.HandleBehaviorFailed // (Native|Event|Public|BlueprintEvent) // @ game+0x108b180
	void BehaviorStarted(struct AMistMobController* Controller); // Function Mist.MistAiBehaviorHandler.BehaviorStarted // (Native|Event|Public|BlueprintEvent) // @ game+0x108abe0
};

// Class Mist.MistAiMeleeControlComponent
// Size: 0x1b8 (Inherited: 0xf0)
struct UMistAiMeleeControlComponent : UActorComponent {
	struct FCombatAnimTrack QueuedAction; // 0xf0(0x38)
	char pad_128[0x10]; // 0x128(0x10)
	struct UMistMeleeCombatComponent* CachedCombatComponent; // 0x138(0x08)
	struct FName StartingState; // 0x140(0x08)
	char pad_148[0x10]; // 0x148(0x10)
	struct AMistCharacter* OwnerMob; // 0x158(0x08)
	struct AMistCharacter* CurrentTarget; // 0x160(0x08)
	struct UMistMeleeCombatComponent* TargetCombatComponent; // 0x168(0x08)
	char pad_170[0x18]; // 0x170(0x18)
	float ChanceToBlockAttack; // 0x188(0x04)
	float ChanceToBlockAttackCorrectly; // 0x18c(0x04)
	float MinReactionTime; // 0x190(0x04)
	float MaxReactionTime; // 0x194(0x04)
	float MinAttackReadyHold; // 0x198(0x04)
	float MinAttackReadyHoldNoDanger; // 0x19c(0x04)
	float MaxAttackReadyHold; // 0x1a0(0x04)
	float MinWaitPostAttack; // 0x1a4(0x04)
	float MaxWaitPostAttack; // 0x1a8(0x04)
	char pad_1AC[0xc]; // 0x1ac(0x0c)

	void UpdateState(); // Function Mist.MistAiMeleeControlComponent.UpdateState // (Native|Event|Protected|BlueprintEvent) // @ game+0x108bfd0
};

// Class Mist.MistAiMeleeBlockComponent
// Size: 0x1b8 (Inherited: 0x1b8)
struct UMistAiMeleeBlockComponent : UMistAiMeleeControlComponent {
};

// Class Mist.MistAiMeleeSingleActionComponent
// Size: 0x1c0 (Inherited: 0x1b8)
struct UMistAiMeleeSingleActionComponent : UMistAiMeleeControlComponent {
	char pad_1B8[0x8]; // 0x1b8(0x08)
};

// Class Mist.AiScanComponent
// Size: 0x170 (Inherited: 0xf0)
struct UAiScanComponent : UActorComponent {
	float StrengthRatioToAttackAlone; // 0xf0(0x04)
	float GroupStrengthMultiplier; // 0xf4(0x04)
	float StrengthRatioToRunAway; // 0xf8(0x04)
	float ShortDistanceStrengthMultiplier; // 0xfc(0x04)
	float MediumDistance; // 0x100(0x04)
	float LongDistanceStrengthMultiplier; // 0x104(0x04)
	float FightTimeoutWithoutHits; // 0x108(0x04)
	float TimeToIgnoreTargetAfterGivingUp; // 0x10c(0x04)
	float DistanceToGiveUpFight; // 0x110(0x04)
	float RoamingRadius; // 0x114(0x04)
	float VisionRange; // 0x118(0x04)
	float CachedStrengthEstimation; // 0x11c(0x04)
	struct TMap<struct AActor*, struct FMistMobEnemyEntry> VisibleTargets; // 0x120(0x50)
};

// Class Mist.AiScanPlayersComponent
// Size: 0x170 (Inherited: 0x170)
struct UAiScanPlayersComponent : UAiScanComponent {
};

// Class Mist.MistAmbientSoundComponent
// Size: 0x110 (Inherited: 0xf0)
struct UMistAmbientSoundComponent : UActorComponent {
	struct TArray<struct FMistAmbietSoundSettings> SoundSettings; // 0xf0(0x10)
	struct USoundAttenuation* Attenuation; // 0x100(0x08)
	struct USoundConcurrency* Concurrency; // 0x108(0x08)

	void PlaySoundForBiome(struct USoundBase* Sound, struct FMistSoundInstanceParams& Params); // Function Mist.MistAmbientSoundComponent.PlaySoundForBiome // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x108bde0
	bool CheckBiomes(struct TArray<struct FName>& BiomeNames); // Function Mist.MistAmbientSoundComponent.CheckBiomes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x108ac70
};

// Class Mist.MistContainerComponent
// Size: 0x2e0 (Inherited: 0xf0)
struct UMistContainerComponent : UActorComponent {
	char pad_F0[0x90]; // 0xf0(0x90)
	struct FMulticastInlineDelegate OnContainerSlotUpdated; // 0x180(0x10)
	struct UMistItemCategory* DefaultAllowedItems; // 0x190(0x08)
	struct UTexture2D* CustomSlotBackgroundImage; // 0x198(0x08)
	struct TSet<struct UMistItemTemplate*> AllowedItems; // 0x1a0(0x50)
	struct UMistItemCategoryGroup* AllowedCategoryGroup; // 0x1f0(0x08)
	struct TArray<struct FMistContainerSlotInitialItem> InitialItems; // 0x1f8(0x10)
	int32_t MaxStackSizeOverride; // 0x208(0x04)
	int32_t Priority; // 0x20c(0x04)
	int32_t InitialCapacity; // 0x210(0x04)
	int32_t NumOfProtectedSlots; // 0x214(0x04)
	struct TArray<struct FMistContainerSlot> Slots; // 0x218(0x10)
	struct FText Name; // 0x228(0x18)
	bool bCanTake; // 0x240(0x01)
	bool bCanPut; // 0x241(0x01)
	bool bCheckClanOwnership; // 0x242(0x01)
	bool bIgnoreClanCheckWhenBelowHalfHp; // 0x243(0x01)
	float CustomHpIgnore; // 0x244(0x04)
	struct TSet<struct AMistPlayer*> UserPlayers; // 0x248(0x50)
	bool bUseClaim; // 0x298(0x01)
	bool bAllowLiquidAutoConsumption; // 0x299(0x01)
	bool bPrivate; // 0x29a(0x01)
	bool bAutoSize; // 0x29b(0x01)
	bool bAllowAllItems; // 0x29c(0x01)
	bool bForbidUntargetedTransfer; // 0x29d(0x01)
	bool bPersistSlotCountChanges; // 0x29e(0x01)
	bool bCanBeIgnited; // 0x29f(0x01)
	struct FMistComponentReference DistanceCheckComponentRef; // 0x2a0(0x28)
	float MaxOpenDistance; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	bool bSubjectToExplosions; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	int32_t OverrideMaxSlotsPerRow; // 0x2d4(0x04)
	char pad_2D8[0x8]; // 0x2d8(0x08)

	void MistContainerSlotUpdated__DelegateSignature(int32_t Slot, struct UMistItemTemplate* Template); // DelegateFunction Mist.MistContainerComponent.MistContainerSlotUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	bool IsEmpty(); // Function Mist.MistContainerComponent.IsEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9a70
	bool HasSpaceForItems(struct FMistItem& Item, int32_t Count); // Function Mist.MistContainerComponent.HasSpaceForItems // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9980
	void HandleUserPlayerDestroyed(struct AActor* DestroyedActor); // Function Mist.MistContainerComponent.HandleUserPlayerDestroyed // (Final|Native|Public) // @ game+0x10d9900
	int32_t GetTotalItemCount(); // Function Mist.MistContainerComponent.GetTotalItemCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9150
	int32_t GetNonEmptySlotCount(); // Function Mist.MistContainerComponent.GetNonEmptySlotCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9120
	int32_t GetItemCount(struct UMistItemTemplate* Template); // Function Mist.MistContainerComponent.GetItemCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d9090
	int32_t GetItemCapacity(struct FMistItem& Item); // Function Mist.MistContainerComponent.GetItemCapacity // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8fe0
	int32_t GetItemAvailableSpace(struct FMistItem& Item); // Function Mist.MistContainerComponent.GetItemAvailableSpace // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x10d8f30
};

// Class Mist.MistAmmoContainerComponent
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistAmmoContainerComponent : UMistContainerComponent {
	struct AMistWalker* Walker; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void HandleNetRemoved(); // Function Mist.MistAmmoContainerComponent.HandleNetRemoved // (Final|Native|Private) // @ game+0x108b8a0
	void HandleNetAttached(); // Function Mist.MistAmmoContainerComponent.HandleNetAttached // (Final|Native|Private) // @ game+0x108b880
};

// Class Mist.MistCharacter
// Size: 0x970 (Inherited: 0x660)
struct AMistCharacter : ACharacter {
	char pad_660[0x40]; // 0x660(0x40)
	struct FMulticastInlineDelegate OnControlledObjectChangedBP; // 0x6a0(0x10)
	char pad_6B0[0x60]; // 0x6b0(0x60)
	struct FMulticastInlineDelegate OnDownedTimer; // 0x710(0x10)
	char pad_720[0x28]; // 0x720(0x28)
	enum class EMistCharacterGender Gender; // 0x748(0x01)
	char pad_749[0x7]; // 0x749(0x07)
	struct UMistCollisionGroupComponent* CollisionGroupComponent; // 0x750(0x08)
	struct UMistCharacterHealthComponent* HealthComponent; // 0x758(0x08)
	struct UMistMannedControlComponent* MannedComponent; // 0x760(0x08)
	struct UMistStatusEffectPlayerComponent* StatusEffectComponent; // 0x768(0x08)
	float CorpseLifeSpan; // 0x770(0x04)
	float DownedDuration; // 0x774(0x04)
	float DownedDurationPvp; // 0x778(0x04)
	float DownedHpPercent; // 0x77c(0x04)
	float RevivedHpPercent; // 0x780(0x04)
	float PostReviveInstaKillDuration; // 0x784(0x04)
	struct AMistDropBag* DropBagOverride; // 0x788(0x08)
	float WeightThreshold; // 0x790(0x04)
	char pad_794[0x4]; // 0x794(0x04)
	struct TArray<struct FName> HeadHitBones; // 0x798(0x10)
	struct TArray<struct FName> TorsoHitBones; // 0x7a8(0x10)
	struct TArray<struct FName> LegsHitBones; // 0x7b8(0x10)
	float CollisionEscapeDuration; // 0x7c8(0x04)
	float VelForce; // 0x7cc(0x04)
	enum class EMistCharacterState State; // 0x7d0(0x01)
	char pad_7D1[0x7]; // 0x7d1(0x07)
	struct AActor* TombstoneActorClass; // 0x7d8(0x08)
	float LookAngle; // 0x7e0(0x04)
	struct FVector Acceleration; // 0x7e4(0x0c)
	struct FRotator DesiredRotation; // 0x7f0(0x0c)
	char pad_7FC[0x4]; // 0x7fc(0x04)
	struct AMistCharacter* KnockoutInstigator; // 0x800(0x08)
	struct AMistOasisPlayerState* KnockoutPlayerStateInstigator; // 0x808(0x08)
	float KnockoutTime; // 0x810(0x04)
	float KnockoutDuration; // 0x814(0x04)
	char pad_818[0x4]; // 0x818(0x04)
	bool IsInWater; // 0x81c(0x01)
	bool IsInLava; // 0x81d(0x01)
	char pad_81E[0x2]; // 0x81e(0x02)
	float MinDeltaMove; // 0x820(0x04)
	float NormalizeScale; // 0x824(0x04)
	float MoveSiteAngle; // 0x828(0x04)
	float LastSpeedInWater; // 0x82c(0x04)
	struct FVector RipplePosition; // 0x830(0x0c)
	char pad_83C[0x4]; // 0x83c(0x04)
	struct UMistVirtualCollisionBodiesComponent* VirtualCollisionComponent; // 0x840(0x08)
	struct USphereComponent* CombatCollision; // 0x848(0x08)
	struct UCapsuleComponent* PhysicsImpactTrigger; // 0x850(0x08)
	struct UCapsuleComponent* TriggererCapsuleComponent; // 0x858(0x08)
	char pad_860[0x18]; // 0x860(0x18)
	struct AMistWalker* TriggerFilteredWalker; // 0x878(0x08)
	int32_t ExperienceAwardAmount; // 0x880(0x04)
	int32_t MoneyAwardAmount; // 0x884(0x04)
	float CachedWeight; // 0x888(0x04)
	char pad_88C[0x4]; // 0x88c(0x04)
	struct AMistWalker* MovementBaseWalker; // 0x890(0x08)
	struct UMistFoliageComponent* MovementBaseFoliage; // 0x898(0x08)
	char pad_8A0[0x10]; // 0x8a0(0x10)
	struct FMistCharacterAttachInfo AttachInfo; // 0x8b0(0x28)
	float SprintPreventionEndTime; // 0x8d8(0x04)
	char pad_8DC[0x4]; // 0x8dc(0x04)
	struct AMistWorldDataHolder* CachedWorldDataHolder; // 0x8e0(0x08)
	char pad_8E8[0x78]; // 0x8e8(0x78)
	struct UMistMeleeCombatComponent* CachedCombatComponent; // 0x960(0x08)
	char pad_968[0x8]; // 0x968(0x08)

	void StartOverlappingWater(float WaterZPosition, bool bIsLava); // Function Mist.MistCharacter.StartOverlappingWater // (Final|Native|Public|BlueprintCallable) // @ game+0x10b21c0
	bool SpendMoney(int32_t Amount); // Function Mist.MistCharacter.SpendMoney // (Native|Public|BlueprintCallable) // @ game+0x10b2120
	void SetCharacterSpeedInWater(float Speed); // Function Mist.MistCharacter.SetCharacterSpeedInWater // (Final|Native|Public|BlueprintCallable) // @ game+0x10b20a0
	void ServerRequestAnimationEvent(struct FMistAnimEventRequest Event); // Function Mist.MistCharacter.ServerRequestAnimationEvent // (Net|Native|Event|Public|NetServer) // @ game+0x10b1f90
	void RippleDuringStep(struct FVector Position, struct UParticleSystem* WaterSplash, struct AActor* ThisActor, float SpeedScale, float VelocityMultiply); // Function Mist.MistCharacter.RippleDuringStep // (Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10b1d40
	void RemoveItemOfClass(struct UMistItemTemplate* ItemClass, int32_t Quantity, struct UMistContainerComponent* Container); // Function Mist.MistCharacter.RemoveItemOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x10b1c40
	void ReceiveStateChanged(enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistCharacter.ReceiveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveDownedTimer(float TimeLeft); // Function Mist.MistCharacter.ReceiveDownedTimer // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_WeightThreshold(); // Function Mist.MistCharacter.OnRep_WeightThreshold // (Final|Native|Protected) // @ game+0x10b1b80
	void OnRep_State(enum class EMistCharacterState PrevState); // Function Mist.MistCharacter.OnRep_State // (Final|Native|Private) // @ game+0x10b1bc0
	void OnRep_SprintPreventionEndTime(); // Function Mist.MistCharacter.OnRep_SprintPreventionEndTime // (Final|Native|Private) // @ game+0x10b1ba0
	void OnRep_CachedWeight(); // Function Mist.MistCharacter.OnRep_CachedWeight // (Final|Native|Protected) // @ game+0x10b1b80
	void MulticastRequestAnimationEvent(struct FMistAnimEventRequest Event); // Function Mist.MistCharacter.MulticastRequestAnimationEvent // (Net|Native|Event|NetMulticast|Public) // @ game+0x10b1a70
	void KillTarget__DelegateSignature(struct APawn* Target); // DelegateFunction Mist.MistCharacter.KillTarget__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void InternalUpdateAttachment(); // Function Mist.MistCharacter.InternalUpdateAttachment // (Final|Native|Private) // @ game+0x10b19c0
	bool HasItemOfClass(struct UMistItemTemplate* ItemClass, int32_t Quantity, struct UMistContainerComponent* Container); // Function Mist.MistCharacter.HasItemOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x10b18c0
	void HandlePhysicsImpactTriggerEnd(struct UPrimitiveComponent* TriggerComponent, struct UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex); // Function Mist.MistCharacter.HandlePhysicsImpactTriggerEnd // (Final|Native|Public) // @ game+0x10b16c0
	void HandlePhysicsImpactTriggerBegin(struct UPrimitiveComponent* TriggerComponent, struct UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex); // Function Mist.MistCharacter.HandlePhysicsImpactTriggerBegin // (Final|Native|Public) // @ game+0x10b15c0
	bool HandleHitByNet(struct AMistNetProjectile* Net); // Function Mist.MistCharacter.HandleHitByNet // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleBaseFoliageInstanceRemoved(struct UMistFoliageComponent* Component, int32_t InstanceIndex); // Function Mist.MistCharacter.HandleBaseFoliageInstanceRemoved // (Final|Native|Private) // @ game+0x10b1380
	float GetWaterOverlapDepth(); // Function Mist.MistCharacter.GetWaterOverlapDepth // (Final|Native|Public|BlueprintCallable) // @ game+0x10b1350
	int32_t GetItemCountOfClass(struct UMistItemTemplate* ItemClass, struct UMistContainerComponent* Container); // Function Mist.MistCharacter.GetItemCountOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x10b1290
	float GetEncumbrance(); // Function Mist.MistCharacter.GetEncumbrance // (Final|Native|Public|BlueprintCallable) // @ game+0x10b1260
	int64_t GetClanId(); // Function Mist.MistCharacter.GetClanId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b1230
	struct FVector GetCharacterSpeedInWater(); // Function Mist.MistCharacter.GetCharacterSpeedInWater // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10b11f0
	enum class EEquipmentSlot EquipItemOfClass(struct UMistEquipmentItemTemplate* ItemClass, bool bWield); // Function Mist.MistCharacter.EquipItemOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x10b1130
	void EndOverlappingWater(bool bIsLava); // Function Mist.MistCharacter.EndOverlappingWater // (Final|Native|Public|BlueprintCallable) // @ game+0x10b10a0
	void DownedTimerCallback(); // Function Mist.MistCharacter.DownedTimerCallback // (Native|Protected) // @ game+0x10b1080
	void DownedTimer__DelegateSignature(struct AMistCharacter* Character, float TimeLeft); // DelegateFunction Mist.MistCharacter.DownedTimer__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ControlledObjectChangedBPEvent__DelegateSignature(struct AMistCharacter* InCharacter, struct UMistMannedControlComponent* InControllComponent); // DelegateFunction Mist.MistCharacter.ControlledObjectChangedBPEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ContinuosRipple(struct FVector Position, struct UParticleSystem* WaterSplash, struct AActor* ThisActor, float VelocityScale, float VelocityMultiply); // Function Mist.MistCharacter.ContinuosRipple // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10b0ea0
	void AwardMoney(int32_t Amount); // Function Mist.MistCharacter.AwardMoney // (Native|Public|BlueprintCallable) // @ game+0x10b0e10
	void AwardExperience(int32_t Amount, bool bIsShared); // Function Mist.MistCharacter.AwardExperience // (Native|Public|BlueprintCallable) // @ game+0x10b0d40
	bool AddItemOfClass(struct UMistItemTemplate* ItemClass, int32_t Quantity, struct UMistContainerComponent* Container); // Function Mist.MistCharacter.AddItemOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0b40
	bool AddItem(struct FMistItem ItemClass, int32_t Quantity, struct UMistContainerComponent* Container); // Function Mist.MistCharacter.AddItem // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0a00
	struct UMistContainerComponent* AddContainer(struct UMistContainerComponent* ContainerClass); // Function Mist.MistCharacter.AddContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x10b0970
};

// Class Mist.MistAnimal
// Size: 0x980 (Inherited: 0x970)
struct AMistAnimal : AMistCharacter {
	char pad_970[0x10]; // 0x970(0x10)
};

// Class Mist.MistAnimalBehavior
// Size: 0x30 (Inherited: 0x30)
struct UMistAnimalBehavior : UMistAiBehaviorHandler {
};

// Class Mist.MistMobController
// Size: 0x5f8 (Inherited: 0x4c0)
struct AMistMobController : AAIController {
	char pad_4C0[0x10]; // 0x4c0(0x10)
	struct AActor* CurrentTarget; // 0x4d0(0x08)
	struct TMap<struct FName, struct FMistAiBehavior> Behaviors; // 0x4d8(0x50)
	struct FName CurrentBehavior; // 0x528(0x08)
	float VisionRange; // 0x530(0x04)
	char pad_534[0x1]; // 0x534(0x01)
	bool bCanCallHelp; // 0x535(0x01)
	bool bCanBeCalled; // 0x536(0x01)
	char pad_537[0x1]; // 0x537(0x01)
	struct FName DefaultBehavior; // 0x538(0x08)
	struct TMap<struct AActor*, struct FMistMobEnemyEntry> VisibleTargets; // 0x540(0x50)
	struct TMap<struct AActor*, float> IgnoredTargets; // 0x590(0x50)
	char pad_5E0[0x8]; // 0x5e0(0x08)
	struct AActor* ControlledBy; // 0x5e8(0x08)
	char pad_5F0[0x8]; // 0x5f0(0x08)

	void StartBehavior(struct FName& Behavior, bool AcceptDefaultBT); // Function Mist.MistMobController.StartBehavior // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x11427c0
	void SetCurrentTarget(struct AActor* NewTarget); // Function Mist.MistMobController.SetCurrentTarget // (Native|Public|BlueprintCallable) // @ game+0x11425c0
	void SetControlledBy(struct AActor* NewControlledBy); // Function Mist.MistMobController.SetControlledBy // (Final|Native|Public|BlueprintCallable) // @ game+0x1142540
	void ReceiveReceivedMeleeHitFromActor(struct AActor* Source, float Damage); // Function Mist.MistMobController.ReceiveReceivedMeleeHitFromActor // (Final|Native|Protected) // @ game+0x11423b0
	void ReceiveDealtDamageToActor(struct AActor* Actor, float Damage); // Function Mist.MistMobController.ReceiveDealtDamageToActor // (Final|Native|Protected) // @ game+0x11422e0
	void ReceiveControlledByChanged(); // Function Mist.MistMobController.ReceiveControlledByChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void LaunchAttackAlone(struct AActor* Target); // Function Mist.MistMobController.LaunchAttackAlone // (Native|Public|BlueprintCallable) // @ game+0x11421a0
	void HandleTakeAnyDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistMobController.HandleTakeAnyDamage // (Final|Native|Private|HasOutParms) // @ game+0x1142020
	void HandleStateChanged(struct APawn* InMob, enum class EMistCharacterState OldState, enum class EMistCharacterState NewState); // Function Mist.MistMobController.HandleStateChanged // (Native|Protected) // @ game+0x1141f20
	struct AActor* GetCurrentTarget(); // Function Mist.MistMobController.GetCurrentTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11418a0
	struct UMistAiBehaviorHandler* GetCurrentBehaviorHandler(); // Function Mist.MistMobController.GetCurrentBehaviorHandler // (Final|Native|Public|BlueprintCallable) // @ game+0x1141870
	struct AActor* GetControlledBy(); // Function Mist.MistMobController.GetControlledBy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1141840
};

// Class Mist.MistAnimalMobController
// Size: 0x688 (Inherited: 0x5f8)
struct AMistAnimalMobController : AMistMobController {
	bool bIsEngagedInBehavior; // 0x5f8(0x01)
	char pad_5F9[0x3]; // 0x5f9(0x03)
	struct FVector InitialLocation; // 0x5fc(0x0c)
	struct UAiScanPlayersComponent* PlayerScan; // 0x608(0x08)
	struct FAiScanTarget CurrentTargetInfo; // 0x610(0x20)
	float PrecisionAgentRadiusMultiplier; // 0x630(0x04)
	float PrecisionAgentHalfHeightMultiplier; // 0x634(0x04)
	struct TMap<struct UMistPhysicalMobAttackArea*, bool> ActiveAttackAreas; // 0x638(0x50)

	void HandleAttackAreaContact(struct UMistPhysicalMobAttackArea* Sender, struct AActor* Target, bool bEntered); // Function Mist.MistAnimalMobController.HandleAttackAreaContact // (Native|Protected) // @ game+0x1092b30
};

// Class Mist.MistAnimationUtils
// Size: 0x28 (Inherited: 0x28)
struct UMistAnimationUtils : UBlueprintFunctionLibrary {

	void BreakMistAnimPosition(struct FMistAnimPosition& AnimPosition, float& Position, bool& Loop, bool& bBreakOut); // Function Mist.MistAnimationUtils.BreakMistAnimPosition // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x1092910
};

// Class Mist.MistAnimNotifiable
// Size: 0x28 (Inherited: 0x28)
struct UMistAnimNotifiable : UInterface {
};

// Class Mist.MistAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistAnimNotify : UAnimNotify {
};

// Class Mist.MistInteractionEndedAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistInteractionEndedAnimNotify : UAnimNotify {
};

// Class Mist.MistMeditationEndedAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistMeditationEndedAnimNotify : UAnimNotify {
};

// Class Mist.MistTurnEndedAnimNotifyState
// Size: 0x30 (Inherited: 0x30)
struct UMistTurnEndedAnimNotifyState : UAnimNotifyState {
};

// Class Mist.MistSlidingEndedAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistSlidingEndedAnimNotify : UAnimNotify {
};

// Class Mist.MistStandUpStartedAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistStandUpStartedAnimNotify : UAnimNotify {
};

// Class Mist.MistStandUpFinishedAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistStandUpFinishedAnimNotify : UAnimNotify {
};

// Class Mist.MistGrapplingHookShotFinished
// Size: 0x38 (Inherited: 0x38)
struct UMistGrapplingHookShotFinished : UAnimNotify {
};

// Class Mist.MistGrapplingHookReloadFinished
// Size: 0x38 (Inherited: 0x38)
struct UMistGrapplingHookReloadFinished : UAnimNotify {
};

// Class Mist.MistRootMotionCorrectionMarker
// Size: 0x40 (Inherited: 0x38)
struct UMistRootMotionCorrectionMarker : UAnimNotify {
	enum class ERootMotionCorrectionMarker MarkerType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Mist.MistItemUsageApplyEffects
// Size: 0x38 (Inherited: 0x38)
struct UMistItemUsageApplyEffects : UAnimNotify {
};

// Class Mist.MistFlareNotify
// Size: 0x40 (Inherited: 0x38)
struct UMistFlareNotify : UAnimNotify {
	enum class EItemUsageEvent ItemUsageEvent; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Mist.MistAnimMetaData
// Size: 0x28 (Inherited: 0x28)
struct UMistAnimMetaData : UAnimMetaData {

	struct TArray<struct FVector> GetVectorParamsInternal(); // Function Mist.MistAnimMetaData.GetVectorParamsInternal // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x1092ab0
};

// Class Mist.MistLocomotionTypeBase
// Size: 0x190 (Inherited: 0x30)
struct UMistLocomotionTypeBase : UDataAsset {
	float SimilarityImportanceFactor; // 0x30(0x04)
	float DistanceImportanceFactor; // 0x34(0x04)
	float StanceSwitchDelay; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TMap<int32_t, struct FMotionMatchingMetaData> SimilarityMap; // 0x40(0x50)
	struct TMap<struct UAnimSequence*, int32_t> AnimSequenceIndexMap; // 0x90(0x50)
	char pad_E0[0xb0]; // 0xe0(0xb0)
};

// Class Mist.MistLocomotionType
// Size: 0x7a0 (Inherited: 0x190)
struct UMistLocomotionType : UMistLocomotionTypeBase {
	char pad_190[0x118]; // 0x190(0x118)
	struct FMistStanceDirectionMap StanceDirectionMap; // 0x2a8(0x50)
	struct TMap<enum class ECombatStance, enum class ECombatDirection> AttackStanceDirectionMap; // 0x2f8(0x50)
	struct FMistStanceDirectionMap AttackDirectionStanceMap; // 0x348(0x50)
	struct FMistStanceDirectionMap AttackReadyStanceDirectionMap; // 0x398(0x50)
	struct FMistStanceDirectionMap BlockDirectionStanceMap; // 0x3e8(0x50)
	struct TMap<enum class ECombatStance, enum class ECombatDirection> BlockStanceDirectionMap; // 0x438(0x50)
	struct FLocomotionAnimContainer NeutralIdleAnims; // 0x488(0x18)
	struct FLocomotionAnimContainer CombatIdleAnims; // 0x4a0(0x18)
	struct FLocomotionAnimContainer NeutralStartAnimMap; // 0x4b8(0x18)
	struct FLocomotionAnimContainer NeutralStopAnimMap; // 0x4d0(0x18)
	struct FLocomotionAnimContainer NeutralPivotAnimMap; // 0x4e8(0x18)
	struct FLocomotionAnimContainer CombatIdlePivotAnimMap; // 0x500(0x18)
	struct FLocomotionAnimContainer RightHoldPivotAnimMap; // 0x518(0x18)
	struct FLocomotionAnimContainer LeftHoldPivotAnimMap; // 0x530(0x18)
	struct FLocomotionAnimContainer OverheadHoldPivotAnimMap; // 0x548(0x18)
	struct FLocomotionAnimContainer CombatIdleStartAnimMap; // 0x560(0x18)
	struct FLocomotionAnimContainer RightHoldStartAnimMap; // 0x578(0x18)
	struct FLocomotionAnimContainer LeftHoldStartAnimMap; // 0x590(0x18)
	struct FLocomotionAnimContainer OverheadHoldStartAnimMap; // 0x5a8(0x18)
	struct FLocomotionAnimContainer CombatIdleStopAnimMap; // 0x5c0(0x18)
	struct FLocomotionAnimContainer RightHoldStopAnimMap; // 0x5d8(0x18)
	struct FLocomotionAnimContainer LeftHoldStopAnimMap; // 0x5f0(0x18)
	struct FLocomotionAnimContainer OverheadHoldStopAnimMap; // 0x608(0x18)
	struct FLocomotionAnimContainer OverheadAttackStepAnimMap; // 0x620(0x18)
	struct FLocomotionAnimContainer RightAttackStepAnimMap; // 0x638(0x18)
	struct FLocomotionAnimContainer LeftAttackStepAnimMap; // 0x650(0x18)
	struct FLocomotionAnimContainer StanceTransitionsRtL; // 0x668(0x18)
	struct FLocomotionAnimContainer StanceTransitionsLtR; // 0x680(0x18)
	struct FLocomotionAnimContainer NeutralMoveCycles; // 0x698(0x18)
	struct FLocomotionAnimContainer CombatIdleMoveCycles; // 0x6b0(0x18)
	struct FLocomotionAnimContainer RightHoldMoveCycles; // 0x6c8(0x18)
	struct FLocomotionAnimContainer LeftHoldMoveCycles; // 0x6e0(0x18)
	struct FLocomotionAnimContainer OverheadHoldMoveCycles; // 0x6f8(0x18)
	struct FLocomotionAnimContainer HurtDisplacementAnims; // 0x710(0x18)
	struct FLocomotionAnimContainer HeavyBlockImpactDisplacementAnims; // 0x728(0x18)
	struct FLocomotionAnimContainer DodgeAnims; // 0x740(0x18)
	struct FLocomotionAnimContainer JumpStartAnims; // 0x758(0x18)
	struct FLocomotionAnimContainer JumpLoopAnims; // 0x770(0x18)
	struct FLocomotionAnimContainer LandingAnims; // 0x788(0x18)
};

// Class Mist.GrapplingHookLocomotionType
// Size: 0x238 (Inherited: 0x190)
struct UGrapplingHookLocomotionType : UMistLocomotionTypeBase {
	struct FLocomotionAnimContainer Animations; // 0x190(0x18)
	struct FLocomotionAnimContainer SurfaceInteractionAnimations; // 0x1a8(0x18)
	char pad_1C0[0x78]; // 0x1c0(0x78)
};

// Class Mist.MistClimbingLocomotionType
// Size: 0x1c0 (Inherited: 0x190)
struct UMistClimbingLocomotionType : UMistLocomotionTypeBase {
	struct FLocomotionAnimContainer Animations; // 0x190(0x18)
	struct UAnimationAsset* PulleyClimbAnim; // 0x1a8(0x08)
	struct FVector PulleyClimbAnimOffset; // 0x1b0(0x0c)
	char pad_1BC[0x4]; // 0x1bc(0x04)
};

// Class Mist.MistWeaponSheathingAnimData
// Size: 0x50 (Inherited: 0x30)
struct UMistWeaponSheathingAnimData : UDataAsset {
	struct TArray<struct UAnimSequence*> SheathAnims; // 0x30(0x10)
	struct TArray<struct UAnimSequence*> UnsheathAnims; // 0x40(0x10)
};

// Class Mist.MistMessageLogContentWidget
// Size: 0x2c0 (Inherited: 0x2c0)
struct UMistMessageLogContentWidget : UMistUIWidget {
};

// Class Mist.MistAnnouncementMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistAnnouncementMessageLogContentWidget : UMistMessageLogContentWidget {
	struct UTextBlock* MessageTextWidget; // 0x2c0(0x08)
	struct UMistTextMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistAreaEffect
// Size: 0x4c0 (Inherited: 0x3c0)
struct AMistAreaEffect : AActor {
	bool bHasInfiniteLifeTime; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	float MinInitialLifeTime; // 0x3c4(0x04)
	float MaxInitialLifeTime; // 0x3c8(0x04)
	float SpawnRadius; // 0x3cc(0x04)
	float SpawnHeight; // 0x3d0(0x04)
	int32_t MinCount; // 0x3d4(0x04)
	int32_t MaxCount; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct UParticleSystem* ImpactEffect; // 0x3e0(0x08)
	struct UNiagaraSystem* NiagaraImpactEffect; // 0x3e8(0x08)
	bool bGenerateAffectedActorsEventsOnClient; // 0x3f0(0x01)
	char pad_3F1[0x3]; // 0x3f1(0x03)
	float FadingTime; // 0x3f4(0x04)
	float EffectMinWidth; // 0x3f8(0x04)
	float EffectMaxWidth; // 0x3fc(0x04)
	float EffectMinHeight; // 0x400(0x04)
	float EffectMaxHeight; // 0x404(0x04)
	struct UParticleSystem* Effect; // 0x408(0x08)
	struct UNiagaraSystem* NiagaraEffect; // 0x410(0x08)
	struct TArray<struct UMistStatusEffect*> StatusEffects; // 0x418(0x10)
	float DamageInterval; // 0x428(0x04)
	float DamageTime; // 0x42c(0x04)
	float Damage; // 0x430(0x04)
	char pad_434[0x4]; // 0x434(0x04)
	struct UDamageType* DamageType; // 0x438(0x08)
	bool bShowDebugInformation; // 0x440(0x01)
	char pad_441[0x7]; // 0x441(0x07)
	struct UTexture2D* EffectIcon; // 0x448(0x08)
	bool bSmoothMovementOnClient; // 0x450(0x01)
	char pad_451[0x7]; // 0x451(0x07)
	struct TArray<struct FMistAreaEffectItem> EffectItems; // 0x458(0x10)
	struct TSet<struct FMistAreaEffectAffectedActor> PreviouslyAffectedActors; // 0x468(0x50)
	char pad_4B8[0x8]; // 0x4b8(0x08)

	void ReduceLifeTimes(float DeltaTime); // Function Mist.MistAreaEffect.ReduceLifeTimes // (Native|Protected) // @ game+0x1096ed0
	void OnRep_EffectItems(); // Function Mist.MistAreaEffect.OnRep_EffectItems // (Final|Native|Private) // @ game+0x1096df0
	void OnEndEffect(struct FMistAreaEffectItem& InEffect); // Function Mist.MistAreaEffect.OnEndEffect // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void OnEndAffectActor(struct AActor* InAffectedActor); // Function Mist.MistAreaEffect.OnEndAffectActor // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnBeginEffect(struct FMistAreaEffectItem& InEffect); // Function Mist.MistAreaEffect.OnBeginEffect // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void OnBeginAffectActor(struct AActor* InAffectedActor); // Function Mist.MistAreaEffect.OnBeginAffectActor // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void EndEffects(); // Function Mist.MistAreaEffect.EndEffects // (Native|Protected) // @ game+0x1096770
	void ApplyEffects(); // Function Mist.MistAreaEffect.ApplyEffects // (Native|Protected) // @ game+0x10966d0
};

// Class Mist.MistAreaEffectComponent
// Size: 0x800 (Inherited: 0x7e0)
struct UMistAreaEffectComponent : UCapsuleComponent {
	struct FVector TargetLocation; // 0x7d8(0x0c)
	struct FRotator TargetRotation; // 0x7e4(0x0c)
	char pad_7F8[0x8]; // 0x7f8(0x08)

	void OnRep_TargetRotation(); // Function Mist.MistAreaEffectComponent.OnRep_TargetRotation // (Final|Native|Private) // @ game+0x1096e50
	void OnRep_TargetLocation(); // Function Mist.MistAreaEffectComponent.OnRep_TargetLocation // (Final|Native|Private) // @ game+0x1096e30
};

// Class Mist.MistFlotillaQuest
// Size: 0x48 (Inherited: 0x38)
struct UMistFlotillaQuest : UMistQuest {
	int32_t FlotsReward; // 0x38(0x04)
	int32_t ExpReward; // 0x3c(0x04)
	enum class EFlotillaQuestDifficulty Difficulty; // 0x40(0x01)
	bool HasFailed; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
};

// Class Mist.MistArenaDuelQuest
// Size: 0x60 (Inherited: 0x48)
struct UMistArenaDuelQuest : UMistFlotillaQuest {
	enum class ECompletionTypes DuelQuestType; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t FlotsPerDuel; // 0x4c(0x04)
	int32_t MinAmount; // 0x50(0x04)
	int32_t MaxAmount; // 0x54(0x04)
	char pad_58[0x8]; // 0x58(0x08)

	void HandleDuelComplete(bool DuelOutcome); // Function Mist.MistArenaDuelQuest.HandleDuelComplete // (Final|Native|Private) // @ game+0x10967e0
};

// Class Mist.MistItemDetailsWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistItemDetailsWidget : UMistUIWidget {
	struct FMistItem Item; // 0x2c0(0x18)
	int32_t Count; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
};

// Class Mist.MistArmorItemDetailsWidget
// Size: 0x320 (Inherited: 0x2e0)
struct UMistArmorItemDetailsWidget : UMistItemDetailsWidget {
	struct UWidget* DamageInfoBoxWidget; // 0x2e0(0x08)
	struct UWidget* SoakBoxWidget; // 0x2e8(0x08)
	struct UTextBlock* SoakWidget; // 0x2f0(0x08)
	struct UWidget* ReduceBoxWidget; // 0x2f8(0x08)
	struct UTextBlock* ReduceWidget; // 0x300(0x08)
	struct UWidget* SpeedReductionBoxWidget; // 0x308(0x08)
	struct UTextBlock* SpeedReductionWidget; // 0x310(0x08)
	struct UTextBlock* SlotWidget; // 0x318(0x08)
};

// Class Mist.MistAsteroidActor
// Size: 0x4d0 (Inherited: 0x3c0)
struct AMistAsteroidActor : AActor {
	float MinSpeed; // 0x3c0(0x04)
	float MaxSpeed; // 0x3c4(0x04)
	float MinScale; // 0x3c8(0x04)
	float MaxScale; // 0x3cc(0x04)
	float ExplosionAltitude; // 0x3d0(0x04)
	float DestructionAltitude; // 0x3d4(0x04)
	struct FVector ImpactPoint; // 0x3d8(0x0c)
	float BufferDestructionAltitude; // 0x3e4(0x04)
	float BufferExplosionAltitude; // 0x3e8(0x04)
	float DestructionDelay; // 0x3ec(0x04)
	float AtmosphereFlightTime; // 0x3f0(0x04)
	float PreAtmosphereFlightSpeed; // 0x3f4(0x04)
	int32_t PreAtmosphereParticleTime; // 0x3f8(0x04)
	int32_t PreAtmosphereParticleScale; // 0x3fc(0x04)
	struct UParticleSystem* InitialAsteroidParticleSystem; // 0x400(0x08)
	struct UParticleSystemComponent* PreAtmosphereParticles; // 0x408(0x08)
	struct FInt32Interval HarvestableDebrisAmount; // 0x410(0x08)
	struct AActor* HarvestableActorClass; // 0x418(0x08)
	struct AMistBoulderProjectile* HarvestableDebrisProjectileClass; // 0x420(0x08)
	struct UDamageType* ShockwaveDamageTypeClass; // 0x428(0x08)
	float ShockwaveRadius; // 0x430(0x04)
	float ShockwaveSpeed; // 0x434(0x04)
	float ShockwaveDuration; // 0x438(0x04)
	float ShockwaveBaseDamage; // 0x43c(0x04)
	float ShockwaveMinimumDamage; // 0x440(0x04)
	float ShockwaveWalkerImpulse; // 0x444(0x04)
	float ShockwaveCharacterImpulse; // 0x448(0x04)
	char pad_44C[0x34]; // 0x44c(0x34)
	float AsteroidDistanceReplicated; // 0x480(0x04)
	char pad_484[0x34]; // 0x484(0x34)
	float InitialParticleSystemWarmupTime; // 0x4b8(0x04)
	char pad_4BC[0x14]; // 0x4bc(0x14)

	void PostDebrisInit(); // Function Mist.MistAsteroidActor.PostDebrisInit // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_ParticleWarmupTime(); // Function Mist.MistAsteroidActor.OnRep_ParticleWarmupTime // (Final|Native|Private) // @ game+0x1096e10
	void OnHitGround(); // Function Mist.MistAsteroidActor.OnHitGround // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnHitAtmosphere(); // Function Mist.MistAsteroidActor.OnHitAtmosphere // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastHitGround(); // Function Mist.MistAsteroidActor.MulticastHitGround // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1096cb0
	void MulticastHitAtmosphere(); // Function Mist.MistAsteroidActor.MulticastHitAtmosphere // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1096c90
	void HitGround(); // Function Mist.MistAsteroidActor.HitGround // (Final|Native|Public|BlueprintCallable) // @ game+0x10969f0
	void HandleSpawnHarvestableActor(struct AMistProjectile* Projectile, struct FHitResult& Hit); // Function Mist.MistAsteroidActor.HandleSpawnHarvestableActor // (Final|Native|Private|HasOutParms) // @ game+0x10968d0
	void HandleSpawnDebris(); // Function Mist.MistAsteroidActor.HandleSpawnDebris // (Final|Native|Private) // @ game+0x10968b0
};

// Class Mist.MistFireAreaEffect
// Size: 0x4c8 (Inherited: 0x4c0)
struct AMistFireAreaEffect : AMistAreaEffect {
	float DamageToNonCharacters; // 0x4c0(0x04)
	char pad_4C4[0x4]; // 0x4c4(0x04)
};

// Class Mist.MistAsteroidFireAreaEffect
// Size: 0x4d8 (Inherited: 0x4c8)
struct AMistAsteroidFireAreaEffect : AMistFireAreaEffect {
	float AsteroidTraceDistance; // 0x4c8(0x04)
	char pad_4CC[0x4]; // 0x4cc(0x04)
	struct AActor* AsteroidShardOwner; // 0x4d0(0x08)
};

// Class Mist.MistAsteroidShardActor
// Size: 0x400 (Inherited: 0x3d0)
struct AMistAsteroidShardActor : AStaticMeshActor {
	struct AMistFireAreaEffect* FireAreaEffectClass; // 0x3d0(0x08)
	struct FInt32Interval HarvestableSplintersAmount; // 0x3d8(0x08)
	struct AActor* HarvestableSplinterClass; // 0x3e0(0x08)
	struct AMistBoulderProjectile* HarvestableSplinterProjectileClass; // 0x3e8(0x08)
	char pad_3F0[0x8]; // 0x3f0(0x08)
	struct AMistAsteroidFireAreaEffect* FireAreaEffect; // 0x3f8(0x08)

	float GetCoolingProgress(); // Function Mist.MistAsteroidShardActor.GetCoolingProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x1096790
};

// Class Mist.MistLootableMeshComponent
// Size: 0x9a0 (Inherited: 0x850)
struct UMistLootableMeshComponent : UStaticMeshComponent {
	char pad_850[0x18]; // 0x850(0x18)
	struct FMulticastInlineDelegate OnLooted; // 0x868(0x10)
	struct FMulticastInlineDelegate OnBroken; // 0x878(0x10)
	struct FText UseText; // 0x888(0x18)
	struct FText BrokenUseText; // 0x8a0(0x18)
	struct FName UseTag; // 0x8b8(0x08)
	struct FName BrokenUseTag; // 0x8c0(0x08)
	struct FMistInteractableProperties InteractableProperties; // 0x8c8(0x14)
	float RespawnTime; // 0x8dc(0x04)
	struct FMistLootDesc Loot; // 0x8e0(0x30)
	int32_t Experience; // 0x910(0x04)
	bool bHideOnLooting; // 0x914(0x01)
	bool bRemoveActorOnLooting; // 0x915(0x01)
	char pad_916[0x2]; // 0x916(0x02)
	float TimeBeforeRemoving; // 0x918(0x04)
	float MinDistanceToActivePlayerToRemove; // 0x91c(0x04)
	float MaxHealth; // 0x920(0x04)
	char pad_924[0x4]; // 0x924(0x04)
	struct FText Name; // 0x928(0x18)
	struct UStaticMesh* DestroyedMesh; // 0x940(0x08)
	struct AActor* ReplacementActorOnDestruction; // 0x948(0x08)
	struct UMistDamageOverrideTable* DamageOverride; // 0x950(0x08)
	char pad_958[0x8]; // 0x958(0x08)
	struct UStaticMesh* InitialMesh; // 0x960(0x08)
	struct FMistComponentReference LootableCoreRef; // 0x968(0x28)
	float Health; // 0x990(0x04)
	bool bCanBeLooted; // 0x994(0x01)
	char pad_995[0x3]; // 0x995(0x03)
	struct UStaticMeshComponent* DestroyedMeshComponent; // 0x998(0x08)

	void TryRemoveOwner(); // Function Mist.MistLootableMeshComponent.TryRemoveOwner // (Final|Native|Protected) // @ game+0x112ef40
	void Respawn(); // Function Mist.MistLootableMeshComponent.Respawn // (Final|Native|Protected) // @ game+0x112ee80
	void OnRep_Health(); // Function Mist.MistLootableMeshComponent.OnRep_Health // (Final|Native|Protected) // @ game+0x10968b0
	void OnRep_bCanBeLooted(); // Function Mist.MistLootableMeshComponent.OnRep_bCanBeLooted // (Final|Native|Protected) // @ game+0x112edc0
	void MulticastSetCanBeLooted(bool bValue); // Function Mist.MistLootableMeshComponent.MulticastSetCanBeLooted // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x112ed30
	void MistLootedEvent__DelegateSignature(struct UMistLootableMeshComponent* Sender, struct AMistPlayer* Looter); // DelegateFunction Mist.MistLootableMeshComponent.MistLootedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MistBrokenEvent__DelegateSignature(struct UMistLootableMeshComponent* Sender); // DelegateFunction Mist.MistLootableMeshComponent.MistBrokenEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void BroadcastSetHealth(float Value); // Function Mist.MistLootableMeshComponent.BroadcastSetHealth // (Net|NetReliableNative|Event|Protected) // @ game+0x112e4e0
};

// Class Mist.MistAsteroidShardComponent
// Size: 0x9f0 (Inherited: 0x9a0)
struct UMistAsteroidShardComponent : UMistLootableMeshComponent {
	char pad_9A0[0x8]; // 0x9a0(0x08)
	struct FFloatInterval HarvestCooldownDurationInterval; // 0x9a8(0x08)
	float AttachedProjectileDamagePerSecond; // 0x9b0(0x04)
	float CooldownReductionPerWater; // 0x9b4(0x04)
	float CooldownReductionBattleFanMovePerSecond; // 0x9b8(0x04)
	float BattleFanMoveVelocityFactor; // 0x9bc(0x04)
	float CooldownReductionBattleFanSuperBlow; // 0x9c0(0x04)
	float BattleFanSuperBlowVelocityFactor; // 0x9c4(0x04)
	bool bIsCoolingDown; // 0x9c8(0x01)
	char pad_9C9[0x3]; // 0x9c9(0x03)
	float SpawnTime; // 0x9cc(0x04)
	float HarvestCooldownDuration; // 0x9d0(0x04)
	float CooldownReduction; // 0x9d4(0x04)
	char pad_9D8[0x18]; // 0x9d8(0x18)

	float ReceiveCooldownFinished(); // Function Mist.MistAsteroidShardComponent.ReceiveCooldownFinished // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastSetCooldownReduction(float InCooldownReduction); // Function Mist.MistAsteroidShardComponent.MulticastSetCooldownReduction // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1096d50
	void MulticastCooldownFinished(); // Function Mist.MistAsteroidShardComponent.MulticastCooldownFinished // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1096a10
};

// Class Mist.MistInteractableComponent
// Size: 0x1f0 (Inherited: 0xf0)
struct UMistInteractableComponent : UActorComponent {
	char pad_F0[0x8]; // 0xf0(0x08)
	struct FMulticastInlineDelegate OnBeginHighlight; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnEndHighlight; // 0x108(0x10)
	struct FMulticastInlineDelegate OnBeginInteract; // 0x118(0x10)
	struct FMulticastInlineDelegate OnEndInteract; // 0x128(0x10)
	struct FMulticastInlineDelegate OnInteract; // 0x138(0x10)
	char pad_148[0x10]; // 0x148(0x10)
	struct FMistComponentReference HighlightMesh; // 0x158(0x28)
	struct FText Text; // 0x180(0x18)
	struct FName Tag; // 0x198(0x08)
	bool bRequireOwner; // 0x1a0(0x01)
	bool bCheckClanOwnership; // 0x1a1(0x01)
	bool bCheckClanRank; // 0x1a2(0x01)
	bool bHiddenOnFailedClanOwnershipCheck; // 0x1a3(0x01)
	bool bIgnoreClanCheckWhenBelowHalfHp; // 0x1a4(0x01)
	char pad_1A5[0x3]; // 0x1a5(0x03)
	float CustomHpIgnore; // 0x1a8(0x04)
	bool bAllowWhenNetted; // 0x1ac(0x01)
	bool bForbidClientInteraction; // 0x1ad(0x01)
	bool bHideWhenOtherInteractionsAvailable; // 0x1ae(0x01)
	enum class EMistClanPermission ClanPermission; // 0x1af(0x01)
	struct FMistInteractableProperties InteractableProperties; // 0x1b0(0x14)
	char pad_1C4[0x4]; // 0x1c4(0x04)
	struct FMistComponentReference CollisionComponent; // 0x1c8(0x28)

	void ReceiveInteract(struct FMistInteraction& Interaction); // Function Mist.MistInteractableComponent.ReceiveInteract // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveEndInteract(struct FMistInteraction& Interaction, bool bCanceled); // Function Mist.MistInteractableComponent.ReceiveEndInteract // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBeginInteract(struct FMistInteraction& Interaction); // Function Mist.MistInteractableComponent.ReceiveBeginInteract // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void MulticastSetActive(bool bActive); // Function Mist.MistInteractableComponent.MulticastSetActive // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d1870
	void MistInteractableQueryEvent__DelegateSignature(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // DelegateFunction Mist.MistInteractableComponent.MistInteractableQueryEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
	void MistInteractableEvent__DelegateSignature(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // DelegateFunction Mist.MistInteractableComponent.MistInteractableEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
	void MistInteractableEndEvent__DelegateSignature(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool bCanceled); // DelegateFunction Mist.MistInteractableComponent.MistInteractableEndEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
};

// Class Mist.MistAtmInteractableComponent
// Size: 0x1f0 (Inherited: 0x1f0)
struct UMistAtmInteractableComponent : UMistInteractableComponent {
};

// Class Mist.MistAtmScreen
// Size: 0x3a8 (Inherited: 0x3a0)
struct UMistAtmScreen : UMistUIScreen {
	struct UMistInteractableComponent* AtmInUse; // 0x3a0(0x08)

	void Withdraw(int32_t Amount); // Function Mist.MistAtmScreen.Withdraw // (Final|Native|Public|BlueprintCallable) // @ game+0x1096f70
	int32_t QueryCurrency(); // Function Mist.MistAtmScreen.QueryCurrency // (Final|Native|Public|BlueprintCallable) // @ game+0x1096ea0
	int32_t QueryBalance(); // Function Mist.MistAtmScreen.QueryBalance // (Final|Native|Public|BlueprintCallable) // @ game+0x1096e70
	void Deposit(int32_t Amount); // Function Mist.MistAtmScreen.Deposit // (Final|Native|Public|BlueprintCallable) // @ game+0x10966f0
};

// Class Mist.MistAttackArrowsControlComponent
// Size: 0x110 (Inherited: 0xf0)
struct UMistAttackArrowsControlComponent : UActorComponent {
	float FacingTolerance; // 0xf0(0x04)
	bool bDrawDebug; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	struct TArray<struct FMistConsideredWidgetComponentsData> ConsideredWidgetComponents; // 0xf8(0x10)
	struct UMistAttackDirectionWidgetComponent* SelectedWidgetComponent; // 0x108(0x08)
};

// Class Mist.MistAttackBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistAttackBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistAttackDirectionWidgetComponent
// Size: 0x920 (Inherited: 0x900)
struct UMistAttackDirectionWidgetComponent : UWidgetComponent {
	bool bScaleWithDistance; // 0x900(0x01)
	char pad_901[0x3]; // 0x901(0x03)
	float MaxScale; // 0x904(0x04)
	float MinScale; // 0x908(0x04)
	float MaxScaleDistance; // 0x90c(0x04)
	float MinScaleDistance; // 0x910(0x04)
	bool bOutsideRange; // 0x914(0x01)
	char pad_915[0xb]; // 0x915(0x0b)

	void AnimTrackChange(struct FCombatAnimTrack AnimTack); // Function Mist.MistAttackDirectionWidgetComponent.AnimTrackChange // (Final|Native|Public) // @ game+0x1096610
};

// Class Mist.MistAttackDirectionWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistAttackDirectionWidget : UMistUIWidget {
	struct UCanvasPanel* AttackDirectionPivot; // 0x2c0(0x08)
	struct UImage* AttackDirectionImage; // 0x2c8(0x08)
};

// Class Mist.MistAttackWalkerRangedBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistAttackWalkerRangedBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistAuctionBrowseItemWidget
// Size: 0x3c8 (Inherited: 0x2c0)
struct UMistAuctionBrowseItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct FSlateColor RegularBorderColor; // 0x2c8(0x28)
	struct FSlateColor HighestBidderBorderColor; // 0x2f0(0x28)
	struct FSlateColor ParticipantBoarderColor; // 0x318(0x28)
	struct UMistNumberInputWidget* BidValueWidget; // 0x340(0x08)
	struct UMistBasicItemIconWidget* ItemIconWidget; // 0x348(0x08)
	struct UTextBlock* ItemNameWidget; // 0x350(0x08)
	struct UTextBlock* ItemRarityNameWidget; // 0x358(0x08)
	struct UTextBlock* TimerWidget; // 0x360(0x08)
	struct UTextBlock* CurrentPriceWidget; // 0x368(0x08)
	struct UTextBlock* BidsCountWidget; // 0x370(0x08)
	struct UButton* PlaceBidButtonWidget; // 0x378(0x08)
	struct UButton* DecreaseBidButton; // 0x380(0x08)
	struct UButton* IncreaseBidButton; // 0x388(0x08)
	struct UImage* WinningBidImage; // 0x390(0x08)
	struct UImage* LosingBidImage; // 0x398(0x08)
	struct UBorder* BorderWidget; // 0x3a0(0x08)
	struct FTimerHandle TimerHandle_UpdateAuctionTimer; // 0x3a8(0x08)
	struct UMistTradeStationAuctionWidget* ParentWidget; // 0x3b0(0x08)
	struct UMistTradeStationClientAuction* AuctionObject; // 0x3b8(0x08)
	char pad_3C0[0x8]; // 0x3c0(0x08)

	void UpdateAuctionTimer(); // Function Mist.MistAuctionBrowseItemWidget.UpdateAuctionTimer // (Final|Native|Private) // @ game+0x1096f50
	void OnLoseAuctionLeadEvent(); // Function Mist.MistAuctionBrowseItemWidget.OnLoseAuctionLeadEvent // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnBecomeAuctionLeaderEvent(); // Function Mist.MistAuctionBrowseItemWidget.OnBecomeAuctionLeaderEvent // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandlePlaceBidClicked(); // Function Mist.MistAuctionBrowseItemWidget.HandlePlaceBidClicked // (Final|Native|Private) // @ game+0x1096890
	void HandleIncreaseBidClicked(); // Function Mist.MistAuctionBrowseItemWidget.HandleIncreaseBidClicked // (Final|Native|Private) // @ game+0x1096870
	void HandleDecreaseBidClicked(); // Function Mist.MistAuctionBrowseItemWidget.HandleDecreaseBidClicked // (Final|Native|Private) // @ game+0x10967c0
};

// Class Mist.MistAuctionBrowseWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistAuctionBrowseWidget : UMistUIWidget {
	struct UListView* ListWidget; // 0x2c0(0x08)
	struct UMistTradeStationAuctionWidget* ParentWidget; // 0x2c8(0x08)
};

// Class Mist.MistAudioComponent
// Size: 0x870 (Inherited: 0x870)
struct UMistAudioComponent : UAudioComponent {

	void MulticastStop(); // Function Mist.MistAudioComponent.MulticastStop // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1096dd0
	void MulticastPlay(float StartTime); // Function Mist.MistAudioComponent.MulticastPlay // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1096cd0
	void MulticastFadeOut(float FadeOutDuration, float FadeVolumeLevel, enum class EAudioFaderCurve FadeCurve); // Function Mist.MistAudioComponent.MulticastFadeOut // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1096b80
	void MulticastFadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, enum class EAudioFaderCurve FadeCurve); // Function Mist.MistAudioComponent.MulticastFadeIn // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x1096a30
};

// Class Mist.MistAudioLevelVisualisation
// Size: 0x318 (Inherited: 0x108)
struct UMistAudioLevelVisualisation : UWidget {
	float Percent; // 0x108(0x04)
	float PercentBar; // 0x10c(0x04)
	float BarWidth; // 0x110(0x04)
	struct FDelegate PercentDelegate; // 0x114(0x10)
	struct FDelegate PercentBarDelegate; // 0x124(0x10)
	char pad_134[0x4]; // 0x134(0x04)
	struct FMistAudioLevelVisualisationStyle WidgetStyle; // 0x138(0x1a0)
	bool IndentHandle; // 0x2d8(0x01)
	bool Locked; // 0x2d9(0x01)
	char pad_2DA[0x6]; // 0x2da(0x06)
	struct FMulticastInlineDelegate OnPercentValueChanged; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnPercentBarValueChanged; // 0x2f0(0x10)
	char pad_300[0x18]; // 0x300(0x18)

	void SetPercentBar(float InPercentBar); // Function Mist.MistAudioLevelVisualisation.SetPercentBar // (Final|Native|Public|BlueprintCallable) // @ game+0x109d2d0
	void SetPercent(float InPercent); // Function Mist.MistAudioLevelVisualisation.SetPercent // (Final|Native|Public|BlueprintCallable) // @ game+0x109d250
	void SetLocked(bool InLocked); // Function Mist.MistAudioLevelVisualisation.SetLocked // (Final|Native|Public|BlueprintCallable) // @ game+0x109d1c0
	void SetIndentHandle(bool InIndentHandle); // Function Mist.MistAudioLevelVisualisation.SetIndentHandle // (Final|Native|Public|BlueprintCallable) // @ game+0x109d130
	void SetBarWidth(float InBarWidth); // Function Mist.MistAudioLevelVisualisation.SetBarWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x109d0b0
	float GetPercentBar(); // Function Mist.MistAudioLevelVisualisation.GetPercentBar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109c9f0
	float GetPercent(); // Function Mist.MistAudioLevelVisualisation.GetPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109c9c0
	float GetBarWidth(); // Function Mist.MistAudioLevelVisualisation.GetBarWidth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109c960
};

// Class Mist.MistAudioOcclusionSettings
// Size: 0x38 (Inherited: 0x28)
struct UMistAudioOcclusionSettings : UOcclusionPluginSourceSettingsBase {
	struct TArray<struct FMistOcclusionSettings> OcclusionSettings; // 0x28(0x10)
};

// Class Mist.MistSettingsObject
// Size: 0x38 (Inherited: 0x28)
struct UMistSettingsObject : UObject {
	char pad_28[0x10]; // 0x28(0x10)
};

// Class Mist.MistAudioTestBotController
// Size: 0x510 (Inherited: 0x4c0)
struct AMistAudioTestBotController : AAIController {
	char pad_4C0[0x20]; // 0x4c0(0x20)
	struct UBehaviorTree* BehaviourTree; // 0x4e0(0x08)
	struct UBlackboardData* BlackboardAsset; // 0x4e8(0x08)
	struct TScriptInterface<IMistBotControllableInterface> BotControllable; // 0x4f0(0x10)
	struct UBlackboardComponent* BlackboardComponentCached; // 0x500(0x08)
	char pad_508[0x8]; // 0x508(0x08)
};

// Class Mist.MistAudioTestCombatBotSpawner
// Size: 0x400 (Inherited: 0x3c0)
struct AMistAudioTestCombatBotSpawner : AActor {
	enum class EMistCharacterGender BotGender; // 0x3c0(0x01)
	enum class ECombatAction BotAttackAction; // 0x3c1(0x01)
	char pad_3C2[0x2]; // 0x3c2(0x02)
	float BotAttackPower; // 0x3c4(0x04)
	float BotMaxHealth; // 0x3c8(0x04)
	float BotHealth; // 0x3cc(0x04)
	float DamageFactor; // 0x3d0(0x04)
	float SpawnDelay; // 0x3d4(0x04)
	float StartCombatDelay; // 0x3d8(0x04)
	float ApplyingNewGenderDelay_HACK; // 0x3dc(0x04)
	struct AMistAudioTestCombatBotSpawner* TargetOverride; // 0x3e0(0x08)
	struct AMistPlayer* CombatBotClass; // 0x3e8(0x08)
	struct AMistMobController* MobControllerClass; // 0x3f0(0x08)
	struct AMistPlayer* SpawnedBot; // 0x3f8(0x08)
};

// Class Mist.MistAudioTestFunctionLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMistAudioTestFunctionLibrary : UBlueprintFunctionLibrary {

	void InitializeAudioTest(struct UObject* WorldContextObject, struct FMistAudioTestSettings& Settings, bool bWnatsStartTest); // Function Mist.MistAudioTestFunctionLibrary.InitializeAudioTest // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x109cbe0
	struct AMistAudioTestManagerActor* GetAudioTestManager(struct UObject* WorldContextObject); // Function Mist.MistAudioTestFunctionLibrary.GetAudioTestManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x109c8e0
	void DeinitializeAudioTest(struct UObject* WorldContextObject); // Function Mist.MistAudioTestFunctionLibrary.DeinitializeAudioTest // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x109c870
};

// Class Mist.MistAudioTestManagerActor
// Size: 0x3f0 (Inherited: 0x3c0)
struct AMistAudioTestManagerActor : AActor {
	struct FMistAudioTestSettings AudioTestSettings; // 0x3c0(0x18)
	struct TArray<struct FMistSiegeWeapon> SiegeWeapons; // 0x3d8(0x10)
	bool bIsAudioTesting; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)

	void ToggleTetherBallista(float Value); // Function Mist.MistAudioTestManagerActor.ToggleTetherBallista // (Final|Exec|Native|Public) // @ game+0x109d4d0
	void StopShooting(struct FString WeaponTypeName); // Function Mist.MistAudioTestManagerActor.StopShooting // (Final|Exec|Native|Public) // @ game+0x109d430
	void StopAudioTest(); // Function Mist.MistAudioTestManagerActor.StopAudioTest // (Final|Exec|Native|Public) // @ game+0x109d410
	void StartShooting(struct FString WeaponType); // Function Mist.MistAudioTestManagerActor.StartShooting // (Final|Exec|Native|Public) // @ game+0x109d370
	void StartAudioTest(); // Function Mist.MistAudioTestManagerActor.StartAudioTest // (Final|Exec|Native|Public) // @ game+0x109d350
	void ServerToggleBallistaMode(float Value); // Function Mist.MistAudioTestManagerActor.ServerToggleBallistaMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x109d030
	void ServerStopShooting(struct FString WeaponTypeName); // Function Mist.MistAudioTestManagerActor.ServerStopShooting // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x109cf90
	void ServerStopAudioTest(); // Function Mist.MistAudioTestManagerActor.ServerStopAudioTest // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x109cf70
	void ServerStartShooting(struct FString WeaponTypeName); // Function Mist.MistAudioTestManagerActor.ServerStartShooting // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x109ced0
	void ServerStartAudioTest(); // Function Mist.MistAudioTestManagerActor.ServerStartAudioTest // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x109ceb0
	bool IsAudioTesting(); // Function Mist.MistAudioTestManagerActor.IsAudioTesting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109cd10
};

// Class Mist.MistAuthComponent
// Size: 0x140 (Inherited: 0x108)
struct UMistAuthComponent : UMistPlayerControllerComponent {
	char pad_108[0x38]; // 0x108(0x38)

	void ServerReplySteamAuth(struct TArray<char> AuthTicket); // Function Mist.MistAuthComponent.ServerReplySteamAuth // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x109ce10
	void ClientRequestSteamAuth(); // Function Mist.MistAuthComponent.ClientRequestSteamAuth // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x109c850
};

// Class Mist.MistAuthPlayerState
// Size: 0x4e0 (Inherited: 0x4c0)
struct AMistAuthPlayerState : APlayerState {
	float PlatformAuthTimeout; // 0x4c0(0x04)
	char pad_4C4[0x1c]; // 0x4c4(0x1c)

	void ServerBeginAuthentication(); // Function Mist.MistAuthPlayerState.ServerBeginAuthentication // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x109cdf0
};

// Class Mist.MistCraftingStationComponent
// Size: 0x3b0 (Inherited: 0x1f0)
struct UMistCraftingStationComponent : UMistInteractableComponent {
	char pad_1F0[0x28]; // 0x1f0(0x28)
	struct FMulticastInlineDelegate OnQueueUpdated; // 0x218(0x10)
	struct FMulticastInlineDelegate OnCraftingStarted; // 0x228(0x10)
	struct FMulticastInlineDelegate OnCraftingCancelled; // 0x238(0x10)
	struct FMulticastInlineDelegate OnCraftingSucceeded; // 0x248(0x10)
	struct FMulticastInlineDelegate OnQueueLimitReached; // 0x258(0x10)
	char pad_268[0x18]; // 0x268(0x18)
	struct FMulticastInlineDelegate OnFuelAdded; // 0x280(0x10)
	struct TArray<struct UMistCraftingCategory*> SupportedCategories; // 0x290(0x10)
	int32_t MaxQueueSize; // 0x2a0(0x04)
	bool AcceptsImpossibleOrders; // 0x2a4(0x01)
	bool DontAllowQueueing; // 0x2a5(0x01)
	char pad_2A6[0x2]; // 0x2a6(0x02)
	struct FMistComponentReference InputContainerRef; // 0x2a8(0x28)
	struct FMistComponentReference OutputContainerRef; // 0x2d0(0x28)
	struct FMistComponentReference FuelSourceCraftingStationRef; // 0x2f8(0x28)
	struct UTexture2D* StationIcon; // 0x320(0x08)
	struct TArray<struct FMistCraftingQueueItem> CraftingQueue; // 0x328(0x10)
	struct TArray<struct UMistContainerComponent*> InputContainers; // 0x338(0x10)
	struct TArray<struct UMistContainerComponent*> OutputContainers; // 0x348(0x10)
	struct UMistCraftingStationComponent* FuelSourceCraftingStation; // 0x358(0x08)
	char pad_360[0x50]; // 0x360(0x50)

	void SetPostLoadDataOnQueueItems(); // Function Mist.MistCraftingStationComponent.SetPostLoadDataOnQueueItems // (Final|Native|Private) // @ game+0x10ddc70
	void QueueUpdateEvent__DelegateSignature(struct UMistCraftingStationComponent* Sender); // DelegateFunction Mist.MistCraftingStationComponent.QueueUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ProcessNextQueueItem(); // Function Mist.MistCraftingStationComponent.ProcessNextQueueItem // (Final|Native|Private) // @ game+0x10dd090
	void OnRep_CraftingQueue(); // Function Mist.MistCraftingStationComponent.OnRep_CraftingQueue // (Final|Native|Private) // @ game+0x10dd070
	void MulticastUpdateQueue(struct TArray<struct FMistCraftingQueueItem> InAddedOrUpdatedItems, struct TArray<uint64_t> InRemovedItemIds); // Function Mist.MistCraftingStationComponent.MulticastUpdateQueue // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10dcf50
	void MulticastRaiseFuelAdded(); // Function Mist.MistCraftingStationComponent.MulticastRaiseFuelAdded // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10d4dd0
	bool IsQueueActive(); // Function Mist.MistCraftingStationComponent.IsQueueActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10dcf20
	void HandlePlayerContainersUpdated(); // Function Mist.MistCraftingStationComponent.HandlePlayerContainersUpdated // (Final|Native|Private) // @ game+0x10dce30
	void HandleFuelCraftingStopped(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCraftingStationComponent.HandleFuelCraftingStopped // (Final|Native|Protected) // @ game+0x10dc780
	void HandleContainerSlotUpdate(struct UMistContainerComponent* Sender, int32_t SlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistCraftingStationComponent.HandleContainerSlotUpdate // (Native|Protected) // @ game+0x10dc400
	void GetCraftingSections(struct TArray<struct FMistCraftingSection>& Sections); // Function Mist.MistCraftingStationComponent.GetCraftingSections // (Native|Public|HasOutParms) // @ game+0x10dc300
	void FuelAddedEvent__DelegateSignature(); // DelegateFunction Mist.MistCraftingStationComponent.FuelAddedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistAutoCraftingStationComponent
// Size: 0x438 (Inherited: 0x3b0)
struct UMistAutoCraftingStationComponent : UMistCraftingStationComponent {
	struct TMap<struct UMistItemTemplate*, float> CraftingChance; // 0x3b0(0x50)
	bool bAllowInteraction; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
	struct FMulticastInlineDelegate OnAutoCraftingStarted; // 0x408(0x10)
	struct FMulticastInlineDelegate OnAutoCraftingStopped; // 0x418(0x10)
	struct TArray<struct FMistCachedAutoStationRecipe> CachedRecipes; // 0x428(0x10)

	void HandleCraftingSucceeded(struct UMistCraftingStationComponent* Sender); // Function Mist.MistAutoCraftingStationComponent.HandleCraftingSucceeded // (Native|Protected) // @ game+0x109cb50
	void HandleCraftingStopped(struct UMistCraftingStationComponent* Sender); // Function Mist.MistAutoCraftingStationComponent.HandleCraftingStopped // (Native|Protected) // @ game+0x109cac0
};

// Class Mist.MistBackendHttpClient
// Size: 0x39c8 (Inherited: 0x28)
struct UMistBackendHttpClient : UObject {
	char pad_28[0x39a0]; // 0x28(0x39a0)
};

// Class Mist.MistMannedPodControlAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UMistMannedPodControlAnimInstance : UMistMannedControlAnimInstance {
	float CurrentPitchAngle; // 0x278(0x04)
	float CurrentYawAngle; // 0x27c(0x04)
	float PitchRotationSpeed; // 0x280(0x04)
	float YawRotationSpeed; // 0x284(0x04)
	struct UMistSiegePodComponent* CachedSiegePodComponent; // 0x288(0x08)

	void OnConnectedGunPodWeaponChanged(struct UMistSiegePodComponent* SiegePodComponent, struct AMistSiegePodWeapon* PrevWeapon, struct AMistSiegePodWeapon* NewWeapon); // Function Mist.MistMannedPodControlAnimInstance.OnConnectedGunPodWeaponChanged // (Final|Native|Private) // @ game+0x1133b60
};

// Class Mist.MistBallistaAnimInstance
// Size: 0x2c0 (Inherited: 0x290)
struct UMistBallistaAnimInstance : UMistMannedPodControlAnimInstance {
	bool bIsManned; // 0x290(0x01)
	char pad_291[0x3]; // 0x291(0x03)
	float ReelingSpeed; // 0x294(0x04)
	bool bReloading; // 0x298(0x01)
	bool bFiring; // 0x299(0x01)
	char pad_29A[0x2]; // 0x29a(0x02)
	float ReloadMultiplier; // 0x29c(0x04)
	float ReelPosition; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct UAnimSequence* ReelInAnimation; // 0x2a8(0x08)
	struct UAnimSequence* ReloadAnimation; // 0x2b0(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)
};

// Class Mist.MistBallistaOperationAnimInstance
// Size: 0x2a0 (Inherited: 0x290)
struct UMistBallistaOperationAnimInstance : UMistMannedPodControlAnimInstance {
	float ReelingSpeed; // 0x290(0x04)
	bool bReloading; // 0x294(0x01)
	bool bFiring; // 0x295(0x01)
	char pad_296[0xa]; // 0x296(0x0a)
};

// Class Mist.MistItemTemplate
// Size: 0x1d8 (Inherited: 0x30)
struct UMistItemTemplate : UPrimaryDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
	struct UMistItemCategory* Category; // 0x50(0x08)
	struct UMistItemRarity* Rarity; // 0x58(0x08)
	struct UTexture2D* Icon; // 0x60(0x08)
	struct FName ShopItemId; // 0x68(0x08)
	struct TArray<struct UMistItemSkinTemplate*> Skins; // 0x70(0x10)
	bool bTradeable; // 0x80(0x01)
	bool bRequireContainerWhitelist; // 0x81(0x01)
	bool bIgnoreContainerMaxStackSize; // 0x82(0x01)
	char pad_83[0x1]; // 0x83(0x01)
	int32_t MaxStackSize; // 0x84(0x04)
	struct TArray<struct FMistItemCraftingRecipe> Recipes; // 0x88(0x10)
	int32_t ExperienceRewardCrafting; // 0x98(0x04)
	int32_t ExperienceRewardUsing; // 0x9c(0x04)
	struct TSoftObjectPtr<UStaticMesh> Mesh; // 0xa0(0x28)
	struct TSoftObjectPtr<UParticleSystem> ParticleSystem; // 0xc8(0x28)
	float ParticleSystemCullDistance; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct FMistItemCollectionMesh> CollectionMeshes; // 0xf8(0x10)
	struct FText Description; // 0x108(0x18)
	struct FText AcquisitionHint; // 0x120(0x18)
	float weight; // 0x138(0x04)
	float WeightFactorAtMaxQuality; // 0x13c(0x04)
	int32_t MaxDurability; // 0x140(0x04)
	bool bCanBeAddedByClaim; // 0x144(0x01)
	bool bUsesQuality; // 0x145(0x01)
	bool bSupportsPrimaryDye; // 0x146(0x01)
	bool bSupportsSecondaryDye; // 0x147(0x01)
	float DyeingTime; // 0x148(0x04)
	struct FLinearColor DefaultPrimaryDyeColor; // 0x14c(0x10)
	struct FLinearColor DefaultSecondaryDyeColor; // 0x15c(0x10)
	struct FLinearColor DefaultPrimaryDyeBackgroundColor; // 0x16c(0x10)
	float DefaultPrimaryDyeShininess; // 0x17c(0x04)
	float DefaultSecondaryDyeShininess; // 0x180(0x04)
	char pad_184[0x4]; // 0x184(0x04)
	struct UMistItemPerksProfile* PerksProfile; // 0x188(0x08)
	bool bKnowledgeItem; // 0x190(0x01)
	bool bDestroyedByExplosion; // 0x191(0x01)
	bool bLeaveDebrisOnExplosion; // 0x192(0x01)
	char pad_193[0x5]; // 0x193(0x05)
	struct UMistItemTemplate* ExplodedDebrisItemClass; // 0x198(0x08)
	float ExplosivePower; // 0x1a0(0x04)
	char pad_1A4[0x4]; // 0x1a4(0x04)
	struct UMistItemTemplate* DamagedItem; // 0x1a8(0x08)
	int32_t RecipeIndexForRawCalculation; // 0x1b0(0x04)
	char pad_1B4[0x4]; // 0x1b4(0x04)
	struct TArray<struct UVirtualLandscapeLayer*> FreeLandscapeLayers; // 0x1b8(0x10)
	int32_t SoundAddedId; // 0x1c8(0x04)
	int32_t SoundUsedId; // 0x1cc(0x04)
	float ExpectedPrice; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)
};

// Class Mist.MistBandageItemTemplate
// Size: 0x1e0 (Inherited: 0x1d8)
struct UMistBandageItemTemplate : UMistItemTemplate {
	float MultiplyHealth; // 0x1d8(0x04)
	float HealingValue; // 0x1dc(0x04)
};

// Class Mist.MistBaseBuildingQuest
// Size: 0x178 (Inherited: 0x110)
struct UMistBaseBuildingQuest : UMistTutorialQuest {
	struct TMap<struct UMistPlaceableTemplate*, struct FName> BasesTemplates; // 0x110(0x50)
	struct FName UnpackCoreTaskName; // 0x160(0x08)
	struct AMistWalker* FoundationWalkerClass; // 0x168(0x08)
	struct FName PayUpkeepTaskName; // 0x170(0x08)

	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistBaseBuildingQuest.ItemBuilt // (Final|Native|Private) // @ game+0x109cd30
};

// Class Mist.MistBaseButtonWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistBaseButtonWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	char pad_2C8[0x18]; // 0x2c8(0x18)

	void HandleButtonUnhovered(); // Function Mist.MistBaseButtonWidget.HandleButtonUnhovered // (Final|Native|Private) // @ game+0x109caa0
	void HandleButtonReleased(); // Function Mist.MistBaseButtonWidget.HandleButtonReleased // (Final|Native|Private) // @ game+0x109ca80
	void HandleButtonPressed(); // Function Mist.MistBaseButtonWidget.HandleButtonPressed // (Final|Native|Private) // @ game+0x109ca60
	void HandleButtonHovered(); // Function Mist.MistBaseButtonWidget.HandleButtonHovered // (Final|Native|Private) // @ game+0x109ca40
	void HandleButtonClicked(); // Function Mist.MistBaseButtonWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x109ca20
	struct UButton* GetButtonWidget(); // Function Mist.MistBaseButtonWidget.GetButtonWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x109c990
};

// Class Mist.MistBaseCheckBoxWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistBaseCheckBoxWidget : UMistUIWidget {
	struct UMistCheckBox* CheckBoxWidget; // 0x2c0(0x08)
};

// Class Mist.MistPlaceableTemplate
// Size: 0x1c8 (Inherited: 0x30)
struct UMistPlaceableTemplate : UPrimaryDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	bool HideInMenu; // 0x38(0x01)
	bool bRepeatable; // 0x39(0x01)
	bool AllowVerticalRotation; // 0x3a(0x01)
	bool bIsFoundation; // 0x3b(0x01)
	bool bIsGroundFoundation; // 0x3c(0x01)
	bool bAllowPlacingOnGround; // 0x3d(0x01)
	bool bAllowPlacingOnPlatform; // 0x3e(0x01)
	bool bClaimOwnerOnly; // 0x3f(0x01)
	bool bAllowPacking; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct FText Name; // 0x48(0x18)
	struct FText Description; // 0x60(0x18)
	struct FName ShopItemId; // 0x78(0x08)
	struct UTexture2D* Icon; // 0x80(0x08)
	struct UMistItemCategory* Category; // 0x88(0x08)
	struct FMistCraftingRequirements Requirements; // 0x90(0x60)
	struct TSoftClassPtr<UObject> PlaceableActorClass; // 0xf0(0x28)
	float MaxDistance; // 0x118(0x04)
	float MaxSlope; // 0x11c(0x04)
	struct TSet<struct FName> PackingTags; // 0x120(0x50)
	float PackingTime; // 0x170(0x04)
	float UnpackingTime; // 0x174(0x04)
	int32_t MaxLinksFromFoundation; // 0x178(0x04)
	float MaxHorizontalDistanceFromFoundation; // 0x17c(0x04)
	float MaxDistanceFromGround; // 0x180(0x04)
	float MinHeightOffset; // 0x184(0x04)
	float MaxHeightOffset; // 0x188(0x04)
	int32_t MaxPerWalker; // 0x18c(0x04)
	float weight; // 0x190(0x04)
	float WeightFactorAtMaxQuality; // 0x194(0x04)
	float HealthFactorAtMaxQuality; // 0x198(0x04)
	int32_t SortingPriority; // 0x19c(0x04)
	struct UMistSnappingTemplate* SnappingClass; // 0x1a0(0x08)
	bool bCanPackIndividually; // 0x1a8(0x01)
	bool bCanToggleSnapping; // 0x1a9(0x01)
	bool bAttachOnPlacement; // 0x1aa(0x01)
	bool bCanDisassemble; // 0x1ab(0x01)
	float ReturnCostOnDestroyFactor; // 0x1ac(0x04)
	struct TArray<struct FMistPlaceableDisassemblingThreshold> DisassemblingThresholds; // 0x1b0(0x10)
	struct AMistFoundationStructure* FoundationStructureClass; // 0x1c0(0x08)

	void UpdatePartsRequirements(); // Function Mist.MistPlaceableTemplate.UpdatePartsRequirements // (Final|Native|Public|BlueprintCallable) // @ game+0x1168480
};

// Class Mist.MistBaseMaintenanceChestPlaceableTemplate
// Size: 0x1c8 (Inherited: 0x1c8)
struct UMistBaseMaintenanceChestPlaceableTemplate : UMistPlaceableTemplate {
};

// Class Mist.MistBaseMaintenanceContainerComponent
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMistBaseMaintenanceContainerComponent : UMistContainerComponent {
	struct AMistStructure* Structure; // 0x2e0(0x08)
};

// Class Mist.MistBaseActorWidget
// Size: 0x2c0 (Inherited: 0x2c0)
struct UMistBaseActorWidget : UMistUIWidget {
};

// Class Mist.MistBaseMaintenanceInventoryWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistBaseMaintenanceInventoryWidget : UMistBaseActorWidget {
	struct UMistContainerWidget* ContainerWidget; // 0x2c0(0x08)
	struct UTextBlock* PlaceholderDailyMaintenanceTextBlock; // 0x2c8(0x08)
	struct UTextBlock* HoursLeftTextBlock; // 0x2d0(0x08)
	struct UMistContainerComponent* LinkedContainer; // 0x2d8(0x08)
};

// Class Mist.MistBasePackingQuest
// Size: 0x168 (Inherited: 0x110)
struct UMistBasePackingQuest : UMistTutorialQuest {
	struct TMap<struct UMistPlaceableTemplate*, struct FName> BasesTemplates; // 0x110(0x50)
	struct FName PackTaskName; // 0x160(0x08)

	void PackBase(struct UMistPackingComponent* PackingComponent); // Function Mist.MistBasePackingQuest.PackBase // (Final|Native|Private) // @ game+0x10a3e20
	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistBasePackingQuest.ItemBuilt // (Final|Native|Private) // @ game+0x109cd30
};

// Class Mist.MistBasePersistentActor
// Size: 0x3f0 (Inherited: 0x3c0)
struct AMistBasePersistentActor : AActor {
	char pad_3C0[0x28]; // 0x3c0(0x28)
	bool bMarkPersistenceDirtyOnMove; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)
};

// Class Mist.MistBaseQuestEntryWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistBaseQuestEntryWidget : UMistUIWidget {
	struct UTextBlock* ProgressTextWidget; // 0x2c0(0x08)
	struct UMistQuest* Quest; // 0x2c8(0x08)
	char pad_2D0[0x10]; // 0x2d0(0x10)

	void OnTaskUnfinished(); // Function Mist.MistBaseQuestEntryWidget.OnTaskUnfinished // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnTaskFinished(); // Function Mist.MistBaseQuestEntryWidget.OnTaskFinished // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnProgressUpdated(); // Function Mist.MistBaseQuestEntryWidget.OnProgressUpdated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleSubtaskProgressChanged(struct UMistPlayerStateQuestsComponent* Sender, struct UMistQuest* InQuest, int32_t InSubtaskIndex); // Function Mist.MistBaseQuestEntryWidget.HandleSubtaskProgressChanged // (Final|Native|Protected) // @ game+0x10a34f0
};

// Class Mist.MistBaseQuestGenerator
// Size: 0x30 (Inherited: 0x30)
struct UMistBaseQuestGenerator : UDataAsset {
};

// Class Mist.MistPlaceable
// Size: 0x4b0 (Inherited: 0x3c0)
struct AMistPlaceable : AActor {
	char pad_3C0[0x58]; // 0x3c0(0x58)
	struct UMistCollisionGroupComponent* CollisionGroupComponent; // 0x418(0x08)
	struct FText PlaceableName; // 0x420(0x18)
	struct FMulticastInlineDelegate OnPlaceableConstructed; // 0x438(0x10)
	struct FMulticastInlineDelegate OnPlaceableDestroyed; // 0x448(0x10)
	struct FMulticastInlineDelegate OnPlaceableDamaged; // 0x458(0x10)
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0x468(0x08)
	struct FMistComponentReference ShowHealthInteractableRef; // 0x470(0x28)
	struct UMistDamageOverrideTable* DamageOverride; // 0x498(0x08)
	int32_t Quality; // 0x4a0(0x04)
	char pad_4A4[0x4]; // 0x4a4(0x04)
	float CachedWeight; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)

	void ReceivePlaceableDestroyed(struct FTransform& Transform, int32_t ItemIndex, enum class EMistDestroyReason Reason); // Function Mist.MistPlaceable.ReceivePlaceableDestroyed // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlaceableDamaged(struct FTransform& Transform, int32_t ItemIndex, struct UDamageType* DamageTypeClass); // Function Mist.MistPlaceable.ReceivePlaceableDamaged // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlaceableConstructed(struct AMistPlayer* Player, struct FTransform& Transform, int32_t ItemIndex); // Function Mist.MistPlaceable.ReceivePlaceableConstructed // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_Quality(); // Function Mist.MistPlaceable.OnRep_Quality // (Native|Public) // @ game+0x10966d0
	void OnRep_CachedWeight(); // Function Mist.MistPlaceable.OnRep_CachedWeight // (Native|Protected) // @ game+0x11619c0
	void DestroyedEvent__DelegateSignature(struct FTransform& Transform, int32_t ItemIndex); // DelegateFunction Mist.MistPlaceable.DestroyedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x163f1c0
	void DamagedEvent__DelegateSignature(struct FTransform& Transform, int32_t ItemIndex, struct UDamageType* DamageTypeClass); // DelegateFunction Mist.MistPlaceable.DamagedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x163f1c0
	void ConstructedEvent__DelegateSignature(struct FTransform& Transform, int32_t ItemIndex, struct AMistPlayer* Player); // DelegateFunction Mist.MistPlaceable.ConstructedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x163f1c0
};

// Class Mist.MistBaseStructurePart
// Size: 0x508 (Inherited: 0x4b0)
struct AMistBaseStructurePart : AMistPlaceable {
	char pad_4B0[0x38]; // 0x4b0(0x38)
	float MaxHealth; // 0x4e8(0x04)
	bool bDestroyOnZeroHealth; // 0x4ec(0x01)
	bool bCanDecay; // 0x4ed(0x01)
	char pad_4EE[0x2]; // 0x4ee(0x02)
	float DecayDamageMulti; // 0x4f0(0x04)
	bool bUseWallCombatCooldownValues; // 0x4f4(0x01)
	char pad_4F5[0x3]; // 0x4f5(0x03)
	struct UPrimitiveComponent* BaseComponent; // 0x4f8(0x08)
	struct AMistPackingProcessActor* PackingProcessActor; // 0x500(0x08)

	void MulticastAddConnection(struct FMistStructurePartConnectionNode Node, struct FMistStructurePartConnectionNode MyNode); // Function Mist.MistBaseStructurePart.MulticastAddConnection // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10a3b50
	struct AMistWalker* GetWalker(); // Function Mist.MistBaseStructurePart.GetWalker // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2db0
};

// Class Mist.MistBasicItemIconWidget
// Size: 0x400 (Inherited: 0x2c0)
struct UMistBasicItemIconWidget : UMistUIWidget {
	struct UImage* IconWidget; // 0x2c0(0x08)
	struct UImage* CategoryWidget; // 0x2c8(0x08)
	struct UImage* RarityWidget; // 0x2d0(0x08)
	struct UTextBlock* CountWidget; // 0x2d8(0x08)
	struct UTextBlock* QualityWidget; // 0x2e0(0x08)
	struct UProgressBar* DurabilityWidget; // 0x2e8(0x08)
	struct UImage* Dye1ColorWidget; // 0x2f0(0x08)
	struct UImage* Dye2ColorWidget; // 0x2f8(0x08)
	struct FSlateColor QualityColorOverride; // 0x300(0x28)
	struct FSlateColor CountColorOverride; // 0x328(0x28)
	bool bShowPopup; // 0x350(0x01)
	bool bShowCount; // 0x351(0x01)
	bool bShowDurability; // 0x352(0x01)
	bool bShowQuality; // 0x353(0x01)
	bool bShowCategory; // 0x354(0x01)
	bool bShowRarity; // 0x355(0x01)
	char pad_356[0x2]; // 0x356(0x02)
	struct FText CountWithStackSizeFormatText; // 0x358(0x18)
	struct UMistItemTemplate* ItemTemplate; // 0x370(0x08)
	char pad_378[0x80]; // 0x378(0x80)
	struct UMistItemPopupWidget* PopupWidget; // 0x3f8(0x08)
};

// Class Mist.MistMannedControlComponent
// Size: 0x330 (Inherited: 0xf0)
struct UMistMannedControlComponent : UActorComponent {
	char pad_F0[0x40]; // 0xf0(0x40)
	struct UAnimInstance* AnimationClass; // 0x130(0x08)
	struct FMistComponentReference Interactable; // 0x138(0x28)
	struct FMistComponentReference CharacterAttachment; // 0x160(0x28)
	struct TArray<struct FMistComponentReference> CharacterDetachRefs; // 0x188(0x10)
	struct FMistComponentReference AnimatedMeshRef; // 0x198(0x28)
	bool bIsViewTarget; // 0x1c0(0x01)
	bool bAllowZoomOnThisTarget; // 0x1c1(0x01)
	char pad_1C2[0x2]; // 0x1c2(0x02)
	float MinZoom; // 0x1c4(0x04)
	float MaxZoom; // 0x1c8(0x04)
	bool bDelayedExit; // 0x1cc(0x01)
	char pad_1CD[0x3]; // 0x1cd(0x03)
	float ExitDelay; // 0x1d0(0x04)
	bool bEnsureControllingCharacterSupported; // 0x1d4(0x01)
	bool bEnsureControllingCharacterNotObstructed; // 0x1d5(0x01)
	char pad_1D6[0x2]; // 0x1d6(0x02)
	float MaxControllingCharacterAngleDiffToUp; // 0x1d8(0x04)
	bool bEnsureDetachNotObstructed; // 0x1dc(0x01)
	bool bEnsureMannableNotObstructed; // 0x1dd(0x01)
	char pad_1DE[0x2]; // 0x1de(0x02)
	struct FMistComponentReference ObstructionCheckComponentRef; // 0x1e0(0x28)
	bool bUnmannedByExplosives; // 0x208(0x01)
	bool bUnmannedByMobs; // 0x209(0x01)
	char pad_20A[0x6]; // 0x20a(0x06)
	struct AActor* SiegePodActor; // 0x210(0x08)
	struct FViewTargetTransitionParams CameraInTransitionParams; // 0x218(0x10)
	struct FViewTargetTransitionParams CameraOutTransitionParams; // 0x228(0x10)
	struct FMulticastInlineDelegate OnPlayerEntered; // 0x238(0x10)
	struct FMulticastInlineDelegate OnPlayerLeft; // 0x248(0x10)
	bool bExperimentalBlueprintTrajectoryDraw; // 0x258(0x01)
	enum class EMistPerkAbility RequiredPerkForAiming; // 0x259(0x01)
	bool bUseSideLine; // 0x25a(0x01)
	char pad_25B[0x1]; // 0x25b(0x01)
	struct FColor AimingSideLineColor; // 0x25c(0x04)
	float AimingSideLineSize; // 0x260(0x04)
	bool bUseMeshBand; // 0x264(0x01)
	char pad_265[0x3]; // 0x265(0x03)
	struct FColor AimingMeshColor; // 0x268(0x04)
	bool bUseMainLine; // 0x26c(0x01)
	char pad_26D[0x3]; // 0x26d(0x03)
	struct FColor AimingMainLineColor; // 0x270(0x04)
	float AimingLineOffsetLeft; // 0x274(0x04)
	float AimingLineOffsetRight; // 0x278(0x04)
	int32_t ShowEveryNthStep; // 0x27c(0x04)
	int32_t ShowAfterNSteps; // 0x280(0x04)
	char pad_284[0x4]; // 0x284(0x04)
	struct FMannedControlPostPhysicsTickFunction PostPhysicsTickFunction; // 0x288(0x30)
	char pad_2B8[0x28]; // 0x2b8(0x28)
	struct AMistCharacter* ControllingCharacter; // 0x2e0(0x08)
	struct UInputComponent* InputComponent; // 0x2e8(0x08)
	char pad_2F0[0x40]; // 0x2f0(0x40)

	void ServerExit(); // Function Mist.MistMannedControlComponent.ServerExit // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x108bfd0
	void ReceiveTrajectoryDraw(struct FVector InStartLocation, struct FVector InStartVelocity, bool bMirrored, int32_t LineIndex); // Function Mist.MistMannedControlComponent.ReceiveTrajectoryDraw // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerLeft(struct AMistCharacter* Player); // Function Mist.MistMannedControlComponent.ReceivePlayerLeft // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerEntered(struct AMistCharacter* Player); // Function Mist.MistMannedControlComponent.ReceivePlayerEntered // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void PlayerEnteredLeftEvent__DelegateSignature(struct AMistCharacter* Player); // DelegateFunction Mist.MistMannedControlComponent.PlayerEnteredLeftEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_ControllingCharacter(struct AMistCharacter* PrevControllingCharacter); // Function Mist.MistMannedControlComponent.OnRep_ControllingCharacter // (Final|Native|Private) // @ game+0x1133c60
	void HandleInteractQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& InOutProperties, struct FMistInteractionQuery& InOutQuery); // Function Mist.MistMannedControlComponent.HandleInteractQuery // (Native|Protected|HasOutParms) // @ game+0x1133610
	void HandleInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistMannedControlComponent.HandleInteract // (Native|Protected|HasOutParms) // @ game+0x1133530
	struct AMistCharacter* GetControllingCharacter(); // Function Mist.MistMannedControlComponent.GetControllingCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1133500
};

// Class Mist.MistMannedGimbalControlComponent
// Size: 0x598 (Inherited: 0x330)
struct UMistMannedGimbalControlComponent : UMistMannedControlComponent {
	struct FMulticastInlineDelegate OnPitchTurnBegin; // 0x330(0x10)
	struct FMulticastInlineDelegate OnPitchTurnEnd; // 0x340(0x10)
	struct FMulticastInlineDelegate OnYawTurnBegin; // 0x350(0x10)
	struct FMulticastInlineDelegate OnYawTurnEnd; // 0x360(0x10)
	struct FMulticastInlineDelegate OnRollTurnBegin; // 0x370(0x10)
	struct FMulticastInlineDelegate OnRollTurnEnd; // 0x380(0x10)
	struct FRotator MaxRotationSpeed; // 0x390(0x0c)
	struct FRotator MinCameraRotation; // 0x39c(0x0c)
	struct FRotator MaxCameraRotation; // 0x3a8(0x0c)
	struct FRotator MinTargetRotation; // 0x3b4(0x0c)
	struct FRotator MaxTargetRotation; // 0x3c0(0x0c)
	struct FRotator CameraOffset; // 0x3cc(0x0c)
	struct FRotator ClientInterpolationIgnoreThreshold; // 0x3d8(0x0c)
	struct FRotator ClientInterpolationSnapThreshold; // 0x3e4(0x0c)
	struct FRotator ClientInterpolationMinSpeed; // 0x3f0(0x0c)
	struct FRotator ClientInterpolationMaxSpeed; // 0x3fc(0x0c)
	struct FMistComponentReference PitchComponentRef; // 0x408(0x28)
	struct FMistComponentReference YawComponentRef; // 0x430(0x28)
	struct FMistComponentReference RollComponentRef; // 0x458(0x28)
	struct FMistComponentReference CameraSpringArmRef; // 0x480(0x28)
	bool bPitchCamera; // 0x4a8(0x01)
	bool bYawCamera; // 0x4a9(0x01)
	enum class EMistGimbalControlType PitchControl; // 0x4aa(0x01)
	enum class EMistGimbalControlType YawControl; // 0x4ab(0x01)
	enum class EMistGimbalControlRollType RollControl; // 0x4ac(0x01)
	bool bEnterUsesControlRotation; // 0x4ad(0x01)
	bool bExitUsesControlRotation; // 0x4ae(0x01)
	bool bAllowPrecisionMode; // 0x4af(0x01)
	float PrecisionModeMod; // 0x4b0(0x04)
	float ResetCameraMaxDelayInSec; // 0x4b4(0x04)
	enum class EMistPerkAbility PrecisionModePerk; // 0x4b8(0x01)
	bool bUseWalkerAmmoContainers; // 0x4b9(0x01)
	bool bFixPitchOnManFailed; // 0x4ba(0x01)
	bool bFixYawOnManFailed; // 0x4bb(0x01)
	bool bFixRollOnManFailed; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	float OrientationDifferenceThresholdToFailManning; // 0x4c0(0x04)
	struct FRotator FixOrientationOnManFailedOffset; // 0x4c4(0x0c)
	bool bUndoPitchRotationOnInvalidPosition; // 0x4d0(0x01)
	bool bUndoYawRotationOnInvalidPosition; // 0x4d1(0x01)
	bool bUndoRollRotationOnInvalidPosition; // 0x4d2(0x01)
	enum class EMistControllableManningSide ControllableManningSide; // 0x4d3(0x01)
	struct FRotator TargetRotation; // 0x4d4(0x0c)
	struct FRotator CurrentRotation; // 0x4e0(0x0c)
	char pad_4EC[0xc]; // 0x4ec(0x0c)
	struct FRotator CurrentRotationSpeed; // 0x4f8(0x0c)
	char pad_504[0x7d]; // 0x504(0x7d)
	bool bIsInPrecisionMode; // 0x581(0x01)
	char pad_582[0x6]; // 0x582(0x06)
	struct AMistCharacter* PendingManningCharacter; // 0x588(0x08)
	char pad_590[0x8]; // 0x590(0x08)

	void ServerSetTargetRotationWithPrecision(struct FRotator InValue, bool bInPrecisionMode); // Function Mist.MistMannedGimbalControlComponent.ServerSetTargetRotationWithPrecision // (Net|Native|Event|Protected|NetServer|HasDefaults) // @ game+0x1133f50
	void ServerSetTargetRotation(struct FRotator InValue); // Function Mist.MistMannedGimbalControlComponent.ServerSetTargetRotation // (Net|Native|Event|Protected|NetServer|HasDefaults) // @ game+0x1133ed0
	void RotationEvent__DelegateSignature(struct UMistMannedGimbalControlComponent* Sender); // DelegateFunction Mist.MistMannedGimbalControlComponent.RotationEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_TargetRotation(); // Function Mist.MistMannedGimbalControlComponent.OnRep_TargetRotation // (Final|Native|Private) // @ game+0x1133db0
	void OnRep_CurrentRotation(struct FRotator& PrevCurrentRotation); // Function Mist.MistMannedGimbalControlComponent.OnRep_CurrentRotation // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1133ce0
	void OnProjectileImpact__DelegateSignature(struct FHitResult& HitResult); // DelegateFunction Mist.MistMannedGimbalControlComponent.OnProjectileImpact__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
	void HandleProjectileImpact(struct AMistProjectile* Projectile, struct FHitResult& HitResult, struct FVector& Velocity); // Function Mist.MistMannedGimbalControlComponent.HandleProjectileImpact // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x11339e0
	void ClientNotifyProjectileImpact(struct FHitResult HitResult); // Function Mist.MistMannedGimbalControlComponent.ClientNotifyProjectileImpact // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1133440
};

// Class Mist.MistBattleFanComponent
// Size: 0x828 (Inherited: 0x598)
struct UMistBattleFanComponent : UMistMannedGimbalControlComponent {
	struct FMulticastInlineDelegate OnStoredEffectChanged; // 0x598(0x10)
	bool bShowDebugForBattleFanValues; // 0x5a8(0x01)
	char pad_5A9[0x3]; // 0x5a9(0x03)
	float HeatingTime; // 0x5ac(0x04)
	float HeatingSpeedIncreaseRatio; // 0x5b0(0x04)
	float HeatingSpeedResetTime; // 0x5b4(0x04)
	float CoolingTime; // 0x5b8(0x04)
	float OverheatedCoolingTimePenaltyScale; // 0x5bc(0x04)
	float MaxWindPowerReachTime; // 0x5c0(0x04)
	float ZeroWindPowerReachTime; // 0x5c4(0x04)
	float MaxWindPower; // 0x5c8(0x04)
	char pad_5CC[0x4]; // 0x5cc(0x04)
	struct UCurveFloat* WindPowerDistanceScalingCurve; // 0x5d0(0x08)
	float SuperChargeTime; // 0x5d8(0x04)
	float SuperBlowDuration; // 0x5dc(0x04)
	float SuperBlowTime; // 0x5e0(0x04)
	char pad_5E4[0x4]; // 0x5e4(0x04)
	struct UCurveFloat* SuperChargeDistanceScalingCurve; // 0x5e8(0x08)
	float SuperChargePower; // 0x5f0(0x04)
	float SuperChargeLavaDamage; // 0x5f4(0x04)
	struct UDamageType* SuperChargeLavaDamageType; // 0x5f8(0x08)
	int32_t SuperChargeTorqueCost; // 0x600(0x04)
	int32_t SuperChargeLavaCost; // 0x604(0x04)
	float SuperChargeTimeForWindTargets; // 0x608(0x04)
	float SuperChargePowerForWindTargets; // 0x60c(0x04)
	float SuperChargePowerOnCollectedGasses; // 0x610(0x04)
	float SuperChargeTimeOnCollectedGasses; // 0x614(0x04)
	float SuperSuckTime; // 0x618(0x04)
	float SuperSuckChargeTime; // 0x61c(0x04)
	float SuperSuckPower; // 0x620(0x04)
	int32_t NumberOfGasesToAddEffect; // 0x624(0x04)
	float WalkerBoostAcceleration; // 0x628(0x04)
	float GasDissolvingDistance; // 0x62c(0x04)
	float SpawnedEffectDistance; // 0x630(0x04)
	char pad_634[0x4]; // 0x634(0x04)
	struct FMistComponentReference ShapeComponentReference; // 0x638(0x28)
	struct FMistComponentReference TorqueContainerReference; // 0x660(0x28)
	struct FMistComponentReference LavaContainerReference; // 0x688(0x28)
	struct FMistComponentReference GasContainerReference; // 0x6b0(0x28)
	float MaxBlowAffectingDistance; // 0x6d8(0x04)
	float MaxSuperBlowAffectingDistance; // 0x6dc(0x04)
	float MaxSuckAffectingDistance; // 0x6e0(0x04)
	bool bUncharging; // 0x6e4(0x01)
	char pad_6E5[0x3]; // 0x6e5(0x03)
	struct FMulticastInlineDelegate OnSuperBlow; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnSuperBlowWithLava; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnSuperBlowWithGas; // 0x708(0x10)
	struct FMulticastInlineDelegate OnSuperSuck; // 0x718(0x10)
	struct AMistAreaEffect* StoredEffectClass; // 0x728(0x08)
	enum class EMistBattleFanState BattleFanState; // 0x730(0x01)
	char pad_731[0x7]; // 0x731(0x07)
	float CurrentOverheatValue; // 0x738(0x04)
	float CurrentWindPower; // 0x73c(0x04)
	float CurrentSuperChargeProgress; // 0x740(0x04)
	char pad_744[0x4]; // 0x744(0x04)
	float CurrentSuperSuckProgress; // 0x748(0x04)
	char pad_74C[0x14]; // 0x74c(0x14)
	int32_t StoredEffectCount; // 0x760(0x04)
	char pad_764[0xa4]; // 0x764(0xa4)
	struct UShapeComponent* ShapeComponent; // 0x808(0x08)
	struct UMistTorqueContainerComponent* TorqueContainer; // 0x810(0x08)
	struct UMistContainerComponent* LavaContainer; // 0x818(0x08)
	char pad_820[0x8]; // 0x820(0x08)

	void StoredEffectChanged__DelegateSignature(struct AMistAreaEffect* EffectClass); // DelegateFunction Mist.MistBattleFanComponent.StoredEffectChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ServerSuperChargeEnd(); // Function Mist.MistBattleFanComponent.ServerSuperChargeEnd // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a41d0
	void ServerSuperChargeBegin(); // Function Mist.MistBattleFanComponent.ServerSuperChargeBegin // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a41b0
	void ServerChangeDirectionEnd(); // Function Mist.MistBattleFanComponent.ServerChangeDirectionEnd // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a4190
	void ServerChangeDirectionBegin(); // Function Mist.MistBattleFanComponent.ServerChangeDirectionBegin // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a4170
	void ServerBlowAirEnd(); // Function Mist.MistBattleFanComponent.ServerBlowAirEnd // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a4150
	void ServerBlowAirBegin(); // Function Mist.MistBattleFanComponent.ServerBlowAirBegin // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a4130
	void MulticastUpdateSuckedEffects(struct AMistAreaEffect* NewEffectClass, int32_t NewNumberOfSuckedEffects); // Function Mist.MistBattleFanComponent.MulticastUpdateSuckedEffects // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a3d30
	void MulticastSuperSuck(); // Function Mist.MistBattleFanComponent.MulticastSuperSuck // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a3d10
	void MulticastSuperBlowWithLava(); // Function Mist.MistBattleFanComponent.MulticastSuperBlowWithLava // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a3cf0
	void MulticastSuperBlowWithGas(); // Function Mist.MistBattleFanComponent.MulticastSuperBlowWithGas // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a3cd0
	void MulticastSuperBlow(); // Function Mist.MistBattleFanComponent.MulticastSuperBlow // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a3cb0
	void MulticastChangeBattleFanState(enum class EMistBattleFanState NewState); // Function Mist.MistBattleFanComponent.MulticastChangeBattleFanState // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a3c30
	void HandleTargetComponentDestroyed(struct UActorComponent* DestroyedComponent); // Function Mist.MistBattleFanComponent.HandleTargetComponentDestroyed // (Final|Native|Private) // @ game+0x10a35f0
	void HandleTargetActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistBattleFanComponent.HandleTargetActorDestroyed // (Final|Native|Private) // @ game+0x10a35f0
	void HandleComponentEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistBattleFanComponent.HandleComponentEndTrigger // (Final|Native|Private) // @ game+0x10a3430
	void HandleComponentEndComponentTrigger(struct UPrimitiveComponent* TriggerComponent, struct UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex); // Function Mist.MistBattleFanComponent.HandleComponentEndComponentTrigger // (Final|Native|Private) // @ game+0x10a3330
	void HandleComponentBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistBattleFanComponent.HandleComponentBeginTrigger // (Final|Native|Private) // @ game+0x10a3270
	void HandleComponentBeginComponentTrigger(struct UPrimitiveComponent* TriggerComponent, struct UPrimitiveComponent* OtherComponent, int32_t OtherBodyIndex); // Function Mist.MistBattleFanComponent.HandleComponentBeginComponentTrigger // (Final|Native|Private) // @ game+0x10a3170
	struct AMistAreaEffect* GetLoadedAreaEffect(); // Function Mist.MistBattleFanComponent.GetLoadedAreaEffect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a2760
	void Event__DelegateSignature(); // DelegateFunction Mist.MistBattleFanComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ConsoleServerSuperSuckEnd(); // Function Mist.MistBattleFanComponent.ConsoleServerSuperSuckEnd // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a1a10
	void ConsoleServerSuperSuckBegin(); // Function Mist.MistBattleFanComponent.ConsoleServerSuperSuckBegin // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a19f0
};

// Class Mist.MistBattleFanEffectContainerWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistBattleFanEffectContainerWidget : UMistUIWidget {
	struct UImage* EffectImageWidget; // 0x2c0(0x08)
};

// Class Mist.MistBattleFanInventoryWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistBattleFanInventoryWidget : UMistBaseActorWidget {
	struct UMistContainerWidget* LavaContainerWidget; // 0x2c0(0x08)
	struct UMistContainerWidget* TorqueContainerWidget; // 0x2c8(0x08)
};

// Class Mist.MistBattleFanTargetInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistBattleFanTargetInterface : UInterface {
};

// Class Mist.MistBendingTree
// Size: 0x440 (Inherited: 0x3c0)
struct AMistBendingTree : AActor {
	struct UStaticMeshComponent* MeshComponent; // 0x3c0(0x08)
	struct UPhysicsConstraintComponent* ConstraintComponent; // 0x3c8(0x08)
	struct UBoxComponent* BoxComponent; // 0x3d0(0x08)
	char pad_3D8[0x8]; // 0x3d8(0x08)
	struct FQuat DamageRotation; // 0x3e0(0x10)
	float BendProgress; // 0x3f0(0x04)
	char pad_3F4[0xc]; // 0x3f4(0x0c)
	struct FTransform StartingTransform; // 0x400(0x30)
	float InertiaScale; // 0x430(0x04)
	float MassScale; // 0x434(0x04)
	float HealthScale; // 0x438(0x04)
	float FallAngle; // 0x43c(0x04)

	float GetAngle2(); // Function Mist.MistBendingTree.GetAngle2 // (Final|Native|Public|BlueprintCallable) // @ game+0x10a1ee0
	float GetAngle(); // Function Mist.MistBendingTree.GetAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x10a1f10
	void BroadcastSetAngularOffset(struct FQuat NewAngle); // Function Mist.MistBendingTree.BroadcastSetAngularOffset // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0x10a1710
	void BroadcastBreakConstraint(); // Function Mist.MistBendingTree.BroadcastBreakConstraint // (Net|NetReliableNative|Event|Public) // @ game+0x1096cb0
};

// Class Mist.MistMannedWalkerControlComponent
// Size: 0x600 (Inherited: 0x598)
struct UMistMannedWalkerControlComponent : UMistMannedGimbalControlComponent {
	bool bAlwaysSprint; // 0x598(0x01)
	char pad_599[0x3]; // 0x599(0x03)
	struct FVector2D Input; // 0x59c(0x08)
	bool bInputBrakes; // 0x5a4(0x01)
	char pad_5A5[0x3]; // 0x5a5(0x03)
	struct TArray<struct UMistRemoteBallistaControlComponent*> RemoteWeapons; // 0x5a8(0x10)
	float KeepInputAfterUnmanningTime; // 0x5b8(0x04)
	bool bAllowRemoteShooting; // 0x5bc(0x01)
	bool bAllowManningIfFlipped; // 0x5bd(0x01)
	char pad_5BE[0x2]; // 0x5be(0x02)
	struct AMistWalker* ControlledWalker; // 0x5c0(0x08)
	struct AMistCharacter* RemoteDrivingCharacter; // 0x5c8(0x08)
	char pad_5D0[0x8]; // 0x5d0(0x08)
	struct UMistWalkerSprintTorqueComponent* SprintComponent; // 0x5d8(0x08)
	char pad_5E0[0x20]; // 0x5e0(0x20)

	void ServerSetInput(struct FVector2D InValue, bool bBrakes, bool bSprinting, bool bAutoDrive); // Function Mist.MistMannedWalkerControlComponent.ServerSetInput // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x1137bd0
	void ServerLootItems(struct TArray<struct AMistDropBag*> Bags); // Function Mist.MistMannedWalkerControlComponent.ServerLootItems // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1137a60
	void ServerHarvestFoliage(struct TArray<struct FMistWalkerHarvestingPair> Pairs); // Function Mist.MistMannedWalkerControlComponent.ServerHarvestFoliage // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11379c0
	void ResetInput(); // Function Mist.MistMannedWalkerControlComponent.ResetInput // (Final|Native|Private) // @ game+0x11379a0
};

// Class Mist.MistBicycleWalkerControlComponent
// Size: 0x620 (Inherited: 0x600)
struct UMistBicycleWalkerControlComponent : UMistMannedWalkerControlComponent {
	float StaminaCost; // 0x600(0x04)
	float DefaultTorque; // 0x604(0x04)
	float SprintTorque; // 0x608(0x04)
	char pad_60C[0x10]; // 0x60c(0x10)
	bool bIsSprinting; // 0x61c(0x01)
	char pad_61D[0x3]; // 0x61d(0x03)

	void OnRep_IsSprinting(); // Function Mist.MistBicycleWalkerControlComponent.OnRep_IsSprinting // (Final|Native|Private) // @ game+0x10a3e00
	bool IsSprinting(); // Function Mist.MistBicycleWalkerControlComponent.IsSprinting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10a39c0
};

// Class Mist.MistRecipe
// Size: 0xb0 (Inherited: 0x30)
struct UMistRecipe : UPrimaryDataAsset {
	struct FText Name; // 0x30(0x18)
	struct UTexture2D* Icon; // 0x48(0x08)
	struct UMistUnlockableTreeItem* RequiredUnlockable; // 0x50(0x08)
	struct TMap<struct UMistItemTemplate*, int32_t> Inputs; // 0x58(0x50)
	int32_t ExperienceReward; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Mist.MistBlueprint
// Size: 0x100 (Inherited: 0xb0)
struct UMistBlueprint : UMistRecipe {
	struct TMap<struct UMistItemTemplate*, int32_t> Outputs; // 0xb0(0x50)
};

// Class Mist.MistBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMistBlueprintLibrary : UBlueprintFunctionLibrary {

	void TriggerTutorialEvent(struct UObject* WorldContextObject, struct FName EventName, struct AMistOasisPlayerState* UpdatedPlayer); // Function Mist.MistBlueprintLibrary.TriggerTutorialEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a4880
	void TriggerDelayedTutorialEvent(struct UObject* WorldContextObject, struct FName EventName, int32_t Delay, struct AMistOasisPlayerState* UpdatedPlayer); // Function Mist.MistBlueprintLibrary.TriggerDelayedTutorialEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a4750
	void SpawnParticleEmitter(struct UObject* WorldContextObject, struct UParticleSystem* System, struct FTransform& Transform); // Function Mist.MistBlueprintLibrary.SpawnParticleEmitter // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10a4600
	void SpawnLootInWorld(struct FMistLootDesc& Loot, struct UObject* WorldContextObject, struct FTransform& Transform, int32_t Iterations, bool bUseClaim); // Function Mist.MistBlueprintLibrary.SpawnLootInWorld // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10a43f0
	void SpawnAndShootProjectileItem(struct UObject* WorldContextObject, struct UMistProjectileItemTemplate* ItemTemplateClass, struct FVector& Location, struct FRotator& Rotation, float OverrideInitialSpeed, struct APawn* Instigator); // Function Mist.MistBlueprintLibrary.SpawnAndShootProjectileItem // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10a41f0
	void PlaySoundEffect(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings); // Function Mist.MistBlueprintLibrary.PlaySoundEffect // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x10a3ea0
	bool ModifyAsset(struct UObject* Asset); // Function Mist.MistBlueprintLibrary.ModifyAsset // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a3ad0
	struct UObject* LoadAsset(struct TSoftObjectPtr<UObject>& ObjectReference); // Function Mist.MistBlueprintLibrary.LoadAsset // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a3a10
	bool IsUsingGamepad(); // Function Mist.MistBlueprintLibrary.IsUsingGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a39e0
	bool IsPIE(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.IsPIE // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a3940
	bool IsOnWalker(struct AMistCharacter* Character); // Function Mist.MistBlueprintLibrary.IsOnWalker // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a38c0
	bool IsInsideWorldBounds(struct UObject* WorldContextObject, struct FVector& Location); // Function Mist.MistBlueprintLibrary.IsInsideWorldBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10a37f0
	bool IsGUIEnabled(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.IsGUIEnabled // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a3670
	bool IsGrappled(struct AMistCharacter* Character); // Function Mist.MistBlueprintLibrary.IsGrappled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a3770
	bool IsGameWorld(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.IsGameWorld // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a36f0
	void GiveLootToCharacter(struct FMistLootDesc& Loot, struct AMistCharacter* Character, int32_t Iterations, bool bUseClaim); // Function Mist.MistBlueprintLibrary.GiveLootToCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a3000
	struct FBox GetWorldBounds(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.GetWorldBounds // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10a2f60
	struct UMistWeightMapCacheComponent* GetWeightMapCache(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.GetWeightMapCache // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a2ee0
	struct AMistWeatherSystem* GetWeatherSystem(struct UObject* WorldObjectContext); // Function Mist.MistBlueprintLibrary.GetWeatherSystem // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a2e60
	struct AMistWalker* GetWalkerForCharacter(struct AMistCharacter* Character); // Function Mist.MistBlueprintLibrary.GetWalkerForCharacter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a2de0
	struct UMistTutorialComponent* GetTutorialComponent(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.GetTutorialComponent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x10a2d30
	struct FVector GetTotalVelocity(struct AActor* Actor); // Function Mist.MistBlueprintLibrary.GetTotalVelocity // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10a2ca0
	struct AMistSceneManager* GetSceneManager(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.GetSceneManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a2c20
	void GetProceduralFoliageSpawnerMeshes(struct UObject* WorldConextObject, struct UProceduralFoliageSpawner* ProceduralFoliageSpawner, struct TArray<struct UStaticMesh*>& StaticMeshes); // Function Mist.MistBlueprintLibrary.GetProceduralFoliageSpawnerMeshes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10a2b00
	void GetPlayerControllerHiddenActors(struct APlayerController* PlayerController, struct TArray<struct AActor*>& HiddenActors); // Function Mist.MistBlueprintLibrary.GetPlayerControllerHiddenActors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10a2a20
	struct TArray<struct AMistPlayer*> GetNearbyPlayers(struct UObject* WorldContextObject, struct FVector& Location, float Range, bool bCheckHeight); // Function Mist.MistBlueprintLibrary.GetNearbyPlayers // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10a2870
	float GetMapFloorZForLocation(struct UObject* WorldContextObject, struct FVector& InLocation); // Function Mist.MistBlueprintLibrary.GetMapFloorZForLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10a27a0
	void GetLandscapeGrassTypes(struct UObject* WorldContextObject, struct ALandscapeProxy* LandscapeProxy, struct TArray<struct ULandscapeGrassType*>& GrassTypes); // Function Mist.MistBlueprintLibrary.GetLandscapeGrassTypes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x10a2640
	struct UVirtualLandscapeLayer* GetDominantLandscapeLayer(struct UObject* WorldContextObject, struct FVector& Location); // Function Mist.MistBlueprintLibrary.GetDominantLandscapeLayer // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x10a2560
	struct UMistTutorialQuest* GetCurrentTutorialQuest(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.GetCurrentTutorialQuest // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x10a24e0
	struct AMistLevelActor* GetCurrentLevel(struct UObject* WorldContextObject); // Function Mist.MistBlueprintLibrary.GetCurrentLevel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a2460
	bool GetCombatLandedHitEffects(enum class EPhysicalSurface InWeapon, enum class EPhysicalSurface InTarget, struct USoundCue*& OutSoundCue, float& OutThreshold1, float& OutThreshold2, float& OutThreshold3); // Function Mist.MistBlueprintLibrary.GetCombatLandedHitEffects // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a2260
	bool GetCombatHitObjectEffects(enum class EPhysicalSurface InWeapon, enum class EPhysicalSurface InTarget, bool bIsChambered, struct USoundCue*& OutSoundCue, struct UParticleSystem*& OutParticleEffect, float& OutVolume, struct UMaterialInstance*& OutDecal, struct FVector& OutDecalScale); // Function Mist.MistBlueprintLibrary.GetCombatHitObjectEffects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10a1fc0
	struct UObject* GetClassDefaultObject(struct UObject* Class); // Function Mist.MistBlueprintLibrary.GetClassDefaultObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a1f40
	struct TArray<struct UObject*> GetAllBlueprintAssetsOfClass(struct FString Path, struct UObject* Class); // Function Mist.MistBlueprintLibrary.GetAllBlueprintAssetsOfClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a1dc0
	void FindActorByClass(struct UObject* WorldContextObject, struct AActor* ActorClass, struct AActor*& OutResult); // Function Mist.MistBlueprintLibrary.FindActorByClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a1cc0
	void EvaluateLoot(struct FMistLootDesc& Loot, int32_t Iterations, struct TArray<struct FMistItemWithQuantity>& OutItems); // Function Mist.MistBlueprintLibrary.EvaluateLoot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a1b60
	struct USceneComponent* CreateAndAttachComponent(struct USceneComponent* ParentComponent, struct UObject* Class, struct UObject* Outer, struct FName Name); // Function Mist.MistBlueprintLibrary.CreateAndAttachComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a1a30
	bool CheckCategoryOrTemplate(struct UMistItemCategory* Category, struct UMistItemCategory* CategoryToCheck, struct UMistItemTemplate* Template, struct UMistItemTemplate* TemplateToCheck); // Function Mist.MistBlueprintLibrary.CheckCategoryOrTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a18c0
	bool CheckCategoryAndTemplate(struct UMistItemCategory* Category, struct UMistItemCategory* CategoryToCheck, struct UMistItemTemplate* Template, struct UMistItemTemplate* TemplateToCheck); // Function Mist.MistBlueprintLibrary.CheckCategoryAndTemplate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x10a1790
	void BroadcastMessageToPlayers(struct UObject* WorldContextObject, struct FText& Message, struct AActor* Source, float MaxDistance, bool bOnlySameClanAsSource); // Function Mist.MistBlueprintLibrary.BroadcastMessageToPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a1530
	void AddPlayerControllerHiddenComponent(struct APlayerController* PlayerController, struct UPrimitiveComponent* Component); // Function Mist.MistBlueprintLibrary.AddPlayerControllerHiddenComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a1480
	void AddPlayerControllerHiddenActor(struct APlayerController* PlayerController, struct AActor* Actor); // Function Mist.MistBlueprintLibrary.AddPlayerControllerHiddenActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x10a13d0
	void AddHudWarningLog(struct UObject* WorldContextObject, struct AMistPlayer* Player, struct FText& Text); // Function Mist.MistBlueprintLibrary.AddHudWarningLog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a1290
	void AddHudMessage(struct UObject* WorldContextObject, struct AMistPlayer* Player, struct FText& MessageText, bool bRequiresConfirmation); // Function Mist.MistBlueprintLibrary.AddHudMessage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a1100
	void AddHudLog(struct UObject* WorldContextObject, struct AMistPlayer* Player, struct FName& Type, struct FText& TextOverride); // Function Mist.MistBlueprintLibrary.AddHudLog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a0f60
	void AddHudInfoLog(struct UObject* WorldContextObject, struct AMistPlayer* Player, struct FText& Text); // Function Mist.MistBlueprintLibrary.AddHudInfoLog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a0e20
	void AddHudErrorLog(struct UObject* WorldContextObject, struct AMistPlayer* Player, struct FText& Text); // Function Mist.MistBlueprintLibrary.AddHudErrorLog // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a0ce0
	void AddHudCountdown(struct UObject* WorldContextObject, struct AMistPlayer* Player, struct FText& Text, float Seconds, bool bRemoveOnDeathOrRespawn); // Function Mist.MistBlueprintLibrary.AddHudCountdown // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x10a0b00
};

// Class Mist.MistBoardingPlankInteractableComponent
// Size: 0x2a0 (Inherited: 0x1f0)
struct UMistBoardingPlankInteractableComponent : UMistInteractableComponent {
	struct FMistComponentReference BoardingPlank; // 0x1f0(0x28)
	struct FMulticastInlineDelegate OnLowering; // 0x218(0x10)
	struct FMulticastInlineDelegate OnRaising; // 0x228(0x10)
	float RotationDuration; // 0x238(0x04)
	struct FRotator Target; // 0x23c(0x0c)
	struct USceneComponent* BoardingPlankComponent; // 0x248(0x08)
	enum class FMistBoardingPlankState State; // 0x250(0x01)
	char pad_251[0xf]; // 0x251(0x0f)
	struct FTransform InitialTransform; // 0x260(0x30)
	char pad_290[0x10]; // 0x290(0x10)

	void OnRep_State(); // Function Mist.MistBoardingPlankInteractableComponent.OnRep_State // (Final|Native|Private) // @ game+0x10a8480
};

// Class Mist.MistBoostContainerComponent
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistBoostContainerComponent : UMistContainerComponent {
	char pad_2E0[0x8]; // 0x2e0(0x08)
	int32_t MaxSlotStackSize; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
};

// Class Mist.MistBoostItemDetailsWidget
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMistBoostItemDetailsWidget : UMistItemDetailsWidget {
	struct UTextBlock* DetailsTextWidget; // 0x2e0(0x08)
};

// Class Mist.MistBoostItemTemplate
// Size: 0x1f0 (Inherited: 0x1d8)
struct UMistBoostItemTemplate : UMistItemTemplate {
	enum class EMistBoostType BoostType; // 0x1d8(0x01)
	char pad_1D9[0x3]; // 0x1d9(0x03)
	float PercentageIncreasePerItem; // 0x1dc(0x04)
	float AbsoluteIncreasePerItem; // 0x1e0(0x04)
	float MaximumPercentage; // 0x1e4(0x04)
	int32_t MaximumQuantity; // 0x1e8(0x04)
	char pad_1EC[0x4]; // 0x1ec(0x04)
};

// Class Mist.MistBorder
// Size: 0x278 (Inherited: 0x270)
struct UMistBorder : UBorder {
	struct FMistBrushStyle Style; // 0x270(0x08)
};

// Class Mist.MistBotControllableInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistBotControllableInterface : UInterface {
};

// Class Mist.MistBottleQuest
// Size: 0x110 (Inherited: 0x110)
struct UMistBottleQuest : UMistTutorialQuest {
};

// Class Mist.MistItemActor
// Size: 0x430 (Inherited: 0x3c0)
struct AMistItemActor : AActor {
	char pad_3C0[0x48]; // 0x3c0(0x48)
	struct FMistItem Item; // 0x408(0x18)
	int32_t Quantity; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct UMistItemTemplate* InitialItem; // 0x428(0x08)
};

// Class Mist.MistProjectile
// Size: 0x500 (Inherited: 0x430)
struct AMistProjectile : AMistItemActor {
	char pad_430[0x10]; // 0x430(0x10)
	struct UMistProjectileMovementComponent* MovementComponent; // 0x440(0x08)
	struct UStaticMeshComponent* MeshComponent; // 0x448(0x08)
	struct UBoxComponent* CombatTriggerShape; // 0x450(0x08)
	struct UBoxComponent* TriggererShape; // 0x458(0x08)
	struct UMistCollisionGroupComponent* CollisionGroupComponent; // 0x460(0x08)
	struct TArray<struct FMistToolTier> HarvestingToolInfo; // 0x468(0x10)
	float HitLifeSpan; // 0x478(0x04)
	char pad_47C[0x4]; // 0x47c(0x04)
	struct UCurveFloat* TimeInFlightDamageMod; // 0x480(0x08)
	struct UCurveFloat* VelocityDamageMod; // 0x488(0x08)
	struct UCurveFloat* TravelledDistanceDamageMod; // 0x490(0x08)
	bool bInheritVelocity; // 0x498(0x01)
	bool bHandThrown; // 0x499(0x01)
	bool bCheckForInitialImpact; // 0x49a(0x01)
	enum class EMistProjectilePostHitCollisionType PostHitCollisionType; // 0x49b(0x01)
	struct FName ComponentTagPenetratedByProjectile; // 0x49c(0x08)
	char pad_4A4[0x1c]; // 0x4a4(0x1c)
	struct FMulticastInlineDelegate OnImpact; // 0x4c0(0x10)
	char pad_4D0[0x4]; // 0x4d0(0x04)
	enum class EMistProjectileHitState HitState; // 0x4d4(0x04)
	char pad_4D8[0x28]; // 0x4d8(0x28)

	void Shoot(struct FVector& InitialVelocity); // Function Mist.MistProjectile.Shoot // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x117c2f0
	void ReceiveStop(struct FHitResult& ImpactResult); // Function Mist.MistProjectile.ReceiveStop // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveMovementComponentDestroyed(); // Function Mist.MistProjectile.ReceiveMovementComponentDestroyed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveImpact(struct FHitResult& HitResult, struct FVector& Velocity, struct UPhysicalMaterial* PhysMaterial); // Function Mist.MistProjectile.ReceiveImpact // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_HitState(); // Function Mist.MistProjectile.OnRep_HitState // (Final|Native|Private) // @ game+0x117c200
	void MulticastImpactDamage(struct AMistCharacter* ImpactCharacter, float Damage); // Function Mist.MistProjectile.MulticastImpactDamage // (Net|Native|Event|NetMulticast|Public) // @ game+0x117c130
	void ImpactEvent__DelegateSignature(struct AMistProjectile* Projectile, struct FHitResult& HitResult, struct FVector& Velocity); // DelegateFunction Mist.MistProjectile.ImpactEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms|HasDefaults) // @ game+0x163f1c0
	void HandleVirtualCollisionEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistProjectile.HandleVirtualCollisionEndTrigger // (Final|Native|Public) // @ game+0x117be30
	void HandleVirtualCollisionBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistProjectile.HandleVirtualCollisionBeginTrigger // (Final|Native|Public) // @ game+0x117bd70
	void HandleStop(struct FHitResult& ImpactResult); // Function Mist.MistProjectile.HandleStop // (Native|Protected|HasOutParms) // @ game+0x117bc90
	void HandlePreImpact(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // Function Mist.MistProjectile.HandlePreImpact // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x117b700
	void HandlePostImpact(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // Function Mist.MistProjectile.HandlePostImpact // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x117b5d0
	void HandleImpact(struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // Function Mist.MistProjectile.HandleImpact // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x117aff0
	void HandleFlyByCollisionComponentBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistProjectile.HandleFlyByCollisionComponentBeginTrigger // (Final|Native|Private) // @ game+0x117af30
};

// Class Mist.MistBoulderProjectile
// Size: 0x518 (Inherited: 0x500)
struct AMistBoulderProjectile : AMistProjectile {
	char pad_500[0x10]; // 0x500(0x10)
	struct UDamageType* DamageType; // 0x510(0x08)
};

// Class Mist.MistBringItemQuestGenerator
// Size: 0x90 (Inherited: 0x30)
struct UMistBringItemQuestGenerator : UMistBaseQuestGenerator {
	struct UDataTable* BringItemTable; // 0x30(0x08)
	enum class EFlotillaQuestDifficulty Difficulty; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t MinTargetTileDistance; // 0x3c(0x04)
	int32_t MaxTargetTileDistance; // 0x40(0x04)
	float BonusMultiplierForTravel; // 0x44(0x04)
	float BonusMultiplierPerTileDistance; // 0x48(0x04)
	float ProbabilityOfDifferentTileTarget; // 0x4c(0x04)
	bool bUseExpectedItemValueAsReward; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float ExpectedItemValueMultiplier; // 0x54(0x04)
	int32_t BaseFlotsReward; // 0x58(0x04)
	char pad_5C[0x34]; // 0x5c(0x34)
};

// Class Mist.MistBringItemsQuest
// Size: 0x70 (Inherited: 0x48)
struct UMistBringItemsQuest : UMistFlotillaQuest {
	struct UMistItemTemplate* Item; // 0x48(0x08)
	int32_t Amount; // 0x50(0x04)
	char pad_54[0x1c]; // 0x54(0x1c)
};

// Class Mist.MistPlayerComponent
// Size: 0x118 (Inherited: 0xf0)
struct UMistPlayerComponent : UActorComponent {
	char pad_F0[0x8]; // 0xf0(0x08)
	struct AMistPlayer* PlayerOwner; // 0xf8(0x08)
	struct AMistCharacter* CharacterOwner; // 0x100(0x08)
	struct UInputComponent* InputComponent; // 0x108(0x08)
	char pad_110[0x8]; // 0x110(0x08)
};

// Class Mist.MistPlayerEquipmentItemComponent
// Size: 0x128 (Inherited: 0x118)
struct UMistPlayerEquipmentItemComponent : UMistPlayerComponent {
	char pad_118[0x8]; // 0x118(0x08)
	enum class EEquipmentSlot Slot; // 0x120(0x01)
	enum class EEquipmentHand Hand; // 0x121(0x01)
	bool bRestrictInputToWielded; // 0x122(0x01)
	char pad_123[0x5]; // 0x123(0x05)

	void OnRep_Slot(enum class EEquipmentSlot PreviousSlot); // Function Mist.MistPlayerEquipmentItemComponent.OnRep_Slot // (Final|Native|Private) // @ game+0x116e210
	void OnRep_Hand(enum class EEquipmentHand PreviousHand); // Function Mist.MistPlayerEquipmentItemComponent.OnRep_Hand // (Final|Native|Private) // @ game+0x116e170
	void MulticastSetSlot(enum class EEquipmentSlot InSlot); // Function Mist.MistPlayerEquipmentItemComponent.MulticastSetSlot // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10f0b20
	void MulticastSetHand(enum class EEquipmentHand InHand); // Function Mist.MistPlayerEquipmentItemComponent.MulticastSetHand // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10f0ba0
};

// Class Mist.MistBrokenGrapplingHookComponent
// Size: 0x128 (Inherited: 0x128)
struct UMistBrokenGrapplingHookComponent : UMistPlayerEquipmentItemComponent {
};

// Class Mist.MistBrokenWormScale
// Size: 0x440 (Inherited: 0x3d0)
struct AMistBrokenWormScale : AStaticMeshActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	float Health; // 0x3d8(0x04)
	float MaxHealth; // 0x3dc(0x04)
	float Stiffness; // 0x3e0(0x04)
	float MaxStiffness; // 0x3e4(0x04)
	struct UStaticMesh* ScaleMesh; // 0x3e8(0x08)
	struct TArray<struct FMistFoliageHarvestingEntry> HarvestingItemGood; // 0x3f0(0x10)
	struct TArray<struct FMistFoliageHarvestingEntry> HarvestingItemBad; // 0x400(0x10)
	struct UMistDamageOverrideTable* BrokenWormScaleDamageOverride; // 0x410(0x08)
	float HarvestingDamage; // 0x418(0x04)
	char pad_41C[0x4]; // 0x41c(0x04)
	struct FText ScaleName; // 0x420(0x18)
	struct UTexture2D* ScaleIcon; // 0x438(0x08)

	void OnRep_WormScaleHealth(float PrevHealth); // Function Mist.MistBrokenWormScale.OnRep_WormScaleHealth // (Final|Native|Private) // @ game+0x10a84a0
};

// Class Mist.MistBTComposite_Randomizer
// Size: 0x90 (Inherited: 0x90)
struct UMistBTComposite_Randomizer : UBTCompositeNode {
};

// Class Mist.MistBTService_Calculate2DDistance
// Size: 0xe8 (Inherited: 0x70)
struct UMistBTService_Calculate2DDistance : UBTService {
	struct FBlackboardKeySelector OriginBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector TargetBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector DistanceBlackboardKey; // 0xc0(0x28)
};

// Class Mist.MistBTService_CheckAirObstacles
// Size: 0xc8 (Inherited: 0x70)
struct UMistBTService_CheckAirObstacles : UBTService {
	struct FBlackboardKeySelector TargetLocationBlackboardKey; // 0x70(0x28)
	float CheckAngle; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FBlackboardKeySelector IsPathObstructedBlackboardKey; // 0xa0(0x28)
};

// Class Mist.MistBTService_CheckAttackTargets
// Size: 0x98 (Inherited: 0x70)
struct UMistBTService_CheckAttackTargets : UBTService {
	struct FBlackboardKeySelector OutIsAttackPossible; // 0x70(0x28)
};

// Class Mist.MistBTService_CheckOnWalker
// Size: 0xc0 (Inherited: 0x70)
struct UMistBTService_CheckOnWalker : UBTService {
	struct FBlackboardKeySelector TargetBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector ResultBlackboardKey; // 0x98(0x28)
};

// Class Mist.MistBTService_CheckPatrolDistance
// Size: 0xe8 (Inherited: 0x70)
struct UMistBTService_CheckPatrolDistance : UBTService {
	struct FBlackboardKeySelector OriginBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector RadiusBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector TargetBlackboardKey; // 0xc0(0x28)
};

// Class Mist.MistBTService_CheckTargetReached
// Size: 0xd0 (Inherited: 0x70)
struct UMistBTService_CheckTargetReached : UBTService {
	struct FBlackboardKeySelector TargetBlackboardKey; // 0x70(0x28)
	enum class ETargetReachedConditionType ConditionType; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float DistanceCondition; // 0x9c(0x04)
	float HeightCondition; // 0xa0(0x04)
	bool bSetBlackboardValue; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FBlackboardKeySelector BlackboardValueToSet; // 0xa8(0x28)
};

// Class Mist.MistBTService_DelayedSetVar
// Size: 0xc8 (Inherited: 0x70)
struct UMistBTService_DelayedSetVar : UBTService {
	struct FBlackboardKeySelector VarToSetBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector CounterBlackboardKey; // 0x98(0x28)
	float BaseTime; // 0xc0(0x04)
	float RandPart; // 0xc4(0x04)
};

// Class Mist.MistBTService_FindTargetPlayer
// Size: 0xf0 (Inherited: 0x98)
struct UMistBTService_FindTargetPlayer : UBTService_BlackboardBase {
	struct FBlackboardKeySelector OriginBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector RadiusBlackboardKey; // 0xc0(0x28)
	float AggroThreshold; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
};

// Class Mist.MistBTService_IncreaseDamageIrritation
// Size: 0xe8 (Inherited: 0x70)
struct UMistBTService_IncreaseDamageIrritation : UBTService {
	struct FBlackboardKeySelector PrevHealthBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector IrritationLevelBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector MaxIrritationBlackboardKey; // 0xc0(0x28)
};

// Class Mist.MistBTService_KillinUpdateTargetAggro
// Size: 0x150 (Inherited: 0x98)
struct UMistBTService_KillinUpdateTargetAggro : UBTService_BlackboardBase {
	struct FBlackboardKeySelector IsAttacking; // 0x98(0x28)
	struct FBlackboardKeySelector OutAttackType; // 0xc0(0x28)
	struct FBlackboardKeySelector OutAggroValueBlackboardKey; // 0xe8(0x28)
	struct FBlackboardKeySelector AggroPivotPoint; // 0x110(0x28)
	float DeaggroDistanceFromPivot; // 0x138(0x04)
	float MinimumEngageAggro; // 0x13c(0x04)
	struct FVector2D TargetDistanceValueRange; // 0x140(0x08)
	float TargetClearDistance; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
};

// Class Mist.MistBTService_PlayersAbsentInRadius
// Size: 0xc8 (Inherited: 0x98)
struct UMistBTService_PlayersAbsentInRadius : UBTService_BlackboardBase {
	struct FBlackboardKeySelector RadiusKey; // 0x98(0x28)
	float Radius; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
};

// Class Mist.MistBTService_PredictTargetLocation
// Size: 0xd0 (Inherited: 0x70)
struct UMistBTService_PredictTargetLocation : UBTService {
	struct FBlackboardKeySelector TargetBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector BlackboardValueToSet; // 0x98(0x28)
	struct FVector TargetOffset; // 0xc0(0x0c)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Mist.MistBTService_UpdateBehavior
// Size: 0x70 (Inherited: 0x70)
struct UMistBTService_UpdateBehavior : UBTService {
};

// Class Mist.MistBTService_UpdateDamagedState
// Size: 0x118 (Inherited: 0x70)
struct UMistBTService_UpdateDamagedState : UBTService {
	struct FBlackboardKeySelector IsDamagedBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector PrevHealthBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector PrevDamagedTimeBlackboardKey; // 0xc0(0x28)
	struct FBlackboardKeySelector BadlyHurtBlackboardKey; // 0xe8(0x28)
	float DamagedPeriod; // 0x110(0x04)
	float BadlyHurtThreshold; // 0x114(0x04)
};

// Class Mist.MistBTService_UpdateTargetAggro
// Size: 0xe0 (Inherited: 0x98)
struct UMistBTService_UpdateTargetAggro : UBTService_BlackboardBase {
	struct FBlackboardKeySelector OutAggroValueBlackboardKey; // 0x98(0x28)
	float TargetMinAggro; // 0xc0(0x04)
	float TargetMaxDistance; // 0xc4(0x04)
	float TargetAddDistance; // 0xc8(0x04)
	float TargetClearDistance; // 0xcc(0x04)
	bool FavorWalkers; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct AActor* TargetClass; // 0xd8(0x08)
};

// Class Mist.MistBTService_UpdateTargetReachability
// Size: 0x138 (Inherited: 0x70)
struct UMistBTService_UpdateTargetReachability : UBTService {
	struct FBlackboardKeySelector TargetBlackboardKey; // 0x70(0x28)
	struct FBlackboardKeySelector IsReachableBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector IsSelfOnWalkerBlackboardKey; // 0xc0(0x28)
	struct FBlackboardKeySelector IsTargetOnWalkerBlackboardKey; // 0xe8(0x28)
	struct FBlackboardKeySelector IsTargetGrappledBlackboardKey; // 0x110(0x28)
};

// Class Mist.MistBTService_UpdateTethered
// Size: 0x98 (Inherited: 0x70)
struct UMistBTService_UpdateTethered : UBTService {
	struct FBlackboardKeySelector TetheredFlagBlackboardKey; // 0x70(0x28)
};

// Class Mist.MistBTTask_AnimalAttack
// Size: 0xa8 (Inherited: 0x98)
struct UMistBTTask_AnimalAttack : UBTTask_BlackboardBase {
	struct FName AnimationToPlay; // 0x98(0x08)
	bool bOrderByDamageLowest; // 0xa0(0x01)
	bool bForceResult; // 0xa1(0x01)
	enum class EBTNodeResult ForcedResult; // 0xa2(0x01)
	char pad_A3[0x5]; // 0xa3(0x05)
};

// Class Mist.MistBTTask_AttackPlayer
// Size: 0xc8 (Inherited: 0x98)
struct UMistBTTask_AttackPlayer : UBTTask_BlackboardBase {
	char pad_98[0x30]; // 0x98(0x30)
};

// Class Mist.MistBTTask_ChangeBehavior
// Size: 0x80 (Inherited: 0x70)
struct UMistBTTask_ChangeBehavior : UBTTaskNode {
	struct FName NewBTName; // 0x70(0x08)
	bool AcceptDefaultBT; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
};

// Class Mist.MistBTTask_ChangeTargetAggro
// Size: 0xa0 (Inherited: 0x98)
struct UMistBTTask_ChangeTargetAggro : UBTTask_BlackboardBase {
	float AggroDelta; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Mist.MistBTTask_DespawnPawn
// Size: 0x70 (Inherited: 0x70)
struct UMistBTTask_DespawnPawn : UBTTaskNode {
};

// Class Mist.MistBTTask_DropTether
// Size: 0x98 (Inherited: 0x98)
struct UMistBTTask_DropTether : UBTTask_BlackboardBase {
};

// Class Mist.MistBTTask_EquipAmmo
// Size: 0x98 (Inherited: 0x98)
struct UMistBTTask_EquipAmmo : UBTTask_BlackboardBase {
};

// Class Mist.MistBTTask_EquipAmmoToBot
// Size: 0xc0 (Inherited: 0x98)
struct UMistBTTask_EquipAmmoToBot : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector ControlComponentKey; // 0x98(0x28)
};

// Class Mist.MistBTTask_FindGround
// Size: 0xa0 (Inherited: 0x98)
struct UMistBTTask_FindGround : UBTTask_BlackboardBase {
	float CheckDistance; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Mist.MistBTTask_FindInAirLocation
// Size: 0x128 (Inherited: 0x98)
struct UMistBTTask_FindInAirLocation : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector TargetBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector OriginBlackboardKey; // 0xc0(0x28)
	struct FBlackboardKeySelector RadiusBlackboardKey; // 0xe8(0x28)
	float Radius; // 0x110(0x04)
	float MaxDistance; // 0x114(0x04)
	float MinHeight; // 0x118(0x04)
	float HeightRand; // 0x11c(0x04)
	float TargetPositionPredictTime; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
};

// Class Mist.MistBTTask_FindLocationInRadius
// Size: 0xf0 (Inherited: 0x98)
struct UMistBTTask_FindLocationInRadius : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector OriginBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector RadiusBlackboardKey; // 0xc0(0x28)
	float Radius; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
};

// Class Mist.MistBTTask_FindTargetPlayer
// Size: 0xc0 (Inherited: 0x98)
struct UMistBTTask_FindTargetPlayer : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector AggroRadiusBlackboardKey; // 0x98(0x28)
};

// Class Mist.MistBTTask_FinishBehavior
// Size: 0x78 (Inherited: 0x70)
struct UMistBTTask_FinishBehavior : UBTTaskNode {
	bool bSuccess; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
};

// Class Mist.MistBTTask_FollowMovementTrajectory
// Size: 0x198 (Inherited: 0x98)
struct UMistBTTask_FollowMovementTrajectory : UBTTask_BlackboardBase {
	enum class EMovementTrajectoryType TrajectoryType; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FBlackboardKeySelector TargetLocation; // 0xa0(0x28)
	struct FBlackboardKeySelector IsPathObstructed; // 0xc8(0x28)
	struct FBlackboardKeySelector ResultValue; // 0xf0(0x28)
	struct FBlackboardKeySelector PreferTargetApproachDirection; // 0x118(0x28)
	struct FBlackboardKeySelector TargetApproachDirection; // 0x140(0x28)
	float ObstructionCheckFrequency; // 0x168(0x04)
	float ObstructionCheckDistance; // 0x16c(0x04)
	int32_t TrajectoryPointsNum; // 0x170(0x04)
	int32_t TrajectoryStartDistance; // 0x174(0x04)
	struct FVector2D TargetLocationOffset; // 0x178(0x08)
	float PatrolZoneRadius; // 0x180(0x04)
	int32_t PatrolLoops; // 0x184(0x04)
	int32_t PointsPerLoop; // 0x188(0x04)
	float HeightOffset; // 0x18c(0x04)
	bool bContinuouslyAdjustTrajectory; // 0x190(0x01)
	bool bForceResult; // 0x191(0x01)
	enum class EBTNodeResult ForcedResult; // 0x192(0x01)
	char pad_193[0x5]; // 0x193(0x05)
};

// Class Mist.MistBTTask_FollowPatrolPath
// Size: 0xd0 (Inherited: 0x98)
struct UMistBTTask_FollowPatrolPath : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector PatrolZoneCenter; // 0x98(0x28)
	float PatrolZoneRadius; // 0xc0(0x04)
	int32_t PatrolLoops; // 0xc4(0x04)
	int32_t PointsPerLoop; // 0xc8(0x04)
	bool bForceResult; // 0xcc(0x01)
	enum class EBTNodeResult ForcedResult; // 0xcd(0x01)
	char pad_CE[0x2]; // 0xce(0x02)
};

// Class Mist.MistBTTask_ForcedAnimAction
// Size: 0xb8 (Inherited: 0x98)
struct UMistBTTask_ForcedAnimAction : UBTTask_BlackboardBase {
	struct UAnimMontage* MontageToPlay; // 0x98(0x08)
	float ForceScale; // 0xa0(0x04)
	char pad_A4[0x4]; // 0xa4(0x04)
	struct UCurveFloat* FwdForce; // 0xa8(0x08)
	struct UCurveFloat* UpForce; // 0xb0(0x08)
};

// Class Mist.MistBTTask_GenerateMovementSegment
// Size: 0x148 (Inherited: 0x98)
struct UMistBTTask_GenerateMovementSegment : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector InTargetPointBlackboardKey; // 0x98(0x28)
	struct FBlackboardKeySelector OutIdleTimeBlackboardKey; // 0xc0(0x28)
	struct FBlackboardKeySelector OutMovementTargetBlackboardKey; // 0xe8(0x28)
	float SegmentLength; // 0x110(0x04)
	float MaxHeightDifference; // 0x114(0x04)
	float SegmentLengthVariation; // 0x118(0x04)
	float TargetPatrollRadius; // 0x11c(0x04)
	float MaxRandomTurnAngle; // 0x120(0x04)
	float MaxAngleDeviationFromTarget; // 0x124(0x04)
	float PathCheckMult; // 0x128(0x04)
	float PathCheckRandomStepHeight; // 0x12c(0x04)
	bool TripleRayCheck; // 0x130(0x01)
	char pad_131[0x17]; // 0x131(0x17)
};

// Class Mist.MistBTTask_JumpTo
// Size: 0xd0 (Inherited: 0x98)
struct UMistBTTask_JumpTo : UBTTask_BlackboardBase {
	bool bAllowUngrapplingPlayers; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
	struct FBlackboardKeySelector BackLocation; // 0xa0(0x28)
	float BackDistance; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)
};

// Class Mist.MistBTTask_KillinGrab
// Size: 0x108 (Inherited: 0x98)
struct UMistBTTask_KillinGrab : UBTTask_BlackboardBase {
	struct FName AnimationToPlay; // 0x98(0x08)
	bool bForceResult; // 0xa0(0x01)
	char pad_A1[0x3]; // 0xa1(0x03)
	struct FName AttachBoneName; // 0xa4(0x08)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FBlackboardKeySelector OutIsCarryingBlackboardKey; // 0xb0(0x28)
	struct FBlackboardKeySelector OutCarriedActorBlackboardKey; // 0xd8(0x28)
	enum class EBTNodeResult ForcedResult; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
};

// Class Mist.MistBTTask_ManWeapon
// Size: 0x98 (Inherited: 0x98)
struct UMistBTTask_ManWeapon : UBTTask_BlackboardBase {
};

// Class Mist.MistBTTask_PerformPhysicalRootMotion
// Size: 0xb0 (Inherited: 0x98)
struct UMistBTTask_PerformPhysicalRootMotion : UBTTask_BlackboardBase {
	struct UAnimMontage* MontageToPlay; // 0x98(0x08)
	struct FVector ForceScale; // 0xa0(0x0c)
	char pad_AC[0x4]; // 0xac(0x04)
};

// Class Mist.MistBTTask_PerformRangedAttack
// Size: 0x110 (Inherited: 0x98)
struct UMistBTTask_PerformRangedAttack : UBTTask_BlackboardBase {
	struct UAnimMontage* AnimationToPlay; // 0x98(0x08)
	struct FVector AimOffset; // 0xa0(0x0c)
	float Deviation; // 0xac(0x04)
	struct AMistProjectile* ProjectileClass; // 0xb0(0x08)
	struct FBlackboardKeySelector ProjectileKey; // 0xb8(0x28)
	struct UBehaviorTreeComponent* MyOwnerComp; // 0xe0(0x08)
	char pad_E8[0x28]; // 0xe8(0x28)

	void HandleMontageInterrupted(struct UAnimMontage* Montage, bool bInterrupted); // Function Mist.MistBTTask_PerformRangedAttack.HandleMontageInterrupted // (Final|Native|Private) // @ game+0x10abe30
};

// Class Mist.MistBTTask_PlayMontage
// Size: 0xa8 (Inherited: 0x70)
struct UMistBTTask_PlayMontage : UBTTaskNode {
	struct UAnimMontage* AnimationToPlay; // 0x70(0x08)
	char bLooping : 1; // 0x78(0x01)
	char bNonBlocking : 1; // 0x78(0x01)
	char pad_78_2 : 6; // 0x78(0x01)
	char pad_79[0x3]; // 0x79(0x03)
	enum class EBTNodeResult ForcedResult; // 0x7c(0x01)
	char pad_7D[0x3]; // 0x7d(0x03)
	struct UBehaviorTreeComponent* MyOwnerComp; // 0x80(0x08)
	struct USkeletalMeshComponent* CachedSkelMesh; // 0x88(0x08)
	char pad_90[0x18]; // 0x90(0x18)
};

// Class Mist.MistBTTask_RegenerateHealth
// Size: 0x78 (Inherited: 0x70)
struct UMistBTTask_RegenerateHealth : UBTTaskNode {
	float TimeToFullyRegen; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
};

// Class Mist.MistBTTask_ResetCombatState
// Size: 0x70 (Inherited: 0x70)
struct UMistBTTask_ResetCombatState : UBTTaskNode {
};

// Class Mist.MistBTTask_ResetTarget
// Size: 0x98 (Inherited: 0x98)
struct UMistBTTask_ResetTarget : UBTTask_BlackboardBase {
};

// Class Mist.MistBTTask_RunFromTarget
// Size: 0xc8 (Inherited: 0x98)
struct UMistBTTask_RunFromTarget : UBTTask_BlackboardBase {
	float DistanceToRun; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct FBlackboardKeySelector OutGoalLocationBlackboardKey; // 0xa0(0x28)
};

// Class Mist.MistBTTask_SetSprinting
// Size: 0xa0 (Inherited: 0x98)
struct UMistBTTask_SetSprinting : UBTTask_BlackboardBase {
	bool Enable; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Mist.MistBTTask_Shoot
// Size: 0xc0 (Inherited: 0x98)
struct UMistBTTask_Shoot : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector BotControllableKey; // 0x98(0x28)
};

// Class Mist.MistBTTask_Taunt
// Size: 0xa0 (Inherited: 0x98)
struct UMistBTTask_Taunt : UBTTask_BlackboardBase {
	float Chance; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
};

// Class Mist.MistBTTask_TeherBallista
// Size: 0xc8 (Inherited: 0x98)
struct UMistBTTask_TeherBallista : UBTTask_BlackboardBase {
	struct FBlackboardKeySelector BotControllable; // 0x98(0x28)
	float TetheringTime; // 0xc0(0x04)
	float TetheringTimeDeviation; // 0xc4(0x04)
};

// Class Mist.MistBTTask_ThrowNet
// Size: 0xf0 (Inherited: 0x98)
struct UMistBTTask_ThrowNet : UBTTask_BlackboardBase {
	char pad_98[0x8]; // 0x98(0x08)
	struct UAnimMontage* AnimationToPlay; // 0xa0(0x08)
	struct FBlackboardKeySelector ProjectileKey; // 0xa8(0x28)
	struct UBehaviorTreeComponent* MyOwnerComp; // 0xd0(0x08)
	char pad_D8[0x18]; // 0xd8(0x18)
};

// Class Mist.MistBTTask_UpdateBehavior
// Size: 0x70 (Inherited: 0x70)
struct UMistBTTask_UpdateBehavior : UBTTaskNode {
};

// Class Mist.MistBuildingComponent
// Size: 0x330 (Inherited: 0x118)
struct UMistBuildingComponent : UMistPlayerComponent {
	char pad_118[0x8]; // 0x118(0x08)
	struct FMulticastInlineDelegate OnItemBuilt; // 0x120(0x10)
	char pad_130[0x18]; // 0x130(0x18)
	struct UMaterialInterface* PlacementMaterial; // 0x148(0x08)
	struct FLinearColor PlaceableColor; // 0x150(0x10)
	struct FLinearColor UnplaceableColor; // 0x160(0x10)
	struct UMaterialInstanceDynamic* PlacementMaterialInstance; // 0x170(0x08)
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0x178(0x08)
	int32_t TargetQuality; // 0x180(0x04)
	char pad_184[0xc]; // 0x184(0x0c)
	struct FMistPlacementState PlacementState; // 0x190(0x50)
	struct FMistPlacementSnapState SnapState; // 0x1e0(0x70)
	char pad_250[0x30]; // 0x250(0x30)
	struct UMistStructureRenamingScreen* StructureRenamingScreen; // 0x280(0x08)
	struct UMistStructureCustomizationWidget* CustomizationWidget; // 0x288(0x08)
	struct AMistPlacementPreviewActor* PlacementActor; // 0x290(0x08)
	char pad_298[0x98]; // 0x298(0x98)

	void ServerRenameStructure(struct AMistStructurePart* Structure, struct FString NewCustomName); // Function Mist.MistBuildingComponent.ServerRenameStructure // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10ac400
	void ServerPlace(struct UMistPlaceableTemplate* InPlaceableTemplate, int32_t InTargetQuality, struct FMistPlacementState InPlacementState, struct FMistPlacementSnapState InSnapState); // Function Mist.MistBuildingComponent.ServerPlace // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10ac210
	void ServerDisassemble(struct AActor* Placeable, int32_t ItemIndex); // Function Mist.MistBuildingComponent.ServerDisassemble // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10ac140
	void ClientSetStructureCustomNameValidationFailed(struct FMistInvalidNameData Data); // Function Mist.MistBuildingComponent.ClientSetStructureCustomNameValidationFailed // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10ab900
	void BuildingEvent__DelegateSignature(struct UMistPlaceableTemplate* PlaceableTemplate, struct AActor* PlacedActor); // DelegateFunction Mist.MistBuildingComponent.BuildingEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistBuildingHintsWidget
// Size: 0x328 (Inherited: 0x2c0)
struct UMistBuildingHintsWidget : UMistUIWidget {
	struct UWidget* CycleSnappingWidget; // 0x2c0(0x08)
	struct UWidget* ToggleSnappingWidget; // 0x2c8(0x08)
	struct UWidget* RaiseWidget; // 0x2d0(0x08)
	struct UWidget* LowerWidget; // 0x2d8(0x08)
	struct UMistInputBindingHintWidget* PlaceIconWidget; // 0x2e0(0x08)
	struct UMistInputBindingHintWidget* CancelIconWidget; // 0x2e8(0x08)
	struct UMistInputBindingHintWidget* RotateIconWidget; // 0x2f0(0x08)
	struct UMistInputBindingHintWidget* CycleSnappingIconWidget; // 0x2f8(0x08)
	struct UMistInputBindingHintWidget* ToggleSnappingIconWidget; // 0x300(0x08)
	struct UMistInputBindingHintWidget* CycleRotationIconWidget; // 0x308(0x08)
	struct UMistInputBindingHintWidget* RaiseBindingIconWidget; // 0x310(0x08)
	struct UMistInputBindingHintWidget* LowerBindingIconWidget; // 0x318(0x08)
	char pad_320[0x8]; // 0x320(0x08)
};

// Class Mist.MistRecipePopupWidget
// Size: 0x4f8 (Inherited: 0x2c0)
struct UMistRecipePopupWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UHorizontalBox* QuantityPanelWidget; // 0x2c8(0x08)
	struct UVerticalBox* ItemDetailsPanelWidget; // 0x2d0(0x08)
	struct UTextBlock* WeightWidget; // 0x2d8(0x08)
	struct UTextBlock* CraftingTimeText; // 0x2e0(0x08)
	struct UTextBlock* CraftingTimeWidget; // 0x2e8(0x08)
	struct UTextBlock* QuantityWidget; // 0x2f0(0x08)
	struct UScrollBox* InputListWidget; // 0x2f8(0x08)
	struct UBorder* DetailsContainerWidget; // 0x300(0x08)
	struct UVerticalBox* PartsPanelWidget; // 0x308(0x08)
	struct UScrollBox* PartsInputListWidget; // 0x310(0x08)
	struct UVerticalBox* OutputsPanelWidget; // 0x318(0x08)
	struct UScrollBox* OutputsListWidget; // 0x320(0x08)
	struct UHorizontalBox* PremiumChargesPanel; // 0x328(0x08)
	struct UTextBlock* PremiumChargesWidget; // 0x330(0x08)
	struct UHorizontalBox* IcChargesPanel; // 0x338(0x08)
	struct UTextBlock* IcChargesWidget; // 0x340(0x08)
	struct UScrollBox* VitaminsListWidget; // 0x348(0x08)
	struct UTextBlock* MissingVitaminsWidget; // 0x350(0x08)
	struct UTextBlock* MissingInputWidget; // 0x358(0x08)
	struct UTextBlock* DescriptionTextWidget; // 0x360(0x08)
	struct UProgressBar* HoldProgressWidget; // 0x368(0x08)
	struct UWidget* ActionConfirmPanelWidget; // 0x370(0x08)
	struct UWidget* ActionHintPanelWidget; // 0x378(0x08)
	struct UWidget* RequirementsArea; // 0x380(0x08)
	struct UTextBlock* CraftAmountTextWidget; // 0x388(0x08)
	struct FMistCraftingRequirements Requirements; // 0x390(0x60)
	char pad_3F0[0x18]; // 0x3f0(0x18)
	struct UMistItemTemplate* Item; // 0x408(0x08)
	struct FMistCraftingRequirements FullCostRequirements; // 0x410(0x60)
	struct TMap<struct UMistItemTemplate*, int32_t> Outputs; // 0x470(0x50)
	struct UMistCraftingStationComponent* CraftingStation; // 0x4c0(0x08)
	char pad_4C8[0x30]; // 0x4c8(0x30)

	void SetOutputsData(struct TMap<struct UMistItemTemplate*, int32_t>& InOutputs); // Function Mist.MistRecipePopupWidget.SetOutputsData // (Final|Native|Public|HasOutParms) // @ game+0x1187b80
	void SetItem(struct UMistItemTemplate* InItem, int32_t InRecipeId, struct UMistCraftingStationComponent* InCraftingStation); // Function Mist.MistRecipePopupWidget.SetItem // (Final|Native|Public) // @ game+0x1187a00
	void SetFullCostData(struct FMistCraftingRequirements& InRequirements); // Function Mist.MistRecipePopupWidget.SetFullCostData // (Final|Native|Public|HasOutParms) // @ game+0x1187860
	void SetData(struct FText& Title, struct FMistCraftingRequirements& InRequirements, struct FName& InShopItemId, struct FText& Description); // Function Mist.MistRecipePopupWidget.SetData // (Final|Native|Public|HasOutParms) // @ game+0x1187540
	void HandleProgressUpdate(float NewProgress); // Function Mist.MistRecipePopupWidget.HandleProgressUpdate // (Final|Native|Public) // @ game+0x1187150
};

// Class Mist.MistBuildingInfoWidget
// Size: 0x500 (Inherited: 0x4f8)
struct UMistBuildingInfoWidget : UMistRecipePopupWidget {
	struct UMistBuildingHintsWidget* HintsWidget; // 0x4f8(0x08)
};

// Class Mist.MistBuildingScreen
// Size: 0x558 (Inherited: 0x3a0)
struct UMistBuildingScreen : UMistUIScreen {
	float PaddingForFirstCategoryItemToEnsure; // 0x3a0(0x04)
	float TooltipToggleTime; // 0x3a4(0x04)
	uint32_t NumTemplatesPerRow; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct FText DisassemblingText; // 0x3b0(0x18)
	struct FText RenamingText; // 0x3c8(0x18)
	struct FText CustomizingText; // 0x3e0(0x18)
	struct UWidget* BuildingWidget; // 0x3f8(0x08)
	struct UHorizontalBox* WallsCountWidget; // 0x400(0x08)
	struct UTextBlock* WallsCountTextBlock; // 0x408(0x08)
	struct UHorizontalBox* FoundationLinksWidget; // 0x410(0x08)
	struct UTextBlock* FoundationLinksTextBlock; // 0x418(0x08)
	struct UTextBlock* MessageWidget; // 0x420(0x08)
	struct UTextBlock* RotationAngleWidget; // 0x428(0x08)
	struct UTextBlock* SnappingEnabledWidget; // 0x430(0x08)
	struct UTextBlock* FreeBuildingStateWidget; // 0x438(0x08)
	struct UBorder* ModificationOverlay; // 0x440(0x08)
	struct UTextBlock* ModificationTextWidget; // 0x448(0x08)
	struct UScrollBox* CategoryScrollBox; // 0x450(0x08)
	struct UScrollBox* StructureCategoryScrollBox; // 0x458(0x08)
	struct UGridPanel* TemplateGridPanel; // 0x460(0x08)
	struct UMistUIButton* DisassembleButton; // 0x468(0x08)
	struct UMistUIButton* RenameButton; // 0x470(0x08)
	struct UMistUIButton* CustomizeButton; // 0x478(0x08)
	struct UWidget* RecipePanelWidget; // 0x480(0x08)
	struct UMistBuildingInfoWidget* InfoWidget; // 0x488(0x08)
	uint32_t DisassemblingHUDFlags; // 0x490(0x04)
	char pad_494[0x4]; // 0x494(0x04)
	struct UGridPanel* PlaceablePopupContainer; // 0x498(0x08)
	struct TArray<struct FMistBuildingCategory> UtilitySections; // 0x4a0(0x10)
	struct TArray<struct FMistBuildingCategory> StructureSections; // 0x4b0(0x10)
	struct UMistBuildingComponent* BuildingComponent; // 0x4c0(0x08)
	struct UMistInteractorComponent* InteractorComponent; // 0x4c8(0x08)
	struct UMistPlaceableCategoryWidget* CurrentCategoryWidget; // 0x4d0(0x08)
	char pad_4D8[0x18]; // 0x4d8(0x18)
	struct UMistPlaceablePreviewWidget* CurrentPlaceableWidget; // 0x4f0(0x08)
	char pad_4F8[0x60]; // 0x4f8(0x60)

	void OnDissasembleModePressed(); // Function Mist.MistBuildingScreen.OnDissasembleModePressed // (Final|Native|Private) // @ game+0x10ac120
	void HandleRenameClicked(struct UMistUIButton* Sender); // Function Mist.MistBuildingScreen.HandleRenameClicked // (Final|Native|Private) // @ game+0x10ac0a0
	void HandlePlayerTechUnlocked(struct AMistOasisPlayerState* Sender); // Function Mist.MistBuildingScreen.HandlePlayerTechUnlocked // (Final|Native|Private) // @ game+0x10ac020
	void HandlePlayerInventoryUpdate(); // Function Mist.MistBuildingScreen.HandlePlayerInventoryUpdate // (Final|Native|Private) // @ game+0x10ac000
	void HandlePlaceableSelected(struct UMistPlaceablePreviewWidget* Sender, struct UMistPlaceableTemplate* PlaceableTemplate, int32_t TargetQuality); // Function Mist.MistBuildingScreen.HandlePlaceableSelected // (Final|Native|Private) // @ game+0x10abf00
	struct UWidget* HandleLeaveTemplatesNavigation(enum class EUINavigation Nav); // Function Mist.MistBuildingScreen.HandleLeaveTemplatesNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x10abda0
	struct UWidget* HandleLeaveCategoriesNavigation(enum class EUINavigation Nav); // Function Mist.MistBuildingScreen.HandleLeaveCategoriesNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x10abd10
	void HandleDisassembleClicked(struct UMistUIButton* Sender); // Function Mist.MistBuildingScreen.HandleDisassembleClicked // (Final|Native|Private) // @ game+0x10abc90
	void HandleCustomizeClicked(struct UMistUIButton* Sender); // Function Mist.MistBuildingScreen.HandleCustomizeClicked // (Final|Native|Private) // @ game+0x10abc10
	void HandleCategoryChanged(struct UMistPlaceableCategoryWidget* Sender, int32_t CategoryIndex); // Function Mist.MistBuildingScreen.HandleCategoryChanged // (Final|Native|Private) // @ game+0x10abb50
	struct UWidget* GetClosestWidgetInTemplateGrid(enum class EUINavigation Nav); // Function Mist.MistBuildingScreen.GetClosestWidgetInTemplateGrid // (Final|Native|Public|BlueprintCallable) // @ game+0x10ab9a0
};

// Class Mist.MistBurningStatusEffect
// Size: 0x100 (Inherited: 0xe0)
struct UMistBurningStatusEffect : UMistStatusEffect {
	struct UParticleSystem* BurningEffect; // 0xe0(0x08)
	struct UMistDamageType* BurningDamage; // 0xe8(0x08)
	float SelfDamage; // 0xf0(0x04)
	float RadialDamage; // 0xf4(0x04)
	float DamageRadius; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
};

// Class Mist.MistCachedPlaceableCostsData
// Size: 0x170 (Inherited: 0x30)
struct UMistCachedPlaceableCostsData : UPrimaryDataAsset {
	struct TMap<struct UMistPlaceableTemplate*, struct FMistCraftingRequirements> CachedTotalCost; // 0x30(0x50)
	struct TMap<struct UMistPlaceableTemplate*, struct FMistCraftingRequirements> CachedPartsCost; // 0x80(0x50)
	struct TMap<struct UMistPlaceableTemplate*, struct FMistCraftingPartsInformation> CachedPartsData; // 0xd0(0x50)
	struct TMap<struct UMistPlaceableTemplate*, struct TSoftClassPtr<UObject>> FinishedConstructionActor; // 0x120(0x50)
};

// Class Mist.MistStatusEffectAreaComponent
// Size: 0x130 (Inherited: 0xf0)
struct UMistStatusEffectAreaComponent : UActorComponent {
	struct FMistComponentReference TriggerComponentRef; // 0xf0(0x28)
	struct UMistStatusEffect* StatusEffectClass; // 0x118(0x08)
	bool bRemoveOnExit; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
	struct UPrimitiveComponent* CachedTriggerComponent; // 0x128(0x08)

	void HandleEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistStatusEffectAreaComponent.HandleEndTrigger // (Native|Protected) // @ game+0x11469e0
	void HandleBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistStatusEffectAreaComponent.HandleBeginTrigger // (Native|Protected) // @ game+0x11a8700
};

// Class Mist.MistCampfireHealingComponent
// Size: 0x1a8 (Inherited: 0x130)
struct UMistCampfireHealingComponent : UMistStatusEffectAreaComponent {
	struct FMistComponentReference FuelCrafting; // 0x130(0x28)
	struct TSet<struct AMistPlayer*> PlayersInRange; // 0x158(0x50)

	void HandleBurningStopped(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCampfireHealingComponent.HandleBurningStopped // (Native|Protected) // @ game+0x10abac0
	void HandleBurningStarted(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCampfireHealingComponent.HandleBurningStarted // (Native|Protected) // @ game+0x10aba30
};

// Class Mist.MistCanteenWidget
// Size: 0x2f8 (Inherited: 0x2e0)
struct UMistCanteenWidget : UMistHUDWidget {
	float HydrationPercentage; // 0x2e0(0x04)
	bool bIsWellHydrated; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	struct UMistUICircularProgressBar* WaterBarWidget; // 0x2e8(0x08)
	struct UTexture2D* WaterTexture; // 0x2f0(0x08)

	void HandleThirstChanged(struct UMistPlayerThirstComponent* StaminaComponent, float Thirst, float PrevThirst); // Function Mist.MistCanteenWidget.HandleThirstChanged // (Final|Native|Private) // @ game+0x10b17c0
};

// Class Mist.MistCanvasPanel
// Size: 0x138 (Inherited: 0x130)
struct UMistCanvasPanel : UCanvasPanel {
	struct UMistBaseToolTipWidget* ToolTipWidgetClass; // 0x130(0x08)

	struct UWidget* CreateToolTipWidget(); // Function Mist.MistCanvasPanel.CreateToolTipWidget // (Native|Protected) // @ game+0x10b1050
};

// Class Mist.MistCatapultAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UMistCatapultAnimInstance : UMistMannedControlAnimInstance {
	bool bRecoiling; // 0x278(0x01)
	bool bFiring; // 0x279(0x01)
	float PedalsPosition; // 0x27c(0x04)
	float ArmCrankPosition; // 0x280(0x04)
	float BlockCrankPosition; // 0x284(0x04)
	char pad_28E[0x2]; // 0x28e(0x02)
};

// Class Mist.MistCauterizingStationComponent
// Size: 0x5f0 (Inherited: 0x598)
struct UMistCauterizingStationComponent : UMistMannedGimbalControlComponent {
	struct TArray<struct UMistStatusEffect*> StatusEffects; // 0x598(0x10)
	struct UAnimSequence* CauterizeCharacterAnim; // 0x5a8(0x08)
	int32_t MaxChargesStored; // 0x5b0(0x04)
	char pad_5B4[0x4]; // 0x5b4(0x04)
	struct FMistComponentReference ContainerRef; // 0x5b8(0x28)
	struct UMistItemTemplate* HealingMaterialClass; // 0x5e0(0x08)
	char pad_5E8[0x8]; // 0x5e8(0x08)

	void HandleCharacterReceivedDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistCauterizingStationComponent.HandleCharacterReceivedDamage // (Final|Native|Private|HasOutParms) // @ game+0x10b1440
};

// Class Mist.MistChairAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UMistChairAnimInstance : UMistMannedControlAnimInstance {
	int32_t AnimationIndex; // 0x278(0x04)
	int32_t ChairType; // 0x27c(0x04)
	bool bMale; // 0x280(0x01)
	char pad_289[0x7]; // 0x289(0x07)
};

// Class Mist.MistChairControlComponent
// Size: 0x340 (Inherited: 0x330)
struct UMistChairControlComponent : UMistMannedControlComponent {
	int32_t ChairType; // 0x330(0x04)
	int32_t AnimationCount; // 0x334(0x04)
	int32_t AnimationIndex; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)

	void ServerChangeAnimationIndex(int32_t NewIndex); // Function Mist.MistChairControlComponent.ServerChangeAnimationIndex // (Net|Native|Event|Protected|NetServer) // @ game+0x10b1f00
	void MulticastAnimationIndexChanged(int32_t NewIndex); // Function Mist.MistChairControlComponent.MulticastAnimationIndexChanged // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10b19e0
};

// Class Mist.MistCharacterCombatAnimNotify
// Size: 0x40 (Inherited: 0x38)
struct UMistCharacterCombatAnimNotify : UAnimNotify {
	enum class ECustomEventType EventType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class Mist.MistMeleeActionEnded
// Size: 0x40 (Inherited: 0x40)
struct UMistMeleeActionEnded : UMistCharacterCombatAnimNotify {
};

// Class Mist.MistMeleeTransitionAnimEnded
// Size: 0x40 (Inherited: 0x40)
struct UMistMeleeTransitionAnimEnded : UMistCharacterCombatAnimNotify {
};

// Class Mist.MistMeleeAttackCancellablePoint
// Size: 0x40 (Inherited: 0x40)
struct UMistMeleeAttackCancellablePoint : UMistCharacterCombatAnimNotify {
};

// Class Mist.MistMeleeAttackReadyEnded
// Size: 0x40 (Inherited: 0x40)
struct UMistMeleeAttackReadyEnded : UMistCharacterCombatAnimNotify {
};

// Class Mist.MistThrowProjectile
// Size: 0x40 (Inherited: 0x40)
struct UMistThrowProjectile : UMistCharacterCombatAnimNotify {
};

// Class Mist.MistEquipItemNotify
// Size: 0x40 (Inherited: 0x40)
struct UMistEquipItemNotify : UMistCharacterCombatAnimNotify {
};

// Class Mist.MistUnequipItemNotify
// Size: 0x40 (Inherited: 0x40)
struct UMistUnequipItemNotify : UMistCharacterCombatAnimNotify {
};

// Class Mist.MistCharacterCombatAnimNotifyState
// Size: 0x38 (Inherited: 0x30)
struct UMistCharacterCombatAnimNotifyState : UAnimNotifyState {
	enum class ECustomStateType StateType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class Mist.MistCheckBlockState
// Size: 0x38 (Inherited: 0x38)
struct UMistCheckBlockState : UMistCharacterCombatAnimNotifyState {
};

// Class Mist.MistFeintAreaState
// Size: 0x38 (Inherited: 0x38)
struct UMistFeintAreaState : UMistCharacterCombatAnimNotifyState {
};

// Class Mist.MistCharacterCustomizationItem
// Size: 0x58 (Inherited: 0x30)
struct UMistCharacterCustomizationItem : UDataAsset {
	struct TSoftObjectPtr<UTexture2D> PreviewIcon; // 0x30(0x28)

	void Apply(struct AActor* Actor, struct FMistCharacterCustomizationValues& Values); // Function Mist.MistCharacterCustomizationItem.Apply // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b0c40
};

// Class Mist.MistCharacterCustomizationHair
// Size: 0xd0 (Inherited: 0x58)
struct UMistCharacterCustomizationHair : UMistCharacterCustomizationItem {
	struct FMistCharacterCustomizationStaticMesh Hair; // 0x58(0x78)
};

// Class Mist.MistCharacterCustomizationFacialHair
// Size: 0xd0 (Inherited: 0x58)
struct UMistCharacterCustomizationFacialHair : UMistCharacterCustomizationItem {
	struct FMistCharacterCustomizationStaticMesh FacialHair; // 0x58(0x78)
};

// Class Mist.MistCharacterCustomizationHairColor
// Size: 0x80 (Inherited: 0x58)
struct UMistCharacterCustomizationHairColor : UMistCharacterCustomizationItem {
	struct FLinearColor RootColor; // 0x58(0x10)
	struct FLinearColor TipColor; // 0x68(0x10)
	float Scatter; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class Mist.MistCharacterCustomizationEyeColor
// Size: 0x68 (Inherited: 0x58)
struct UMistCharacterCustomizationEyeColor : UMistCharacterCustomizationItem {
	struct FLinearColor IrisColor; // 0x58(0x10)
};

// Class Mist.MistCharacterCustomizationClothingColor
// Size: 0x78 (Inherited: 0x58)
struct UMistCharacterCustomizationClothingColor : UMistCharacterCustomizationItem {
	struct FLinearColor PrimaryColor; // 0x58(0x10)
	struct FLinearColor SecondaryColor; // 0x68(0x10)
};

// Class Mist.MistCharacterCustomizationBodyDetail
// Size: 0xa8 (Inherited: 0x58)
struct UMistCharacterCustomizationBodyDetail : UMistCharacterCustomizationItem {
	struct TSoftObjectPtr<UTexture2D> DiffuseTexture; // 0x58(0x28)
	struct TSoftObjectPtr<UTexture2D> NormalTexture; // 0x80(0x28)
};

// Class Mist.MistCharacterCustomizationHeadDetail
// Size: 0xa8 (Inherited: 0x58)
struct UMistCharacterCustomizationHeadDetail : UMistCharacterCustomizationItem {
	struct TSoftObjectPtr<UTexture2D> DiffuseTexture; // 0x58(0x28)
	struct TSoftObjectPtr<UTexture2D> NormalTexture; // 0x80(0x28)
};

// Class Mist.MistCharacterCustomizationSet
// Size: 0x3a8 (Inherited: 0x58)
struct UMistCharacterCustomizationSet : UMistCharacterCustomizationItem {
	enum class EMistCharacterGender Gender; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct FMistCharacterCustomizationSkeletalMesh Head; // 0x60(0x78)
	struct FMistCharacterCustomizationSkeletalMesh Body; // 0xd8(0x78)
	struct FMistCharacterCustomizationSkeletalMesh UpperClothing; // 0x150(0x78)
	struct FMistCharacterCustomizationSkeletalMesh LowerClothing; // 0x1c8(0x78)
	struct FMistCharacterCustomizationSkeletalMesh HandsClothing; // 0x240(0x78)
	struct FMistCharacterCustomizationSkeletalMesh FeetClothing; // 0x2b8(0x78)
	struct UTexture2D* ClothingMask; // 0x330(0x08)
	struct TArray<struct UMistCharacterCustomizationHair*> Hairs; // 0x338(0x10)
	struct TArray<struct UMistCharacterCustomizationFacialHair*> FacialHairs; // 0x348(0x10)
	struct TArray<struct UMistCharacterCustomizationHairColor*> HairColors; // 0x358(0x10)
	struct TArray<struct UMistCharacterCustomizationEyeColor*> EyeColors; // 0x368(0x10)
	struct TArray<struct UMistCharacterCustomizationClothingColor*> ClothingColors; // 0x378(0x10)
	struct TArray<struct UMistCharacterCustomizationBodyDetail*> BodyDetails; // 0x388(0x10)
	struct TArray<struct UMistCharacterCustomizationHeadDetail*> HeadDetails; // 0x398(0x10)
};

// Class Mist.MistCharacterCustomizationActor
// Size: 0x410 (Inherited: 0x3c0)
struct AMistCharacterCustomizationActor : AActor {
	struct USkeletalMeshComponent* BodyMeshComponent; // 0x3c0(0x08)
	struct USkeletalMeshComponent* UpperClothingMeshComponent; // 0x3c8(0x08)
	struct USkeletalMeshComponent* LowerClothingMeshComponent; // 0x3d0(0x08)
	struct USkeletalMeshComponent* HeadMeshComponent; // 0x3d8(0x08)
	struct UStaticMeshComponent* HairMeshComponent; // 0x3e0(0x08)
	struct UStaticMeshComponent* FacialHairMeshComponent; // 0x3e8(0x08)
	struct FVector DefaultClothingPrimaryColor; // 0x3f0(0x0c)
	struct FVector DefaultClothingSecondaryColor; // 0x3fc(0x0c)
	struct UTexture2D* DefaultClothingMaskMaterial; // 0x408(0x08)

	void OnNearCameraChanged(bool IsActive); // Function Mist.MistCharacterCustomizationActor.OnNearCameraChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistCharacterCustomizationItemGridWidget
// Size: 0x340 (Inherited: 0x2c0)
struct UMistCharacterCustomizationItemGridWidget : UMistUIWidget {
	struct FMulticastInlineDelegate OnItemSelected; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnSliderValueChanged; // 0x2d0(0x10)
	struct UWrapBox* WrapBoxWidget; // 0x2e0(0x08)
	struct UTextBlock* CategoryNameWidget; // 0x2e8(0x08)
	struct UVerticalBox* SliderBoxWidget; // 0x2f0(0x08)
	struct FText HeaderText; // 0x2f8(0x18)
	struct TArray<struct UMistCharacterCustomizationItem*> CustomizationItems; // 0x310(0x10)
	struct UMistCharacterCustomizationItem* SelectedItem; // 0x320(0x08)
	struct UMistCharacterCustomizationItemWidget* SelectedWidget; // 0x328(0x08)
	char pad_330[0x10]; // 0x330(0x10)

	void SliderValueChangedEvent__DelegateSignature(struct UMistCharacterCustomizationItemGridWidget* Sender, enum class EMistCharacterCustomizationValue Index, float Value); // DelegateFunction Mist.MistCharacterCustomizationItemGridWidget.SliderValueChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ItemSelectedEvent__DelegateSignature(struct UMistCharacterCustomizationItemGridWidget* Sender, struct UMistCharacterCustomizationItem* Item); // DelegateFunction Mist.MistCharacterCustomizationItemGridWidget.ItemSelectedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleSliderValueChanged(struct UMistCharacterCustomizationSliderWidget* Sender, enum class EMistCharacterCustomizationValue Index, float Value); // Function Mist.MistCharacterCustomizationItemGridWidget.HandleSliderValueChanged // (Final|Native|Private) // @ game+0x10b6400
	struct UWidget* HandleNavToNextRow(enum class EUINavigation Nav); // Function Mist.MistCharacterCustomizationItemGridWidget.HandleNavToNextRow // (Final|Native|Public|BlueprintCallable) // @ game+0x10b61f0
	void HandleItemClicked(struct UMistCharacterCustomizationItemWidget* Sender); // Function Mist.MistCharacterCustomizationItemGridWidget.HandleItemClicked // (Final|Native|Private) // @ game+0x10b5ed0
};

// Class Mist.MistCharacterCustomizationItemWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistCharacterCustomizationItemWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UBorder* SelectionBorderWidget; // 0x2d0(0x08)
	struct UImage* ImageWidget; // 0x2d8(0x08)
	struct UMistCharacterCustomizationItem* CustomizationItem; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)
};

// Class Mist.MistCharacterCustomizationScreen
// Size: 0x3d8 (Inherited: 0x3c0)
struct UMistCharacterCustomizationScreen : UMistUIDialog {
	struct UMistCharacterCustomizationWidget* CustomizationWidget; // 0x3c0(0x08)
	struct UMistBaseButtonWidget* CancelButtonWidget; // 0x3c8(0x08)
	struct UMistBaseButtonWidget* SaveButtonWidget; // 0x3d0(0x08)
};

// Class Mist.MistCharacterCustomizationSliderWidget
// Size: 0x300 (Inherited: 0x2c0)
struct UMistCharacterCustomizationSliderWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UTextBlock* NameWidget; // 0x2d0(0x08)
	struct USlider* SliderWidget; // 0x2d8(0x08)
	char pad_2E0[0x20]; // 0x2e0(0x20)

	void ValueChangedEvent__DelegateSignature(struct UMistCharacterCustomizationSliderWidget* Sender, enum class EMistCharacterCustomizationValue Index, float Value); // DelegateFunction Mist.MistCharacterCustomizationSliderWidget.ValueChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleSliderValueChanged(float InValue); // Function Mist.MistCharacterCustomizationSliderWidget.HandleSliderValueChanged // (Final|Native|Private) // @ game+0x10b6510
};

// Class Mist.MistCharacterCustomizationWidget
// Size: 0x4c8 (Inherited: 0x2c0)
struct UMistCharacterCustomizationWidget : UMistUIWidget {
	struct UMistCharacterCustomizationItemGridWidget* SetsGridWidget; // 0x2c0(0x08)
	struct UMistCharacterCustomizationItemGridWidget* HairGridWidget; // 0x2c8(0x08)
	struct UMistCharacterCustomizationItemGridWidget* FacialHairGridWidget; // 0x2d0(0x08)
	struct UMistCharacterCustomizationItemGridWidget* HairColorGridWidget; // 0x2d8(0x08)
	struct UMistCharacterCustomizationItemGridWidget* EyeColorGridWidget; // 0x2e0(0x08)
	struct UMistCharacterCustomizationItemGridWidget* ClothingColorGridWidget; // 0x2e8(0x08)
	struct UMistCharacterCustomizationItemGridWidget* BodyDetailGridWidget; // 0x2f0(0x08)
	struct UMistCharacterCustomizationItemGridWidget* HeadDetailGridWidget; // 0x2f8(0x08)
	struct UMistUICharacterCustomizationCategory* ShowSetsWidget; // 0x300(0x08)
	struct UMistUICharacterCustomizationCategory* ShowHairWidget; // 0x308(0x08)
	struct UMistUICharacterCustomizationCategory* ShowFacialHairWidget; // 0x310(0x08)
	struct UMistUICharacterCustomizationCategory* ShowHairColorWidget; // 0x318(0x08)
	struct UMistUICharacterCustomizationCategory* ShowEyeColorWidget; // 0x320(0x08)
	struct UMistUICharacterCustomizationCategory* ShowClothingColorWidget; // 0x328(0x08)
	struct UMistUICharacterCustomizationCategory* ShowBodyDetailWidget; // 0x330(0x08)
	struct UMistUICharacterCustomizationCategory* ShowHeadDetailWidget; // 0x338(0x08)
	struct UButton* RandomizeButtonWidget; // 0x340(0x08)
	struct FViewTargetTransitionParams CameraTransitionParams; // 0x348(0x10)
	float GamepadPanScale; // 0x358(0x04)
	char pad_35C[0x24]; // 0x35c(0x24)
	struct TMap<struct UMistUICharacterCustomizationCategory*, struct UMistCharacterCustomizationItemGridWidget*> CategoryButtonsMap; // 0x380(0x50)
	struct TMap<struct UMistUIButton*, struct FName> CategoryCameraTags; // 0x3d0(0x50)
	struct TArray<struct UMistCharacterCustomizationSet*> Sets; // 0x420(0x10)
	struct AActor* PreviewActor; // 0x430(0x08)
	struct TMap<struct FName, struct AActor*> ViewTargetsByTag; // 0x438(0x50)
	struct TArray<struct UMistUICharacterCustomizationCategory*> CustomizationCategoryList; // 0x488(0x10)
	char pad_498[0x18]; // 0x498(0x18)
	struct UMistCharacterCustomizationSet* SelectedSet; // 0x4b0(0x08)
	struct UMistCharacterCustomizationItemGridWidget* ActiveGridWidget; // 0x4b8(0x08)
	struct UMistUIButton* ActiveCategoryButton; // 0x4c0(0x08)

	void OnCategoryActivated(struct UMistCharacterCustomizationItemGridWidget* GridWidget); // Function Mist.MistCharacterCustomizationWidget.OnCategoryActivated // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnCameraChanged(); // Function Mist.MistCharacterCustomizationWidget.OnCameraChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MouseUpAction(); // Function Mist.MistCharacterCustomizationWidget.MouseUpAction // (Final|Native|Private) // @ game+0x10b6760
	void MouseDownAction(); // Function Mist.MistCharacterCustomizationWidget.MouseDownAction // (Final|Native|Private) // @ game+0x10b6740
	void HandleRandomizeClicked(); // Function Mist.MistCharacterCustomizationWidget.HandleRandomizeClicked // (Final|Native|Private) // @ game+0x10b63c0
	void HandlePanCameraAxis(float Value); // Function Mist.MistCharacterCustomizationWidget.HandlePanCameraAxis // (Final|Native|Private) // @ game+0x10b6280
	struct UWidget* HandleNavToGrid(enum class EUINavigation Nav); // Function Mist.MistCharacterCustomizationWidget.HandleNavToGrid // (Final|Native|Public|BlueprintCallable) // @ game+0x10b6160
	struct UWidget* HandleNavToCategories(enum class EUINavigation Nav); // Function Mist.MistCharacterCustomizationWidget.HandleNavToCategories // (Final|Native|Public|BlueprintCallable) // @ game+0x10b60d0
	void HandleCustomizationSliderValueChanged(struct UMistCharacterCustomizationItemGridWidget* Sender, enum class EMistCharacterCustomizationValue Index, float Value); // Function Mist.MistCharacterCustomizationWidget.HandleCustomizationSliderValueChanged // (Final|Native|Private) // @ game+0x10b5be0
	void HandleCustomizationItemSelected(struct UMistCharacterCustomizationItemGridWidget* Sender, struct UMistCharacterCustomizationItem* Item); // Function Mist.MistCharacterCustomizationWidget.HandleCustomizationItemSelected // (Final|Native|Private) // @ game+0x10b5b20
	void HandleCategoryVisibilityChanged(struct UMistUIButton* Sender); // Function Mist.MistCharacterCustomizationWidget.HandleCategoryVisibilityChanged // (Final|Native|Private) // @ game+0x10b5980
	void HandleCategoryHovered(struct UMistUIButton* Sender); // Function Mist.MistCharacterCustomizationWidget.HandleCategoryHovered // (Final|Native|Private) // @ game+0x10b5900
	void CustomizationCameraFartherAction(); // Function Mist.MistCharacterCustomizationWidget.CustomizationCameraFartherAction // (Final|Native|Private) // @ game+0x10b57e0
	void CustomizationCameraCloserAction(); // Function Mist.MistCharacterCustomizationWidget.CustomizationCameraCloserAction // (Final|Native|Private) // @ game+0x10b57c0
};

// Class Mist.MistCharacterExperienceWidget
// Size: 0x330 (Inherited: 0x2e0)
struct UMistCharacterExperienceWidget : UMistHUDWidget {
	struct UTextBlock* LevelTextWidget; // 0x2e0(0x08)
	struct UTextBlock* StatPtTextWidget; // 0x2e8(0x08)
	struct UTextBlock* TechPtTextWidget; // 0x2f0(0x08)
	struct UTextBlock* PerkPtTextWidget; // 0x2f8(0x08)
	struct UMistUICircularProgressBar* ExpProgressBar; // 0x300(0x08)
	struct UWidget* StatUnspentWidget; // 0x308(0x08)
	struct UWidget* TechUnspentWidget; // 0x310(0x08)
	struct UWidget* PerkUnspentWidget; // 0x318(0x08)
	float ReminderInterval; // 0x320(0x04)
	char pad_324[0xc]; // 0x324(0x0c)

	void ReceiveVisibilityChange(struct UWidget* Widget, enum class ESlateVisibility NewVisibility); // Function Mist.MistCharacterExperienceWidget.ReceiveVisibilityChange // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveTechUnspentReminder(); // Function Mist.MistCharacterExperienceWidget.ReceiveTechUnspentReminder // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveStatUnspentReminder(); // Function Mist.MistCharacterExperienceWidget.ReceiveStatUnspentReminder // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePerkUnspentReminder(); // Function Mist.MistCharacterExperienceWidget.ReceivePerkUnspentReminder // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleTechPtUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistCharacterExperienceWidget.HandleTechPtUpdated // (Final|Native|Private) // @ game+0x10b6650
	void HandleStatPtUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistCharacterExperienceWidget.HandleStatPtUpdated // (Final|Native|Private) // @ game+0x10b6590
	void HandleReminderTimer(); // Function Mist.MistCharacterExperienceWidget.HandleReminderTimer // (Final|Native|Private) // @ game+0x10b63e0
	void HandlePerkPtUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistCharacterExperienceWidget.HandlePerkPtUpdated // (Final|Native|Private) // @ game+0x10b6300
	void HandleLevelUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistCharacterExperienceWidget.HandleLevelUpdated // (Final|Native|Private) // @ game+0x10b5f50
	void HandleExpUpdated(struct AMistOasisPlayerState* Sender, uint64_t NewValue); // Function Mist.MistCharacterExperienceWidget.HandleExpUpdated // (Final|Native|Private) // @ game+0x10b5cf0
};

// Class Mist.MistCharacterFXManagerComponent
// Size: 0x310 (Inherited: 0xf0)
struct UMistCharacterFXManagerComponent : UActorComponent {
	struct FMistComponentReference MistSkeletalMeshRef; // 0xf0(0x28)
	struct TArray<struct FMistCharacterVFXSystem> FXSystemTemplates; // 0x118(0x10)
	struct FMistCharacterVFXSystem DefaultFXSystemTemplate; // 0x128(0x90)
	struct TMap<struct FName, struct FName> NotifyNameToBoneNameMap; // 0x1b8(0x50)
	char pad_208[0x58]; // 0x208(0x58)
	struct TMap<struct FName, struct UFXSystemComponent*> BoneToParticleSystemMap; // 0x260(0x50)
	struct TMap<struct FName, struct UFXSystemComponent*> BoneToDirectionChangeParticleSystemMap; // 0x2b0(0x50)
	char pad_300[0x10]; // 0x300(0x10)
};

// Class Mist.MistCharacterGridComponent
// Size: 0x128 (Inherited: 0xf0)
struct UMistCharacterGridComponent : UActorComponent {
	char pad_F0[0x38]; // 0xf0(0x38)
};

// Class Mist.MistHealthComponent
// Size: 0x138 (Inherited: 0xf0)
struct UMistHealthComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	float MaxHealth; // 0x110(0x04)
	float Health; // 0x114(0x04)
	struct UMistDamageOverrideTable* DamageOverride; // 0x118(0x08)
	struct FMulticastInlineDelegate OnHealthChanged; // 0x120(0x10)
	char pad_130[0x8]; // 0x130(0x08)

	void OnRep_Health(float PrevHealth); // Function Mist.MistHealthComponent.OnRep_Health // (Native|Protected) // @ game+0x110cff0
	void MulticastSetHealth(int32_t InHealth, float InMaxHealth); // Function Mist.MistHealthComponent.MulticastSetHealth // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x110c910
	void HealthChangedEvent__DelegateSignature(struct UMistHealthComponent* Sender, float PrevHealth, float NewHealth); // DelegateFunction Mist.MistHealthComponent.HealthChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleAnyDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistHealthComponent.HandleAnyDamage // (Native|Protected|HasOutParms) // @ game+0x110bcf0
};

// Class Mist.MistCharacterHealthComponent
// Size: 0x150 (Inherited: 0x138)
struct UMistCharacterHealthComponent : UMistHealthComponent {
	float HealingPerSecond; // 0x138(0x04)
	float HealingDelay; // 0x13c(0x04)
	struct AMistPlayer* PlayerOwner; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)

	void HandleHealTimer(); // Function Mist.MistCharacterHealthComponent.HandleHealTimer // (Final|Native|Private) // @ game+0x10b5db0
};

// Class Mist.MistCharacterHealthWidget
// Size: 0x338 (Inherited: 0x2e0)
struct UMistCharacterHealthWidget : UMistHUDWidget {
	struct UMistUICircularProgressBar* HealthBarWidget; // 0x2e0(0x08)
	struct UMistUICircularProgressBar* HealingBarWidget; // 0x2e8(0x08)
	struct UMistUICircularProgressBar* DamageBarWidget; // 0x2f0(0x08)
	struct UTexture2D* HealthTexture; // 0x2f8(0x08)
	struct UTexture2D* HealingTexture; // 0x300(0x08)
	float DamageBarShowTime; // 0x308(0x04)
	float DamageBarShrinkingTime; // 0x30c(0x04)
	struct UTextBlock* CurrentHealthWidget; // 0x310(0x08)
	struct UTextBlock* MaxHealthWidget; // 0x318(0x08)
	char pad_320[0x18]; // 0x320(0x18)

	void HandleHealthChanged(struct UMistHealthComponent* HealthComponent, float PrevHealth, float NewHealth); // Function Mist.MistCharacterHealthWidget.HandleHealthChanged // (Final|Native|Private) // @ game+0x10b5dd0
	void HandleActiveStatusEffectUpdated(struct UMistStatusEffectPlayerComponent* InSender, struct FMistActiveStatusEffect& EffectInstance); // Function Mist.MistCharacterHealthWidget.HandleActiveStatusEffectUpdated // (Final|Native|Private|HasOutParms) // @ game+0x10b5800
};

// Class Mist.MistCharacterLevelUpWidget
// Size: 0x320 (Inherited: 0x2e0)
struct UMistCharacterLevelUpWidget : UMistHUDWidget {
	struct UTextBlock* LevelTextWidget; // 0x2e0(0x08)
	struct UTextBlock* StatPtTextWidget; // 0x2e8(0x08)
	struct UBorder* StatPtBorderWidget; // 0x2f0(0x08)
	struct UTextBlock* TechPtTextWidget; // 0x2f8(0x08)
	struct UBorder* TechPtBorderWidget; // 0x300(0x08)
	struct UTextBlock* PerkPtTextWidget; // 0x308(0x08)
	struct UBorder* PerkPtBorderWidget; // 0x310(0x08)
	int32_t LevelPopupLifetime; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)

	void ReceiveVisibilityChange(struct UWidget* Widget, enum class ESlateVisibility NewVisibility); // Function Mist.MistCharacterLevelUpWidget.ReceiveVisibilityChange // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleLevelUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistCharacterLevelUpWidget.HandleLevelUpdated // (Final|Native|Private) // @ game+0x10b6010
};

// Class Mist.MistCharacterLevelWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistCharacterLevelWidget : UMistUIWidget {
	struct UTextBlock* LevelWidget; // 0x2c0(0x08)
};

// Class Mist.MistCharacterMannequin
// Size: 0x5b0 (Inherited: 0x410)
struct AMistCharacterMannequin : AMistCharacterCustomizationActor {
	struct UBoxComponent* CustomBoundsComponent; // 0x410(0x08)
	struct UMeshComponent* SlotMeshes[0xc]; // 0x418(0x60)
	struct FMistEquipmentItem SlotItems[0xc]; // 0x478(0x120)
	char pad_598[0x18]; // 0x598(0x18)
};

// Class Mist.MistCharacterMovementBudgeterComponent
// Size: 0x120 (Inherited: 0x108)
struct UMistCharacterMovementBudgeterComponent : UMistPlayerControllerComponent {
	int32_t NumGuaranteedTickedComponents; // 0x108(0x04)
	float FrameBudgetTime; // 0x10c(0x04)
	char pad_110[0x10]; // 0x110(0x10)
};

// Class Mist.MistCharacterMovementComponent
// Size: 0xc70 (Inherited: 0x680)
struct UMistCharacterMovementComponent : UCharacterMovementComponent {
	char pad_680[0x3c]; // 0x680(0x3c)
	float LimitVelocityBonusFromAnimation; // 0x6bc(0x04)
	struct UCurveFloat* AngleBasedMaxSpeedMultiplier; // 0x6c0(0x08)
	struct UCurveFloat* WeightBasedMaxSpeedMultiplier; // 0x6c8(0x08)
	struct FStaminaMovementValues StaminaValues; // 0x6d0(0x90)
	float DefaultRotationRate; // 0x760(0x04)
	float GrapplingRotationRate; // 0x764(0x04)
	bool bShowDebugInfo; // 0x768(0x01)
	bool bFullLogAutonomousProxy; // 0x769(0x01)
	char pad_76A[0x6]; // 0x76a(0x06)
	float LedgeTopMargin; // 0x770(0x04)
	float ClimbingCancelWindowStart; // 0x774(0x04)
	float ClimbingCancelWindowEnd; // 0x778(0x04)
	float ClimbingCooldownAfterStarted; // 0x77c(0x04)
	float ClimbingCooldownAfterCanceled; // 0x780(0x04)
	float ClimbingCooldownAfterJump; // 0x784(0x04)
	float StartClimbingWallDistance; // 0x788(0x04)
	char pad_78C[0x4]; // 0x78c(0x04)
	struct TArray<struct FTransform> ClimbingSweepOffsets; // 0x790(0x10)
	int32_t RegularClimbRetriesNum; // 0x7a0(0x04)
	int32_t TetheredClimbRetriesNum; // 0x7a4(0x04)
	float ClimbingSweepDistance; // 0x7a8(0x04)
	float ClimbingFootRadius; // 0x7ac(0x04)
	float RegrappleVelocityFactor; // 0x7b0(0x04)
	float RegrappleReachFactor; // 0x7b4(0x04)
	float RegrappleMaxReach; // 0x7b8(0x04)
	char pad_7BC[0x4]; // 0x7bc(0x04)
	struct TMap<enum class ECombatAction, float> CombatRotationRates; // 0x7c0(0x50)
	char pad_810[0x10]; // 0x810(0x10)
	float PushToSwingArcMaxSize; // 0x820(0x04)
	float AccelerationFactor; // 0x824(0x04)
	float GrapplingDragCoefficient; // 0x828(0x04)
	float GrapplingFrictionCoefficient; // 0x82c(0x04)
	struct FMistGrapplingStateParams GrapplingState; // 0x830(0x1a0)
	char pad_9D0[0x10]; // 0x9d0(0x10)
	struct UCurveFloat* AccelerationBySpeedCurve; // 0x9e0(0x08)
	bool bSwitchOffSeparateFrictionWhileJumping; // 0x9e8(0x01)
	char pad_9E9[0x3]; // 0x9e9(0x03)
	float MaxDepenetrationEscalate; // 0x9ec(0x04)
	float MaxDepenetrationEscalateAsProxy; // 0x9f0(0x04)
	char pad_9F4[0x4]; // 0x9f4(0x04)
	struct UMistPlayerStaminaComponent* CachedStaminaComponent; // 0x9f8(0x08)
	struct UMistMeleeCombatComponent* CachedCombatComponent; // 0xa00(0x08)
	struct UMistTetherMasterComponent* TetherComponent; // 0xa08(0x08)
	struct FTransform LocalClimbingLedgeTransform; // 0xa10(0x30)
	char pad_A40[0x124]; // 0xa40(0x124)
	float CollisionEscapeForceInAirFactor; // 0xb64(0x04)
	struct AActor* EscapeActor; // 0xb68(0x08)
	char pad_B70[0x98]; // 0xb70(0x98)
	struct UCurveFloat* TickRateByDistanceFactorCurve; // 0xc08(0x08)
	float MaxVariableDeltaTime; // 0xc10(0x04)
	char pad_C14[0x5c]; // 0xc14(0x5c)

	void ServerStopClimbing(); // Function Mist.MistCharacterMovementComponent.ServerStopClimbing // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10b7360
	void ServerStartDodge(struct FMistDisplacementTrackParams InParams); // Function Mist.MistCharacterMovementComponent.ServerStartDodge // (Net|Native|Event|Public|NetServer) // @ game+0x10b72a0
	void ServerStartClimbing(struct FTransform ClimbStartTransform, struct FTransform ClimbPointTransform, struct UPrimitiveComponent* Component, int32_t ItemIndex, struct FName BoneName, struct UAnimationAsset* ClimbingAnim, float AnimPosition, enum class ECMM_EventTag ClimbType, bool bRepToAutonomous); // Function Mist.MistCharacterMovementComponent.ServerStartClimbing // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x10b6fa0
	void ServerForceServerSideMovement(); // Function Mist.MistCharacterMovementComponent.ServerForceServerSideMovement // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10b6f80
	void ServerFinishDisplacement(); // Function Mist.MistCharacterMovementComponent.ServerFinishDisplacement // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10b6f60
	void ServerFinishClimbing(); // Function Mist.MistCharacterMovementComponent.ServerFinishClimbing // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10b6f40
	void OnEquipmentSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot Slot); // Function Mist.MistCharacterMovementComponent.OnEquipmentSlotUpdate // (Final|Native|Protected) // @ game+0x10b6e80
	void OnCombatActionChanged(enum class ECombatAction CurrentAction, enum class ECombatAction PreviousAction); // Function Mist.MistCharacterMovementComponent.OnCombatActionChanged // (Final|Native|Protected) // @ game+0x10b6dc0
	void MulticastStartDodge(struct FMistDisplacementTrackParams InParams); // Function Mist.MistCharacterMovementComponent.MulticastStartDodge // (Net|Native|Event|NetMulticast|Public) // @ game+0x10b6d00
	void MulticastStartDisplacement(struct FMistDisplacementTrackParams InParams); // Function Mist.MistCharacterMovementComponent.MulticastStartDisplacement // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10b6c40
	void MulticastStartClimbing(struct FTransform ClimbStartTransform, struct FTransform ClimbPointTransform, struct UPrimitiveComponent* NewBase, int32_t ItemIndex, struct FName BoneName, struct FMistRootMotionCorrectionData CorrectionData, bool bTeleport, bool bRepToAutonomous); // Function Mist.MistCharacterMovementComponent.MulticastStartClimbing // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x10b6940
	void MulticastReverseClimbing(); // Function Mist.MistCharacterMovementComponent.MulticastReverseClimbing // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10b6920
	void MulticastPlayClimbing(struct UAnimationAsset* ClimbingAnim, float AnimPosition, enum class EClimbingState ClimbType, bool bRepToAutonomous); // Function Mist.MistCharacterMovementComponent.MulticastPlayClimbing // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10b67e0
	void MulticastFinishDisplacement(); // Function Mist.MistCharacterMovementComponent.MulticastFinishDisplacement // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10b67c0
	void MulticastFinishClimbing(); // Function Mist.MistCharacterMovementComponent.MulticastFinishClimbing // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10b67a0
	void MulticastCancelClimbing(); // Function Mist.MistCharacterMovementComponent.MulticastCancelClimbing // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10b6780
	bool IsClimbing(); // Function Mist.MistCharacterMovementComponent.IsClimbing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10b6710
	void HandleClimbedStructurePartInstanceRemoved(struct FTransform& Transform, int32_t ItemIndex); // Function Mist.MistCharacterMovementComponent.HandleClimbedStructurePartInstanceRemoved // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x10b5a00
	void ClientCancelClimbing(); // Function Mist.MistCharacterMovementComponent.ClientCancelClimbing // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x10b57a0
};

// Class Mist.MistCharacterStateWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistCharacterStateWidget : UMistHUDWidget {
	struct UTextBlock* ThirstPenalty; // 0x2e0(0x08)
	struct FTimerHandle ThirstPenaltyTimerHandle; // 0x2e8(0x08)

	void ReceiveStaminaUsageStarted(); // Function Mist.MistCharacterStateWidget.ReceiveStaminaUsageStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveStaminaUsageEnded(); // Function Mist.MistCharacterStateWidget.ReceiveStaminaUsageEnded // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleThirstPenaltyTimerUpdate(); // Function Mist.MistCharacterStateWidget.HandleThirstPenaltyTimerUpdate // (Final|Native|Protected) // @ game+0x10c0e10
	void HandleStaminaUsageStarted(); // Function Mist.MistCharacterStateWidget.HandleStaminaUsageStarted // (Final|Native|Protected) // @ game+0x10c0df0
	void HandleStaminaUsageEnded(); // Function Mist.MistCharacterStateWidget.HandleStaminaUsageEnded // (Final|Native|Protected) // @ game+0x10c0dd0
};

// Class Mist.MistChatMessageLogContentWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistChatMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* SenderTextWidget; // 0x2c0(0x08)
	struct UTextBlock* MessageTextWidget; // 0x2c8(0x08)
	struct UMistChatMessageData* Data; // 0x2d0(0x08)
};

// Class Mist.MistMapChatMessageLogContentWidget
// Size: 0x2d8 (Inherited: 0x2d8)
struct UMistMapChatMessageLogContentWidget : UMistChatMessageLogContentWidget {
};

// Class Mist.MistClanChatMessageLogContentWidget
// Size: 0x2d8 (Inherited: 0x2d8)
struct UMistClanChatMessageLogContentWidget : UMistChatMessageLogContentWidget {
};

// Class Mist.MistMessageLogMenuWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistMessageLogMenuWidget : UMistUIWidget {
	struct UMistMessageLogItemWidget* Owner; // 0x2c0(0x08)
};

// Class Mist.MistChatMessageLogMenuWidget
// Size: 0x2f8 (Inherited: 0x2c8)
struct UMistChatMessageLogMenuWidget : UMistMessageLogMenuWidget {
	struct UTextBlock* ActionNameWidget; // 0x2c8(0x08)
	struct UTextBlock* SenderNameWidget; // 0x2d0(0x08)
	struct UButton* ConfirmButtonWidget; // 0x2d8(0x08)
	struct UButton* CancelButtonWidget; // 0x2e0(0x08)
	struct UMistChatMessageData* Data; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	void HandleConfirmClicked(); // Function Mist.MistChatMessageLogMenuWidget.HandleConfirmClicked // (Final|Native|Private) // @ game+0x10c0db0
	void HandleCancelClicked(); // Function Mist.MistChatMessageLogMenuWidget.HandleCancelClicked // (Final|Native|Private) // @ game+0x10c0d90
};

// Class Mist.MistCheatingComponent
// Size: 0x358 (Inherited: 0xf0)
struct UMistCheatingComponent : UActorComponent {
	struct TSoftClassPtr<UObject> TensionDamageType; // 0xf0(0x28)
	struct FMistAdminData AdminData; // 0x118(0xa0)
	char pad_1B8[0x38]; // 0x1b8(0x38)
	struct TSoftClassPtr<UObject> MonkeyToSpawn; // 0x1f0(0x28)
	struct TSoftClassPtr<UObject> MonkeyAIController; // 0x218(0x28)
	struct TSoftClassPtr<UObject> CombatBotToSpawn; // 0x240(0x28)
	struct TSoftClassPtr<UObject> CombatBotAIController; // 0x268(0x28)
	struct TSoftClassPtr<UObject> WalkerToSpawn; // 0x290(0x28)
	struct TSoftClassPtr<UObject> SandstormFogToSpawn; // 0x2b8(0x28)
	struct TSoftClassPtr<UObject> FightClubWeaponRack; // 0x2e0(0x28)
	struct AMistPlayer* OriginalPlayer; // 0x308(0x08)
	struct UMistOffMapLobby2Screen* OffMapLobby2Screen; // 0x310(0x08)
	struct UMistTradeStationScreen* TradeStationScreen; // 0x318(0x08)
	struct UMistJoinQueueScreen* JoinQueueScreen; // 0x320(0x08)
	struct UMistJoinRealmSearchScreen* JoinRealmSearchScreen; // 0x328(0x08)
	struct UMistJoinRealmScreen* JoinRealmScreen; // 0x330(0x08)
	struct UMistCreateCharacterScreen* CreateCharacterScreen; // 0x338(0x08)
	struct UMistInputDebugWidget* InputMappingsDebugWidget; // 0x340(0x08)
	struct UMistInputHistoryDebugWidget* InputHistoryDebugWidget; // 0x348(0x08)
	struct UMistInputFocusDebugWidget* InputFocusDebugWidget; // 0x350(0x08)

	void UseServerSideMovement(float Duration); // Function Mist.MistCheatingComponent.UseServerSideMovement // (Final|Exec|Native|Public) // @ game+0x10c7f60
	void UseIcVoucherShopItem(struct FName ShopItemId, int32_t Amount); // Function Mist.MistCheatingComponent.UseIcVoucherShopItem // (Final|Exec|Native|Public) // @ game+0x10c0bf0
	void UpgradeWalkerStage(); // Function Mist.MistCheatingComponent.UpgradeWalkerStage // (Final|Exec|Native|Public) // @ game+0x10c7f40
	void UnpauseWeather(); // Function Mist.MistCheatingComponent.UnpauseWeather // (Final|Exec|Native|Public) // @ game+0x10c7f20
	void UnlockTechTree(); // Function Mist.MistCheatingComponent.UnlockTechTree // (Final|Exec|Native|Public) // @ game+0x10c7f00
	void UnlockTech(struct FString TechName); // Function Mist.MistCheatingComponent.UnlockTech // (Final|Exec|Native|Public) // @ game+0x10c7e60
	void UnlockPerks(); // Function Mist.MistCheatingComponent.UnlockPerks // (Final|Exec|Native|Public) // @ game+0x10c7e40
	void UnlockAchievement(struct FString AchievementName); // Function Mist.MistCheatingComponent.UnlockAchievement // (Final|Exec|Native|Public) // @ game+0x10c7da0
	void ToggleStatusEffectsDebug(); // Function Mist.MistCheatingComponent.ToggleStatusEffectsDebug // (Final|Exec|Native|Public) // @ game+0x10c7d80
	void TogglePlayerNames(); // Function Mist.MistCheatingComponent.TogglePlayerNames // (Final|Exec|Native|Public) // @ game+0x10c7d60
	void ToggleInvincibility(); // Function Mist.MistCheatingComponent.ToggleInvincibility // (Final|Exec|Native|Public) // @ game+0x10c7d40
	void ToggleIdle(); // Function Mist.MistCheatingComponent.ToggleIdle // (Final|Exec|Native|Public) // @ game+0x10c7d20
	void ToggleGUI(); // Function Mist.MistCheatingComponent.ToggleGUI // (Final|Exec|Native|Public) // @ game+0x10c7d00
	void ToggleClimbingDebug(); // Function Mist.MistCheatingComponent.ToggleClimbingDebug // (Final|Exec|Native|Public) // @ game+0x10bfca0
	void ToggleCheatingOverlay(); // Function Mist.MistCheatingComponent.ToggleCheatingOverlay // (Final|Exec|Native|Public) // @ game+0x10c7ce0
	void ToggleChatLogSpam(); // Function Mist.MistCheatingComponent.ToggleChatLogSpam // (Final|Exec|Native|Public) // @ game+0x10c7cc0
	void TestVivox(); // Function Mist.MistCheatingComponent.TestVivox // (Final|Exec|Native|Public) // @ game+0x10c7ca0
	void TeleportWalkerTo(float X, float Y); // Function Mist.MistCheatingComponent.TeleportWalkerTo // (Final|Exec|Native|Public) // @ game+0x10c7be0
	void TeleportToPlayer(struct FString PlayerName); // Function Mist.MistCheatingComponent.TeleportToPlayer // (Final|Exec|Native|Public) // @ game+0x10c7b40
	void TeleportTo3D(float X, float Y, float Z); // Function Mist.MistCheatingComponent.TeleportTo3D // (Final|Exec|Native|Public) // @ game+0x10c7970
	void TeleportTo(float X, float Y); // Function Mist.MistCheatingComponent.TeleportTo // (Final|Exec|Native|Public) // @ game+0x10c7a80
	void TeleportPlayerToMe(struct FString PlayerName); // Function Mist.MistCheatingComponent.TeleportPlayerToMe // (Final|Exec|Native|Public) // @ game+0x10c78d0
	void TeleportEveryoneToMe(); // Function Mist.MistCheatingComponent.TeleportEveryoneToMe // (Final|Exec|Native|Public) // @ game+0x10c78b0
	void Teleport(float Distance); // Function Mist.MistCheatingComponent.Teleport // (Final|Exec|Native|Public) // @ game+0x10c7830
	void TakeItems(struct FString Name, int32_t Count, bool bBestEffort); // Function Mist.MistCheatingComponent.TakeItems // (Final|Exec|Native|Public) // @ game+0x10c7710
	void StripWorm(); // Function Mist.MistCheatingComponent.StripWorm // (Final|Exec|Native|Public) // @ game+0x10c76f0
	void StopWorm(bool Value); // Function Mist.MistCheatingComponent.StopWorm // (Final|Exec|Native|Public) // @ game+0x10c7660
	void StopSpectating(); // Function Mist.MistCheatingComponent.StopSpectating // (Final|Exec|Native|Public) // @ game+0x10c7640
	void StartSpectating(bool bShowAllNametags); // Function Mist.MistCheatingComponent.StartSpectating // (Final|Exec|Native|Public) // @ game+0x10c75b0
	void StartCineTimer(float Time, struct FString Message); // Function Mist.MistCheatingComponent.StartCineTimer // (Final|Exec|Native|Public) // @ game+0x10c74d0
	void SpeedUpClaims(bool bEnable); // Function Mist.MistCheatingComponent.SpeedUpClaims // (Final|Exec|Native|Public) // @ game+0x10c7440
	void SpectatePlayer(struct FString PlayerName); // Function Mist.MistCheatingComponent.SpectatePlayer // (Final|Exec|Native|Public) // @ game+0x10c7360
	void SpawnWorm(float Distance); // Function Mist.MistCheatingComponent.SpawnWorm // (Final|Exec|Native|Public) // @ game+0x10c72e0
	void SpawnWalkerQuality(struct FString walkerName, int32_t WalkerQuality); // Function Mist.MistCheatingComponent.SpawnWalkerQuality // (Final|Exec|Native|Public) // @ game+0x10c7200
	void SpawnWalker(struct FString walkerName); // Function Mist.MistCheatingComponent.SpawnWalker // (Final|Exec|Native|Public) // @ game+0x10c7160
	void SpawnSandstorm(); // Function Mist.MistCheatingComponent.SpawnSandstorm // (Final|Exec|Native|Public) // @ game+0x10c7140
	void SpawnProtectWalker(); // Function Mist.MistCheatingComponent.SpawnProtectWalker // (Final|Exec|Native|Public) // @ game+0x10c7120
	void SpawnPoi(); // Function Mist.MistCheatingComponent.SpawnPoi // (Final|Exec|Native|Public) // @ game+0x10c7100
	void SpawnMultipleMobs(struct FString MobName, float Distance, int32_t Amount); // Function Mist.MistCheatingComponent.SpawnMultipleMobs // (Final|Exec|Native|Public) // @ game+0x10c6fe0
	void SpawnMonkey(float Distance, int32_t Amount); // Function Mist.MistCheatingComponent.SpawnMonkey // (Final|Exec|Native|Public) // @ game+0x10c6f10
	void SpawnMobInDistance(struct FString MobName, float Distance); // Function Mist.MistCheatingComponent.SpawnMobInDistance // (Final|Exec|Native|Public) // @ game+0x10c6e30
	void SpawnMob(struct FString MobName); // Function Mist.MistCheatingComponent.SpawnMob // (Final|Exec|Native|Public) // @ game+0x10c6d90
	void SpawnFightClubWeaponRack(struct FString ItemSetName, bool bUseOncePerRespawn); // Function Mist.MistCheatingComponent.SpawnFightClubWeaponRack // (Final|Exec|Native|Public) // @ game+0x10c6cb0
	void SpawnEventAsteroid(); // Function Mist.MistCheatingComponent.SpawnEventAsteroid // (Final|Exec|Native|Public) // @ game+0x10c6c90
	void SpawnCreature(struct FString Name, float Distance); // Function Mist.MistCheatingComponent.SpawnCreature // (Final|Exec|Native|Public) // @ game+0x10c6bb0
	void SpawnCombatBot(float Distance, int32_t CombatAction, float HeavyAttackPower); // Function Mist.MistCheatingComponent.SpawnCombatBot // (Final|Exec|Native|Public) // @ game+0x10c6aa0
	void SpawnActor(struct FString ActorName, float Distance); // Function Mist.MistCheatingComponent.SpawnActor // (Final|Exec|Native|Public) // @ game+0x10c69c0
	void SpamMessageLog(int32_t Num); // Function Mist.MistCheatingComponent.SpamMessageLog // (Final|Exec|Native|Public) // @ game+0x10c6940
	void SlomoEx(float NewTimeDilation, bool bServer, bool bClient); // Function Mist.MistCheatingComponent.SlomoEx // (Final|Exec|Native|Public) // @ game+0x10c6830
	void Slomo(float NewTimeDilation); // Function Mist.MistCheatingComponent.Slomo // (Final|Exec|Native|Public) // @ game+0x10c67b0
	void SimulateTravelWalker(); // Function Mist.MistCheatingComponent.SimulateTravelWalker // (Final|Exec|Native|Public) // @ game+0x10c6790
	void SimulateRedeployPenalty(); // Function Mist.MistCheatingComponent.SimulateRedeployPenalty // (Final|Exec|Native|Public) // @ game+0x10c6770
	void SimulateAsteroidImpact(float Distance); // Function Mist.MistCheatingComponent.SimulateAsteroidImpact // (Final|Exec|Native|Public) // @ game+0x10c66f0
	void SignOutFirstPlayer(); // Function Mist.MistCheatingComponent.SignOutFirstPlayer // (Final|Exec|Native|Public) // @ game+0x10c66d0
	void ShowInputMappings(struct FString KeyFilter); // Function Mist.MistCheatingComponent.ShowInputMappings // (Final|Exec|Native|Public) // @ game+0x10c6630
	void ShowInputHistory(struct FString KeyFilter); // Function Mist.MistCheatingComponent.ShowInputHistory // (Final|Exec|Native|Public) // @ game+0x10c6590
	void ShowInputFocus(bool bValue); // Function Mist.MistCheatingComponent.ShowInputFocus // (Final|Exec|Native|Public) // @ game+0x10c6500
	void SetWeather(int32_t Index); // Function Mist.MistCheatingComponent.SetWeather // (Final|Exec|Native|Public) // @ game+0x10c6480
	void SetWalkerStage(int32_t NewStage); // Function Mist.MistCheatingComponent.SetWalkerStage // (Final|Exec|Native|Public) // @ game+0x10c6400
	void SetWalkerSandiness(float Sandiness); // Function Mist.MistCheatingComponent.SetWalkerSandiness // (Final|Exec|Native|Public) // @ game+0x10c6380
	void SetWalkerKinematic(bool bValue); // Function Mist.MistCheatingComponent.SetWalkerKinematic // (Final|Exec|Native|Public) // @ game+0x10c62f0
	void SetWalkerCraftingSkill(struct FString WalkerType, int32_t Level); // Function Mist.MistCheatingComponent.SetWalkerCraftingSkill // (Final|Exec|Native|Public) // @ game+0x10c6210
	void SetSlotReservations(int32_t TotalSlots, int64_t Clan1Id, int32_t Clan1Slots, int64_t Clan2Id, int32_t Clan2Slots); // Function Mist.MistCheatingComponent.SetSlotReservations // (Final|Exec|Native|Public) // @ game+0x10c6090
	void SetServerTime(float Time); // Function Mist.MistCheatingComponent.SetServerTime // (Final|Exec|Native|Public) // @ game+0x10c6010
	void SetRealmTileDecay(float DecayInSeconds); // Function Mist.MistCheatingComponent.SetRealmTileDecay // (Final|Exec|Native|Public) // @ game+0x10c5f90
	void SetRealmStatus(float ShutdownTimeSeconds, struct FString Status); // Function Mist.MistCheatingComponent.SetRealmStatus // (Final|Exec|Native|Public) // @ game+0x10c5eb0
	void SetPresentationMode(bool bInIsEnabled); // Function Mist.MistCheatingComponent.SetPresentationMode // (Final|Exec|Native|Public) // @ game+0x10c5e20
	void SetPlayerTier(enum class EMistAccountTier InTier); // Function Mist.MistCheatingComponent.SetPlayerTier // (Final|Exec|Native|Public) // @ game+0x10c5da0
	void SetPlayerStat(int32_t Amount, struct FString StatName); // Function Mist.MistCheatingComponent.SetPlayerStat // (Final|Exec|Native|Public) // @ game+0x10c5cc0
	void SetPlayerIds(int32_t CharacterId, int32_t ClanId); // Function Mist.MistCheatingComponent.SetPlayerIds // (Final|Exec|Native|Public) // @ game+0x10c5c00
	void SetPingInterval(int32_t Interval); // Function Mist.MistCheatingComponent.SetPingInterval // (Final|Exec|Native|Public) // @ game+0x10c5b80
	void SetMultipliers(float Experience, float HarvestQuantity); // Function Mist.MistCheatingComponent.SetMultipliers // (Final|Exec|Native|Public) // @ game+0x10c5ac0
	void SetMaxServerFps(float InFpsCap); // Function Mist.MistCheatingComponent.SetMaxServerFps // (Final|Exec|Native|Public) // @ game+0x10c5a40
	void SetMaxHealth(float Health, float MaxHealth); // Function Mist.MistCheatingComponent.SetMaxHealth // (Final|Exec|Native|Public) // @ game+0x10c5980
	void SetLookatOwnership(int64_t ClanId); // Function Mist.MistCheatingComponent.SetLookatOwnership // (Final|Exec|Native|Public) // @ game+0x10c5900
	void SetHealth(float Health); // Function Mist.MistCheatingComponent.SetHealth // (Final|Exec|Native|Public) // @ game+0x10c5880
	void SetClanRankVeteran(); // Function Mist.MistCheatingComponent.SetClanRankVeteran // (Final|Exec|Native|Public) // @ game+0x10c5860
	void SetClanRankOfficer(); // Function Mist.MistCheatingComponent.SetClanRankOfficer // (Final|Exec|Native|Public) // @ game+0x10c5840
	void SetClanRankMember(); // Function Mist.MistCheatingComponent.SetClanRankMember // (Final|Exec|Native|Public) // @ game+0x10c5820
	void SetClanRankLeader(); // Function Mist.MistCheatingComponent.SetClanRankLeader // (Final|Exec|Native|Public) // @ game+0x10c5800
	void SetClanPermission(int32_t Permission, bool bValue); // Function Mist.MistCheatingComponent.SetClanPermission // (Final|Exec|Native|Public) // @ game+0x10c5740
	void SetClaim(int64_t CharacterId, int64_t ClanId); // Function Mist.MistCheatingComponent.SetClaim // (Final|Exec|Native|Public) // @ game+0x10c5680
	void SetActorHealth(float Value); // Function Mist.MistCheatingComponent.SetActorHealth // (Final|Exec|Native|Public) // @ game+0x10c5600
	void SetAchievementStat(struct FString AchievementStatName, int32_t Value); // Function Mist.MistCheatingComponent.SetAchievementStat // (Final|Exec|Native|Public) // @ game+0x10c5520
	void ServerUseServerSideMovement(float Duration); // Function Mist.MistCheatingComponent.ServerUseServerSideMovement // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5410
	void ServerUseItem(struct UMistItemTemplate* Item); // Function Mist.MistCheatingComponent.ServerUseItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5380
	void ServerUpgradeWalkerStage(); // Function Mist.MistCheatingComponent.ServerUpgradeWalkerStage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5360
	void ServerUnlockTechTree(); // Function Mist.MistCheatingComponent.ServerUnlockTechTree // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5340
	void ServerUnlockTech(struct UMistUnlockableTreeItem* TechTreeItem); // Function Mist.MistCheatingComponent.ServerUnlockTech // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c52b0
	void ServerUnlockPerks(); // Function Mist.MistCheatingComponent.ServerUnlockPerks // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5290
	void ServerToggleStatusEffectsDebug(struct AMistPlayer* Player); // Function Mist.MistCheatingComponent.ServerToggleStatusEffectsDebug // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5200
	void ServerToggleInvincibility(); // Function Mist.MistCheatingComponent.ServerToggleInvincibility // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x109c850
	void ServerToggleIdle(); // Function Mist.MistCheatingComponent.ServerToggleIdle // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c51e0
	void ServerTeleportWalkerTo(float X, float Y); // Function Mist.MistCheatingComponent.ServerTeleportWalkerTo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5110
	void ServerTeleportToPlayer(struct FString PlayerName); // Function Mist.MistCheatingComponent.ServerTeleportToPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5070
	void ServerTeleportTo(struct FVector Location, bool bAdjustToGround); // Function Mist.MistCheatingComponent.ServerTeleportTo // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x10c4f90
	void ServerTeleportPlayerToMe(struct FString PlayerName); // Function Mist.MistCheatingComponent.ServerTeleportPlayerToMe // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4ef0
	void ServerTeleportEveryoneToMe(); // Function Mist.MistCheatingComponent.ServerTeleportEveryoneToMe // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4ed0
	void ServerTeleport(float Distance); // Function Mist.MistCheatingComponent.ServerTeleport // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4e50
	void ServerTakeItems(struct FString Name, int32_t Count, bool bBestEffort); // Function Mist.MistCheatingComponent.ServerTakeItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4d30
	void ServerStripWorm(); // Function Mist.MistCheatingComponent.ServerStripWorm // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4d10
	void ServerStopWorm(bool Value); // Function Mist.MistCheatingComponent.ServerStopWorm // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4c80
	void ServerStopSpectating(); // Function Mist.MistCheatingComponent.ServerStopSpectating // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4c60
	void ServerStartSpectating(bool bShowAllNametags); // Function Mist.MistCheatingComponent.ServerStartSpectating // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4bd0
	void ServerStartCineTimer(float Time, struct FString Message); // Function Mist.MistCheatingComponent.ServerStartCineTimer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4af0
	void ServerSpawnWalker(struct AMistWalker* InWalkerToSpawn, int32_t WalkerQuality); // Function Mist.MistCheatingComponent.ServerSpawnWalker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4a20
	void ServerSpawnSandstorm(struct FTransform Transform); // Function Mist.MistCheatingComponent.ServerSpawnSandstorm // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x10c4930
	void ServerSpawnProtectWalker(); // Function Mist.MistCheatingComponent.ServerSpawnProtectWalker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4910
	void ServerSpawnPoi(); // Function Mist.MistCheatingComponent.ServerSpawnPoi // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x108bfd0
	void ServerSpawnMonkey(float Distance, int32_t Amount); // Function Mist.MistCheatingComponent.ServerSpawnMonkey // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4840
	void ServerSpawnMob(struct AActor* InMobToSpawn, float Distance, int32_t Amount); // Function Mist.MistCheatingComponent.ServerSpawnMob // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4740
	void ServerSpawnFightClubWeaponRack(struct FString ItemSetName, bool bUseOncePerRespawn, struct TArray<struct UMistItemTemplate*> Items, struct TArray<int32_t> Quantities); // Function Mist.MistCheatingComponent.ServerSpawnFightClubWeaponRack // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c45c0
	void ServerSpawnEventAsteroid(); // Function Mist.MistCheatingComponent.ServerSpawnEventAsteroid // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c45a0
	void ServerSpawnCreatures(struct AMistPhysicalMob* Creature, struct AMistMobController* CreatureController, float Distance); // Function Mist.MistCheatingComponent.ServerSpawnCreatures // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c44a0
	void ServerSpawnCombatBot(float Distance, int32_t CombatAction, float HeavyAttackPower); // Function Mist.MistCheatingComponent.ServerSpawnCombatBot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c43a0
	void ServerSpawnActor(struct AActor* ActorClass, float Distance); // Function Mist.MistCheatingComponent.ServerSpawnActor // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c42d0
	void ServerSlomo(float NewTimeDilation); // Function Mist.MistCheatingComponent.ServerSlomo // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4250
	void ServerSimulateTravelWalker(); // Function Mist.MistCheatingComponent.ServerSimulateTravelWalker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4230
	void ServerSimulateRedeployPenalty(); // Function Mist.MistCheatingComponent.ServerSimulateRedeployPenalty // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4210
	void ServerSimulateAsteroidImpact(float Distance); // Function Mist.MistCheatingComponent.ServerSimulateAsteroidImpact // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1096cd0
	void ServerSetWeather(int32_t Index); // Function Mist.MistCheatingComponent.ServerSetWeather // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4180
	void ServerSetWalkerStage(int32_t NewStage); // Function Mist.MistCheatingComponent.ServerSetWalkerStage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c40f0
	void ServerSetWalkerSandiness(float Sandiness); // Function Mist.MistCheatingComponent.ServerSetWalkerSandiness // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c4070
	void ServerSetWalkerKinematic(bool bValue); // Function Mist.MistCheatingComponent.ServerSetWalkerKinematic // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3fe0
	void ServerSetWalkerCraftingSkill(enum class EMistWalkerType WalkerType, int32_t Level); // Function Mist.MistCheatingComponent.ServerSetWalkerCraftingSkill // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3f10
	void ServerSetSlotReservations(int32_t TotalSlots, int64_t Clan1Id, int32_t Clan1Slots, int64_t Clan2Id, int32_t Clan2Slots); // Function Mist.MistCheatingComponent.ServerSetSlotReservations // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3d90
	void ServerSetServerTime(float Time); // Function Mist.MistCheatingComponent.ServerSetServerTime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3d10
	void ServerSetRealmTileDecay(float DecayInSeconds); // Function Mist.MistCheatingComponent.ServerSetRealmTileDecay // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3c90
	void ServerSetRealmStatus(float ShutdownTimeSeconds, struct FString Status); // Function Mist.MistCheatingComponent.ServerSetRealmStatus // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3bb0
	void ServerSetPresentationMode(bool bInIsEnabled); // Function Mist.MistCheatingComponent.ServerSetPresentationMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3b20
	void ServerSetPlayerTier(enum class EMistAccountTier InTier); // Function Mist.MistCheatingComponent.ServerSetPlayerTier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3aa0
	void ServerSetPlayerStat(int32_t Amount, struct FString StatName); // Function Mist.MistCheatingComponent.ServerSetPlayerStat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c39c0
	void ServerSetPlayerIds(int64_t CharacterId, int64_t ClanId); // Function Mist.MistCheatingComponent.ServerSetPlayerIds // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c38f0
	void ServerSetPingInterval(int32_t Interval); // Function Mist.MistCheatingComponent.ServerSetPingInterval // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3860
	void ServerSetMultipliers(float Experience, float HarvestQuantity); // Function Mist.MistCheatingComponent.ServerSetMultipliers // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3790
	void ServerSetMaxServerFps(float InFpsCap); // Function Mist.MistCheatingComponent.ServerSetMaxServerFps // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3710
	void ServerSetLookatOwnership(int64_t ClanId); // Function Mist.MistCheatingComponent.ServerSetLookatOwnership // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3680
	void ServerSetHealth(float Health, float MaxHealth); // Function Mist.MistCheatingComponent.ServerSetHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c35b0
	void ServerSetClanPermission(int32_t Permission, bool bValue); // Function Mist.MistCheatingComponent.ServerSetClanPermission // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c34e0
	void ServerSetClaim(int64_t CharacterId, int64_t ClanId); // Function Mist.MistCheatingComponent.ServerSetClaim // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3410
	void ServerSetCheatEnabled(struct FName InCheat, bool bEnable); // Function Mist.MistCheatingComponent.ServerSetCheatEnabled // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3340
	void ServerSetCharacterState(enum class EMistCharacterState State); // Function Mist.MistCheatingComponent.ServerSetCharacterState // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c32c0
	void ServerSetActorHealth(float Value); // Function Mist.MistCheatingComponent.ServerSetActorHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3240
	void ServerSendTrashReliable(struct TArray<int32_t> TrashArray); // Function Mist.MistCheatingComponent.ServerSendTrashReliable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c31a0
	void ServerSendTrash(struct TArray<int32_t> TrashArray); // Function Mist.MistCheatingComponent.ServerSendTrash // (Net|Native|Event|Public|NetServer) // @ game+0x10c3100
	void ServerSaveLocalWorld(struct FString SaveName); // Function Mist.MistCheatingComponent.ServerSaveLocalWorld // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3060
	void ServerRestartTutorial(); // Function Mist.MistCheatingComponent.ServerRestartTutorial // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c3040
	void ServerRemoveWaypoint(int32_t Index); // Function Mist.MistCheatingComponent.ServerRemoveWaypoint // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2fb0
	void ServerRemoveSandstorm(); // Function Mist.MistCheatingComponent.ServerRemoveSandstorm // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2f90
	void ServerRemoveMarkers(); // Function Mist.MistCheatingComponent.ServerRemoveMarkers // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2f70
	void ServerRegenerateFlotillaQuests(int32_t Number); // Function Mist.MistCheatingComponent.ServerRegenerateFlotillaQuests // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2ee0
	void ServerPersistServer(bool bWithCleanup); // Function Mist.MistCheatingComponent.ServerPersistServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2e50
	void ServerNoClip(bool bEnable); // Function Mist.MistCheatingComponent.ServerNoClip // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2dc0
	void ServerNextQuest(int32_t Quantity); // Function Mist.MistCheatingComponent.ServerNextQuest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2d30
	void ServerNetActor(struct AMistNetProjectile* NetClass); // Function Mist.MistCheatingComponent.ServerNetActor // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2ca0
	void ServerModifyEquipmentWear(float WearDelta); // Function Mist.MistCheatingComponent.ServerModifyEquipmentWear // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x109d030
	void ServerLocalFreeBuilding(bool bEnable); // Function Mist.MistCheatingComponent.ServerLocalFreeBuilding // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2c10
	void ServerLoadLocalWorld(struct FString SaveName); // Function Mist.MistCheatingComponent.ServerLoadLocalWorld // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2b70
	void ServerLeaveClan(); // Function Mist.MistCheatingComponent.ServerLeaveClan // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10a3cd0
	void ServerKillWorm(); // Function Mist.MistCheatingComponent.ServerKillWorm // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2b50
	void ServerKillAllMonkeys(); // Function Mist.MistCheatingComponent.ServerKillAllMonkeys // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2b30
	void ServerKillAllMobs(); // Function Mist.MistCheatingComponent.ServerKillAllMobs // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2b10
	void ServerKillAllFoliage(); // Function Mist.MistCheatingComponent.ServerKillAllFoliage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2af0
	void ServerKickMe(); // Function Mist.MistCheatingComponent.ServerKickMe // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2ad0
	void ServerGrantShopItem(struct FName ShopItemId, int32_t Amount); // Function Mist.MistCheatingComponent.ServerGrantShopItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2a00
	void ServerGrantLocalShopItem(struct FName ShopItemId, int32_t Amount); // Function Mist.MistCheatingComponent.ServerGrantLocalShopItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2930
	void ServerGiveMoney(int32_t Amount); // Function Mist.MistCheatingComponent.ServerGiveMoney // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c28a0
	void ServerGiveItem(struct FMistItem Item, int32_t Count); // Function Mist.MistCheatingComponent.ServerGiveItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c27b0
	void ServerGiveIc(int32_t Amount, bool bFromQuests); // Function Mist.MistCheatingComponent.ServerGiveIc // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c26e0
	void ServerGiveExp(int32_t Amount, bool IsShared); // Function Mist.MistCheatingComponent.ServerGiveExp // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2610
	void ServerGetPresentationMode(); // Function Mist.MistCheatingComponent.ServerGetPresentationMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10a41d0
	void ServerGetPlayerTier(); // Function Mist.MistCheatingComponent.ServerGetPlayerTier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10a4190
	void ServerGetClanRank(); // Function Mist.MistCheatingComponent.ServerGetClanRank // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10a4130
	void ServerGenerateRandomAuction(); // Function Mist.MistCheatingComponent.ServerGenerateRandomAuction // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c25f0
	void ServerFreeShopItems(bool bEnable); // Function Mist.MistCheatingComponent.ServerFreeShopItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2560
	void ServerForceSendStatistics(); // Function Mist.MistCheatingComponent.ServerForceSendStatistics // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2540
	void ServerEquipItem(struct UMistEquipmentItemTemplate* ItemClass); // Function Mist.MistCheatingComponent.ServerEquipItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c24b0
	void ServerEnterMarkersMode(); // Function Mist.MistCheatingComponent.ServerEnterMarkersMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2490
	void ServerEnableRupu(); // Function Mist.MistCheatingComponent.ServerEnableRupu // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2470
	void ServerDyeAllItems(int32_t PrimaryDyeId, int32_t SecondaryDyeId); // Function Mist.MistCheatingComponent.ServerDyeAllItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c23b0
	void ServerDumpPhysicsComplexity(); // Function Mist.MistCheatingComponent.ServerDumpPhysicsComplexity // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2390
	void ServerDisableRupu(); // Function Mist.MistCheatingComponent.ServerDisableRupu // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2370
	void ServerDestroyObject(); // Function Mist.MistCheatingComponent.ServerDestroyObject // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2350
	void ServerDebugFoliageQualityValue(struct FString GroupNameFilter, float X, float Y); // Function Mist.MistCheatingComponent.ServerDebugFoliageQualityValue // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2230
	void ServerDamageWalker(float Damage, struct UDamageType* DamageType); // Function Mist.MistCheatingComponent.ServerDamageWalker // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2160
	void ServerCustomizeCharacter(struct FMistCharacterCustomizationValues CustomizationValues); // Function Mist.MistCheatingComponent.ServerCustomizeCharacter // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c20b0
	void ServerCreateClan(struct FString InName, int32_t ColorIndex, int32_t EmblemIndex); // Function Mist.MistCheatingComponent.ServerCreateClan // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1f90
	void ServerCrash(int32_t CrashType, bool bPersistServer); // Function Mist.MistCheatingComponent.ServerCrash // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1ec0
	void ServerClearInventory(); // Function Mist.MistCheatingComponent.ServerClearInventory // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1ea0
	void ServerClearClaim(); // Function Mist.MistCheatingComponent.ServerClearClaim // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1e80
	void ServerClapperBoard(float Delay); // Function Mist.MistCheatingComponent.ServerClapperBoard // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1e00
	void ServerChangeToClan(int64_t ClanId); // Function Mist.MistCheatingComponent.ServerChangeToClan // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1d70
	void ServerAdvanceAuctions(); // Function Mist.MistCheatingComponent.ServerAdvanceAuctions // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1d50
	void ServerAdminOpenEverything(bool bEnable); // Function Mist.MistCheatingComponent.ServerAdminOpenEverything // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1cc0
	void ServerAddWaypoint(int32_t Index, struct FString Designation, struct FColor Color, struct FVector Location); // Function Mist.MistCheatingComponent.ServerAddWaypoint // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x10c1b70
	void ServerAddRandomTradeStationVaultContent(int32_t Money, int32_t NumItems, struct FString ItemNameFilter); // Function Mist.MistCheatingComponent.ServerAddRandomTradeStationVaultContent // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1a50
	void ServerAddRandomTradeStationOrders(int32_t NumOrders, struct FString ItemNameFilter); // Function Mist.MistCheatingComponent.ServerAddRandomTradeStationOrders // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1970
	void ServerActivateVitamin(struct UMistVitaminItemTemplate* ItemClass); // Function Mist.MistCheatingComponent.ServerActivateVitamin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c18e0
	void Server_RegenerateIcOrdersWithOffest(int32_t InOffset); // Function Mist.MistCheatingComponent.Server_RegenerateIcOrdersWithOffest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c5490
	void SendTrashToServer(int32_t Amount, int32_t Size, bool bReliable); // Function Mist.MistCheatingComponent.SendTrashToServer // (Final|Exec|Native|Public) // @ game+0x10c17e0
	void SaveLocalWorld(struct FString SaveName); // Function Mist.MistCheatingComponent.SaveLocalWorld // (Final|Exec|Native|Public) // @ game+0x10c1740
	void Revive(); // Function Mist.MistCheatingComponent.Revive // (Final|Exec|Native|Public) // @ game+0x10c1720
	void RestartTutorial(); // Function Mist.MistCheatingComponent.RestartTutorial // (Final|Exec|Native|Public) // @ game+0x10c1700
	void ResetAchievements(); // Function Mist.MistCheatingComponent.ResetAchievements // (Final|Exec|Native|Public) // @ game+0x10c16e0
	void RemoveSandstorm(); // Function Mist.MistCheatingComponent.RemoveSandstorm // (Final|Exec|Native|Public) // @ game+0x10c16c0
	void RemoveMarkers(); // Function Mist.MistCheatingComponent.RemoveMarkers // (Final|Exec|Native|Public) // @ game+0x10c16a0
	void RemoveHudCountdown(struct FString Identifier); // Function Mist.MistCheatingComponent.RemoveHudCountdown // (Final|Exec|Native|Public) // @ game+0x10c1600
	void RegenerateIcOrdersWithOffset(int32_t InOffset); // Function Mist.MistCheatingComponent.RegenerateIcOrdersWithOffset // (Final|Exec|Native|Public) // @ game+0x10c1580
	void RegenerateFlotillaQuests(int32_t Number); // Function Mist.MistCheatingComponent.RegenerateFlotillaQuests // (Final|Exec|Native|Public) // @ game+0x10c1500
	void ReceiveInvite(); // Function Mist.MistCheatingComponent.ReceiveInvite // (Final|Exec|Native|Public) // @ game+0x10c14e0
	void PrintStatusEffects(); // Function Mist.MistCheatingComponent.PrintStatusEffects // (Final|Exec|Native|Public) // @ game+0x10c14c0
	void PersistServerWithCleanup(); // Function Mist.MistCheatingComponent.PersistServerWithCleanup // (Final|Exec|Native|Public) // @ game+0x10c14a0
	void PersistServer(); // Function Mist.MistCheatingComponent.PersistServer // (Final|Exec|Native|Public) // @ game+0x10c1480
	void PauseWeather(); // Function Mist.MistCheatingComponent.PauseWeather // (Final|Exec|Native|Public) // @ game+0x10c1460
	void OffMapLobby2Stub(); // Function Mist.MistCheatingComponent.OffMapLobby2Stub // (Final|Exec|Native|Public) // @ game+0x10c1440
	void NoClip(bool bEnable); // Function Mist.MistCheatingComponent.NoClip // (Final|Exec|Native|Public) // @ game+0x10c13b0
	void NextQuest(int32_t Quantity); // Function Mist.MistCheatingComponent.NextQuest // (Final|Exec|Native|Public) // @ game+0x10c1330
	void NetActor(struct FString NetClassName); // Function Mist.MistCheatingComponent.NetActor // (Final|Exec|Native|Public) // @ game+0x10c1290
	void ModifyEquipmentWear(float WearDelta); // Function Mist.MistCheatingComponent.ModifyEquipmentWear // (Final|Exec|Native|Public) // @ game+0x10c1210
	void LocalFreeBuilding(bool bEnable); // Function Mist.MistCheatingComponent.LocalFreeBuilding // (Final|Exec|Native|Public) // @ game+0x10c1180
	void LoadLocalWorld(struct FString SaveName); // Function Mist.MistCheatingComponent.LoadLocalWorld // (Final|Exec|Native|Public) // @ game+0x10c10e0
	void LeaveMarkersMode(); // Function Mist.MistCheatingComponent.LeaveMarkersMode // (Final|Exec|Native|Public) // @ game+0x10c10c0
	void LeaveClan(); // Function Mist.MistCheatingComponent.LeaveClan // (Final|Exec|Native|Public) // @ game+0x10c10a0
	void KnockOut(); // Function Mist.MistCheatingComponent.KnockOut // (Final|Exec|Native|Public) // @ game+0x10c1080
	void KillWorm(); // Function Mist.MistCheatingComponent.KillWorm // (Final|Exec|Native|Public) // @ game+0x10c1060
	void KillAllMonkeys(); // Function Mist.MistCheatingComponent.KillAllMonkeys // (Final|Exec|Native|Public) // @ game+0x10c1040
	void KillAllMobs(); // Function Mist.MistCheatingComponent.KillAllMobs // (Final|Exec|Native|Public) // @ game+0x10c1020
	void KillAllFoliage(); // Function Mist.MistCheatingComponent.KillAllFoliage // (Final|Exec|Native|Public) // @ game+0x10c1000
	void Kill(); // Function Mist.MistCheatingComponent.Kill // (Final|Exec|Native|Public) // @ game+0x10c0fe0
	void KickMe(); // Function Mist.MistCheatingComponent.KickMe // (Final|Exec|Native|Public) // @ game+0x10c0fc0
	void JoinRealmStub(); // Function Mist.MistCheatingComponent.JoinRealmStub // (Final|Exec|Native|Public) // @ game+0x10c0fa0
	void JoinRealmSearchStub(); // Function Mist.MistCheatingComponent.JoinRealmSearchStub // (Final|Exec|Native|Public) // @ game+0x10c0f80
	void JoinQueueStub(); // Function Mist.MistCheatingComponent.JoinQueueStub // (Final|Exec|Native|Public) // @ game+0x10c0f60
	void InstantConstruction(bool bEnable); // Function Mist.MistCheatingComponent.InstantConstruction // (Final|Exec|Native|Public) // @ game+0x10c0ed0
	void IncrementAchievementStat(struct FString AchievementStatName); // Function Mist.MistCheatingComponent.IncrementAchievementStat // (Final|Exec|Native|Public) // @ game+0x10c0e30
	void HACK_EnableGameplayDebuggingInput(); // Function Mist.MistCheatingComponent.HACK_EnableGameplayDebuggingInput // (Final|Exec|Native|Public) // @ game+0x10c0d70
	void GroundQualityDebugArea(float DebugLifeTime, float Radius); // Function Mist.MistCheatingComponent.GroundQualityDebugArea // (Final|Exec|Native|Public) // @ game+0x10c0cb0
	void GrantShopItem(struct FName ShopItemId, int32_t Amount); // Function Mist.MistCheatingComponent.GrantShopItem // (Final|Exec|Native|Public) // @ game+0x10c0bf0
	void GrantLocalShopItem(struct FName ShopItemId, int32_t Amount); // Function Mist.MistCheatingComponent.GrantLocalShopItem // (Final|Exec|Native|Public) // @ game+0x10c0bf0
	void GiveMoney(int32_t Amount); // Function Mist.MistCheatingComponent.GiveMoney // (Final|Exec|Native|Public) // @ game+0x10c0b70
	void GiveItemSkin(struct FString Name, int32_t Skin, int32_t Count); // Function Mist.MistCheatingComponent.GiveItemSkin // (Final|Exec|Native|Public) // @ game+0x10c0900
	void GiveItemsFor(struct FString Name, int32_t Count); // Function Mist.MistCheatingComponent.GiveItemsFor // (Final|Exec|Native|Public) // @ game+0x10c0a50
	void GiveItemSet(struct FString NameFilter); // Function Mist.MistCheatingComponent.GiveItemSet // (Final|Exec|Native|Public) // @ game+0x10c0820
	void GiveItemQuality(struct FString Name, int32_t Quality, int32_t Count); // Function Mist.MistCheatingComponent.GiveItemQuality // (Final|Exec|Native|Public) // @ game+0x10c06d0
	void GiveItem(struct FString Name, int32_t Count); // Function Mist.MistCheatingComponent.GiveItem // (Final|Exec|Native|Public) // @ game+0x10c05b0
	void GiveIc(int32_t Amount, bool bFromQuests); // Function Mist.MistCheatingComponent.GiveIc // (Final|Exec|Native|Public) // @ game+0x10c04f0
	void GiveExp(int32_t Amount, bool IsShared); // Function Mist.MistCheatingComponent.GiveExp // (Final|Exec|Native|Public) // @ game+0x10c0430
	void GetPresentationMode(); // Function Mist.MistCheatingComponent.GetPresentationMode // (Final|Exec|Native|Public) // @ game+0x10c0410
	void GetPlayerTier(); // Function Mist.MistCheatingComponent.GetPlayerTier // (Final|Exec|Native|Public) // @ game+0x10c03f0
	void GetPlayerIds(); // Function Mist.MistCheatingComponent.GetPlayerIds // (Final|Exec|Native|Public) // @ game+0x10c03d0
	void GetClanRank(); // Function Mist.MistCheatingComponent.GetClanRank // (Final|Exec|Native|Public) // @ game+0x10c03b0
	void GenerateRandomAuction(); // Function Mist.MistCheatingComponent.GenerateRandomAuction // (Final|Exec|Native|Public) // @ game+0x10c0390
	void FreeShopItems(bool bEnable); // Function Mist.MistCheatingComponent.FreeShopItems // (Final|Exec|Native|Public) // @ game+0x10c0300
	void FreeBuilding(bool bEnable); // Function Mist.MistCheatingComponent.FreeBuilding // (Final|Exec|Native|Public) // @ game+0x10c0270
	void ForceSendStatistics(); // Function Mist.MistCheatingComponent.ForceSendStatistics // (Final|Exec|Native|Public) // @ game+0x10c0250
	void FoliageDebugArea(float DebugLifeTime, float Radius); // Function Mist.MistCheatingComponent.FoliageDebugArea // (Final|Exec|Native|Public) // @ game+0x10c0190
	void ExecuteCommands(struct FString CommandsKey); // Function Mist.MistCheatingComponent.ExecuteCommands // (Final|Exec|Native|Public) // @ game+0x10c00f0
	void ExecuteAdminCommand(struct FString CommandsKey); // Function Mist.MistCheatingComponent.ExecuteAdminCommand // (Final|Exec|Native|Public) // @ game+0x10c0050
	void EquipItemSet(struct FString NameFilter); // Function Mist.MistCheatingComponent.EquipItemSet // (Final|Exec|Native|Public) // @ game+0x10bff70
	void EquipItem(struct FString Name); // Function Mist.MistCheatingComponent.EquipItem // (Final|Exec|Native|Public) // @ game+0x10bfe90
	void EnterMarkersMode(); // Function Mist.MistCheatingComponent.EnterMarkersMode // (Final|Exec|Native|Public) // @ game+0x10bfe70
	void EnableRupu(); // Function Mist.MistCheatingComponent.EnableRupu // (Final|Exec|Native|Public) // @ game+0x10bfe50
	void DyeAllItems(int32_t PrimaryDyeId, int32_t SecondaryDyeId); // Function Mist.MistCheatingComponent.DyeAllItems // (Final|Exec|Native|Public) // @ game+0x10bfd90
	void DumpPhysicsComplexity(bool bServer); // Function Mist.MistCheatingComponent.DumpPhysicsComplexity // (Final|Exec|Native|Public) // @ game+0x10bfd00
	void DumpCurrentWeatherData(); // Function Mist.MistCheatingComponent.DumpCurrentWeatherData // (Final|Exec|Native|Public) // @ game+0x10bfca0
	void DisableRupu(); // Function Mist.MistCheatingComponent.DisableRupu // (Final|Exec|Native|Public) // @ game+0x10bfce0
	void DestroyObject(); // Function Mist.MistCheatingComponent.DestroyObject // (Final|Exec|Native|Public) // @ game+0x10bfcc0
	void DebugWeathers(); // Function Mist.MistCheatingComponent.DebugWeathers // (Final|Exec|Native|Public) // @ game+0x10bfca0
	void DebugLocomotion(); // Function Mist.MistCheatingComponent.DebugLocomotion // (Final|Exec|Native|Public) // @ game+0x10bfca0
	void DebugFoliageType(); // Function Mist.MistCheatingComponent.DebugFoliageType // (Final|Exec|Native|Public) // @ game+0x10bfc80
	void DebugFoliageQualityValue(struct FString GroupNameFilter, float X, float Y); // Function Mist.MistCheatingComponent.DebugFoliageQualityValue // (Final|Exec|Native|Public) // @ game+0x10bfb60
	void DebugAnimationBudgeting(bool bOnlyWithTickEnabled); // Function Mist.MistCheatingComponent.DebugAnimationBudgeting // (Final|Exec|Native|Public) // @ game+0x10bfad0
	void DamageWalker(float Damage, struct FString DamageTypeName); // Function Mist.MistCheatingComponent.DamageWalker // (Final|Exec|Native|Public) // @ game+0x10bf9f0
	void CustomizeCharacter(); // Function Mist.MistCheatingComponent.CustomizeCharacter // (Final|Exec|Native|Public) // @ game+0x10bf9d0
	void CreateClan(struct FString InName, int32_t ColorIndex, int32_t EmblemIndex); // Function Mist.MistCheatingComponent.CreateClan // (Final|Exec|Native|Public) // @ game+0x10bf8c0
	void CreateCharacterStub(); // Function Mist.MistCheatingComponent.CreateCharacterStub // (Final|Exec|Native|Public) // @ game+0x10bf8a0
	void CrashServer(int32_t CrashType, bool bPersistServer); // Function Mist.MistCheatingComponent.CrashServer // (Final|Exec|Native|Public) // @ game+0x10bf7e0
	void Crash(int32_t CrashType); // Function Mist.MistCheatingComponent.Crash // (Final|Exec|Native|Public) // @ game+0x10bf760
	void ClearInventory(); // Function Mist.MistCheatingComponent.ClearInventory // (Final|Exec|Native|Public) // @ game+0x10bf740
	void ClearClaim(); // Function Mist.MistCheatingComponent.ClearClaim // (Final|Exec|Native|Public) // @ game+0x10bf720
	void ClapperBoard(float Delay); // Function Mist.MistCheatingComponent.ClapperBoard // (Final|Exec|Native|Public) // @ game+0x10bf6a0
	void CheckRootOrientation(struct FString WeaponTypeName, struct FString LocomotionTypeName); // Function Mist.MistCheatingComponent.CheckRootOrientation // (Final|Exec|Native|Public) // @ game+0x10bf530
	void CheckCombatAnimations(struct FString Name, bool bPrintSweetspots); // Function Mist.MistCheatingComponent.CheckCombatAnimations // (Final|Exec|Native|Public) // @ game+0x10bf400
	void CheatUnlockAll(); // Function Mist.MistCheatingComponent.CheatUnlockAll // (Final|Exec|Native|Public) // @ game+0x10bf3e0
	void CharacterStopMedidating(); // Function Mist.MistCheatingComponent.CharacterStopMedidating // (Final|Exec|Native|Public) // @ game+0x10bf3c0
	void CharacterStartMedidating(); // Function Mist.MistCheatingComponent.CharacterStartMedidating // (Final|Exec|Native|Public) // @ game+0x10bf3a0
	void CharacterMovementFullLog(bool bValue); // Function Mist.MistCheatingComponent.CharacterMovementFullLog // (Final|Exec|Native|Public) // @ game+0x10bf310
	void ChangeToClan(int64_t ClanId); // Function Mist.MistCheatingComponent.ChangeToClan // (Final|Exec|Native|Public) // @ game+0x10bf290
	void AdvanceAuctions(); // Function Mist.MistCheatingComponent.AdvanceAuctions // (Final|Exec|Native|Public) // @ game+0x10bf270
	void AdminOpenEverything(bool bEnable); // Function Mist.MistCheatingComponent.AdminOpenEverything // (Final|Exec|Native|Public) // @ game+0x10bf1e0
	void AddRandomTradeStationVaultContent(int32_t Money, int32_t NumItems, struct FString ItemNameFilter); // Function Mist.MistCheatingComponent.AddRandomTradeStationVaultContent // (Final|Exec|Native|Public) // @ game+0x10bf090
	void AddRandomTradeStationOrders(int32_t NumOrders, struct FString ItemNameFilter); // Function Mist.MistCheatingComponent.AddRandomTradeStationOrders // (Final|Exec|Native|Public) // @ game+0x10bef70
	void AddHudMessage(struct FText& MessageText, bool bRequiresConfirmation); // Function Mist.MistCheatingComponent.AddHudMessage // (Final|Exec|Native|Public|HasOutParms) // @ game+0x10bee50
	void AddHudLog(struct FName& Type, struct FText& TextOverride); // Function Mist.MistCheatingComponent.AddHudLog // (Final|Exec|Native|Public|HasOutParms) // @ game+0x10bed20
	void AddHudCountdown(struct FText& Text, float Seconds, float HideAfterSeconds, bool bKeep, bool bRemoveOnBind, struct FString Identifier, struct FText& Description); // Function Mist.MistCheatingComponent.AddHudCountdown // (Final|Exec|Native|Public|HasOutParms) // @ game+0x10bea60
};

// Class Mist.MistCheatingOverlayWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistCheatingOverlayWidget : UMistUIWidget {
	struct UVerticalBox* CheatTextHolderVerticalBox; // 0x2c0(0x08)
};

// Class Mist.MistCheatingTextBlockWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistCheatingTextBlockWidget : UMistUIWidget {
	struct UTextBlock* CheatTextBlock; // 0x2c0(0x08)
	char pad_2C8[0x58]; // 0x2c8(0x58)

	void HandleCheatLogUpdated(struct FCheatLog DataCheatLog); // Function Mist.MistCheatingTextBlockWidget.HandleCheatLogUpdated // (Final|Native|Private) // @ game+0x10cc5a0
};

// Class Mist.MistStructurePart
// Size: 0x5b8 (Inherited: 0x508)
struct AMistStructurePart : AMistBaseStructurePart {
	char pad_508[0x20]; // 0x508(0x20)
	struct UMistNettableComponent* NettableComponent; // 0x528(0x08)
	float Health; // 0x530(0x04)
	bool bFoundationWalkerCore; // 0x534(0x01)
	char pad_535[0x3]; // 0x535(0x03)
	struct FString CustomName; // 0x538(0x10)
	char pad_548[0x20]; // 0x548(0x20)
	struct FConnectedNodesSet ConnectedNodes; // 0x568(0x50)

	void StructureHealthChangedEvent__DelegateSignature(struct AMistStructurePart* Sender, float PrevHealth, float NewHealth); // DelegateFunction Mist.MistStructurePart.StructureHealthChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_Health(float PrevHealth); // Function Mist.MistStructurePart.OnRep_Health // (Native|Protected) // @ game+0x11a9560
	void OnRep_ConnectedNodes(); // Function Mist.MistStructurePart.OnRep_ConnectedNodes // (Final|Native|Private) // @ game+0x11a9500
	void MulticastSetCustomName(struct FString InCustomName); // Function Mist.MistStructurePart.MulticastSetCustomName // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11a9280
	void HandleNetAttached(); // Function Mist.MistStructurePart.HandleNetAttached // (Final|Native|Private) // @ game+0x11a87d0
};

// Class Mist.MistSteeringLevers
// Size: 0x5c8 (Inherited: 0x5b8)
struct AMistSteeringLevers : AMistStructurePart {
	struct UMistMannedWalkerControlComponent* ControlComponent; // 0x5b8(0x08)
	struct UMistInteractableComponent* SelectSpawnpointComponent; // 0x5c0(0x08)

	void HandleSelectSpawnpointQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // Function Mist.MistSteeringLevers.HandleSelectSpawnpointQuery // (Final|Native|Private|HasOutParms) // @ game+0x11a8a50
	void HandleSelectSpawnpointInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistSteeringLevers.HandleSelectSpawnpointInteract // (Final|Native|Private|HasOutParms) // @ game+0x11a8970
};

// Class Mist.MistCheatingLevers
// Size: 0x5c8 (Inherited: 0x5c8)
struct AMistCheatingLevers : AMistSteeringLevers {
};

// Class Mist.MistCheatingWalkerControlComponent
// Size: 0x648 (Inherited: 0x600)
struct UMistCheatingWalkerControlComponent : UMistMannedWalkerControlComponent {
	struct UMistProjectileItemTemplate* BoltItemTemplate; // 0x600(0x08)
	struct UMistProjectileItemTemplate* HarpoonItemTemplate1; // 0x608(0x08)
	struct UMistProjectileItemTemplate* HarpoonItemTemplate2; // 0x610(0x08)
	struct UMistProjectileItemTemplate* HarpoonItemTemplate3; // 0x618(0x08)
	struct UMistProjectileItemTemplate* TetherHarpoonItemTemplate1; // 0x620(0x08)
	struct UMistProjectileItemTemplate* TetherHarpoonItemTemplate2; // 0x628(0x08)
	struct UMistProjectileItemTemplate* TetherHarpoonItemTemplate3; // 0x630(0x08)
	float DebugLastShot; // 0x638(0x04)
	int32_t DebugAmmoSelection; // 0x63c(0x04)
	bool bDebugIsShooting; // 0x640(0x01)
	char pad_641[0x7]; // 0x641(0x07)

	void DebugShoot(int32_t Item, struct FVector Location, struct FRotator Rotation, bool Additional); // Function Mist.MistCheatingWalkerControlComponent.DebugShoot // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x10cc1d0
};

// Class Mist.MistCheckBox
// Size: 0x780 (Inherited: 0x770)
struct UMistCheckBox : UCheckBox {
	struct UMistBaseToolTipWidget* ToolTipWidgetClass; // 0x770(0x08)
	struct FMistCheckBoxStyle CheckBoxStyle; // 0x778(0x08)

	struct UWidget* CreateToolTipWidget(); // Function Mist.MistCheckBox.CreateToolTipWidget // (Native|Protected) // @ game+0x10b1050
};

// Class Mist.MistCinematicActor
// Size: 0x410 (Inherited: 0x410)
struct AMistCinematicActor : AMistCharacterCustomizationActor {
};

// Class Mist.MistCinematicSettings
// Size: 0xd0 (Inherited: 0x38)
struct UMistCinematicSettings : UMistSettingsObject {
	struct TSoftClassPtr<UObject> IntroSceneController; // 0x38(0x28)
	struct TSoftObjectPtr<ULevelSequence> IntroSceneLevelSequence; // 0x60(0x28)
	struct TArray<struct FMistIntroSceneAllowedMap> IntroSceneAllowedMaps; // 0x88(0x10)
	struct TSoftObjectPtr<UAnimMontage> IntroSceneTransitionAnimMontage; // 0x98(0x28)
	bool bUseFixedRotation; // 0xc0(0x01)
	char pad_C1[0x3]; // 0xc1(0x03)
	struct FRotator FixedRotation; // 0xc4(0x0c)
};

// Class Mist.MistClaimContenderPopupWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistClaimContenderPopupWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UTextBlock* ActivationStatusWidget; // 0x2c8(0x08)
	struct UTextBlock* ActivationTimerWidget; // 0x2d0(0x08)
	struct UTextBlock* ClanWidget; // 0x2d8(0x08)
	char pad_2E0[0x10]; // 0x2e0(0x10)

	void HandleActivationTimer(); // Function Mist.MistClaimContenderPopupWidget.HandleActivationTimer // (Final|Native|Protected) // @ game+0x10cc500
};

// Class Mist.MistClaimingWalkerComponent
// Size: 0x2c0 (Inherited: 0xf0)
struct UMistClaimingWalkerComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	bool bIsBlockedByTradeStationZone; // 0x110(0x01)
	char pad_111[0x1f]; // 0x111(0x1f)
	struct FMistComponentReference DeployInteractable; // 0x130(0x28)
	struct FMistComponentReference DirtyWaterContainer; // 0x158(0x28)
	struct FMistComponentReference PureWaterContainer; // 0x180(0x28)
	struct FMistComponentReference InventoryInteractable; // 0x1a8(0x28)
	struct FMistComponentReference PurifierInteractable; // 0x1d0(0x28)
	struct FMistComponentReference Purifier; // 0x1f8(0x28)
	struct FMistComponentReference NoBuildAreaRef; // 0x220(0x28)
	struct FMistComponentReference NoEnemyBuildAreaRef; // 0x248(0x28)
	struct FDateTime CreatedDate; // 0x270(0x08)
	float DeployAngleTolerance; // 0x278(0x04)
	char pad_27C[0x4]; // 0x27c(0x04)
	enum class EMistClaimingWalkerStatus ClaimingWalkerStatus; // 0x280(0x01)
	bool bDeploymentInProgress; // 0x281(0x01)
	char pad_282[0x6]; // 0x282(0x06)
	struct AMistWalker* CachedWalkerOwner; // 0x288(0x08)
	char pad_290[0x30]; // 0x290(0x30)

	void OnRep_ClaimingWalkerStatus(); // Function Mist.MistClaimingWalkerComponent.OnRep_ClaimingWalkerStatus // (Final|Native|Private) // @ game+0x10cceb0
	void HandleDeployQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // Function Mist.MistClaimingWalkerComponent.HandleDeployQuery // (Final|Native|Private|HasOutParms) // @ game+0x10cc860
	void HandleDeployInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistClaimingWalkerComponent.HandleDeployInteraction // (Final|Native|Private|HasOutParms) // @ game+0x10cc780
	void ActivateClaim(); // Function Mist.MistClaimingWalkerComponent.ActivateClaim // (Final|Native|Private) // @ game+0x10cc190
};

// Class Mist.MistClanOwnershipComponent
// Size: 0x1f8 (Inherited: 0xf0)
struct UMistClanOwnershipComponent : UActorComponent {
	char pad_F0[0x80]; // 0xf0(0x80)
	struct FMistClanInfo OwnerClan; // 0x170(0x20)
	struct FMistOwnershipCharacter OwnerCharacter; // 0x190(0x30)
	bool bCanShareOwnership; // 0x1c0(0x01)
	bool bMustShareOwnership; // 0x1c1(0x01)
	bool bCanTransferOwnership; // 0x1c2(0x01)
	char pad_1C3[0x5]; // 0x1c3(0x05)
	int64_t OpaqueOwnerId; // 0x1c8(0x08)
	bool bSharedOwnership; // 0x1d0(0x01)
	char pad_1D1[0x27]; // 0x1d1(0x27)

	void OnRep_OwnerClan(struct FMistClanInfo& PrevClan); // Function Mist.MistClanOwnershipComponent.OnRep_OwnerClan // (Final|Native|Private|HasOutParms) // @ game+0x10d19c0
	void OnRep_OwnerCharacter(struct FMistOwnershipCharacter& PrevCharacter); // Function Mist.MistClanOwnershipComponent.OnRep_OwnerCharacter // (Final|Native|Private|HasOutParms) // @ game+0x10d1900
	void MulticastSetSharedOwnership(bool bShared); // Function Mist.MistClanOwnershipComponent.MulticastSetSharedOwnership // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d1870
	void MulticastSetOwnership(struct FMistClanInfo InClan, struct FMistOwnershipCharacter InCharacter); // Function Mist.MistClanOwnershipComponent.MulticastSetOwnership // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d16d0
	void MulticastSetActive(bool bActive); // Function Mist.MistClanOwnershipComponent.MulticastSetActive // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d1640
};

// Class Mist.MistClaimManagerComponent
// Size: 0x3b0 (Inherited: 0x1f8)
struct UMistClaimManagerComponent : UMistClanOwnershipComponent {
	struct AActor* ClaimActor; // 0x1f8(0x08)
	struct UMistMapIconComponent* IconComponent; // 0x200(0x08)
	bool bIsClaimed; // 0x208(0x01)
	enum class EMistRealmMapTileClaimability Claimability; // 0x209(0x01)
	char pad_20A[0x2]; // 0x20a(0x02)
	struct FVector ClaimLocation; // 0x20c(0x0c)
	struct FDateTime CreatedDate; // 0x218(0x08)
	struct TArray<struct FMistClaimContenderInfo> ClaimContenders; // 0x220(0x10)
	struct TMap<struct FMistItem, int32_t> StoredHarvestedResources; // 0x230(0x50)
	char pad_280[0x90]; // 0x280(0x90)
	struct FTimerHandle ClaimMurderIconCleanupTimer; // 0x310(0x08)
	struct TArray<struct FMistClaimMurderInfo> ClaimMurders; // 0x318(0x10)
	struct TArray<struct UMistPoachingComponent*> ActivePoachingComponents; // 0x328(0x10)
	struct TArray<struct FMistTrackingHutData> TrackingHuts; // 0x338(0x10)
	char pad_348[0x68]; // 0x348(0x68)

	void OnRep_ClaimStatus(); // Function Mist.MistClaimManagerComponent.OnRep_ClaimStatus // (Final|Native|Private) // @ game+0x10cce90
	void OnRep_ClaimContenders(); // Function Mist.MistClaimManagerComponent.OnRep_ClaimContenders // (Final|Native|Private) // @ game+0x10cce70
	void MulticastSetClaim(struct FVector InClaimLocation, struct FDateTime InCreatedDate); // Function Mist.MistClaimManagerComponent.MulticastSetClaim // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x10ccda0
	void MulticastRemoveContender(int32_t ContenderId); // Function Mist.MistClaimManagerComponent.MulticastRemoveContender // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10ccd10
	void MulticastClearClaim(); // Function Mist.MistClaimManagerComponent.MulticastClearClaim // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10cccf0
	void MulticastAddMurder(struct FMistClaimMurderInfo Murder); // Function Mist.MistClaimManagerComponent.MulticastAddMurder // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10ccc60
	void MulticastAddContender(struct FMistClaimContenderInfo Contender); // Function Mist.MistClaimManagerComponent.MulticastAddContender // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10ccba0
	void ClaimMurderIconCleanup(); // Function Mist.MistClaimManagerComponent.ClaimMurderIconCleanup // (Final|Native|Public) // @ game+0x10cc1b0
};

// Class Mist.MistClaimMapAsset
// Size: 0x30 (Inherited: 0x30)
struct UMistClaimMapAsset : UDataAsset {
};

// Class Mist.MistClaimMurderReportMessageLogContentWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistClaimMurderReportMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* TextWidget; // 0x2c0(0x08)
	struct UMistClaimMurderReportMessageData* Data; // 0x2c8(0x08)
	struct TMap<enum class EMistWorldCardinalDirection, struct FText> AreaText; // 0x2d0(0x50)
};

// Class Mist.MistClaimPopupWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistClaimPopupWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UTextBlock* ProtectionStatusWidget; // 0x2c8(0x08)
	struct UTextBlock* ProtectionExpirationWidget; // 0x2d0(0x08)
	struct UTextBlock* PlayerWidget; // 0x2d8(0x08)
	struct UTextBlock* ClanWidget; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void HandleUpdateNeeded(); // Function Mist.MistClaimPopupWidget.HandleUpdateNeeded // (Final|Native|Protected) // @ game+0x10cc500
};

// Class Mist.MistClaimSettings
// Size: 0x50 (Inherited: 0x38)
struct UMistClaimSettings : UMistSettingsObject {
	int32_t VulnerabilityDuration; // 0x38(0x04)
	int32_t ProtectionDuration; // 0x3c(0x04)
	int32_t ActivationDuration; // 0x40(0x04)
	int32_t CooldownBeforeDeploy; // 0x44(0x04)
	int32_t Radius; // 0x48(0x04)
	int32_t NoBonusAfterMurderDuration; // 0x4c(0x04)
};

// Class Mist.MistClanAsset
// Size: 0xd0 (Inherited: 0x30)
struct UMistClanAsset : UDataAsset {
	struct TMap<struct FString, struct UTexture2D*> RankIcons; // 0x30(0x50)
	struct TMap<enum class EMistClanPermission, struct FString> PermissionDisplayTexts; // 0x80(0x50)
};

// Class Mist.MistClanBankBalanceData
// Size: 0x158 (Inherited: 0x28)
struct UMistClanBankBalanceData : UObject {
	char pad_28[0xa0]; // 0x28(0xa0)
	struct UMistBackendHttpClient* BackendClient; // 0xc8(0x08)
	char pad_D0[0x88]; // 0xd0(0x88)
};

// Class Mist.MistClanColorComponent
// Size: 0x210 (Inherited: 0xf0)
struct UMistClanColorComponent : UActorComponent {
	struct FMistComponentReference ComponentRef; // 0xf0(0x28)
	bool bCacheMeshesOnBeginPlay; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct FMistAttachmentMonitor AttachmentMonitor; // 0x120(0x80)
	struct FMistClanOwnershipMonitor OwnershipMonitor; // 0x1a0(0x60)
	struct TArray<struct UMeshComponent*> MeshComponents; // 0x200(0x10)

	struct FLinearColor GetClanColor(); // Function Mist.MistClanColorComponent.GetClanColor // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x10cc310
};

// Class Mist.MistClanColorSelectionWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistClanColorSelectionWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UBorder* SelectionBorderWidget; // 0x2d0(0x08)
	struct UImage* ImageWidget; // 0x2d8(0x08)
	struct UMistUIButton* Button; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void HandleButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistClanColorSelectionWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x10cc520
	void ClickedEvent__DelegateSignature(struct UMistClanColorSelectionWidget* Sender); // DelegateFunction Mist.MistClanColorSelectionWidget.ClickedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistClanConfigData
// Size: 0x110 (Inherited: 0x28)
struct UMistClanConfigData : UObject {
	char pad_28[0x88]; // 0x28(0x88)
	struct UMistBackendHttpClient* BackendClient; // 0xb0(0x08)
	char pad_B8[0x58]; // 0xb8(0x58)
};

// Class Mist.MistUIInputDialog
// Size: 0x430 (Inherited: 0x3c0)
struct UMistUIInputDialog : UMistUIDialog {
	struct UTextBlock* DescriptionTextWidget; // 0x3c0(0x08)
	struct UEditableTextBox* InputWidget; // 0x3c8(0x08)
	struct UButton* OKButtonWidget; // 0x3d0(0x08)
	struct UButton* CancelButtonWidget; // 0x3d8(0x08)
	struct FText Description; // 0x3e0(0x18)
	struct FText Hint; // 0x3f8(0x18)
	struct FText Input; // 0x410(0x18)
	bool bAllowEmpty; // 0x428(0x01)
	bool bDisableOKIfInvalid; // 0x429(0x01)
	char pad_42A[0x6]; // 0x42a(0x06)

	void HandleOKButtonClicked(); // Function Mist.MistUIInputDialog.HandleOKButtonClicked // (Final|Native|Private) // @ game+0x11c4df0
	void HandleInputTextCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function Mist.MistUIInputDialog.HandleInputTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x11c4cb0
	void HandleInputTextChanged(struct FText& Text); // Function Mist.MistUIInputDialog.HandleInputTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x11c4be0
	void HandleCancelButtonClicked(); // Function Mist.MistUIInputDialog.HandleCancelButtonClicked // (Final|Native|Private) // @ game+0x11c4a70
};

// Class Mist.MistClanCreateDialog
// Size: 0x4b0 (Inherited: 0x430)
struct UMistClanCreateDialog : UMistUIInputDialog {
	struct UWidget* NameValidationPanelWidget; // 0x430(0x08)
	struct UTextBlock* NameValidationTextWidget; // 0x438(0x08)
	struct UImage* ColorImageWidget; // 0x440(0x08)
	struct UScrollBox* ColorsScrollWidget; // 0x448(0x08)
	struct UHorizontalBox* ColorsListWidget; // 0x450(0x08)
	struct UScrollBox* EmblemsScrollWidget; // 0x458(0x08)
	struct UHorizontalBox* EmblemsListWidget; // 0x460(0x08)
	char pad_468[0x8]; // 0x468(0x08)
	struct FSlateSound ColorClickedSound; // 0x470(0x18)
	struct FSlateSound EmblemClickedSound; // 0x488(0x18)
	struct UMistClanColorSelectionWidget* SelectedColorWidget; // 0x4a0(0x08)
	struct UMistClanEmblemSelectionWidget* SelectedEmblemWidget; // 0x4a8(0x08)

	void HandleEmblemWidgetClicked(struct UMistClanEmblemSelectionWidget* Sender); // Function Mist.MistClanCreateDialog.HandleEmblemWidgetClicked // (Final|Native|Private) // @ game+0x10ccb20
	void HandleColorWidgetClicked(struct UMistClanColorSelectionWidget* Sender); // Function Mist.MistClanCreateDialog.HandleColorWidgetClicked // (Final|Native|Private) // @ game+0x10cc700
	struct UWidget* GetOkButtonWidget(enum class EUINavigation Nav); // Function Mist.MistClanCreateDialog.GetOkButtonWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x10cc470
	struct UWidget* GetCurrentSelectedEmblemWidget(enum class EUINavigation Nav); // Function Mist.MistClanCreateDialog.GetCurrentSelectedEmblemWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x10cc3e0
	struct UWidget* GetCurrentSelectedColorWidget(enum class EUINavigation Nav); // Function Mist.MistClanCreateDialog.GetCurrentSelectedColorWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x10cc350
};

// Class Mist.MistClanDataManager
// Size: 0xd8 (Inherited: 0x28)
struct UMistClanDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistDataManager* DataManager; // 0x30(0x08)
	struct TMap<struct FMistApiRealmCharacterIdentifier, struct UMistClanBankBalanceData*> BankBalanceItems; // 0x38(0x50)
	struct TMap<struct FMistApiRealmCharacterIdentifier, struct UMistClanConfigData*> ConfigItems; // 0x88(0x50)
};

// Class Mist.MistClanDepositFlotsWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistClanDepositFlotsWidget : UMistUIWidget {
	struct UButton* DepositFlotsButton; // 0x2c0(0x08)
	struct UButton* CancelButton; // 0x2c8(0x08)
	struct UTextBlock* PlayerFundsTextWidget; // 0x2d0(0x08)
	struct UMistNumberSliderWidget* DepositSliderWidget; // 0x2d8(0x08)
	struct UMistNumberInputWidget* DepositNumberInputWidget; // 0x2e0(0x08)
	struct UVerticalBox* ActionsVerticalBox; // 0x2e8(0x08)

	void HandleMoneyUpdated(struct AMistOasisPlayerState* InSender, uint64_t InMoney); // Function Mist.MistClanDepositFlotsWidget.HandleMoneyUpdated // (Final|Native|Private) // @ game+0x10d1420
	void HandleDepositSliderValueChanged(); // Function Mist.MistClanDepositFlotsWidget.HandleDepositSliderValueChanged // (Final|Native|Private) // @ game+0x10d1040
	void HandleDepositInputValueChanged(); // Function Mist.MistClanDepositFlotsWidget.HandleDepositInputValueChanged // (Final|Native|Private) // @ game+0x10d1020
	void HandleDepositFlotsButtonClicked(); // Function Mist.MistClanDepositFlotsWidget.HandleDepositFlotsButtonClicked // (Final|Native|Private) // @ game+0x10d0fe0
	void HandleCancelButtonClicked(); // Function Mist.MistClanDepositFlotsWidget.HandleCancelButtonClicked // (Final|Native|Private) // @ game+0x10d0ee0
};

// Class Mist.MistClanEmblemSelectionWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistClanEmblemSelectionWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UBorder* SelectionBorderWidget; // 0x2d0(0x08)
	struct UImage* ImageWidget; // 0x2d8(0x08)
	struct UMistUIButton* Button; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void HandleButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistClanEmblemSelectionWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x10cc520
	void ClickedEvent__DelegateSignature(struct UMistClanEmblemSelectionWidget* Sender); // DelegateFunction Mist.MistClanEmblemSelectionWidget.ClickedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistClanInformationWidget
// Size: 0x368 (Inherited: 0x2c0)
struct UMistClanInformationWidget : UMistUIWidget {
	struct UButton* LeaveClanButton; // 0x2c0(0x08)
	struct UButton* DepositFlotsButton; // 0x2c8(0x08)
	struct UVerticalBox* ActionsBox; // 0x2d0(0x08)
	struct UMistClanDepositFlotsWidget* DepositFlotsWidget; // 0x2d8(0x08)
	char pad_2E0[0x88]; // 0x2e0(0x88)

	void HandleLeaveButtonClicked(); // Function Mist.MistClanInformationWidget.HandleLeaveButtonClicked // (Final|Native|Private) // @ game+0x10d13a0
	void HandleDepositFlotsButtonClicked(); // Function Mist.MistClanInformationWidget.HandleDepositFlotsButtonClicked // (Final|Native|Private) // @ game+0x10d1000
	struct UWidget* GetWidgetClosestToPoint(struct FVector2D AbsolutePoint); // Function Mist.MistClanInformationWidget.GetWidgetClosestToPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10d0d10
};

// Class Mist.MistClanInviteWidget
// Size: 0x328 (Inherited: 0x2c0)
struct UMistClanInviteWidget : UMistUIWidget {
	struct UTextBlock* ClanNameTextWidget; // 0x2c0(0x08)
	struct UButton* AcceptButtonWidget; // 0x2c8(0x08)
	struct UButton* RejectButtonWidget; // 0x2d0(0x08)
	char pad_2D8[0x50]; // 0x2d8(0x50)

	void HandleRejectClicked(); // Function Mist.MistClanInviteWidget.HandleRejectClicked // (Final|Native|Private) // @ game+0x10d1600
	void HandleAcceptClicked(); // Function Mist.MistClanInviteWidget.HandleAcceptClicked // (Final|Native|Private) // @ game+0x10d0ec0
};

// Class Mist.MistClanJoinCooldownMessageWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistClanJoinCooldownMessageWidget : UMistUIWidget {
	struct UTextBlock* MessageWidget; // 0x2c0(0x08)
};

// Class Mist.MistClanlessMiniWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistClanlessMiniWidget : UMistUIWidget {
	struct UButton* CreateButtonWidget; // 0x2c0(0x08)
	struct UVerticalBox* InviteListWidget; // 0x2c8(0x08)
	char pad_2D0[0x38]; // 0x2d0(0x38)

	void HandleCreateButtonClicked(); // Function Mist.MistClanlessMiniWidget.HandleCreateButtonClicked // (Final|Native|Private) // @ game+0x10d0fc0
};

// Class Mist.MistClanlessWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistClanlessWidget : UMistUIWidget {
	struct UButton* CreateButtonWidget; // 0x2c0(0x08)
	struct UVerticalBox* InviteListWidget; // 0x2c8(0x08)
	struct UButton* MinimizeButton; // 0x2d0(0x08)
	char pad_2D8[0x38]; // 0x2d8(0x38)

	void HandleMinimizeClicked(); // Function Mist.MistClanlessWidget.HandleMinimizeClicked // (Final|Native|Private) // @ game+0x10d1400
	void HandleCreateButtonClicked(); // Function Mist.MistClanlessWidget.HandleCreateButtonClicked // (Final|Native|Private) // @ game+0x10d0fc0
};

// Class Mist.MistClanOverviewMiniWidget
// Size: 0x380 (Inherited: 0x2c0)
struct UMistClanOverviewMiniWidget : UMistUIWidget {
	struct UImage* ColorImageWidget; // 0x2c0(0x08)
	struct UTextBlock* ClanNameWidget; // 0x2c8(0x08)
	struct UMistClanRosterWidget* RosterWidget; // 0x2d0(0x08)
	struct UMistClanRecruitmentWidget* RecruitmentWidget; // 0x2d8(0x08)
	struct UMistClanInformationWidget* InformationWidget; // 0x2e0(0x08)
	struct UButton* MaximizeButton; // 0x2e8(0x08)
	struct UMistUITabControl* TabControl; // 0x2f0(0x08)
	char pad_2F8[0x88]; // 0x2f8(0x88)

	void HandleMaximizeClicked(); // Function Mist.MistClanOverviewMiniWidget.HandleMaximizeClicked // (Final|Native|Private) // @ game+0x10d13c0
};

// Class Mist.MistClanOverviewWidget
// Size: 0x378 (Inherited: 0x2c0)
struct UMistClanOverviewWidget : UMistUIWidget {
	struct UImage* ColorImageWidget; // 0x2c0(0x08)
	struct UTextBlock* ClanNameWidget; // 0x2c8(0x08)
	struct UMistClanRosterWidget* RosterWidget; // 0x2d0(0x08)
	struct UMistClanRecruitmentWidget* RecruitmentWidget; // 0x2d8(0x08)
	struct UMistClanInformationWidget* InformationWidget; // 0x2e0(0x08)
	struct UButton* MinimizeButton; // 0x2e8(0x08)
	char pad_2F0[0x88]; // 0x2f0(0x88)

	void HandleMinimizeClicked(); // Function Mist.MistClanOverviewWidget.HandleMinimizeClicked // (Final|Native|Private) // @ game+0x10d13e0
	struct UWidget* GetRosterWidgetClosestToPoint(enum class EUINavigation Nav); // Function Mist.MistClanOverviewWidget.GetRosterWidgetClosestToPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0c80
	struct UWidget* GetRecruitmentWidgetClosestToPoint(enum class EUINavigation Nav); // Function Mist.MistClanOverviewWidget.GetRecruitmentWidgetClosestToPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0bf0
	struct UWidget* GetInformationWidgetClosestToPoint(enum class EUINavigation Nav); // Function Mist.MistClanOverviewWidget.GetInformationWidgetClosestToPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x10d0b60
};

// Class Mist.MistClanPermissionComponent
// Size: 0x118 (Inherited: 0xf0)
struct UMistClanPermissionComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	enum class EMistClanPermission Permission; // 0x110(0x01)
	bool bCanBeDisabled; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)

	void MulticastSetPermission(enum class EMistClanPermission NewPermission); // Function Mist.MistClanPermissionComponent.MulticastSetPermission // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d17f0
	void MulticastSetActive(bool bActive); // Function Mist.MistClanPermissionComponent.MulticastSetActive // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d1640
};

// Class Mist.MistClanPlayerWidget
// Size: 0x3f8 (Inherited: 0x2c0)
struct UMistClanPlayerWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct URichTextBlock* PlayerNameTextWidget; // 0x2c8(0x08)
	struct UButton* RemoveButtonWidget; // 0x2d0(0x08)
	struct UImage* StatusImageWidget; // 0x2d8(0x08)
	struct UImage* OfflineStatusImageWidget; // 0x2e0(0x08)
	struct UMistClanRankButton* RankButtonWidget; // 0x2e8(0x08)
	struct UButton* PlayerButtonWidget; // 0x2f0(0x08)
	struct UTextBlock* NewRankTextWidget; // 0x2f8(0x08)
	struct UWidget* NewRankContainerWidget; // 0x300(0x08)
	struct UHorizontalBox* NewRanksIconsBox; // 0x308(0x08)
	struct UMistClanAsset* ClanAsset; // 0x310(0x08)
	struct UMistUIButton* IconButtonClass; // 0x318(0x08)
	bool bOnline; // 0x320(0x01)
	char pad_321[0xcf]; // 0x321(0xcf)
	struct UMistClanMemberDataObject* Data; // 0x3f0(0x08)

	void HandleRemoveClicked(); // Function Mist.MistClanPlayerWidget.HandleRemoveClicked // (Final|Native|Private) // @ game+0x10d1620
	void HandleRankClicked(struct UMistUIButton* Sender); // Function Mist.MistClanPlayerWidget.HandleRankClicked // (Final|Native|Private) // @ game+0x10d1580
	void HandlePlayerClicked(); // Function Mist.MistClanPlayerWidget.HandlePlayerClicked // (Final|Native|Private) // @ game+0x10d1560
	void HandleNewRankClicked(struct UMistUIButton* Sender); // Function Mist.MistClanPlayerWidget.HandleNewRankClicked // (Final|Native|Private) // @ game+0x10d14e0
};

// Class Mist.MistUIButton
// Size: 0x5e0 (Inherited: 0x2c0)
struct UMistUIButton : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UTextBlock* TextWidget; // 0x2c8(0x08)
	struct FText Text; // 0x2d0(0x18)
	struct FButtonStyle ButtonStyle; // 0x2e8(0x278)
	struct FSlateFontInfo TextFont; // 0x560(0x50)
	struct FMulticastInlineDelegate OnClick; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnHover; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnUnhover; // 0x5d0(0x10)

	void HandleButtonUnhover(); // Function Mist.MistUIButton.HandleButtonUnhover // (Final|Native|Private) // @ game+0x11c4a30
	void HandleButtonHover(); // Function Mist.MistUIButton.HandleButtonHover // (Final|Native|Private) // @ game+0x11c4a10
	void HandleButtonClick(); // Function Mist.MistUIButton.HandleButtonClick // (Final|Native|Private) // @ game+0x11c49b0
	void Event__DelegateSignature(struct UMistUIButton* Sender); // DelegateFunction Mist.MistUIButton.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistClanRankButton
// Size: 0x620 (Inherited: 0x5e0)
struct UMistClanRankButton : UMistUIButton {
	struct UImage* RankIcon; // 0x5e0(0x08)
	struct UMenuAnchor* PopupAnchorWidget; // 0x5e8(0x08)
	struct UMistClanAsset* ClanAsset; // 0x5f0(0x08)
	char pad_5F8[0x28]; // 0x5f8(0x28)

	struct UWidget* HandleGetMenu(); // Function Mist.MistClanRankButton.HandleGetMenu // (Final|Native|Private) // @ game+0x10d1270
};

// Class Mist.MistClanRankPopup
// Size: 0x380 (Inherited: 0x2c0)
struct UMistClanRankPopup : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UGridPanel* PermissionsPanel; // 0x2c8(0x08)
	struct UMistClanAsset* ClanAsset; // 0x2d0(0x08)
	struct FSlateFontInfo ActiveTextFont; // 0x2d8(0x50)
	struct FSlateFontInfo InactiveTextFont; // 0x328(0x50)
	char pad_378[0x8]; // 0x378(0x08)
};

// Class Mist.MistClanRecruitmentWidget
// Size: 0x378 (Inherited: 0x2c0)
struct UMistClanRecruitmentWidget : UMistUIWidget {
	struct UPanelWidget* PendingInvitesListWidget; // 0x2c0(0x08)
	struct UPanelWidget* RecruitsListWidget; // 0x2c8(0x08)
	struct UEditableTextBox* FilterRecruitsWidget; // 0x2d0(0x08)
	struct UTextBlock* MemberCountWidget; // 0x2d8(0x08)
	char pad_2E0[0x98]; // 0x2e0(0x98)

	void HandleFilterTextCommited(struct FText& Text); // Function Mist.MistClanRecruitmentWidget.HandleFilterTextCommited // (Final|Native|Private|HasOutParms) // @ game+0x10d1080
	struct UWidget* GetWidgetClosestToPoint(struct FVector2D AbsolutePoint); // Function Mist.MistClanRecruitmentWidget.GetWidgetClosestToPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10d0da0
};

// Class Mist.MistClanRosterWidget
// Size: 0x370 (Inherited: 0x2c0)
struct UMistClanRosterWidget : UMistUIWidget {
	struct UEditableTextBox* FilterPlayersWidget; // 0x2c0(0x08)
	struct UListView* MemberListWidget; // 0x2c8(0x08)
	struct UTextBlock* MemberCountWidget; // 0x2d0(0x08)
	char pad_2D8[0x98]; // 0x2d8(0x98)

	void HandleFilterTextCommited(struct FText& Text, enum class ETextCommit CommitMethod); // Function Mist.MistClanRosterWidget.HandleFilterTextCommited // (Final|Native|Private|HasOutParms) // @ game+0x10d1150
	struct UWidget* GetWidgetClosestToPoint(struct FVector2D AbsolutePoint); // Function Mist.MistClanRosterWidget.GetWidgetClosestToPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x10d0e30
};

// Class Mist.MistClanMemberDataObject
// Size: 0xf8 (Inherited: 0x28)
struct UMistClanMemberDataObject : UObject {
	bool bOnline; // 0x28(0x01)
	char pad_29[0x7]; // 0x29(0x07)
	int64_t ClanId; // 0x30(0x08)
	char pad_38[0xc0]; // 0x38(0xc0)
};

// Class Mist.MistClanScreen
// Size: 0x500 (Inherited: 0x3a0)
struct UMistClanScreen : UMistUIScreen {
	char pad_3A0[0x8]; // 0x3a0(0x08)
	struct UWidgetSwitcher* SwitcherWidget; // 0x3a8(0x08)
	struct UWidget* SwitcherCanvasPanel; // 0x3b0(0x08)
	struct UMistClanlessWidget* ClanlessWidget; // 0x3b8(0x08)
	struct UMistClanOverviewWidget* OverviewWidget; // 0x3c0(0x08)
	struct UMistClanlessMiniWidget* ClanlessMiniWidget; // 0x3c8(0x08)
	struct UMistClanOverviewMiniWidget* OverviewMiniWidget; // 0x3d0(0x08)
	struct UMistUIButton* InteractButton; // 0x3d8(0x08)
	struct UBorder* ModificationOverlay; // 0x3e0(0x08)
	struct UMistMoneyWidget* BankBalanceWidget; // 0x3e8(0x08)
	struct UButton* DiscordIntegrationButton; // 0x3f0(0x08)
	struct UTextBlock* DiscordTextBlock; // 0x3f8(0x08)
	struct UMistDiscordIntegrationWidget* DiscordIntegrationWidget; // 0x400(0x08)
	uint32_t MinimizedHUDFlags; // 0x408(0x04)
	uint32_t OwnershipEditingHUDFlags; // 0x40c(0x04)
	char pad_410[0x18]; // 0x410(0x18)
	bool bDiscordWidgetVisable; // 0x428(0x01)
	bool bClanOverviewWidgetVisible; // 0x429(0x01)
	char pad_42A[0x96]; // 0x42a(0x96)
	int64_t CurrentClanId; // 0x4c0(0x08)
	char pad_4C8[0x20]; // 0x4c8(0x20)
	struct UMistClanCreateDialog* ClanCreateDialog; // 0x4e8(0x08)
	struct UMistClanConfigData* ConfigData; // 0x4f0(0x08)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x4f8(0x08)

	void ToggleOverviewWidget(); // Function Mist.MistClanScreen.ToggleOverviewWidget // (Final|Native|Private) // @ game+0x10d1a70
	void HandleInteractClicked(struct UMistUIButton* Sender); // Function Mist.MistClanScreen.HandleInteractClicked // (Final|Native|Private) // @ game+0x10d12a0
	void HandleDiscordButtonClicked(); // Function Mist.MistClanScreen.HandleDiscordButtonClicked // (Final|Native|Public) // @ game+0x10d1060
	void HandleClanChanged(struct AMistOasisPlayerState* Sender, int64_t PrevClanId); // Function Mist.MistClanScreen.HandleClanChanged // (Final|Native|Private) // @ game+0x10d0f00
};

// Class Mist.MistClapperBoardScreen
// Size: 0x3e8 (Inherited: 0x3a0)
struct UMistClapperBoardScreen : UMistUIScreen {
	struct UTextBlock* CountdownWidget; // 0x3a0(0x08)
	struct FSlateSound ClapperSound; // 0x3a8(0x18)
	float PlayClapperSoundDelay; // 0x3c0(0x04)
	float CloseDelay; // 0x3c4(0x04)
	char pad_3C8[0x20]; // 0x3c8(0x20)
};

// Class Mist.MistClearRupuCampsQuest
// Size: 0x98 (Inherited: 0x48)
struct UMistClearRupuCampsQuest : UMistFlotillaQuest {
	struct TArray<struct AMistMobCamp*> AcceptedCampTypes; // 0x48(0x10)
	int32_t MinAmount; // 0x58(0x04)
	int32_t MaxAmount; // 0x5c(0x04)
	int32_t FlotsPerCamp; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct FText DisplayTypeText; // 0x68(0x18)
	char pad_80[0x8]; // 0x80(0x08)
	struct TArray<struct AActor*> LootedActors; // 0x88(0x10)

	void HandleKillTarget(struct APawn* Target); // Function Mist.MistClearRupuCampsQuest.HandleKillTarget // (Final|Native|Private) // @ game+0x10d1320
};

// Class Mist.MistClearRupuCampsQuestGenerator
// Size: 0x88 (Inherited: 0x30)
struct UMistClearRupuCampsQuestGenerator : UMistBaseQuestGenerator {
	struct TSoftObjectPtr<UDataTable> DataTable; // 0x30(0x28)
	char pad_58[0x30]; // 0x58(0x30)
};

// Class Mist.MistClimbingQuest
// Size: 0x150 (Inherited: 0x110)
struct UMistClimbingQuest : UMistTutorialQuest {
	struct FName GetCloseToWalkerTaskName; // 0x110(0x08)
	struct FName StandNextToWalkerTaskName; // 0x118(0x08)
	struct FName ClimbTaskName; // 0x120(0x08)
	struct AMistWalker* FireflyWalker; // 0x128(0x08)
	float HighlightDistance; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct TArray<struct AMistWalker*> WalkersAround; // 0x138(0x10)
	char pad_148[0x8]; // 0x148(0x08)

	void UpdateWalkerArray(); // Function Mist.MistClimbingQuest.UpdateWalkerArray // (Final|Native|Protected) // @ game+0x10d5830
	void OnWalkerRemoved(struct AMistWalker* Walker); // Function Mist.MistClimbingQuest.OnWalkerRemoved // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWalkerAdded(struct AMistWalker* Walker); // Function Mist.MistClimbingQuest.OnWalkerAdded // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MovementChange(struct ACharacter* Character, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Mist.MistClimbingQuest.MovementChange // (Final|Native|Protected) // @ game+0x10d5540
};

// Class Mist.MistClusterProjectileComponent
// Size: 0x138 (Inherited: 0xf0)
struct UMistClusterProjectileComponent : UActorComponent {
	struct UMistProjectileItemTemplate* SplitProjectile; // 0xf0(0x08)
	int32_t MaxSplits; // 0xf8(0x04)
	float SplitTimerMin; // 0xfc(0x04)
	float SplitTimerMax; // 0x100(0x04)
	float SpeedAfterSplit; // 0x104(0x04)
	int32_t DefaultSplitProjectilesAmount; // 0x108(0x04)
	float DefaultSplitConeHalfAngle; // 0x10c(0x04)
	struct TArray<int32_t> AmountBySplitNumber; // 0x110(0x10)
	struct TArray<float> ConeHalfAngleBySplitNumber; // 0x120(0x10)
	char pad_130[0x8]; // 0x130(0x08)
};

// Class Mist.MistCollisionDamageInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistCollisionDamageInterface : UInterface {
};

// Class Mist.MistCollisionGroupComponent
// Size: 0x188 (Inherited: 0xf0)
struct UMistCollisionGroupComponent : UActorComponent {
	float DelayedDisableDelay; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FMistAttachmentMonitor AttachmentMonitor; // 0xf8(0x80)
	char pad_178[0x10]; // 0x178(0x10)
};

// Class Mist.MistCombatAnimationBudgetingManager
// Size: 0x180 (Inherited: 0x108)
struct UMistCombatAnimationBudgetingManager : UMistPlayerControllerComponent {
	float ForceTickInCombatDistance; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct AMistPlayer* PlayerOwner; // 0x110(0x08)
	struct UMistCharacterGridComponent* CachedGrid; // 0x118(0x08)
	struct TMap<struct AMistCharacter*, float> WatchedCharacters; // 0x120(0x50)
	struct TArray<struct AMistCharacter*> InCombatCharacters; // 0x170(0x10)
};

// Class Mist.MistCombatDebuggingComponent
// Size: 0x510 (Inherited: 0xf0)
struct UMistCombatDebuggingComponent : UActorComponent {
	char pad_F0[0x10]; // 0xf0(0x10)
	struct FMistDebugCombatLogItem DebugCombatLogItemShown; // 0x100(0x3f0)
	bool bDebugCombatOverlayEnabled; // 0x4f0(0x01)
	bool bDebugCombatCollisionEnabled; // 0x4f1(0x01)
	char pad_4F2[0x16]; // 0x4f2(0x16)
	int32_t DebugCombatLogItemsCount; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)

	void ServerSetDebugLogMessageEnabled(bool Value); // Function Mist.MistCombatDebuggingComponent.ServerSetDebugLogMessageEnabled // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10d1640
	void ServerDebugHitDetection(bool bEnabled, float LineDuration); // Function Mist.MistCombatDebuggingComponent.ServerDebugHitDetection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10d5760
	void DebugHitDetection(bool bEnabled, float LineDuration); // Function Mist.MistCombatDebuggingComponent.DebugHitDetection // (Final|Exec|Native|Public) // @ game+0x10d5200
	void DebugCombatOverlayServer(bool bEnabled, bool bCollisionDisplayed); // Function Mist.MistCombatDebuggingComponent.DebugCombatOverlayServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10d5130
	void DebugCombatOverlay(bool bEnabled, bool bCollisionEnabled); // Function Mist.MistCombatDebuggingComponent.DebugCombatOverlay // (Final|Exec|Native|Public) // @ game+0x10d5060
	void DebugCombatMessageLog(bool bEnabled, float Duration); // Function Mist.MistCombatDebuggingComponent.DebugCombatMessageLog // (Final|Exec|Native|Public) // @ game+0x10d4f90
	void DebugCombatLogShowServer(int32_t Number); // Function Mist.MistCombatDebuggingComponent.DebugCombatLogShowServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10d4f00
	void DebugCombatLogShow(int32_t Number); // Function Mist.MistCombatDebuggingComponent.DebugCombatLogShow // (Final|Exec|Native|Public) // @ game+0x10d4e80
	void DebugCombatLogServer(bool bHitsOnly); // Function Mist.MistCombatDebuggingComponent.DebugCombatLogServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10d4df0
	void DebugCombatLogClearServer(); // Function Mist.MistCombatDebuggingComponent.DebugCombatLogClearServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10d4dd0
	void DebugCombatLogClear(); // Function Mist.MistCombatDebuggingComponent.DebugCombatLogClear // (Final|Exec|Native|Public) // @ game+0x10d4db0
	void DebugCombatLog(bool bHitsOnly); // Function Mist.MistCombatDebuggingComponent.DebugCombatLog // (Final|Exec|Native|Public) // @ game+0x10d4d20
	void ClientDebugCombatHitInfo(struct FMeleeHitInfo Info, bool bIsAttacker); // Function Mist.MistCombatDebuggingComponent.ClientDebugCombatHitInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x10d4b10
};

// Class Mist.MistCombatQuest
// Size: 0x120 (Inherited: 0x110)
struct UMistCombatQuest : UMistTutorialQuest {
	struct AMistHumanoidMob* HitActor; // 0x110(0x08)
	struct FName HitTaskName; // 0x118(0x08)

	void KillTarget(struct APawn* Target); // Function Mist.MistCombatQuest.KillTarget // (Final|Native|Private) // @ game+0x10d54c0
};

// Class Mist.MistCombatSettings
// Size: 0x98 (Inherited: 0x38)
struct UMistCombatSettings : UMistSettingsObject {
	float CombatDelayLeeway; // 0x38(0x04)
	float CombatWeaponSpeedFactor; // 0x3c(0x04)
	struct TMap<enum class EMistMaterialProtection, float> PenetrationCostByMaterialProtection; // 0x40(0x50)
	float GroundToWalkerTetherHealthMulti; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)
};

// Class Mist.MistConstructionPartComponent
// Size: 0x960 (Inherited: 0x850)
struct UMistConstructionPartComponent : UStaticMeshComponent {
	struct FMulticastInlineDelegate OnConstructed; // 0x850(0x10)
	struct TArray<struct FMistComponentReference> RequiredParts; // 0x860(0x10)
	struct FMistCraftingRequirements Requirements; // 0x870(0x60)
	struct FMistInteractableProperties InteractableProperties; // 0x8d0(0x14)
	int32_t ConstructedQuality; // 0x8e4(0x04)
	enum class EMistConstructionPartState State; // 0x8e8(0x01)
	char pad_8E9[0x7]; // 0x8e9(0x07)
	struct UMistConstructionSiteComponent* CachedConstructionSite; // 0x8f0(0x08)
	struct TArray<struct UMaterialInterface*> OriginalMaterials; // 0x8f8(0x10)
	char pad_908[0x8]; // 0x908(0x08)
	struct FCollisionResponseContainer OriginalCollisionResponses; // 0x910(0x40)
	float OriginalCullDistance; // 0x950(0x04)
	char pad_954[0xc]; // 0x954(0x0c)

	void ReceiveConstructed(); // Function Mist.MistConstructionPartComponent.ReceiveConstructed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastSetState(enum class EMistConstructionPartState InState); // Function Mist.MistConstructionPartComponent.MulticastSetState // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d56c0
	void HandleRequiredPartConstructed(struct UMistConstructionPartComponent* ConstructionPart); // Function Mist.MistConstructionPartComponent.HandleRequiredPartConstructed // (Final|Native|Private) // @ game+0x10d5440
	void ConstructedEvent__DelegateSignature(struct UMistConstructionPartComponent* ConstructionPart); // DelegateFunction Mist.MistConstructionPartComponent.ConstructedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistConstructionPartCostWidget
// Size: 0x4f8 (Inherited: 0x4f8)
struct UMistConstructionPartCostWidget : UMistRecipePopupWidget {
};

// Class Mist.MistConstructionSiteComponent
// Size: 0x248 (Inherited: 0xf0)
struct UMistConstructionSiteComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	struct FMulticastInlineDelegate OnPartConstructed; // 0x110(0x10)
	struct FMulticastInlineDelegate OnCanFinish; // 0x120(0x10)
	struct FMulticastInlineDelegate OnFinished; // 0x130(0x10)
	char pad_140[0x18]; // 0x140(0x18)
	struct UMaterialInterface* HologramMaterialForCanBeConstructed; // 0x158(0x08)
	struct UMaterialInterface* HologramMaterialForRequiresOtherParts; // 0x160(0x08)
	struct UMaterialInterface* HologramMaterialForHighlight; // 0x168(0x08)
	struct UMaterialInstanceDynamic* HologramMaterialInstanceForCanBeConstructed; // 0x170(0x08)
	struct UMaterialInstanceDynamic* HologramMaterialInstanceForRequiresOtherParts; // 0x178(0x08)
	struct UMaterialInstanceDynamic* HologramMaterialInstanceForHighlight; // 0x180(0x08)
	struct FMistComponentReference RootComponentRef; // 0x188(0x28)
	struct AActor* FinishedActorClass; // 0x1b0(0x08)
	struct TArray<struct FFinishedActorInfo> FinishedActorsInfoArray; // 0x1b8(0x10)
	struct FFinishedActorInfo WalkerSupportActorInfo; // 0x1c8(0x30)
	struct FMistComponentReference FinishedActorPositioningRef; // 0x1f8(0x28)
	bool bFinishAutomatically; // 0x220(0x01)
	char pad_221[0x3]; // 0x221(0x03)
	float HologramCullDistance; // 0x224(0x04)
	bool bAllowInteractingWithDependentParts; // 0x228(0x01)
	bool bNotConstructedPartsBlockPlacement; // 0x229(0x01)
	char pad_22A[0x2]; // 0x22a(0x02)
	float OverrideDecayTime; // 0x22c(0x04)
	char pad_230[0x10]; // 0x230(0x10)
	float DecayTime; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)

	void ReceivePartConstructed(struct UMistConstructionPartComponent* ConstructionPart); // Function Mist.MistConstructionSiteComponent.ReceivePartConstructed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveFinished(struct AMistCharacter* FinishedBy); // Function Mist.MistConstructionSiteComponent.ReceiveFinished // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveCanFinish(); // Function Mist.MistConstructionSiteComponent.ReceiveCanFinish // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void PartConstructedEvent__DelegateSignature(struct UMistConstructionSiteComponent* ConstructionSite, struct UMistConstructionPartComponent* ConstructionPart); // DelegateFunction Mist.MistConstructionSiteComponent.PartConstructedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_DecayTime(); // Function Mist.MistConstructionSiteComponent.OnRep_DecayTime // (Final|Native|Private) // @ game+0x10d5740
	void MulticastSetDecayTime(float InDecayTime); // Function Mist.MistConstructionSiteComponent.MulticastSetDecayTime // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d5640
	void HandlePlaceableConstructed(struct FTransform& Transform, int32_t ItemIndex, struct AMistPlayer* Player); // Function Mist.MistConstructionSiteComponent.HandlePlaceableConstructed // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x10d52f0
	void HandleDecayTimer(); // Function Mist.MistConstructionSiteComponent.HandleDecayTimer // (Final|Native|Private) // @ game+0x10d52d0
	void FinishedEvent__DelegateSignature(struct UMistConstructionSiteComponent* ConstructionSite, struct AMistCharacter* FinishedBy, struct AActor* ConstructionActor); // DelegateFunction Mist.MistConstructionSiteComponent.FinishedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void CanFinishEvent__DelegateSignature(struct UMistConstructionSiteComponent* ConstructionSite); // DelegateFunction Mist.MistConstructionSiteComponent.CanFinishEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistEdibleItemTemplate
// Size: 0x1d8 (Inherited: 0x1d8)
struct UMistEdibleItemTemplate : UMistItemTemplate {
};

// Class Mist.MistConsumableItemTemplate
// Size: 0x208 (Inherited: 0x1d8)
struct UMistConsumableItemTemplate : UMistItemTemplate {
	struct TArray<struct UMistStatusEffect*> StatusEffects; // 0x1d8(0x10)
	bool AnimatedUsage; // 0x1e8(0x01)
	char pad_1E9[0x3]; // 0x1e9(0x03)
	float UsageDuration; // 0x1ec(0x04)
	float DamageCooldown; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
	struct TArray<struct UAnimSequence*> Animations; // 0x1f8(0x10)
};

// Class Mist.MistConsumingItemProgressWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistConsumingItemProgressWidget : UMistHUDWidget {
	struct UImage* HealingItemIcon; // 0x2e0(0x08)
	struct UProgressBar* ProgressBarWidget; // 0x2e8(0x08)
};

// Class Mist.MistContactModificationInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistContactModificationInterface : UInterface {
};

// Class Mist.MistContactNotifyInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistContactNotifyInterface : UInterface {
};

// Class Mist.MistContainerDecayComponent
// Size: 0x138 (Inherited: 0xf0)
struct UMistContainerDecayComponent : UActorComponent {
	bool bDecayAllContainers; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TArray<struct FMistComponentReference> ContainerRefs; // 0xf8(0x10)
	struct TArray<struct FMistContainerDecayItem> DecayedItems; // 0x108(0x10)
	float DecayInterval; // 0x118(0x04)
	char pad_11C[0xc]; // 0x11c(0x0c)
	struct TArray<struct UMistContainerComponent*> DecayedContainerComponents; // 0x128(0x10)
};

// Class Mist.MistContainerDropWidget
// Size: 0x320 (Inherited: 0x308)
struct UMistContainerDropWidget : UMistUIDragDropWidget {
	struct FSlateSound DropSound; // 0x308(0x18)
};

// Class Mist.MistGenericInfoPopupWidget
// Size: 0x350 (Inherited: 0x2c0)
struct UMistGenericInfoPopupWidget : UMistUIWidget {
	struct UTextBlock* HeadlineWidget; // 0x2c0(0x08)
	struct UImage* HeadlineImageWidget; // 0x2c8(0x08)
	struct UTextBlock* SubHeadlineWidget; // 0x2d0(0x08)
	struct UVerticalBox* DescriptionContainerWidget; // 0x2d8(0x08)
	struct URichTextBlock* DescriptionTextWidget; // 0x2e0(0x08)
	struct UScaleBox* TopSeparator; // 0x2e8(0x08)
	struct UScaleBox* BottomSeparator; // 0x2f0(0x08)
	bool bHideSeparators; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
	struct FText HeadlineText; // 0x300(0x18)
	struct FText SubHeadlineText; // 0x318(0x18)
	struct FText DescriptionText; // 0x330(0x18)
	struct UTexture2D* HeadlineImage; // 0x348(0x08)
};

// Class Mist.MistContainerInfoPopupWidget
// Size: 0x3b0 (Inherited: 0x350)
struct UMistContainerInfoPopupWidget : UMistGenericInfoPopupWidget {
	struct TSet<struct UMistItemTemplate*> AllowedItems; // 0x350(0x50)
	struct TArray<struct UMistCraftingCategory*> SupportedCategories; // 0x3a0(0x10)
};

// Class Mist.MistContainerInteractionWidget
// Size: 0x338 (Inherited: 0x2c0)
struct UMistContainerInteractionWidget : UMistUIWidget {
	struct UMistContainerWidget* ContainerWidget; // 0x2c0(0x08)
	struct UProgressBar* HoldProgressWidget; // 0x2c8(0x08)
	struct UWidget* HoldHintWidget; // 0x2d0(0x08)
	struct UButton* EquipWidget; // 0x2d8(0x08)
	struct UMistInputBindingHintWidget* BindingHintWidget; // 0x2e0(0x08)
	bool bCanTakeAll; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
	struct FSlateSound TransferSuccesfulSound; // 0x2f0(0x18)
	struct FSlateSound TransferFailedSound; // 0x308(0x18)
	struct UGridPanel* ItemSlotPopupContainer; // 0x320(0x08)
	struct UMistContainerComponent* ContainerComponent; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)

	void HandleEquipmentSlotUpdated(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot InSlot); // Function Mist.MistContainerInteractionWidget.HandleEquipmentSlotUpdated // (Final|Native|Private) // @ game+0x10d9700
	void HandleContainerUpdate(struct UMistContainerComponent* UpdatedContainer); // Function Mist.MistContainerInteractionWidget.HandleContainerUpdate // (Final|Native|Private) // @ game+0x10d9600
	void Equip(); // Function Mist.MistContainerInteractionWidget.Equip // (Final|Native|Private) // @ game+0x10d8f10
};

// Class Mist.MistContainerListWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistContainerListWidget : UMistUIWidget {
	struct UScrollBox* ScrollBoxWidget; // 0x2c0(0x08)
	struct AActor* Actor; // 0x2c8(0x08)
	struct TArray<struct UMistContainerComponent*> Components; // 0x2d0(0x10)
};

// Class Mist.MistContainerSlotInstancedMeshComponent
// Size: 0x950 (Inherited: 0x8f0)
struct UMistContainerSlotInstancedMeshComponent : UInstancedStaticMeshComponent {
	struct FMistComponentReference ContainerRef; // 0x8f0(0x28)
	int32_t SlotIndex; // 0x918(0x04)
	char pad_91C[0x4]; // 0x91c(0x04)
	struct UMistContainerComponent* ContainerComponent; // 0x920(0x08)
	struct FMistItem Item; // 0x928(0x18)
	int32_t ItemCount; // 0x940(0x04)
	char pad_944[0xc]; // 0x944(0x0c)

	void OnRep_ItemCount(); // Function Mist.MistContainerSlotInstancedMeshComponent.OnRep_ItemCount // (Final|Native|Private) // @ game+0x10d9b90
	void OnRep_Item(); // Function Mist.MistContainerSlotInstancedMeshComponent.OnRep_Item // (Final|Native|Private) // @ game+0x10d9b70
	void MulticastSetItem(struct FMistItem InItem, int32_t InItemCount); // Function Mist.MistContainerSlotInstancedMeshComponent.MulticastSetItem // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d9aa0
	void HandleContainerSlotUpdate(struct UMistContainerComponent* InContainer, int32_t InSlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistContainerSlotInstancedMeshComponent.HandleContainerSlotUpdate // (Final|Native|Private) // @ game+0x10d9300
};

// Class Mist.MistItemMeshComponent
// Size: 0x870 (Inherited: 0x850)
struct UMistItemMeshComponent : UStaticMeshComponent {
	struct FMistItem Item; // 0x848(0x18)
	struct UParticleSystemComponent* ParticleSystemComponent; // 0x860(0x08)

	void OnRep_Item(); // Function Mist.MistItemMeshComponent.OnRep_Item // (Final|Native|Private) // @ game+0x1122cc0
	void MulticastSetItem(struct FMistItem InItem); // Function Mist.MistItemMeshComponent.MulticastSetItem // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1122c30
};

// Class Mist.MistContainerSlotMeshComponent
// Size: 0x8a0 (Inherited: 0x870)
struct UMistContainerSlotMeshComponent : UMistItemMeshComponent {
	struct FMistComponentReference ContainerRef; // 0x868(0x28)
	int32_t SlotIndex; // 0x890(0x04)
	struct UMistContainerComponent* ContainerComponent; // 0x898(0x08)

	void HandleContainerSlotUpdate(struct UMistContainerComponent* InContainer, int32_t InSlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistContainerSlotMeshComponent.HandleContainerSlotUpdate // (Final|Native|Private) // @ game+0x10d9400
};

// Class Mist.MistContainerTrashWidget
// Size: 0x308 (Inherited: 0x308)
struct UMistContainerTrashWidget : UMistUIDragDropWidget {
};

// Class Mist.MistContainerWidget
// Size: 0x400 (Inherited: 0x308)
struct UMistContainerWidget : UMistUIDragDropWidget {
	struct UBorder* BackgroundWidget; // 0x308(0x08)
	struct UGridPanel* GridPanelWidget; // 0x310(0x08)
	struct UTextBlock* NameTextWidget; // 0x318(0x08)
	struct UMistStructureRenamingWidget* RenamingWidget; // 0x320(0x08)
	struct UPanelWidget* EquipContainer; // 0x328(0x08)
	struct UMistItemSlotWidget* EquipItemSlot; // 0x330(0x08)
	int32_t ContainerSlotsPerRow; // 0x338(0x04)
	bool ShowName; // 0x33c(0x01)
	bool bIsRenamable; // 0x33d(0x01)
	char pad_33E[0x2]; // 0x33e(0x02)
	int32_t NumPreviewSlots; // 0x340(0x04)
	char pad_344[0x4]; // 0x344(0x04)
	struct UUserWidget* PreviewSlotWidgetClass; // 0x348(0x08)
	bool bPreviewEquipmentContainerSlot; // 0x350(0x01)
	char pad_351[0x3]; // 0x351(0x03)
	struct FLinearColor BackgroundColorAndOpacity; // 0x354(0x10)
	char pad_364[0x4]; // 0x364(0x04)
	struct FSlateFontInfo NameFont; // 0x368(0x50)
	bool bDisplayNewIcon; // 0x3b8(0x01)
	char pad_3B9[0x7]; // 0x3b9(0x07)
	struct UMistContainerComponent* Container; // 0x3c0(0x08)
	struct TArray<struct UMistItemSlotWidget*> ItemSlotWidgets; // 0x3c8(0x10)
	struct UGridPanel* ItemSlotPopupContainer; // 0x3d8(0x08)
	struct TArray<struct UMistCraftingCategory*> SupportedCategories; // 0x3e0(0x10)
	char pad_3F0[0x10]; // 0x3f0(0x10)

	void HandleContainerUpdate(struct UMistContainerComponent* UpdatedContainer); // Function Mist.MistContainerWidget.HandleContainerUpdate // (Final|Native|Protected) // @ game+0x10d9680
	void HandleContainerSlotUpdate(struct UMistContainerComponent* UpdatedContainer, int32_t SlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistContainerWidget.HandleContainerSlotUpdate // (Final|Native|Protected) // @ game+0x10d9500
	void HandleContainerNameUpdate(struct UMistContainerComponent* UpdatedContainer); // Function Mist.MistContainerWidget.HandleContainerNameUpdate // (Final|Native|Protected) // @ game+0x10d9280
};

// Class Mist.MistContainerWithPreviewWidget
// Size: 0x410 (Inherited: 0x400)
struct UMistContainerWithPreviewWidget : UMistContainerWidget {
	struct UMistUIWidget* OverlaySlotWidget; // 0x400(0x08)
	int32_t PreviewSlotNum; // 0x408(0x04)
	int32_t LastPreviewSlotNum; // 0x40c(0x04)
};

// Class Mist.MistCountdownHudWidget
// Size: 0x3d0 (Inherited: 0x2e0)
struct UMistCountdownHudWidget : UMistHUDWidget {
	struct UTextBlock* TextWidget; // 0x2e0(0x08)
	struct UTextBlock* DescriptionTextWidget; // 0x2e8(0x08)
	struct UTextBlock* TimerTextWidget; // 0x2f0(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x2f8(0x08)
	struct UWidgetAnimation* IsZeroAnimation; // 0x300(0x08)
	struct FText TimerFormatText; // 0x308(0x18)
	struct FText TimerHoursFormatText; // 0x320(0x18)
	struct FText TimerDaysFormatText; // 0x338(0x18)
	struct FText TimerIsZeroText; // 0x350(0x18)
	char pad_368[0x68]; // 0x368(0x68)

	void HandleShowAnimationFinished(); // Function Mist.MistCountdownHudWidget.HandleShowAnimationFinished // (Final|Native|Private) // @ game+0x10d98e0
};

// Class Mist.MistCraftingCharacterWidget
// Size: 0x370 (Inherited: 0x2c0)
struct UMistCraftingCharacterWidget : UMistUIWidget {
	float PaddingForFirstCategoryItemToEnsure; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct FSlateSound SwitchTabSound; // 0x2c8(0x18)
	struct FSlateSound CraftSuccessfulSound; // 0x2e0(0x18)
	struct FSlateSound CraftNotPossibleSound; // 0x2f8(0x18)
	int32_t RecipesPerRow; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)
	struct UMistRecipeWidget* RecipeWidgetClass; // 0x318(0x08)
	struct UScrollBox* CategoryScrollBox; // 0x320(0x08)
	struct UGridPanel* RecipeGrid; // 0x328(0x08)
	struct UGridPanel* RecipePopupContainer; // 0x330(0x08)
	struct UMistPlaceableCategoryWidget* CurrentCategoryWidget; // 0x338(0x08)
	char pad_340[0x8]; // 0x340(0x08)
	struct UMistInventoryComponent* InventoryComponent; // 0x348(0x08)
	struct TArray<struct FMistCraftingSection> Sections; // 0x350(0x10)
	struct UMistCraftingStationComponent* CraftingStation; // 0x360(0x08)
	struct UMistPlaceableCategoryWidget* CraftingCategoryWidgetClass; // 0x368(0x08)

	void StopBatchCraft(); // Function Mist.MistCraftingCharacterWidget.StopBatchCraft // (Final|Native|Private) // @ game+0x10d9d10
	void StartBatchCraft(); // Function Mist.MistCraftingCharacterWidget.StartBatchCraft // (Final|Native|Private) // @ game+0x10d9cf0
	void SetCraftBatchAmount(); // Function Mist.MistCraftingCharacterWidget.SetCraftBatchAmount // (Final|Native|Private) // @ game+0x10d9cd0
	void SelectItemTemplate(struct UMistItemTemplate* ItemTemplate, int32_t ItemRecipe, int32_t InTargetQuality); // Function Mist.MistCraftingCharacterWidget.SelectItemTemplate // (Final|Native|Private) // @ game+0x10d9bd0
	void PopulateCategoryScrollBox(); // Function Mist.MistCraftingCharacterWidget.PopulateCategoryScrollBox // (Final|Native|Private) // @ game+0x10d9bb0
	struct UWidget* HandleLeaveRecipesNavigation(enum class EUINavigation Nav); // Function Mist.MistCraftingCharacterWidget.HandleLeaveRecipesNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x10d9850
	struct UWidget* HandleLeaveCategoriesNavigation(enum class EUINavigation Nav); // Function Mist.MistCraftingCharacterWidget.HandleLeaveCategoriesNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x10d97c0
	void HandleCategoryChanged(struct UMistPlaceableCategoryWidget* Sender, int32_t CategoryIndex, bool bUpdateFocus); // Function Mist.MistCraftingCharacterWidget.HandleCategoryChanged // (Final|Native|Private) // @ game+0x10d9180
};

// Class Mist.MistCraftingComponent
// Size: 0x150 (Inherited: 0x118)
struct UMistCraftingComponent : UMistPlayerComponent {
	char pad_118[0x30]; // 0x118(0x30)
	struct TWeakObjectPtr<struct UMistInventoryComponent> InventoryComponent; // 0x148(0x08)

	void ServerToggleAutoCraftingStation(struct UMistToggleAutoCraftingStationComponent* CraftingStation, bool bInStatus); // Function Mist.MistCraftingComponent.ServerToggleAutoCraftingStation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10ddb80
	void ServerStopFurnaceWork(struct UMistFurnaceComponent* FurnaceComponent); // Function Mist.MistCraftingComponent.ServerStopFurnaceWork // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10ddaf0
	void ServerStartFurnaceWork(struct UMistFurnaceComponent* FurnaceComponent, int32_t RecipeId); // Function Mist.MistCraftingComponent.ServerStartFurnaceWork // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dda20
	void ServerSellItems(struct UMistTraderComponent* Trader); // Function Mist.MistCraftingComponent.ServerSellItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd990
	void ServerRepairItem(struct UMistItemRepairStationComponent* Station, int32_t SlotIndex); // Function Mist.MistCraftingComponent.ServerRepairItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd8c0
	void ServerDyeItem(struct UMistDyeingStationComponent* Station, struct FMistItem Item, int32_t Count, struct UMistDyeTemplate* PrimaryDye, struct UMistDyeTemplate* SecondaryDye, struct UMistDyeTemplate* TertiaryDye); // Function Mist.MistCraftingComponent.ServerDyeItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd6e0
	void ServerCraftItem(struct UMistCraftingStationComponent* Station, struct UMistItemTemplate* ItemTemplate, int32_t RecipeIndex, int32_t Num, int32_t Quality); // Function Mist.MistCraftingComponent.ServerCraftItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd560
	void ServerCraftBlueprint(struct UMistCraftingStationComponent* Station, struct UMistBlueprint* Blueprint); // Function Mist.MistCraftingComponent.ServerCraftBlueprint // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd490
	void ServerCancelCrafting(struct UMistCraftingStationComponent* Station, struct UMistItemTemplate* ItemTemplate, int32_t RecipeIndex, int32_t QueueOrderId, int32_t TargetQuality); // Function Mist.MistCraftingComponent.ServerCancelCrafting // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd310
	void ServerBuyItem(struct UMistTraderComponent* Trader, int32_t SlotIndex); // Function Mist.MistCraftingComponent.ServerBuyItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd240
	void ServerBribeTrader(struct UMistTraderComponent* Trader); // Function Mist.MistCraftingComponent.ServerBribeTrader // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dd1b0
	void ClientRaiseQueueLimitReached(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCraftingComponent.ClientRaiseQueueLimitReached // (Net|Native|Event|Public|NetClient) // @ game+0x10dc270
	void ClientRaiseCraftingSucceed(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCraftingComponent.ClientRaiseCraftingSucceed // (Net|Native|Event|Public|NetClient) // @ game+0x10dc1e0
	void ClientRaiseCraftingItemSucceed(); // Function Mist.MistCraftingComponent.ClientRaiseCraftingItemSucceed // (Final|Net|Native|Event|Private|NetClient) // @ game+0x10dc1c0
	void ClientRaiseCraftingItemFailed(); // Function Mist.MistCraftingComponent.ClientRaiseCraftingItemFailed // (Final|Net|Native|Event|Private|NetClient) // @ game+0x10c2540
};

// Class Mist.MistCraftingFuelWidget
// Size: 0x370 (Inherited: 0x308)
struct UMistCraftingFuelWidget : UMistUIDragDropWidget {
	struct FMulticastInlineDelegate OnToggleButtonUpdated; // 0x308(0x10)
	struct UImage* IconImageWidget; // 0x318(0x08)
	struct UMistContainerWidget* ContainerWidget; // 0x320(0x08)
	struct UBorder* ContainerBorderWidget; // 0x328(0x08)
	struct UBorder* HintBorderWidget; // 0x330(0x08)
	struct UMistUIButton* ToggleCraftingStation; // 0x338(0x08)
	struct UImage* FuelImage; // 0x340(0x08)
	struct UMistCraftingStationComponent* CraftingStation; // 0x348(0x08)
	char pad_350[0x20]; // 0x350(0x20)

	void ToggleButtonUpdated__DelegateSignature(bool bShowToggleButton, bool bCraftingStationActive, bool bAllowUserCancelling, struct FText& OnOffText); // DelegateFunction Mist.MistCraftingFuelWidget.ToggleButtonUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
	bool IsCraftingStationActive(); // Function Mist.MistCraftingFuelWidget.IsCraftingStationActive // (Final|Native|Public|BlueprintCallable) // @ game+0x10dcef0
	struct UWidget* HandleNavToCraftingToggle(enum class EUINavigation Nav); // Function Mist.MistCraftingFuelWidget.HandleNavToCraftingToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x10dca40
	void HandleInputContainerSlotUpdate(int32_t ContainerSlot, struct UMistItemTemplate* Template); // Function Mist.MistCraftingFuelWidget.HandleInputContainerSlotUpdate // (Final|Native|Public) // @ game+0x10dc900
	void HandleCraftingCancelled(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCraftingFuelWidget.HandleCraftingCancelled // (Final|Native|Public) // @ game+0x108b100
	void HandleCraftingButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistCraftingFuelWidget.HandleCraftingButtonClicked // (Final|Native|Public) // @ game+0x10dc500
};

// Class Mist.MistCraftingProgressWidget
// Size: 0x3b8 (Inherited: 0x308)
struct UMistCraftingProgressWidget : UMistUIDragDropWidget {
	struct UMistUICircularProgressBar* CraftingProgressWidget; // 0x308(0x08)
	struct UMistUICircularProgressBar* FuelProgressWidget; // 0x310(0x08)
	struct UMistCraftingFuelWidget* CenterImageWidget; // 0x318(0x08)
	struct UHorizontalBox* QueueWidget; // 0x320(0x08)
	struct UPanelWidget* QueueContainer; // 0x328(0x08)
	struct UTextBlock* QualityWidget; // 0x330(0x08)
	struct UCanvasPanel* ProgressHelperCanvas; // 0x338(0x08)
	struct UCanvasPanel* ProgressHelperRotation; // 0x340(0x08)
	struct UButton* ProgressHelperInfoButton; // 0x348(0x08)
	int32_t NumPreviewSlots; // 0x350(0x04)
	char pad_354[0x4]; // 0x354(0x04)
	struct UUserWidget* PreviewSlotWidgetClass; // 0x358(0x08)
	struct TArray<struct UMistCraftingQueueSlotWidget*> QueueSlotWidgets; // 0x360(0x10)
	char pad_370[0x18]; // 0x370(0x18)
	struct FSlateSound DropSound; // 0x388(0x18)
	struct UMistCraftingStationComponent* CraftingStation; // 0x3a0(0x08)
	struct UMistCraftingStationComponent* FuelStation; // 0x3a8(0x08)
	char pad_3B0[0x8]; // 0x3b0(0x08)

	void UpdateProgress(struct UMistCraftingStationComponent* Station, struct UMistUICircularProgressBar* ProgressWidget); // Function Mist.MistCraftingProgressWidget.UpdateProgress // (Final|Native|Private) // @ game+0x10ddcd0
	void HandleUpdateQueue(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCraftingProgressWidget.HandleUpdateQueue // (Final|Native|Private) // @ game+0x10dce50
	struct UWidget* HandleNavToQueue(enum class EUINavigation Nav); // Function Mist.MistCraftingProgressWidget.HandleNavToQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x10dcc80
	void HandleCraftingQueueSlotCancel(struct UMistCraftingQueueSlotWidget* Sender); // Function Mist.MistCraftingProgressWidget.HandleCraftingQueueSlotCancel // (Final|Native|Private) // @ game+0x10dc680
};

// Class Mist.MistCraftingQueueSlotWidget
// Size: 0x5a0 (Inherited: 0x4d8)
struct UMistCraftingQueueSlotWidget : UMistItemSlotWidget {
	struct FSlateSound CraftNotPossibleSound; // 0x4d8(0x18)
	struct FSlateSound ChooseRecipeSound; // 0x4f0(0x18)
	struct FSlateSound DiscardRecipeSound; // 0x508(0x18)
	struct FMulticastInlineDelegate OnCancelRequested; // 0x520(0x10)
	struct UProgressBar* ProgressBarWidget; // 0x530(0x08)
	char pad_538[0x68]; // 0x538(0x68)

	void WarnNotEnoughSpace(); // Function Mist.MistCraftingQueueSlotWidget.WarnNotEnoughSpace // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void WarnNotEnoughResources(); // Function Mist.MistCraftingQueueSlotWidget.WarnNotEnoughResources // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ClearWarning(); // Function Mist.MistCraftingQueueSlotWidget.ClearWarning // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void CancelRequestedEvent__DelegateSignature(struct UMistCraftingQueueSlotWidget* Sender); // DelegateFunction Mist.MistCraftingQueueSlotWidget.CancelRequestedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistCraftingCategory
// Size: 0x130 (Inherited: 0x30)
struct UMistCraftingCategory : UDataAsset {
	bool bIsOnCharacter; // 0x30(0x01)
	bool bHiddenInTechTree; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)
	struct UTexture2D* TechtreeIcon; // 0x38(0x08)
	struct FText TechtreeName; // 0x40(0x18)
	struct FText CraftingStationHelpDescription; // 0x58(0x18)
	struct FText CraftingStationHelpConsoleDescription; // 0x70(0x18)
	char pad_88[0x8]; // 0x88(0x08)
	struct TSet<struct UMistItemTemplate*> AllRecipeInputs; // 0x90(0x50)
	struct TSet<struct UMistItemTemplate*> AllRecipeOutputs; // 0xe0(0x50)
};

// Class Mist.MistCraftingStationWidget
// Size: 0x418 (Inherited: 0x2c0)
struct UMistCraftingStationWidget : UMistUIWidget {
	int32_t RecipesPerRow; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct FSlateSound SwitchTabSound; // 0x2c8(0x18)
	struct FSlateSound CraftSuccessfulSound; // 0x2e0(0x18)
	struct FSlateSound DropOverrideSound; // 0x2f8(0x18)
	struct FSlateSound DropWoodOverrideSound; // 0x310(0x18)
	struct FSlateSound QueueFullSound; // 0x328(0x18)
	struct FSlateSound NewQueueItemSound; // 0x340(0x18)
	struct UMistItemTemplate* FuelRecipe; // 0x358(0x08)
	struct UMistContainerWidget* InputContainerWidget; // 0x360(0x08)
	struct UMistContainerWidget* OutputContainerWidget; // 0x368(0x08)
	struct UMistUIButton* CraftingButton; // 0x370(0x08)
	struct UMistUIButton* InstantRecipesButton; // 0x378(0x08)
	struct UGridPanel* CraftingPanelWidget; // 0x380(0x08)
	struct UGridPanel* InstantRecipesWidget; // 0x388(0x08)
	struct UGridPanel* RecipesPanelWidget; // 0x390(0x08)
	struct UCanvasPanel* RecipesBoxWidget; // 0x398(0x08)
	struct UScrollBox* RecipeScrollBox; // 0x3a0(0x08)
	struct UMistCraftingProgressWidget* ProgressWidget; // 0x3a8(0x08)
	struct UImage* LitCampfire; // 0x3b0(0x08)
	struct UTextBlock* TitleTextBlock; // 0x3b8(0x08)
	struct UButton* HelpOnHoverButton; // 0x3c0(0x08)
	struct UGridPanel* ItemSlotPopupContainer; // 0x3c8(0x08)
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct TArray<struct UMistItemTemplate*> CachedItems; // 0x3d8(0x10)
	char pad_3E8[0x10]; // 0x3e8(0x10)
	struct UMistCraftingStationComponent* CraftingStation; // 0x3f8(0x08)
	struct UMistInventoryComponent* InventoryComponent; // 0x400(0x08)
	struct TArray<struct FMistCraftingSection> Sections; // 0x408(0x10)

	void StopBatchCraft(); // Function Mist.MistCraftingStationWidget.StopBatchCraft // (Final|Native|Protected) // @ game+0x10ddcb0
	void StartBatchCraft(); // Function Mist.MistCraftingStationWidget.StartBatchCraft // (Final|Native|Protected) // @ game+0x10ddc90
	void SetCraftBatchAmount(); // Function Mist.MistCraftingStationWidget.SetCraftBatchAmount // (Final|Native|Protected) // @ game+0x10ddc50
	void SelectItemTemplate(struct UMistItemTemplate* ItemTemplate, int32_t ItemRecipe, int32_t TargetQuality); // Function Mist.MistCraftingStationWidget.SelectItemTemplate // (Final|Native|Protected) // @ game+0x10dd0b0
	void InitRecipes(); // Function Mist.MistCraftingStationWidget.InitRecipes // (Final|Native|Protected) // @ game+0x10dced0
	struct UWidget* HandleNavToRecipes(enum class EUINavigation Nav); // Function Mist.MistCraftingStationWidget.HandleNavToRecipes // (Final|Native|Public|BlueprintCallable) // @ game+0x10dcda0
	struct UWidget* HandleNavToQueue(enum class EUINavigation Nav); // Function Mist.MistCraftingStationWidget.HandleNavToQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x10dcd10
	struct UWidget* HandleNavToProgressWidget(enum class EUINavigation Nav); // Function Mist.MistCraftingStationWidget.HandleNavToProgressWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x10dcbf0
	struct UWidget* HandleNavToOutput(enum class EUINavigation Nav); // Function Mist.MistCraftingStationWidget.HandleNavToOutput // (Final|Native|Public|BlueprintCallable) // @ game+0x10dcb60
	struct UWidget* HandleNavToInput(enum class EUINavigation Nav); // Function Mist.MistCraftingStationWidget.HandleNavToInput // (Final|Native|Public|BlueprintCallable) // @ game+0x10dcad0
	void HandleInstantRecipesButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistCraftingStationWidget.HandleInstantRecipesButtonClicked // (Final|Native|Protected) // @ game+0x10dc9c0
	void HandleInputChanged(struct UMistContainerComponent* InContainer, int32_t InSlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistCraftingStationWidget.HandleInputChanged // (Final|Native|Protected) // @ game+0x10dc800
	void HandleCraftingSuccessed(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCraftingStationWidget.HandleCraftingSuccessed // (Final|Native|Protected) // @ game+0x10dc700
	void HandleCraftingQueueIsFull(struct UMistCraftingStationComponent* Sender); // Function Mist.MistCraftingStationWidget.HandleCraftingQueueIsFull // (Final|Native|Protected) // @ game+0x10dc600
	void HandleCraftingButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistCraftingStationWidget.HandleCraftingButtonClicked // (Final|Native|Protected) // @ game+0x10dc580
};

// Class Mist.MistCraneAnimInstance
// Size: 0x2a0 (Inherited: 0x280)
struct UMistCraneAnimInstance : UMistMannedControlAnimInstance {
	struct UAnimSequence* ArmExtensionAnimation; // 0x278(0x08)
	float ArmExtension; // 0x280(0x04)
	enum class EMistCraneBaseInput BaseRotationInput; // 0x284(0x01)
	enum class EMistCraneArmInput ArmExtensionInput; // 0x285(0x01)
	enum class EMistCraneHookInput HookExtensionInput; // 0x286(0x01)
	float PedalsPosition; // 0x288(0x04)
	float ArmCrankPosition; // 0x28c(0x04)
	float BlockCrankPosition; // 0x290(0x04)
	char pad_29B[0x5]; // 0x29b(0x05)
};

// Class Mist.MistCraneHookComponent
// Size: 0x1c8 (Inherited: 0xf0)
struct UMistCraneHookComponent : UActorComponent {
	struct FMistTetherParameters TetherParameters; // 0xf0(0x90)
	struct AActor* AttachedActor; // 0x180(0x08)
	char pad_188[0x8]; // 0x188(0x08)
	struct USphereComponent* CachedGrabCollision; // 0x190(0x08)
	struct FMistComponentReference HookSlaveTetherRef; // 0x198(0x28)
	struct UMistTetherSlaveComponent* HookSlaveTether; // 0x1c0(0x08)
};

// Class Mist.MistCraneLockComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UMistCraneLockComponent : UMistInteractableComponent {
	float OverrideMaxHp; // 0x1f0(0x04)
	float OverrideMinDmg; // 0x1f4(0x04)
	bool bIsLocked; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)

	void MulticastLock(); // Function Mist.MistCraneLockComponent.MulticastLock // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10c3040
};

// Class Mist.MistCratePlaceableTemplate
// Size: 0x1d0 (Inherited: 0x1c8)
struct UMistCratePlaceableTemplate : UMistPlaceableTemplate {
	bool bIsPlaceableOnlyOnWalker; // 0x1c8(0x01)
	char pad_1C9[0x7]; // 0x1c9(0x07)
};

// Class Mist.MistCreateCharacterScreen
// Size: 0x418 (Inherited: 0x3a0)
struct UMistCreateCharacterScreen : UMistUIScreen {
	struct UEditableTextBox* NameWidget; // 0x3a0(0x08)
	struct UWidget* NameValidationPanelWidget; // 0x3a8(0x08)
	struct UTextBlock* NameErrorTextWidget; // 0x3b0(0x08)
	struct UMistCharacterCustomizationWidget* CustomizationWidget; // 0x3b8(0x08)
	struct UMistBaseButtonWidget* CancelButtonWidget; // 0x3c0(0x08)
	struct UMistBaseButtonWidget* CreateButtonWidget; // 0x3c8(0x08)
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x3d0(0x08)
	struct UMistNotificationsWidget* NotificationsWidget; // 0x3d8(0x08)
	char pad_3E0[0x18]; // 0x3e0(0x18)
	struct UMistAccountCreateCharacterData* Data; // 0x3f8(0x08)
	struct UMistVerifyRealmPasswordDialog* PasswordDialog; // 0x400(0x08)
	struct UMistUIConfirmationDialog* CloseConfirmDialog; // 0x408(0x08)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x410(0x08)

	void HandleNameCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function Mist.MistCreateCharacterScreen.HandleNameCommitted // (Final|Native|Private|HasOutParms) // @ game+0x10e4cf0
	void HandleNameChanged(struct FText& Text); // Function Mist.MistCreateCharacterScreen.HandleNameChanged // (Final|Native|Private|HasOutParms) // @ game+0x10e4c20
	void HandleChangeNamePressed(); // Function Mist.MistCreateCharacterScreen.HandleChangeNamePressed // (Final|Native|Private) // @ game+0x10e4aa0
	struct UWidget* GetRandomButton(enum class EUINavigation Nav); // Function Mist.MistCreateCharacterScreen.GetRandomButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e4a10
	struct UWidget* GetCreateButton(enum class EUINavigation Nav); // Function Mist.MistCreateCharacterScreen.GetCreateButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e4980
	struct UWidget* GetCancelButton(enum class EUINavigation Nav); // Function Mist.MistCreateCharacterScreen.GetCancelButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10e48f0
};

// Class Mist.MistCreditsScreen
// Size: 0x3b8 (Inherited: 0x3a0)
struct UMistCreditsScreen : UMistUIScreen {
	struct UButton* CloseButton; // 0x3a0(0x08)
	struct UWidgetAnimation* FadeInAnimation; // 0x3a8(0x08)
	float FastForwardSpeed; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
};

// Class Mist.MistCrosshairWidget
// Size: 0x340 (Inherited: 0x2e0)
struct UMistCrosshairWidget : UMistHUDWidget {
	struct UWidgetAnimation* TargetAquired; // 0x2e0(0x08)
	struct TMap<enum class EEquipmentSlot, struct TScriptInterface<IMistHUDCrosshairInterface>> CroasshairInterfaceImplementators; // 0x2e8(0x50)
	char pad_338[0x8]; // 0x338(0x08)

	void RemoveCrosshairInterfaceImplementator(enum class EEquipmentSlot InSlot); // Function Mist.MistCrosshairWidget.RemoveCrosshairInterfaceImplementator // (Final|Native|Private) // @ game+0x10e4e10
	void HandleEquipmentSlotUpdate(struct UMistEquipmentComponent* EquipmentComponent, enum class EEquipmentSlot InEquipmentSlot); // Function Mist.MistCrosshairWidget.HandleEquipmentSlotUpdate // (Final|Native|Private) // @ game+0x10e4b60
	void HandleCrosshairInterfaceImplementatorTargetChanged(struct TScriptInterface<IMistHUDCrosshairInterface>& InCroasshairInterfaceImplementator); // Function Mist.MistCrosshairWidget.HandleCrosshairInterfaceImplementatorTargetChanged // (Final|Native|Private|HasOutParms) // @ game+0x10e4ac0
	void AddCrosshairInterfaceImplementator(enum class EEquipmentSlot InSlot, struct TScriptInterface<IMistHUDCrosshairInterface>& InCroasshairInterfaceImplementator); // Function Mist.MistCrosshairWidget.AddCrosshairInterfaceImplementator // (Final|Native|Private|HasOutParms) // @ game+0x10e4810
};

// Class Mist.MistCustomDestructible
// Size: 0x28 (Inherited: 0x28)
struct UMistCustomDestructible : UInterface {

	void DestroyReceivedBlueprint(); // Function Mist.MistCustomDestructible.DestroyReceivedBlueprint // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistCustomizationCategory
// Size: 0x50 (Inherited: 0x30)
struct UMistCustomizationCategory : UDataAsset {
	struct FText Name; // 0x30(0x18)
	int32_t Order; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class Mist.MistExpandableSelectionItemInnerWidget
// Size: 0x2c0 (Inherited: 0x2c0)
struct UMistExpandableSelectionItemInnerWidget : UMistUIWidget {
};

// Class Mist.MistCustomizationItemIconWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistCustomizationItemIconWidget : UMistExpandableSelectionItemInnerWidget {
	struct UImage* ImageWidget; // 0x2c0(0x08)
	struct UImage* NotOwnedImageWidget; // 0x2c8(0x08)
	struct UImage* NotUnlockedImageWidget; // 0x2d0(0x08)
	struct UMaterialInterface* Material; // 0x2d8(0x08)
	struct TSoftObjectPtr<UTexture2D> EmptyTexture; // 0x2e0(0x28)
	struct UMistCustomizationTemplate* ItemTemplate; // 0x308(0x08)
};

// Class Mist.MistCustomizationTemplate
// Size: 0xc0 (Inherited: 0x30)
struct UMistCustomizationTemplate : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
	struct UMistCustomizationCategory* Category; // 0x50(0x08)
	struct FName ShopItemId; // 0x58(0x08)
	struct FMistCraftingRequirements Requirements; // 0x60(0x60)
};

// Class Mist.MistDailyCapWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistDailyCapWidget : UMistUIWidget {
	struct UTextBlock* IcEarnedTodayWidget; // 0x2c0(0x08)
	struct UTextBlock* DailyIcCapWidget; // 0x2c8(0x08)
};

// Class Mist.MistDamageType
// Size: 0x98 (Inherited: 0x40)
struct UMistDamageType : UDamageType {
	struct FText Name; // 0x40(0x18)
	struct UTexture2D* Icon; // 0x58(0x08)
	bool bIsSubjectToArmor; // 0x60(0x01)
	bool bIsMeleeDamage; // 0x61(0x01)
	bool bCanDamageStructures; // 0x62(0x01)
	bool bIgniteExplosives; // 0x63(0x01)
	bool bDetonateExplosives; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	float FractionToBreakGrapple; // 0x68(0x04)
	bool bCancelsClimbing; // 0x6c(0x01)
	bool bIgnoreDamageTimer; // 0x6d(0x01)
	char pad_6E[0x2]; // 0x6e(0x02)
	float DamageAgainstSoft; // 0x70(0x04)
	float DamageAgainstRobust; // 0x74(0x04)
	float DamageAgainstHardened; // 0x78(0x04)
	float DamageAgainstWood; // 0x7c(0x04)
	float DamageAgainstSolid; // 0x80(0x04)
	float PenetrateThroughSoft; // 0x84(0x04)
	float PenetrateThroughRobust; // 0x88(0x04)
	float PenetrateThroughHardened; // 0x8c(0x04)
	float PenetrateThroughWood; // 0x90(0x04)
	float PenetrateThroughSolid; // 0x94(0x04)
};

// Class Mist.MistDamageOverrideTable
// Size: 0x98 (Inherited: 0x30)
struct UMistDamageOverrideTable : UDataAsset {
	float DefaultMod; // 0x30(0x04)
	float MeleeMod; // 0x34(0x04)
	enum class EMistMaterialProtection MaterialProtection; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TMap<struct UDamageType*, float> DamageTypesMods; // 0x40(0x50)
	bool bAlwaysUseDamageTypeMods; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class Mist.MistCuttingDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistCuttingDamageType : UMistDamageType {
};

// Class Mist.MistPiercingDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistPiercingDamageType : UMistDamageType {
};

// Class Mist.MistHarpoonDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistHarpoonDamageType : UMistPiercingDamageType {
};

// Class Mist.MistTensionDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistTensionDamageType : UMistDamageType {
};

// Class Mist.MistAxeDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistAxeDamageType : UMistCuttingDamageType {
};

// Class Mist.MistPickaxeDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistPickaxeDamageType : UMistPiercingDamageType {
};

// Class Mist.MistBluntDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistBluntDamageType : UMistDamageType {
};

// Class Mist.MistWormDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistWormDamageType : UMistDamageType {
};

// Class Mist.MistFireDamageType
// Size: 0xa0 (Inherited: 0x98)
struct UMistFireDamageType : UMistDamageType {
	bool bSetsCharacterOnFire; // 0x98(0x01)
	char pad_99[0x7]; // 0x99(0x07)
};

// Class Mist.MistGasDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistGasDamageType : UMistDamageType {
};

// Class Mist.MistFallDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistFallDamageType : UMistDamageType {
};

// Class Mist.MistImpactDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistImpactDamageType : UMistBluntDamageType {
};

// Class Mist.MistThirstDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistThirstDamageType : UMistDamageType {
};

// Class Mist.MistCactusDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistCactusDamageType : UMistDamageType {
};

// Class Mist.MistRepairDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistRepairDamageType : UMistDamageType {
};

// Class Mist.MistDraggedDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistDraggedDamageType : UMistDamageType {
};

// Class Mist.MistWaterDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistWaterDamageType : UMistDamageType {
};

// Class Mist.MistRawWaterDamageType
// Size: 0x98 (Inherited: 0x98)
struct UMistRawWaterDamageType : UMistWaterDamageType {
};

// Class Mist.MistDamageModifierStatusEffect
// Size: 0x100 (Inherited: 0xf0)
struct UMistDamageModifierStatusEffect : UMistBaseModifierStatusEffect {
	struct UDamageType* DamageTypeModified; // 0xf0(0x08)
	enum class EMistDamageModifier ActionType; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
};

// Class Mist.MistDamageReceivedHandleStatusEffect
// Size: 0xe0 (Inherited: 0xe0)
struct UMistDamageReceivedHandleStatusEffect : UMistStatusEffect {
};

// Class Mist.MistWearEquipmentOnDamageStatusEffect
// Size: 0xf0 (Inherited: 0xe0)
struct UMistWearEquipmentOnDamageStatusEffect : UMistDamageReceivedHandleStatusEffect {
	struct UDamageType* DamageType; // 0xe0(0x08)
	float DurabilityDamage; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
};

// Class Mist.MistDamageTypeWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistDamageTypeWidget : UMistUIWidget {
	struct UImage* TypeWidget; // 0x2c0(0x08)
	struct UMistDamageType* DamageType; // 0x2c8(0x08)
};

// Class Mist.MistDataLoadingIndicatorWidget
// Size: 0x348 (Inherited: 0x2c0)
struct UMistDataLoadingIndicatorWidget : UMistUIWidget {
	struct UPanelWidget* LoadingPanelWidget; // 0x2c0(0x08)
	struct UPanelWidget* FailedPanelWidget; // 0x2c8(0x08)
	struct UTextBlock* LoadingHintWidget; // 0x2d0(0x08)
	struct UTextBlock* ErrorMessageWidget; // 0x2d8(0x08)
	struct UMistBaseButtonWidget* RetryButtonWidget; // 0x2e0(0x08)
	struct UWidget* RetryHintWidget; // 0x2e8(0x08)
	struct FText LoadingHintText; // 0x2f0(0x18)
	char pad_308[0x40]; // 0x308(0x40)
};

// Class Mist.MistDataManager
// Size: 0x90 (Inherited: 0x28)
struct UMistDataManager : UObject {
	struct UMistRealmMapDataManager* RealmMap; // 0x28(0x08)
	struct UMistRealmMapMigrationDataManager* RealmMapMigration; // 0x30(0x08)
	struct UMistRealmTileNeighborsDataManager* RealmTileNeighbors; // 0x38(0x08)
	struct UMistOffMapLobbyDataManager* OffMapLobby; // 0x40(0x08)
	struct UMistAccountAuthDataManager* AccountAuth; // 0x48(0x08)
	struct UMistAccountDataManager* Account; // 0x50(0x08)
	struct UMistJoinQueueDataManager* JoinQueue; // 0x58(0x08)
	struct UMistJoinRealmDataManager* JoinRealm; // 0x60(0x08)
	struct UMistSlotLeaseAuctionDataManager* SlotLeaseAuction; // 0x68(0x08)
	struct UMistClanDataManager* Clan; // 0x70(0x08)
	struct UMistTextFilterDataManager* TextFilter; // 0x78(0x08)
	struct UMistShopDataManager* Shop; // 0x80(0x08)
	struct UMistShopServerDataManager* ShopServer; // 0x88(0x08)
};

// Class Mist.MistDataTablesSettings
// Size: 0x1228 (Inherited: 0x38)
struct UMistDataTablesSettings : UMistSettingsObject {
	struct TSoftObjectPtr<UDataTable> FoliageTypesTable; // 0x38(0x28)
	struct TSoftObjectPtr<UDataTable> FoliageInteractionsTable; // 0x60(0x28)
	struct TSoftObjectPtr<UDataTable> InteractionIconTable; // 0x88(0x28)
	struct TSoftObjectPtr<UDataTable> KeyboardGamepadMappingTable; // 0xb0(0x28)
	struct TSoftObjectPtr<UDataTable> LandedHitsData; // 0xd8(0x28)
	struct TSoftObjectPtr<UDataTable> HitObjectData; // 0x100(0x28)
	struct TSoftObjectPtr<UDataTable> WalkerStructureAllowanceData; // 0x128(0x28)
	struct TSoftObjectPtr<UDataTable> TutorialData; // 0x150(0x28)
	struct TSoftObjectPtr<UDataTable> HudLogEntryData; // 0x178(0x28)
	struct TSoftObjectPtr<UDataTable> LevelFoliageData; // 0x1a0(0x28)
	struct TSoftObjectPtr<UDataTable> WalkerCraftingSkillsData; // 0x1c8(0x28)
	struct TSoftObjectPtr<UDataTable> WalkerTierUpgradesData; // 0x1f0(0x28)
	struct TSoftObjectPtr<UDataTable> WorldTravelErrorData; // 0x218(0x28)
	struct TSoftObjectPtr<UDataTable> RealmRegionData; // 0x240(0x28)
	struct TSoftObjectPtr<UDataTable> RealmTileUsedSlotsData; // 0x268(0x28)
	struct TSoftObjectPtr<UDataTable> RealmTileMapData; // 0x290(0x28)
	struct TSoftObjectPtr<UDataTable> ClanColorsData; // 0x2b8(0x28)
	struct TSoftObjectPtr<UDataTable> ClanEmblemsData; // 0x2e0(0x28)
	struct TSoftObjectPtr<UDataTable> AnonymizedPlayerNamesData; // 0x308(0x28)
	struct TSoftObjectPtr<UDataTable> AnonymizedClanNamesData; // 0x330(0x28)
	struct TSoftObjectPtr<UDataTable> AnonymizedTileNamesData; // 0x358(0x28)
	struct TSoftObjectPtr<UDataTable> ShopCategoriesData; // 0x380(0x28)
	struct TSoftObjectPtr<UDataTable> ShopOffersData; // 0x3a8(0x28)
	struct TSoftObjectPtr<UDataTable> ShopItemsData; // 0x3d0(0x28)
	struct TSoftObjectPtr<UDataTable> ShopCurrencyBundlesData; // 0x3f8(0x28)
	char pad_420[0xe08]; // 0x420(0xe08)
};

// Class Mist.MistDealDamageStatusEffect
// Size: 0xf0 (Inherited: 0xe0)
struct UMistDealDamageStatusEffect : UMistStatusEffect {
	float DamageValue; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct UDamageType* DamageType; // 0xe8(0x08)
};

// Class Mist.MistDealDurabilityDamageStatusEffect
// Size: 0xe8 (Inherited: 0xe0)
struct UMistDealDurabilityDamageStatusEffect : UMistStatusEffect {
	bool bDamageArmor; // 0xe0(0x01)
	bool bDamageWeapon; // 0xe1(0x01)
	char pad_E2[0x2]; // 0xe2(0x02)
	float DurabilityDamage; // 0xe4(0x04)
};

// Class Mist.MistDeferredFoliageLoaderComponent
// Size: 0x198 (Inherited: 0xf0)
struct UMistDeferredFoliageLoaderComponent : UActorComponent {
	int32_t DeferredInitsPerFrame; // 0xf0(0x04)
	int32_t DeferredTermsPerFrame; // 0xf4(0x04)
	struct TSet<struct UMistFoliageComponent*> DeferredInitFoliageComponents; // 0xf8(0x50)
	char pad_148[0x50]; // 0x148(0x50)
};

// Class Mist.MistDeleteCharacterScreen
// Size: 0x478 (Inherited: 0x3a0)
struct UMistDeleteCharacterScreen : UMistUIScreen {
	struct UWidget* ConfirmStage1PanelWidget; // 0x3a0(0x08)
	struct UMistBaseButtonWidget* ConfirmStage1CancelButtonWidget; // 0x3a8(0x08)
	struct UMistBaseButtonWidget* ConfirmStage1ContinueButtonWidget; // 0x3b0(0x08)
	struct UWidget* Stage2PanelWidget; // 0x3b8(0x08)
	struct UEditableTextBox* SteamNameTextBoxWidget; // 0x3c0(0x08)
	struct UEditableTextBox* CharacterNameTextBoxWidget; // 0x3c8(0x08)
	struct UWidget* ConfirmStage2PanelWidget; // 0x3d0(0x08)
	struct UMistBaseButtonWidget* ConfirmStage2CancelButtonWidget; // 0x3d8(0x08)
	struct UMistBaseButtonWidget* ConfirmStage2ContinueButtonWidget; // 0x3e0(0x08)
	struct UMistBaseButtonWidget* CancelButtonWidget; // 0x3e8(0x08)
	struct UMistBaseButtonWidget* DeleteButtonWidget; // 0x3f0(0x08)
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x3f8(0x08)
	struct UMistNotificationsWidget* NotificationsWidget; // 0x400(0x08)
	struct FText LastConfirmationText; // 0x408(0x18)
	struct FText AlreadyDeletedErrorText; // 0x420(0x18)
	char pad_438[0x28]; // 0x438(0x28)
	struct UMistAccountDeleteCharacterData* Data; // 0x460(0x08)
	struct UMistAccountCharacterData* CharacterData; // 0x468(0x08)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x470(0x08)
};

// Class Mist.MistDeliverPackageQuest
// Size: 0x88 (Inherited: 0x48)
struct UMistDeliverPackageQuest : UMistFlotillaQuest {
	struct UMistItemTemplate* QuestItem; // 0x48(0x08)
	int32_t MinDistance; // 0x50(0x04)
	int32_t MaxDistance; // 0x54(0x04)
	int32_t FlotsPerTile; // 0x58(0x04)
	char pad_5C[0x2c]; // 0x5c(0x2c)
};

// Class Mist.MistDeployableLadderComponent
// Size: 0x298 (Inherited: 0xf0)
struct UMistDeployableLadderComponent : UActorComponent {
	struct FMistComponentReference RopedInMeshComponentRef; // 0xf0(0x28)
	struct FMistComponentReference ExtendedMeshComponentRef; // 0x118(0x28)
	struct FMistComponentReference RopeInComponentRef; // 0x140(0x28)
	struct FMistComponentReference ExtendRopeComponentRef; // 0x168(0x28)
	struct FMistComponentReference AscendRopeComponentRef; // 0x190(0x28)
	struct FMistComponentReference DescendRopeComponentRef; // 0x1b8(0x28)
	struct FMistComponentReference DescendEndpointComponentRef; // 0x1e0(0x28)
	struct FMistComponentReference AscendEndpointComponentRef; // 0x208(0x28)
	struct FMistComponentReference GrappleUsableComponentRef; // 0x230(0x28)
	float LadderLength; // 0x258(0x04)
	float LadderWidth; // 0x25c(0x04)
	struct UStaticMeshComponent* RopedInMesh; // 0x260(0x08)
	struct UStaticMeshComponent* ExtendedMesh; // 0x268(0x08)
	struct UMistInteractableComponent* AscendRopeInteractable; // 0x270(0x08)
	struct UMistInteractableComponent* DescendRopeInteractable; // 0x278(0x08)
	struct UMistInteractableComponent* RopeInInteractable; // 0x280(0x08)
	struct UMistInteractableComponent* ExtendRopeInteractable; // 0x288(0x08)
	struct UMistGrapplingHookUsableComponent* GrapplingUsableComponent; // 0x290(0x08)

	void HandleWithdraw(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistDeployableLadderComponent.HandleWithdraw // (Final|Native|Private|HasOutParms) // @ game+0x10e8200
	void HandleExtend(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistDeployableLadderComponent.HandleExtend // (Final|Native|Private|HasOutParms) // @ game+0x10e8060
	void HandleDescend(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistDeployableLadderComponent.HandleDescend // (Final|Native|Private|HasOutParms) // @ game+0x10e7f80
	void HandleAscend(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistDeployableLadderComponent.HandleAscend // (Final|Native|Private|HasOutParms) // @ game+0x10e7e80
};

// Class Mist.MistDestructibleLootsite
// Size: 0x3d8 (Inherited: 0x3c0)
struct AMistDestructibleLootsite : AActor {
	char pad_3C0[0x8]; // 0x3c0(0x08)
	bool bIsClientCopy; // 0x3c8(0x01)
	bool bSpawnClientDestruction; // 0x3c9(0x01)
	bool bCollideWithLandscape; // 0x3ca(0x01)
	bool bCollideWithItself; // 0x3cb(0x01)
	bool bIsAffectedByBattleFanMove; // 0x3cc(0x01)
	bool bIsAffectedByBattleFanSuperBlow; // 0x3cd(0x01)
	bool bCanBeDestroyedWithPhysicalMobCollision; // 0x3ce(0x01)
	char pad_3CF[0x1]; // 0x3cf(0x01)
	float LifeSpan; // 0x3d0(0x04)
	bool bShowDebug; // 0x3d4(0x01)
	char pad_3D5[0x3]; // 0x3d5(0x03)

	void ReceiveBattleFanSuperBlow(struct FVector& Velocity); // Function Mist.MistDestructibleLootsite.ReceiveBattleFanSuperBlow // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBattleFanMove(struct FVector& Velocity); // Function Mist.MistDestructibleLootsite.ReceiveBattleFanMove // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistDeviceLightningComponent
// Size: 0x168 (Inherited: 0xf0)
struct UMistDeviceLightningComponent : UActorComponent {
	bool EnableRGBSystem; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TMap<enum class EPlayerAction, struct FDeviceLightingStruct> PlayerActionMap; // 0xf8(0x50)
	struct AMistPlayer* Player; // 0x148(0x08)
	struct FLinearColor CurrentColor; // 0x150(0x10)
	char pad_160[0x8]; // 0x160(0x08)
};

// Class Mist.MistUIBackgroundWidget
// Size: 0x2c0 (Inherited: 0x2c0)
struct UMistUIBackgroundWidget : UMistUIWidget {
};

// Class Mist.MistDialogBackgroundWidget
// Size: 0x2c0 (Inherited: 0x2c0)
struct UMistDialogBackgroundWidget : UMistUIBackgroundWidget {
};

// Class Mist.MistDinghyQuest
// Size: 0x160 (Inherited: 0x110)
struct UMistDinghyQuest : UMistTutorialQuest {
	struct AMistWalker* WalkerToBuild; // 0x110(0x08)
	struct FName WalkerToBuildTaskName; // 0x118(0x08)
	struct TArray<struct AMistWalkerLeg*> WalkerLegToBuild; // 0x120(0x10)
	struct FName WalkerLegToBuildTaskName; // 0x130(0x08)
	struct TArray<struct AMistWalkerWing*> WalkerWingToBuild; // 0x138(0x10)
	struct FName WalkerWingToBuildTaskName; // 0x148(0x08)
	struct FName ChooseSpawnpointTaskName; // 0x150(0x08)
	struct FName WalkerToManTaskName; // 0x158(0x08)

	void MannWalker(struct AMistCharacter* Character, struct UMistMannedControlComponent* MannedComponent); // Function Mist.MistDinghyQuest.MannWalker // (Final|Native|Private) // @ game+0x10e83e0
	void Finished(struct UMistConstructionSiteComponent* Component, struct AActor* ConstructionActor); // Function Mist.MistDinghyQuest.Finished // (Final|Native|Private) // @ game+0x10e7da0
};

// Class Mist.MistDiscordIntegrationWidget
// Size: 0x380 (Inherited: 0x2c0)
struct UMistDiscordIntegrationWidget : UMistUIWidget {
	struct UMistBackendHttpClient* BackendHttpClient; // 0x2c0(0x08)
	struct UButton* RefreshButton; // 0x2c8(0x08)
	struct UButton* ConnectDisconnectButton; // 0x2d0(0x08)
	struct UWidgetSwitcher* ConnectionDisplayStateSwitcher; // 0x2d8(0x08)
	struct UEditableTextBox* UrlTextBox; // 0x2e0(0x08)
	struct UCheckBox* LoggingCheckBox; // 0x2e8(0x08)
	struct UTextBlock* ConnectButtonTextBlock; // 0x2f0(0x08)
	struct UTextBlock* ErrorMessageTextBlock; // 0x2f8(0x08)
	bool bIsDiscordConnected; // 0x300(0x01)
	bool bLogging; // 0x301(0x01)
	char pad_302[0x6]; // 0x302(0x06)
	struct FString ConnectionUrl; // 0x308(0x10)
	bool bGotResponseFromBackend; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct FDateTime LastRequestTime; // 0x320(0x08)
	struct FSlateColor ErrorTextColor; // 0x328(0x28)
	struct FSlateColor SuccessTextColor; // 0x350(0x28)
	char pad_378[0x8]; // 0x378(0x08)

	void UpdateLoggingStatus(bool bNewState); // Function Mist.MistDiscordIntegrationWidget.UpdateLoggingStatus // (Final|Native|Protected) // @ game+0x10e87f0
	void HandleConnectDisconnectClicked(); // Function Mist.MistDiscordIntegrationWidget.HandleConnectDisconnectClicked // (Final|Native|Protected) // @ game+0x10e7f60
	void GetCurrentStatus(); // Function Mist.MistDiscordIntegrationWidget.GetCurrentStatus // (Final|Native|Protected) // @ game+0x10e7e60
};

// Class Mist.MistDiscoverQuest
// Size: 0x128 (Inherited: 0x110)
struct UMistDiscoverQuest : UMistTutorialQuest {
	struct FName UseFragmentTaskName; // 0x110(0x08)
	struct UMistItemTemplate* FragmentTemplate; // 0x118(0x08)
	struct FName OpenTechTreeTaskName; // 0x120(0x08)

	void ItemUsed(int32_t SoundId, struct UMistItemTemplate* ItemTemplate, int32_t Count); // Function Mist.MistDiscoverQuest.ItemUsed // (Final|Native|Protected) // @ game+0x10e82e0
	void HandleScreenOpen(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistDiscoverQuest.HandleScreenOpen // (Final|Native|Protected) // @ game+0x10e8140
};

// Class Mist.MistDoorInteractableComponent
// Size: 0x2f0 (Inherited: 0x1f0)
struct UMistDoorInteractableComponent : UMistInteractableComponent {
	struct FMistComponentReference door; // 0x1f0(0x28)
	struct FMistComponentReference CollisionShapeCompRef; // 0x218(0x28)
	struct FName CollisionProfileName; // 0x240(0x08)
	bool bCanBeOpenWithKick; // 0x248(0x01)
	bool bIsTrapDoor; // 0x249(0x01)
	char pad_24A[0x6]; // 0x24a(0x06)
	struct FMulticastInlineDelegate OnDoorClosing; // 0x250(0x10)
	struct FMulticastInlineDelegate OnDoorOpening; // 0x260(0x10)
	struct FMulticastInlineDelegate OnDoorKicked; // 0x270(0x10)
	float DoorDuration; // 0x280(0x04)
	struct FRotator Target; // 0x284(0x0c)
	struct FVector TargetLocation; // 0x290(0x0c)
	enum class FMistDoorState State; // 0x29c(0x01)
	enum class EMistDoorOpeningType DoorOpeningType; // 0x29d(0x01)
	enum class EMistDoorRotateSlide DoorRotateSlide; // 0x29e(0x01)
	char pad_29F[0x1]; // 0x29f(0x01)
	struct USceneComponent* DoorComponent; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)
	struct FTransform InitialTransform; // 0x2b0(0x30)
	char pad_2E0[0x10]; // 0x2e0(0x10)

	void OpenTrapDoor(); // Function Mist.MistDoorInteractableComponent.OpenTrapDoor // (Final|Native|Public|BlueprintCallable) // @ game+0x10e8620
	void OnRep_State(); // Function Mist.MistDoorInteractableComponent.OnRep_State // (Final|Native|Private) // @ game+0x10e8600
};

// Class Mist.MistSleepable
// Size: 0x28 (Inherited: 0x28)
struct UMistSleepable : UInterface {
};

// Class Mist.MistDormancyGridComponent
// Size: 0x138 (Inherited: 0xf0)
struct UMistDormancyGridComponent : UActorComponent {
	char pad_F0[0x48]; // 0xf0(0x48)

	void OnRep_DebugPlayerCoords(); // Function Mist.MistDormancyGridComponent.OnRep_DebugPlayerCoords // (Final|Native|Private) // @ game+0x10968b0
	void MulticastDebugPlayerMove(int16_t PrevX, int16_t PrevY, int16_t NewX, int16_t NewY); // Function Mist.MistDormancyGridComponent.MulticastDebugPlayerMove // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10e84a0
};

// Class Mist.MistDoubleBarreledGunAnimInstance
// Size: 0x2c0 (Inherited: 0x280)
struct UMistDoubleBarreledGunAnimInstance : UMistMannedControlAnimInstance {
	bool bIsManned; // 0x278(0x01)
	bool bReloading; // 0x279(0x01)
	bool bFiring; // 0x27a(0x01)
	bool bRetracting; // 0x27b(0x01)
	bool bRecoiling; // 0x27c(0x01)
	struct TArray<enum class EMistDoubleBarreledGunBarrelState> BarrelState; // 0x280(0x10)
	float YawControllerPosition; // 0x290(0x04)
	float PitchControllerPosition; // 0x294(0x04)
	float YawSpeed; // 0x298(0x04)
	float PitchSpeed; // 0x29c(0x04)
	float Yaw; // 0x2a0(0x04)
	float Pitch; // 0x2a4(0x04)
	float WarmupProgress; // 0x2a8(0x04)
	float CoolDownProgress; // 0x2ac(0x04)
	char pad_2B5[0xb]; // 0x2b5(0x0b)
};

// Class Mist.MistDoubleBarreledGunControlComponent
// Size: 0x718 (Inherited: 0x598)
struct UMistDoubleBarreledGunControlComponent : UMistMannedGimbalControlComponent {
	struct FMulticastInlineDelegate OnReloadBegin; // 0x598(0x10)
	struct FMulticastInlineDelegate OnReloadEnd; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnReloadFailed; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnFireBegin; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnFireEnd; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnFireFailed; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnRetractBegin; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnRetractEnd; // 0x608(0x10)
	char pad_618[0x30]; // 0x618(0x30)
	struct UMistItemTemplate* PreferredProjectile; // 0x648(0x08)
	struct TSet<struct UMistItemTemplate*> AllowedProjectiles; // 0x650(0x50)
	int32_t ProjectilesPerBarrel; // 0x6a0(0x04)
	bool bShowLoadedProjectileWhenLoaded; // 0x6a4(0x01)
	bool bShowLoadedProjectileWhenFiring; // 0x6a5(0x01)
	char pad_6A6[0x2]; // 0x6a6(0x02)
	struct TArray<struct FMistDoubleBarreledGunNestedComponentRefs> ProjectileLoadedLocationRefs; // 0x6a8(0x10)
	struct TArray<struct FMistComponentReference> ProjectileFireLocationRefs; // 0x6b8(0x10)
	float ReloadTime; // 0x6c8(0x04)
	float FireTime; // 0x6cc(0x04)
	float RetractTime; // 0x6d0(0x04)
	float WarmupTime; // 0x6d4(0x04)
	float CoolDownTime; // 0x6d8(0x04)
	float FireWhileFiringTimeThreshold; // 0x6dc(0x04)
	float FireWhileRetractingTimeThreshold; // 0x6e0(0x04)
	bool bAllowSimultaneousReloading; // 0x6e4(0x01)
	bool bAllowFiringWhileReloading; // 0x6e5(0x01)
	bool bCancelFiringWhenControllingCharacterChanges; // 0x6e6(0x01)
	char pad_6E7[0x1]; // 0x6e7(0x01)
	struct TArray<struct FMistDoubleBarreledGunBarrel> Barrels; // 0x6e8(0x10)
	float YawControllerSpeedMultiplier; // 0x6f8(0x04)
	float PitchControllerSpeedMultiplier; // 0x6fc(0x04)
	char pad_700[0x18]; // 0x700(0x18)

	void ServerSetPreferredProjectile(struct UMistItemTemplate* InPreferredProjectile); // Function Mist.MistDoubleBarreledGunControlComponent.ServerSetPreferredProjectile // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10e8760
	void ServerReload(int32_t BarrelIndex); // Function Mist.MistDoubleBarreledGunControlComponent.ServerReload // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10e86d0
	void ServerFire(int32_t BarrelIndex); // Function Mist.MistDoubleBarreledGunControlComponent.ServerFire // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10e8640
	void ReloadFailedEvent__DelegateSignature(struct UMistDoubleBarreledGunControlComponent* Sender, int32_t BarrelIndex, enum class EMistDoubleBarreledGunReloadFailedReason Reason); // DelegateFunction Mist.MistDoubleBarreledGunControlComponent.ReloadFailedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_Barrels(); // Function Mist.MistDoubleBarreledGunControlComponent.OnRep_Barrels // (Final|Native|Private) // @ game+0x10e85e0
	void FireFailedEvent__DelegateSignature(struct UMistDoubleBarreledGunControlComponent* Sender, int32_t BarrelIndex, enum class EMistDoubleBarreledGunFireFailedReason Reason); // DelegateFunction Mist.MistDoubleBarreledGunControlComponent.FireFailedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void FireEndEvent__DelegateSignature(struct UMistDoubleBarreledGunControlComponent* Sender, int32_t BarrelIndex, bool bBarrelIsEmpty); // DelegateFunction Mist.MistDoubleBarreledGunControlComponent.FireEndEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void FireBeginEvent__DelegateSignature(struct UMistDoubleBarreledGunControlComponent* Sender, int32_t BarrelIndex, bool bIsLastProjectile); // DelegateFunction Mist.MistDoubleBarreledGunControlComponent.FireBeginEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void Event__DelegateSignature(struct UMistDoubleBarreledGunControlComponent* Sender, int32_t BarrelIndex); // DelegateFunction Mist.MistDoubleBarreledGunControlComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistDraggableContentWidget
// Size: 0x4d0 (Inherited: 0x2c0)
struct UMistDraggableContentWidget : UMistUIWidget {
	struct UScaleBox* ContainerWidget; // 0x2c0(0x08)
	struct UPanelWidget* WrapperWidget; // 0x2c8(0x08)
	struct UMistNamedSlot* ContentSlot; // 0x2d0(0x08)
	struct UScaleBox* BackgroundImageScaleWidget; // 0x2d8(0x08)
	struct UMistRealmMapLayersWidget* Parent; // 0x2e0(0x08)
	struct UImage* BackgroundImageWidget; // 0x2e8(0x08)
	bool bUseBackgroundScaling; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct UMaterialInstanceDynamic* BackgroundMaterialDynamic; // 0x2f8(0x08)
	float BackgroundMapScale; // 0x300(0x04)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x304(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x305(0x01)
	char pad_306[0x2]; // 0x306(0x02)
	struct FMargin InitialPadding; // 0x308(0x10)
	bool bUseBackgroundImageBrush; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct FSlateBrush BackgroundImageBrush; // 0x320(0x88)
	float DragMultiplier; // 0x3a8(0x04)
	float CursorSpeedMultiplier; // 0x3ac(0x04)
	struct UUserWidget* CursorWidgetClass; // 0x3b0(0x08)
	struct FMargin Margin; // 0x3b8(0x10)
	bool bInvertMargin; // 0x3c8(0x01)
	bool bKeepDragOnRedraw; // 0x3c9(0x01)
	char pad_3CA[0x2]; // 0x3ca(0x02)
	float DefaultScale; // 0x3cc(0x04)
	float ScaleStep; // 0x3d0(0x04)
	float JoystickScaleStep; // 0x3d4(0x04)
	struct TArray<float> ScaleLevels; // 0x3d8(0x10)
	char pad_3E8[0xa8]; // 0x3e8(0xa8)
	struct FVector2D CachedContentPosition; // 0x490(0x08)
	float CachedScale; // 0x498(0x04)
	char pad_49C[0x24]; // 0x49c(0x24)
	struct UCanvasPanelSlot* ContentSlotParent; // 0x4c0(0x08)
	struct UCanvasPanelSlot* BackgroundImageScaleParent; // 0x4c8(0x08)

	void HandleContentSlotChanged(); // Function Mist.MistDraggableContentWidget.HandleContentSlotChanged // (Final|Native|Private) // @ game+0x10ebe80
};

// Class Mist.MistDraggableDebugWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistDraggableDebugWidget : UMistUIWidget {
	struct UWidget* GrabWidget; // 0x2c0(0x08)
	char pad_2C8[0x10]; // 0x2c8(0x10)
};

// Class Mist.MistDraggableMapWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistDraggableMapWidget : UMistUIWidget {
	struct TArray<struct FMistMapFilterEntry> FilterButtons; // 0x2c0(0x10)
	struct TArray<float> ScaleLevels; // 0x2d0(0x10)
	float JoystickScaleStep; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UButton* FocusOnLocalPlayer; // 0x2e8(0x08)
	struct AMistMapViewerActor* ViewerActor; // 0x2f0(0x08)
	char pad_2F8[0x18]; // 0x2f8(0x18)

	void UpdateFilters(); // Function Mist.MistDraggableMapWidget.UpdateFilters // (Final|Native|Protected) // @ game+0x10ec5f0
	void SetMapView(struct UMapViewComponent* InComponent); // Function Mist.MistDraggableMapWidget.SetMapView // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleMoveMapVertical(float InValue); // Function Mist.MistDraggableMapWidget.HandleMoveMapVertical // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void HandleMoveMapHorizontal(float InValue); // Function Mist.MistDraggableMapWidget.HandleMoveMapHorizontal // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void HandleFilterCheckStateChanged(bool bNewState); // Function Mist.MistDraggableMapWidget.HandleFilterCheckStateChanged // (Final|Native|Protected) // @ game+0x10ebff0
	void HandleCenterClicked(); // Function Mist.MistDraggableMapWidget.HandleCenterClicked // (Final|Native|Protected) // @ game+0x10ebe60
};

// Class Mist.MistDropBag
// Size: 0x508 (Inherited: 0x430)
struct AMistDropBag : AMistItemActor {
	struct UStaticMeshComponent* MeshComponent; // 0x430(0x08)
	struct UStaticMeshComponent* GlowMeshComponent; // 0x438(0x08)
	struct UMistInteractableInventoryComponent* InteractableInventoryComponent; // 0x440(0x08)
	struct UMistContainerComponent* ContainerComponent; // 0x448(0x08)
	bool bDisplayAsContainedItem; // 0x450(0x01)
	char pad_451[0x7]; // 0x451(0x07)
	struct UMistItemRarity* HighestRarity; // 0x458(0x08)
	struct FMistItemWithQuantity DisplayedItem; // 0x460(0x20)
	char pad_480[0x4]; // 0x480(0x04)
	float CachedWeight; // 0x484(0x04)
	struct FMistAttachmentMonitor AttachmentMonitor; // 0x488(0x80)

	void OnRep_HighestRarity(); // Function Mist.MistDropBag.OnRep_HighestRarity // (Final|Native|Private) // @ game+0x10ec310
	void OnRep_DisplayedItem(); // Function Mist.MistDropBag.OnRep_DisplayedItem // (Final|Native|Private) // @ game+0x10ec2d0
	void OnRep_CachedWeight(); // Function Mist.MistDropBag.OnRep_CachedWeight // (Final|Native|Private) // @ game+0x10ec2b0
};

// Class Mist.MistDropdownContainerWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistDropdownContainerWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UListView* EntryList; // 0x2c8(0x08)

	void AddEntry(struct UMistDropdownEntryBase* Entry); // Function Mist.MistDropdownContainerWidget.AddEntry // (Final|Native|Public) // @ game+0x10ebaa0
};

// Class Mist.MistDropdownEntryBase
// Size: 0x40 (Inherited: 0x28)
struct UMistDropdownEntryBase : UObject {
	char pad_28[0x18]; // 0x28(0x18)
};

// Class Mist.MistDropDownEntryMove
// Size: 0x50 (Inherited: 0x40)
struct UMistDropDownEntryMove : UMistDropdownEntryBase {
	char pad_40[0x10]; // 0x40(0x10)
};

// Class Mist.MistDropdownEntryUse
// Size: 0x90 (Inherited: 0x40)
struct UMistDropdownEntryUse : UMistDropdownEntryBase {
	char pad_40[0x50]; // 0x40(0x50)
};

// Class Mist.MistDropdownEntryDrop
// Size: 0x88 (Inherited: 0x40)
struct UMistDropdownEntryDrop : UMistDropdownEntryBase {
	char pad_40[0x48]; // 0x40(0x48)
};

// Class Mist.MistDropdownEntryWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistDropdownEntryWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UMistLabelButtonWidget* LabelButtonWidget; // 0x2d0(0x08)
	char pad_2D8[0x8]; // 0x2d8(0x08)

	void HandleButtonClicked(); // Function Mist.MistDropdownEntryWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x10ebe40
};

// Class Mist.MistDuellingInteractableComponent
// Size: 0x290 (Inherited: 0x1f0)
struct UMistDuellingInteractableComponent : UMistInteractableComponent {
	char pad_1F0[0x30]; // 0x1f0(0x30)
	struct AMistPlayer* DuelOpponent; // 0x220(0x08)
	struct UMistTradeStationArenaComponent* ArenaComponent; // 0x228(0x08)
	struct TMap<struct AMistPlayer*, int32_t> Challenged; // 0x230(0x50)
	char pad_280[0x8]; // 0x280(0x08)
	bool bIsInArena; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)

	void ServerIssueWagedDuelChallenge(struct AMistPlayer* ChallengedPlayer, int32_t Wage); // Function Mist.MistDuellingInteractableComponent.ServerIssueWagedDuelChallenge // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10ec520
	void MulticastActivateComponent(bool bActive); // Function Mist.MistDuellingInteractableComponent.MulticastActivateComponent // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d1640
	void ClientSetDuelOpponent(struct AMistPlayer* Opponent); // Function Mist.MistDuellingInteractableComponent.ClientSetDuelOpponent // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10ebcc0
	void ClientRemoveChallenger(struct AMistPlayer* ChallengedPlayer); // Function Mist.MistDuellingInteractableComponent.ClientRemoveChallenger // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10dc270
	void ClientOnArenaLeft(); // Function Mist.MistDuellingInteractableComponent.ClientOnArenaLeft // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10c2540
	void ClientOnArenaEntered(); // Function Mist.MistDuellingInteractableComponent.ClientOnArenaEntered // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10dc1c0
	void ClientHandleWagedDuelInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction Interaction); // Function Mist.MistDuellingInteractableComponent.ClientHandleWagedDuelInteractable // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10ebbf0
	void ClientAddChallenger(struct AMistPlayer* ChallengedPlayer, int32_t Wage); // Function Mist.MistDuellingInteractableComponent.ClientAddChallenger // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10ebb20
};

// Class Mist.MistDyeingStationComponent
// Size: 0x268 (Inherited: 0x1f0)
struct UMistDyeingStationComponent : UMistInteractableComponent {
	struct FMulticastInlineDelegate OnDyeingStarted; // 0x1f0(0x10)
	char pad_200[0x10]; // 0x200(0x10)
	struct FMistComponentReference ContainerRef; // 0x210(0x28)
	struct UMistContainerComponent* DyeingContainer; // 0x238(0x08)
	float DyeingStartTime; // 0x240(0x04)
	float DyeingDuration; // 0x244(0x04)
	struct UMistDyeTemplate* DyeingPrimaryDye; // 0x248(0x08)
	struct UMistDyeTemplate* DyeingSecondaryDye; // 0x250(0x08)
	struct UMistDyeTemplate* DyeingTertiaryDye; // 0x258(0x08)
	char pad_260[0x8]; // 0x260(0x08)

	void OnRep_DyeingStartTime(); // Function Mist.MistDyeingStationComponent.OnRep_DyeingStartTime // (Final|Native|Private) // @ game+0x10ec2f0
	void MulticastStartDyeing(float Duration, struct UMistDyeTemplate* PrimaryDye, struct UMistDyeTemplate* SecondaryDye, struct UMistDyeTemplate* TertiaryDye); // Function Mist.MistDyeingStationComponent.MulticastStartDyeing // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10ec170
	void DyeingStartedEvent__DelegateSignature(float Duration, struct UMistDyeTemplate* PrimaryDye, struct UMistDyeTemplate* SecondaryDye, struct UMistDyeTemplate* TertiaryDye); // DelegateFunction Mist.MistDyeingStationComponent.DyeingStartedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void DyeingCompletedEvent__DelegateSignature(); // DelegateFunction Mist.MistDyeingStationComponent.DyeingCompletedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistDyeingStationWidget
// Size: 0x3e8 (Inherited: 0x2c0)
struct UMistDyeingStationWidget : UMistUIWidget {
	struct AMistCharacterMannequin* PreviewActorClass; // 0x2c0(0x08)
	struct UMistContainerWidget* ContainerWidget; // 0x2c8(0x08)
	struct UMistLabelButtonWidget* DyeButton; // 0x2d0(0x08)
	struct UMistProgressBar* ProgressWidget; // 0x2d8(0x08)
	struct UVerticalBox* RequirementsListWidget; // 0x2e0(0x08)
	struct UMistPhotoStageWidget* PreviewWidget; // 0x2e8(0x08)
	struct UMistUITabControl* TabControl; // 0x2f0(0x08)
	struct UMistSelectionPanelWidget* PrimaryDyeSelectionWidget; // 0x2f8(0x08)
	struct UMistSelectionPanelWidget* SecondaryDyeSelectionWidget; // 0x300(0x08)
	struct UMistSelectionPanelWidget* TertiaryDyeSelectionWidget; // 0x308(0x08)
	struct UImage* PrimaryDyeIndicator; // 0x310(0x08)
	struct UImage* SecondaryDyeIndicator; // 0x318(0x08)
	struct UImage* TertiaryDyeIndicator; // 0x320(0x08)
	struct TSoftObjectPtr<UTexture2D> IndicatorTexture; // 0x328(0x28)
	struct TSoftObjectPtr<UTexture2D> IndicatorEmptyTexture; // 0x350(0x28)
	char pad_378[0x10]; // 0x378(0x10)
	struct UMistDyeingStationComponent* DyeingStation; // 0x388(0x08)
	struct UMistContainerComponent* DyeingContainer; // 0x390(0x08)
	struct AMistCharacterMannequin* PreviewActor; // 0x398(0x08)
	struct FMistItem PreviewItem; // 0x3a0(0x18)
	struct UMistDyeTemplate* SelectedPrimaryDye; // 0x3b8(0x08)
	struct UMistDyeTemplate* SelectedSecondaryDye; // 0x3c0(0x08)
	struct UMistDyeTemplate* SelectedTertiaryDye; // 0x3c8(0x08)
	struct UMistDyeTemplate* PreviewPrimaryDye; // 0x3d0(0x08)
	struct UMistDyeTemplate* PreviewSecondaryDye; // 0x3d8(0x08)
	struct UMistDyeTemplate* PreviewTertiaryDye; // 0x3e0(0x08)

	void HandlePlayerEquipmentSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot InSlot); // Function Mist.MistDyeingStationWidget.HandlePlayerEquipmentSlotUpdate // (Final|Native|Private) // @ game+0x10ec080
	void HandleDyeingStarted(float Duration, struct UMistDyeTemplate* PrimaryDye, struct UMistDyeTemplate* SecondaryDye, struct UMistDyeTemplate* TertiaryDye); // Function Mist.MistDyeingStationWidget.HandleDyeingStarted // (Final|Native|Private) // @ game+0x10ebea0
	void HandleDyeingCompleted(); // Function Mist.MistDyeingStationWidget.HandleDyeingCompleted // (Final|Native|Private) // @ game+0x10cc500
};

// Class Mist.MistDyeTemplate
// Size: 0x150 (Inherited: 0xc0)
struct UMistDyeTemplate : UMistCustomizationTemplate {
	enum class EMistDyeSpecialType SpecialType; // 0xc0(0x04)
	char pad_C4[0x4]; // 0xc4(0x04)
	struct TSoftObjectPtr<UTexture2D> PreviewIcon; // 0xc8(0x28)
	bool bCanDyeItems; // 0xf0(0x01)
	bool bCanDyeWalkers; // 0xf1(0x01)
	char pad_F2[0x2]; // 0xf2(0x02)
	float DyeingTimeMultiplier; // 0xf4(0x04)
	struct FLinearColor Color; // 0xf8(0x10)
	float Shininess; // 0x108(0x04)
	bool bSeparateSecondaryColor; // 0x10c(0x01)
	bool bSeparateSecondaryShininess; // 0x10d(0x01)
	char pad_10E[0x2]; // 0x10e(0x02)
	struct FLinearColor SecondaryColor; // 0x110(0x10)
	float SecondaryShininess; // 0x120(0x04)
	struct FLinearColor PrimaryBackgroundColor; // 0x124(0x10)
	char pad_134[0x1c]; // 0x134(0x1c)
};

// Class Mist.MistDynamicMusicManager
// Size: 0x3e8 (Inherited: 0x3c0)
struct AMistDynamicMusicManager : AActor {
	float TravelMusicFadeOutTime; // 0x3c0(0x04)
	float TravelMusicFadeOutMainMenuEnterTime; // 0x3c4(0x04)
	bool bIsPlayingIntroScene; // 0x3c8(0x01)
	char pad_3C9[0x7]; // 0x3c9(0x07)
	struct UMistLocalPlayerSubsystem* LocalPlayerSubsystem; // 0x3d0(0x08)
	struct UMistSyncMusicControlComponent* SyncMusicControlComponentCached; // 0x3d8(0x08)
	char pad_3E0[0x8]; // 0x3e0(0x08)

	void ReceiveWormUnspottedPlayer(int32_t ActiveWorms); // Function Mist.MistDynamicMusicManager.ReceiveWormUnspottedPlayer // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveWormSurfaceStatusChanged(int32_t ActiveWorms, enum class ESurfaceStatus PrevWormSurfaceStatus, enum class ESurfaceStatus NewWormSurfaceStatus); // Function Mist.MistDynamicMusicManager.ReceiveWormSurfaceStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveWormSpottedPlayer(int32_t ActiveWorms); // Function Mist.MistDynamicMusicManager.ReceiveWormSpottedPlayer // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveWormPlayerInRange(int32_t ActiveWorms); // Function Mist.MistDynamicMusicManager.ReceiveWormPlayerInRange // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveWormOutOfRange(int32_t ActiveWorms); // Function Mist.MistDynamicMusicManager.ReceiveWormOutOfRange // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveWormKilled(int32_t ActiveWorms); // Function Mist.MistDynamicMusicManager.ReceiveWormKilled // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveWormAggressionStateChanged(int32_t ActiveWorms, enum class EWormAgression PrevWormAggresion, enum class EWormAgression NextWormAggression); // Function Mist.MistDynamicMusicManager.ReceiveWormAggressionStateChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveTravelZoneLeft(bool bWantsStop, bool bUseFadeOut, float FadeOutTime, float FadeOutVolume); // Function Mist.MistDynamicMusicManager.ReceiveTravelZoneLeft // (Native|Event|Public|BlueprintEvent) // @ game+0x10ec3c0
	void ReceiveTravelZoneEntered(bool bWantsPlay); // Function Mist.MistDynamicMusicManager.ReceiveTravelZoneEntered // (Native|Event|Public|BlueprintEvent) // @ game+0x10ec330
	void ReceiveTradeProtectionChanged(enum class ETradeProtectionState ProtectionState, float Timer, float MaxTimerValue); // Function Mist.MistDynamicMusicManager.ReceiveTradeProtectionChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerTravelRequestFailed(); // Function Mist.MistDynamicMusicManager.ReceivePlayerTravelRequestFailed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerRequestedTravel(); // Function Mist.MistDynamicMusicManager.ReceivePlayerRequestedTravel // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerIsRevived(); // Function Mist.MistDynamicMusicManager.ReceivePlayerIsRevived // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerIsDowned(); // Function Mist.MistDynamicMusicManager.ReceivePlayerIsDowned // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerIsDead(); // Function Mist.MistDynamicMusicManager.ReceivePlayerIsDead // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceivePlayerHealthChanged(float PrevHealth, float NewHealth, float MaxHealth); // Function Mist.MistDynamicMusicManager.ReceivePlayerHealthChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveIntensityChanged(float PrevIntensity, float NewIntensity); // Function Mist.MistDynamicMusicManager.ReceiveIntensityChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	bool IsPlayerWithinTravelZone(); // Function Mist.MistDynamicMusicManager.IsPlayerWithinTravelZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ec140
	struct UAudioComponent* GetTravelMusicAudioComponent(); // Function Mist.MistDynamicMusicManager.GetTravelMusicAudioComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ebe10
	bool GetIsPlayingIntroScene(); // Function Mist.MistDynamicMusicManager.GetIsPlayingIntroScene // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ebde0
	float GetDistanceToWorm(int32_t WormIndex); // Function Mist.MistDynamicMusicManager.GetDistanceToWorm // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10ebd50
};

// Class Mist.MistDynamicSky
// Size: 0x3e8 (Inherited: 0x3c0)
struct AMistDynamicSky : AActor {
	struct FMistComponentReference EclipseMoonComponent; // 0x3c0(0x28)

	void UpdateEclipseBp(struct FRotator MoonRotation, float MoonEclipseProgress); // Function Mist.MistDynamicSky.UpdateEclipseBp // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveSkyDataUpdate(struct FSceneData& SceneData); // Function Mist.MistDynamicSky.ReceiveSkyDataUpdate // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistEarlyAccessScreen
// Size: 0x3a8 (Inherited: 0x3a0)
struct UMistEarlyAccessScreen : UMistUIScreen {
	struct UMistBaseButtonWidget* OKButtonWidget; // 0x3a0(0x08)
};

// Class Mist.MistEdgePatternTemplate
// Size: 0xf0 (Inherited: 0xc0)
struct UMistEdgePatternTemplate : UMistCustomizationTemplate {
	struct TSoftObjectPtr<UTexture2D> AtlasTexture; // 0xc0(0x28)
	int32_t AtlasIndex; // 0xe8(0x04)
	int32_t AtlasCount; // 0xec(0x04)
};

// Class Mist.MistEditableMultilineTextBox
// Size: 0xc88 (Inherited: 0xc80)
struct UMistEditableMultilineTextBox : UMultiLineEditableTextBox {
	struct FMistEditableTextBoxStyle EditableTextBoxStyle; // 0xc80(0x08)
};

// Class Mist.MistEditableTextBox
// Size: 0xa30 (Inherited: 0xa28)
struct UMistEditableTextBox : UEditableTextBox {
	struct FMistEditableTextBoxStyle EditableTextBoxStyle; // 0xa28(0x08)
};

// Class Mist.MistEmblemTemplate
// Size: 0x110 (Inherited: 0xc0)
struct UMistEmblemTemplate : UMistCustomizationTemplate {
	struct TSoftObjectPtr<UTexture2D> Texture; // 0xc0(0x28)
	struct TSoftObjectPtr<UTexture2D> PreviewIcon; // 0xe8(0x28)
};

// Class Mist.MistEngagementWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistEngagementWidget : UMistUIWidget {
	struct UPanelWidget* ButtonPanelWidget; // 0x2c0(0x08)
	struct UPanelWidget* StatusPanelWidget; // 0x2c8(0x08)
	char pad_2D0[0x10]; // 0x2d0(0x10)
};

// Class Mist.MistEquipmentComponent
// Size: 0xe48 (Inherited: 0x118)
struct UMistEquipmentComponent : UMistPlayerComponent {
	char pad_118[0x20]; // 0x118(0x20)
	struct FMulticastInlineDelegate OnEquipmentSlotUpdate; // 0x138(0x10)
	char pad_148[0x18]; // 0x148(0x18)
	struct FMulticastInlineDelegate OnHandsSlotUpdate; // 0x160(0x10)
	struct FMulticastInlineDelegate OnEquipmentBroke; // 0x170(0x10)
	char pad_180[0x18]; // 0x180(0x18)
	struct FEquipmentSlotState Slots[0xc]; // 0x198(0x4e0)
	struct FEquipmentSlotState PrevSlots[0xc]; // 0x678(0x4e0)
	enum class EEquipmentSlot Hands[0x2]; // 0xb58(0x02)
	enum class EEquipmentSlot PrevHands[0x2]; // 0xb5a(0x02)
	char pad_B5C[0x4]; // 0xb5c(0x04)
	struct FEquipmentSlotMeshes SlotMeshes[0xc]; // 0xb60(0x240)
	struct TArray<struct UMistItemPerk*> ActivePerks; // 0xda0(0x10)
	struct FAccountTierEquipmentSets AccountTierEquipmentSets; // 0xdb0(0x40)
	char pad_DF0[0x8]; // 0xdf0(0x08)
	struct UMistGrapplingHookItemTemplate* BrokenGrapplingHookItemTemplate; // 0xdf8(0x08)
	bool bDropEquipmentOnDeath; // 0xe00(0x01)
	char pad_E01[0x7]; // 0xe01(0x07)
	struct USoundCue* DefaultArmorSoundCue; // 0xe08(0x08)
	struct UMistContainerComponent* EquipmentContainer; // 0xe10(0x08)
	struct UMistMeleeCombatComponent* CombatComponent; // 0xe18(0x08)
	char pad_E20[0x28]; // 0xe20(0x28)

	void ServerWieldWeapon(enum class EEquipmentSlot Slot, enum class EEquipmentHand Hand); // Function Mist.MistEquipmentComponent.ServerWieldWeapon // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10f0c20
	void ServerToggleWeaponAction(enum class EEquipmentSlot Slot); // Function Mist.MistEquipmentComponent.ServerToggleWeaponAction // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10f0ba0
	void ServerSheathWeapon(enum class EEquipmentHand Hand); // Function Mist.MistEquipmentComponent.ServerSheathWeapon // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10f0b20
	void OnRep_Slots(); // Function Mist.MistEquipmentComponent.OnRep_Slots // (Final|Native|Private) // @ game+0x10f0b00
	void OnRep_Hands(); // Function Mist.MistEquipmentComponent.OnRep_Hands // (Final|Native|Private) // @ game+0x10f0ae0
	void MulticastUpdate(struct TArray<struct FEquipmentSlotUpdateData> SlotUpdates, enum class EEquipmentSlot RightHand, enum class EEquipmentSlot LeftHand); // Function Mist.MistEquipmentComponent.MulticastUpdate // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10f09c0
	void HandsSlotUpdateEvent__DelegateSignature(struct UMistEquipmentComponent* Sender, enum class EEquipmentHand Slot); // DelegateFunction Mist.MistEquipmentComponent.HandsSlotUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleCharacterStateChanged(struct AMistCharacter* InCharacter, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistEquipmentComponent.HandleCharacterStateChanged // (Final|Native|Private) // @ game+0x10f0630
	struct FMistEquipmentItem GetItemInHand(enum class EEquipmentHand Hand); // Function Mist.MistEquipmentComponent.GetItemInHand // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f0590
	struct FMistEquipmentItem GetItemForSlot(enum class EEquipmentSlot Slot); // Function Mist.MistEquipmentComponent.GetItemForSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f04f0
	struct UActorComponent* GetComponentForSlot(enum class EEquipmentSlot Slot); // Function Mist.MistEquipmentComponent.GetComponentForSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f0460
	struct USoundCue* GetArmorSoundCue(); // Function Mist.MistEquipmentComponent.GetArmorSoundCue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f0430
	void EquipmentSlotUpdateEvent__DelegateSignature(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot Slot); // DelegateFunction Mist.MistEquipmentComponent.EquipmentSlotUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void EquipmentBrokeEvent__DelegateSignature(); // DelegateFunction Mist.MistEquipmentComponent.EquipmentBrokeEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistEquipmentContainerComponent
// Size: 0x300 (Inherited: 0x2e0)
struct UMistEquipmentContainerComponent : UMistContainerComponent {
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct FMistEquipmentItem EquipmentItem; // 0x2e8(0x18)
};

// Class Mist.MistEquipmentItemTemplate
// Size: 0x2d0 (Inherited: 0x1d8)
struct UMistEquipmentItemTemplate : UMistItemTemplate {
	struct TSoftObjectPtr<UStaticMesh> EquippedMesh; // 0x1d8(0x28)
	struct TSoftObjectPtr<USkeletalMesh> EquippedRiggedMesh; // 0x200(0x28)
	struct TSoftObjectPtr<UStaticMesh> FemaleEquippedMesh; // 0x228(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleEquippedRiggedMesh; // 0x250(0x28)
	struct FName EquippedMeshAttachSocket; // 0x278(0x08)
	bool bCreateEquipmentMeshOnServer; // 0x280(0x01)
	bool bHideMeshInFirstPerson; // 0x281(0x01)
	char pad_282[0x6]; // 0x282(0x06)
	struct TSoftClassPtr<UObject> ComponentClass; // 0x288(0x28)
	struct UPhysicalMaterial* PhysMaterial; // 0x2b0(0x08)
	struct TArray<struct FMistToolTier> ToolInfo; // 0x2b8(0x10)
	bool bUseMasterPoseComponent; // 0x2c8(0x01)
	bool bSimulate; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
};

// Class Mist.MistWeaponItemTemplate
// Size: 0x428 (Inherited: 0x2d0)
struct UMistWeaponItemTemplate : UMistEquipmentItemTemplate {
	struct FMistWeaponDamage DamageProperties; // 0x2d0(0x10)
	struct TSoftClassPtr<UObject> WeaponType; // 0x2e0(0x28)
	struct TSoftClassPtr<UObject> MonkeyWeaponType; // 0x308(0x28)
	enum class EEquipmentHandRequirement HandRequirement; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct TSoftObjectPtr<UStaticMesh> ActivatedMesh; // 0x338(0x28)
	struct TSoftObjectPtr<USkeletalMesh> ActivatedRiggedMesh; // 0x360(0x28)
	struct TSoftObjectPtr<UStaticMesh> SheathMesh; // 0x388(0x28)
	struct TSoftObjectPtr<USkeletalMesh> RiggedSheathMesh; // 0x3b0(0x28)
	struct UMistWeaponCarryType* CarryType; // 0x3d8(0x08)
	struct TSoftClassPtr<UObject> WeaponActorClass; // 0x3e0(0x28)
	float DurabilityDamage; // 0x408(0x04)
	int32_t WeaponSpeed; // 0x40c(0x04)
	int32_t Impact; // 0x410(0x04)
	int32_t Stability; // 0x414(0x04)
	float WeaponLength; // 0x418(0x04)
	bool bAttachToRoot; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	struct UDamageType* DamageType; // 0x420(0x08)
};

// Class Mist.MistGrapplingHookItemTemplate
// Size: 0x2d0 (Inherited: 0x2d0)
struct UMistGrapplingHookItemTemplate : UMistEquipmentItemTemplate {
};

// Class Mist.MistArmorItemTemplate
// Size: 0x398 (Inherited: 0x2d0)
struct UMistArmorItemTemplate : UMistEquipmentItemTemplate {
	enum class EEquipmentSlot ArmorSlot; // 0x2d0(0x01)
	char pad_2D1[0x3]; // 0x2d1(0x03)
	struct FMistArmorDefense DefenseProperties; // 0x2d4(0x08)
	int32_t MovementSpeedReduction; // 0x2dc(0x04)
	struct TMap<struct UMistDamageType*, float> DmgTypeProtection; // 0x2e0(0x50)
	bool bDealDurabilityDamageOnReceivingHit; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct TSoftObjectPtr<UTexture2D> BodyMask; // 0x338(0x28)
	struct TSoftObjectPtr<UTexture2D> FemaleBodyMask; // 0x360(0x28)
	bool bHideUpperDefaultClothing; // 0x388(0x01)
	bool bHideLowerDefaultClothing; // 0x389(0x01)
	bool bHideHair; // 0x38a(0x01)
	bool bHideBeard; // 0x38b(0x01)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct USoundCue* SoundCue; // 0x390(0x08)
};

// Class Mist.MistBucketHelmetItemTemplate
// Size: 0x398 (Inherited: 0x398)
struct UMistBucketHelmetItemTemplate : UMistArmorItemTemplate {
};

// Class Mist.MistGrapplingHookAttachmentItemTemplate
// Size: 0x2d8 (Inherited: 0x2d0)
struct UMistGrapplingHookAttachmentItemTemplate : UMistEquipmentItemTemplate {
	enum class EGrapplingHookAttachmentType AttachmentType; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
};

// Class Mist.MistPouchItemTemplate
// Size: 0x2d0 (Inherited: 0x2d0)
struct UMistPouchItemTemplate : UMistEquipmentItemTemplate {
};

// Class Mist.MistWingsuitItemTemplate
// Size: 0x398 (Inherited: 0x398)
struct UMistWingsuitItemTemplate : UMistArmorItemTemplate {
};

// Class Mist.MistEquipmentItemComponent
// Size: 0x28 (Inherited: 0x28)
struct UMistEquipmentItemComponent : UInterface {
};

// Class Mist.MistItemSkinTemplate
// Size: 0xa0 (Inherited: 0x30)
struct UMistItemSkinTemplate : UDataAsset {
	char pad_30[0x8]; // 0x30(0x08)
	struct FText Name; // 0x38(0x18)
	struct FName ShopItemId; // 0x50(0x08)
	struct UTexture2D* Icon; // 0x58(0x08)
	bool bReplaceDisplayMesh; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct TSoftObjectPtr<UStaticMesh> Mesh; // 0x68(0x28)
	struct TArray<struct FMistItemCollectionMesh> CollectionMeshes; // 0x90(0x10)
};

// Class Mist.MistEquipmentItemSkinTemplate
// Size: 0x148 (Inherited: 0xa0)
struct UMistEquipmentItemSkinTemplate : UMistItemSkinTemplate {
	bool bReplaceEquippedMesh; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct TSoftObjectPtr<UStaticMesh> EquippedMesh; // 0xa8(0x28)
	struct TSoftObjectPtr<USkeletalMesh> EquippedRiggedMesh; // 0xd0(0x28)
	struct TSoftObjectPtr<UStaticMesh> FemaleEquippedMesh; // 0xf8(0x28)
	struct TSoftObjectPtr<USkeletalMesh> FemaleEquippedRiggedMesh; // 0x120(0x28)
};

// Class Mist.MistWeaponItemSkinTemplate
// Size: 0x1f8 (Inherited: 0x148)
struct UMistWeaponItemSkinTemplate : UMistEquipmentItemSkinTemplate {
	bool bReplaceActivatedMesh; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct TSoftObjectPtr<UStaticMesh> ActivatedMesh; // 0x150(0x28)
	struct TSoftObjectPtr<USkeletalMesh> ActivatedRiggedMesh; // 0x178(0x28)
	bool bReplaceSheathMesh; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)
	struct TSoftObjectPtr<UStaticMesh> SheathMesh; // 0x1a8(0x28)
	struct TSoftObjectPtr<USkeletalMesh> RiggedSheathMesh; // 0x1d0(0x28)
};

// Class Mist.MistArmorItemSkinTemplate
// Size: 0x1a8 (Inherited: 0x148)
struct UMistArmorItemSkinTemplate : UMistEquipmentItemSkinTemplate {
	bool bReplaceBodyMask; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct TSoftObjectPtr<UTexture2D> BodyMask; // 0x150(0x28)
	struct TSoftObjectPtr<UTexture2D> FemaleBodyMask; // 0x178(0x28)
	bool bReplaceHideDefaultClothing; // 0x1a0(0x01)
	bool bHideUpperDefaultClothing; // 0x1a1(0x01)
	bool bHideLowerDefaultClothing; // 0x1a2(0x01)
	bool bReplaceHideHair; // 0x1a3(0x01)
	bool bReplaceHideBeard; // 0x1a4(0x01)
	bool bHideHair; // 0x1a5(0x01)
	bool bHideBeard; // 0x1a6(0x01)
	char pad_1A7[0x1]; // 0x1a7(0x01)
};

// Class Mist.MistEquipmentQuest
// Size: 0x110 (Inherited: 0x110)
struct UMistEquipmentQuest : UMistTutorialQuest {
};

// Class Mist.MistEquipmentScreen
// Size: 0x450 (Inherited: 0x3a0)
struct UMistEquipmentScreen : UMistUIScreen {
	struct UMistGridPanelWidget* GridPanelWidget; // 0x3a0(0x08)
	struct UMistInventoryComponent* InventoryComponent; // 0x3a8(0x08)
	float TooltipToggleTime; // 0x3b0(0x04)
	float TakeAllHoldTime; // 0x3b4(0x04)
	float HoldDetectionDelay; // 0x3b8(0x04)
	float CloseClickHoldTime; // 0x3bc(0x04)
	uint32_t AltHUDFlags; // 0x3c0(0x04)
	char pad_3C4[0x54]; // 0x3c4(0x54)
	struct AActor* InventoryOpeningActor; // 0x418(0x08)
	struct UMistUIWidget* InteractionWidget; // 0x420(0x08)
	struct UMistUIWidget* EquipmentReplacementWidget; // 0x428(0x08)
	struct UMistInventoryWidget* InventoryWidget; // 0x430(0x08)
	struct UMistEquipmentWidget* EquipmentWidget; // 0x438(0x08)
	char pad_440[0x10]; // 0x440(0x10)

	void ToggleEquipment(); // Function Mist.MistEquipmentScreen.ToggleEquipment // (Final|Native|Private) // @ game+0x10f0ce0
	void ReceiveHoldStarted(); // Function Mist.MistEquipmentScreen.ReceiveHoldStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveHoldCompleted(); // Function Mist.MistEquipmentScreen.ReceiveHoldCompleted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveHoldCanceled(); // Function Mist.MistEquipmentScreen.ReceiveHoldCanceled // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	struct UWidget* HandleNavToInventory(enum class EUINavigation Nav); // Function Mist.MistEquipmentScreen.HandleNavToInventory // (Final|Native|Public|BlueprintCallable) // @ game+0x10f08f0
	struct UWidget* HandleNavToInteraction(enum class EUINavigation Nav); // Function Mist.MistEquipmentScreen.HandleNavToInteraction // (Final|Native|Public|BlueprintCallable) // @ game+0x10f0860
	struct UWidget* HandleNavToEquipment(enum class EUINavigation Nav); // Function Mist.MistEquipmentScreen.HandleNavToEquipment // (Final|Native|Public|BlueprintCallable) // @ game+0x10f07d0
	void HandleNavigatePanelRight(); // Function Mist.MistEquipmentScreen.HandleNavigatePanelRight // (Final|Native|Private) // @ game+0x10f09a0
	void HandleNavigatePanelLeft(); // Function Mist.MistEquipmentScreen.HandleNavigatePanelLeft // (Final|Native|Private) // @ game+0x10f0980
	void HandleInventoryClosed(); // Function Mist.MistEquipmentScreen.HandleInventoryClosed // (Final|Native|Private) // @ game+0x10f07b0
	void HandleEquipmentClicked(struct UMistUIButton* Sender); // Function Mist.MistEquipmentScreen.HandleEquipmentClicked // (Final|Native|Private) // @ game+0x10f0730
};

// Class Mist.MistEquipmentSelectionItemSlotWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistEquipmentSelectionItemSlotWidget : UMistUIWidget {
	struct UMistBasicItemIconWidget* IconWidget; // 0x2c0(0x08)
	struct UBorder* ItemSlotBackground; // 0x2c8(0x08)
	struct UWidget* NewItemIndicatorWidget; // 0x2d0(0x08)
	struct UTextBlock* EmptyItemTextWidget; // 0x2d8(0x08)
	float BackgroundOpacity; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct FMistItem Item; // 0x2e8(0x18)
	int32_t Count; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
};

// Class Mist.MistItemRolloutAnchorWidget
// Size: 0x360 (Inherited: 0x2c0)
struct UMistItemRolloutAnchorWidget : UMistUIWidget {
	struct UMenuAnchor* AnchorWidget; // 0x2c0(0x08)
	struct UMistEquipmentSelectionItemSlotWidget* ItemSlotWidget; // 0x2c8(0x08)
	struct UButton* ButtonWidget; // 0x2d0(0x08)
	struct UUniformGridPanel* ItemCountWidget; // 0x2d8(0x08)
	struct UWidgetAnimation* MoreItemsHover; // 0x2e0(0x08)
	struct UWidgetAnimation* OpacityAnimation; // 0x2e8(0x08)
	char pad_2F0[0x68]; // 0x2f0(0x68)
	struct UMistItemRolloutWidget* RolloutWidget; // 0x358(0x08)

	void SyncSharedGear(struct TArray<struct FWalkerGearItemInfo>& NewGear); // Function Mist.MistItemRolloutAnchorWidget.SyncSharedGear // (Final|Native|Public|HasOutParms) // @ game+0x10f4090
	struct UWidget* HandleAnchorMenuOpened(); // Function Mist.MistItemRolloutAnchorWidget.HandleAnchorMenuOpened // (Final|Native|Private) // @ game+0x10f3220
	void HandleAnchorMenuClosed(bool bIsOpen); // Function Mist.MistItemRolloutAnchorWidget.HandleAnchorMenuClosed // (Final|Native|Private) // @ game+0x10f3190
	void HandleAnchorButtonClicked(); // Function Mist.MistItemRolloutAnchorWidget.HandleAnchorButtonClicked // (Final|Native|Public) // @ game+0x10f3170
};

// Class Mist.MistEquipmentSelectionWidget
// Size: 0x358 (Inherited: 0x2c0)
struct UMistEquipmentSelectionWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UMistItemRolloutAnchorWidget* HeadSlotWidget; // 0x2d8(0x08)
	struct UMistItemRolloutAnchorWidget* TorsoSlotWidget; // 0x2e0(0x08)
	struct UMistItemRolloutAnchorWidget* HandsSlotWidget; // 0x2e8(0x08)
	struct UMistItemRolloutAnchorWidget* BootsSlotWidget; // 0x2f0(0x08)
	struct UMistItemRolloutAnchorWidget* BeltSlotWidget; // 0x2f8(0x08)
	struct UMistItemRolloutAnchorWidget* PouchLeftSlotWidget; // 0x300(0x08)
	struct UMistItemRolloutAnchorWidget* PouchRightSlotWidget; // 0x308(0x08)
	struct UMistItemRolloutAnchorWidget* WeaponLeftSlotWidget; // 0x310(0x08)
	struct UMistItemRolloutAnchorWidget* WeaponRightSlotWidget; // 0x318(0x08)
	struct UButton* ConfirmButton; // 0x320(0x08)
	char pad_328[0x18]; // 0x328(0x18)
	struct UMistItemRolloutAnchorWidget* LastFocusedSlot; // 0x340(0x08)
	struct TArray<struct UMistItemRolloutAnchorWidget*> SlotWidgets; // 0x348(0x10)

	void HandleSlotClicked(); // Function Mist.MistEquipmentSelectionWidget.HandleSlotClicked // (Final|Native|Private) // @ game+0x10f39e0
	void HandleSelectionConfirmed(); // Function Mist.MistEquipmentSelectionWidget.HandleSelectionConfirmed // (Final|Native|Private) // @ game+0x10f39c0
	void HandleItemSlotUnfocused(struct UMistItemRolloutAnchorWidget* Widget); // Function Mist.MistEquipmentSelectionWidget.HandleItemSlotUnfocused // (Final|Native|Private) // @ game+0x10f3410
	void HandleItemSlotFocused(struct UMistItemRolloutAnchorWidget* Widget); // Function Mist.MistEquipmentSelectionWidget.HandleItemSlotFocused // (Final|Native|Private) // @ game+0x10f3390
};

// Class Mist.MistEquipmentWidget
// Size: 0x428 (Inherited: 0x308)
struct UMistEquipmentWidget : UMistUIDragDropWidget {
	struct AMistCharacterMannequin* PreviewActorClass; // 0x308(0x08)
	struct UMistPhotoStageWidget* PreviewWidget; // 0x310(0x08)
	struct UMistItemSlotWidget* HeadSlotWidget; // 0x318(0x08)
	struct UMistItemSlotWidget* TorsoSlotWidget; // 0x320(0x08)
	struct UMistItemSlotWidget* HandsSlotWidget; // 0x328(0x08)
	struct UMistItemSlotWidget* BootsSlotWidget; // 0x330(0x08)
	struct UMistItemSlotWidget* BeltSlotWidget; // 0x338(0x08)
	struct UMistItemSlotWidget* PouchLeftSlotWidget; // 0x340(0x08)
	struct UMistItemSlotWidget* PouchRightSlotWidget; // 0x348(0x08)
	struct UMistItemSlotWidget* WeaponLeftSlotWidget; // 0x350(0x08)
	struct UMistItemSlotWidget* WeaponRightSlotWidget; // 0x358(0x08)
	struct UMistItemSlotWidget* GrapplingHookSlotWidget; // 0x360(0x08)
	struct UWidgetSwitcher* CharacterGender; // 0x368(0x08)
	struct UGridPanel* ItemSlotPopupContainerLeft; // 0x370(0x08)
	struct UGridPanel* ItemSlotPopupContainerRight; // 0x378(0x08)
	struct AMistCharacterMannequin* PreviewActor; // 0x380(0x08)
	struct TMap<enum class EEquipmentHand, struct UMistItemSlotWidget*> HandSlotWidgets; // 0x388(0x50)
	struct TMap<enum class EEquipmentSlot, struct UMistItemSlotWidget*> EquipmentSlotWidgets; // 0x3d8(0x50)

	struct UWidget* HandleNavToWeaponRight(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToWeaponRight // (Final|Native|Public|BlueprintCallable) // @ game+0x10f3910
	struct UWidget* HandleNavToWeaponLeft(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToWeaponLeft // (Final|Native|Public|BlueprintCallable) // @ game+0x10f3880
	struct UWidget* HandleNavToTorso(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToTorso // (Final|Native|Public|BlueprintCallable) // @ game+0x10f37f0
	struct UWidget* HandleNavToPouchRight(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToPouchRight // (Final|Native|Public|BlueprintCallable) // @ game+0x10f3760
	struct UWidget* HandleNavToPouchLeft(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToPouchLeft // (Final|Native|Public|BlueprintCallable) // @ game+0x10f36d0
	struct UWidget* HandleNavToHead(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToHead // (Final|Native|Public|BlueprintCallable) // @ game+0x10f3640
	struct UWidget* HandleNavToHands(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToHands // (Final|Native|Public|BlueprintCallable) // @ game+0x10f35b0
	struct UWidget* HandleNavToGrapplingHook(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToGrapplingHook // (Final|Native|Public|BlueprintCallable) // @ game+0x10f3520
	struct UWidget* HandleNavToBoots(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToBoots // (Final|Native|Public|BlueprintCallable) // @ game+0x10f3490
	struct UWidget* HandleNavToBelt(enum class EUINavigation Nav); // Function Mist.MistEquipmentWidget.HandleNavToBelt // (Final|Native|Public|BlueprintCallable) // @ game+0x10dca40
	void HandleEquipmentSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot InSlot); // Function Mist.MistEquipmentWidget.HandleEquipmentSlotUpdate // (Final|Native|Private) // @ game+0x10f32d0
};

// Class Mist.MistExchangeFlotsWidget
// Size: 0x440 (Inherited: 0x2c0)
struct UMistExchangeFlotsWidget : UMistUIWidget {
	struct UBorder* DepositBorderWidget; // 0x2c0(0x08)
	struct UBorder* WithdrawBorderWidget; // 0x2c8(0x08)
	struct UMistNumberSliderWidget* DepositSliderWidget; // 0x2d0(0x08)
	struct UMistNumberSliderWidget* WithdrawSliderWidget; // 0x2d8(0x08)
	struct UMistNumberInputWidget* DepositNumberInputWidget; // 0x2e0(0x08)
	struct UMistNumberInputWidget* WithdrawNumberInputWidget; // 0x2e8(0x08)
	struct UButton* DepositButtonWidget; // 0x2f0(0x08)
	struct UButton* WithdrawButtonWidget; // 0x2f8(0x08)
	struct UButton* CloseExchangeButtonWidget; // 0x300(0x08)
	struct UMistBasicItemIconWidget* FlotsIconWidget; // 0x308(0x08)
	struct UImage* ArrowLeftImageWidget; // 0x310(0x08)
	struct UImage* ArrowRightImageWidget; // 0x318(0x08)
	struct UTextBlock* CurrentBalanceTextWidget; // 0x320(0x08)
	struct FSlateBrush BorderActiveBrush; // 0x328(0x88)
	struct FSlateBrush BorderDefaultBrush; // 0x3b0(0x88)
	struct UMistTradeStationScreen* Screen; // 0x438(0x08)

	void HandleWithdrawSliderValueChanged(); // Function Mist.MistExchangeFlotsWidget.HandleWithdrawSliderValueChanged // (Final|Native|Protected) // @ game+0x10f3a40
	void HandleWithdrawInputValueChanged(); // Function Mist.MistExchangeFlotsWidget.HandleWithdrawInputValueChanged // (Final|Native|Protected) // @ game+0x10f3a20
	void HandleWithdrawButtonClicked(); // Function Mist.MistExchangeFlotsWidget.HandleWithdrawButtonClicked // (Final|Native|Protected) // @ game+0x10f3a00
	void HandleDepositSliderValueChanged(); // Function Mist.MistExchangeFlotsWidget.HandleDepositSliderValueChanged // (Final|Native|Protected) // @ game+0x10f32b0
	void HandleDepositInputValueChanged(); // Function Mist.MistExchangeFlotsWidget.HandleDepositInputValueChanged // (Final|Native|Protected) // @ game+0x10f3290
	void HandleDepositButtonClicked(); // Function Mist.MistExchangeFlotsWidget.HandleDepositButtonClicked // (Final|Native|Protected) // @ game+0x10f3270
	void HandleCloseButtonClicked(); // Function Mist.MistExchangeFlotsWidget.HandleCloseButtonClicked // (Final|Native|Protected) // @ game+0x10f3250
};

// Class Mist.MistExoGunAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UMistExoGunAnimInstance : UAnimInstance {
	enum class EMistBallistaState GunState; // 0x268(0x01)
	struct AMistExoskeleton* Exoskeleton; // 0x270(0x08)
	char pad_279[0x7]; // 0x279(0x07)
};

// Class Mist.MistExoskeleton
// Size: 0xa90 (Inherited: 0x970)
struct AMistExoskeleton : AMistCharacter {
	char pad_970[0x48]; // 0x970(0x48)
	struct FMulticastInlineDelegate OnDisassembled; // 0x9b8(0x10)
	struct UMistContainerComponent* AmmoContainerComponent; // 0x9c8(0x08)
	struct UMistClanOwnershipComponent* ClanOwnershipComponent; // 0x9d0(0x08)
	struct UMistSkeletalMeshComponent* PilotSuitComponent; // 0x9d8(0x08)
	struct UMistNettableComponent* NettableComponent; // 0x9e0(0x08)
	struct UMistDamageOverrideTable* DamageOverride; // 0x9e8(0x08)
	struct FVector2D JumpForceTimeRange; // 0x9f0(0x08)
	float MinJumpChargeTime; // 0x9f8(0x04)
	float MaxJumpChargeTime; // 0x9fc(0x04)
	float DesiredRotationScale; // 0xa00(0x04)
	struct FName HeadBoneName; // 0xa04(0x08)
	char pad_A0C[0x4]; // 0xa0c(0x04)
	struct TMap<enum class EMistCharacterGender, struct FMistExoskeletonPilotSuitSettings> PilotSuitSettings; // 0xa10(0x50)
	float DamageCooldownEndTime; // 0xa60(0x04)
	char pad_A64[0xc]; // 0xa64(0x0c)
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0xa70(0x08)
	int32_t Quality; // 0xa78(0x04)
	char pad_A7C[0x4]; // 0xa7c(0x04)
	struct AMistPackingProcessActor* PackingProcessActor; // 0xa80(0x08)
	char pad_A88[0x8]; // 0xa88(0x08)

	void ServerSendJumpInput(bool JumpInput); // Function Mist.MistExoskeleton.ServerSendJumpInput // (Final|Net|Native|Event|Private|NetServer) // @ game+0x10f3f70
	void OnRep_DamageCooldownEndTime(); // Function Mist.MistExoskeleton.OnRep_DamageCooldownEndTime // (Final|Native|Private) // @ game+0x10f3dd0
	void OnPilotLeaving__DelegateSignature(struct AMistPlayer* Pilot); // DelegateFunction Mist.MistExoskeleton.OnPilotLeaving__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnPilotEntering__DelegateSignature(struct AMistPlayer* Pilot, bool bWasPiloted); // DelegateFunction Mist.MistExoskeleton.OnPilotEntering__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleNetAttached(); // Function Mist.MistExoskeleton.HandleNetAttached // (Final|Native|Private) // @ game+0x10f39a0
	void ExoskeletonJumped__DelegateSignature(); // DelegateFunction Mist.MistExoskeleton.ExoskeletonJumped__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ExoskeletonDisassembled__DelegateSignature(); // DelegateFunction Mist.MistExoskeleton.ExoskeletonDisassembled__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistExoskeletonAnimInstance
// Size: 0x440 (Inherited: 0x270)
struct UMistExoskeletonAnimInstance : UAnimInstance {
	char bIsInAir : 1; // 0x268(0x01)
	char bIsSprinting : 1; // 0x268(0x01)
	float Speed; // 0x26c(0x04)
	float Direction; // 0x270(0x04)
	float ArmYaw; // 0x274(0x04)
	float ArmPitch; // 0x278(0x04)
	float TorsoYaw; // 0x27c(0x04)
	float TorsoPitch; // 0x280(0x04)
	enum class EExoGunState LeftGunState; // 0x284(0x01)
	enum class EExoGunState RightGunState; // 0x285(0x01)
	float LeftArmAlpha; // 0x288(0x04)
	float RightArmAlpha; // 0x28c(0x04)
	bool bRightArmComponentSpace; // 0x290(0x01)
	bool bLeftArmComponentSpace; // 0x291(0x01)
	float ArmAlphaLerpSpeed; // 0x294(0x04)
	float LandingStartDistance; // 0x298(0x04)
	bool bIsDead; // 0x29c(0x01)
	bool bIsManned; // 0x29d(0x01)
	bool bIsActive; // 0x29e(0x01)
	char pad_29F_2 : 6; // 0x29f(0x01)
	struct TMap<enum class ELocomotionState, struct FMistLocomotionAnimStorage> AnimAssets; // 0x2a0(0x50)
	struct UAnimMontage* JumpStartMontage; // 0x2f0(0x08)
	char pad_2F8[0x10]; // 0x2f8(0x10)
	struct AMistExoskeleton* Exoskeleton; // 0x308(0x08)
	struct UMistCharacterMovementComponent* MovementComponent; // 0x310(0x08)
	struct UAnimationAsset* ActiveAsset; // 0x318(0x08)
	char pad_320[0x120]; // 0x320(0x120)

	void OnWeaponReloadingStarted(enum class EExoskeletonGunSide GunSide); // Function Mist.MistExoskeletonAnimInstance.OnWeaponReloadingStarted // (Final|Native|Private) // @ game+0x10f3ef0
	void OnWeaponReloadingFinished(enum class EExoskeletonGunSide GunSide); // Function Mist.MistExoskeletonAnimInstance.OnWeaponReloadingFinished // (Final|Native|Private) // @ game+0x10f3e70
	void OnWeaponFired(enum class EExoskeletonGunSide GunSide); // Function Mist.MistExoskeletonAnimInstance.OnWeaponFired // (Final|Native|Private) // @ game+0x10f3df0
	void OnReachedJumpApex(); // Function Mist.MistExoskeletonAnimInstance.OnReachedJumpApex // (Final|Native|Private) // @ game+0x10f3db0
	void OnPilotLeaving(struct AMistPlayer* Player); // Function Mist.MistExoskeletonAnimInstance.OnPilotLeaving // (Final|Native|Private) // @ game+0x10f3d30
	void OnPilotEntering(struct AMistPlayer* Player, bool bWasPiloted); // Function Mist.MistExoskeletonAnimInstance.OnPilotEntering // (Final|Native|Private) // @ game+0x10f3c60
	void OnMagazineReloadingStarted(enum class EExoskeletonGunSide GunSide); // Function Mist.MistExoskeletonAnimInstance.OnMagazineReloadingStarted // (Final|Native|Private) // @ game+0x10f3be0
	void OnMagazineReloadingFinished(enum class EExoskeletonGunSide GunSide); // Function Mist.MistExoskeletonAnimInstance.OnMagazineReloadingFinished // (Final|Native|Private) // @ game+0x10f3b60
	void OnLanded(struct FHitResult& Hit); // Function Mist.MistExoskeletonAnimInstance.OnLanded // (Final|Native|Private|HasOutParms) // @ game+0x10f3a80
	void OnJumped(); // Function Mist.MistExoskeletonAnimInstance.OnJumped // (Final|Native|Private) // @ game+0x10f3a60
};

// Class Mist.MistMannedWithAmmoRackControlComponent
// Size: 0x638 (Inherited: 0x598)
struct UMistMannedWithAmmoRackControlComponent : UMistMannedGimbalControlComponent {
	float AmmoRackLoadingTime; // 0x598(0x04)
	float AmmoRackUnloadingTime; // 0x59c(0x04)
	char pad_5A0[0x2]; // 0x5a0(0x02)
	bool bUseCharacterFallbackForAmmo; // 0x5a2(0x01)
	char pad_5A3[0x5]; // 0x5a3(0x05)
	struct FMistComponentReference AmmoContainerRef; // 0x5a8(0x28)
	struct UMistItemTemplate* PreferredProjectile; // 0x5d0(0x08)
	struct TSet<struct UMistItemTemplate*> AllowedProjectiles; // 0x5d8(0x50)
	struct UMistContainerComponent* AmmoContainerComponent; // 0x628(0x08)
	char pad_630[0x8]; // 0x630(0x08)

	void ServerSetPreferredProjectile(struct UMistItemTemplate* InPreferredProjectile); // Function Mist.MistMannedWithAmmoRackControlComponent.ServerSetPreferredProjectile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1137d30
	void ServerSetAmmoRackState(bool bInWantsLoadAmmoRack, bool bInWantsUnloadAmmoRack); // Function Mist.MistMannedWithAmmoRackControlComponent.ServerSetAmmoRackState // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1137b00
};

// Class Mist.MistMannedBallistaControlComponent
// Size: 0x7a0 (Inherited: 0x638)
struct UMistMannedBallistaControlComponent : UMistMannedWithAmmoRackControlComponent {
	struct FMulticastInlineDelegate OnReelInBegin; // 0x638(0x10)
	struct FMulticastInlineDelegate OnReelInEnd; // 0x648(0x10)
	struct FMulticastInlineDelegate OnReelOutBegin; // 0x658(0x10)
	struct FMulticastInlineDelegate OnReelOutEnd; // 0x668(0x10)
	struct FMulticastInlineDelegate OnReloadStarted; // 0x678(0x10)
	struct FMulticastInlineDelegate OnFired; // 0x688(0x10)
	struct FMulticastInlineDelegate OnReloadFailed; // 0x698(0x10)
	char pad_6A8[0x18]; // 0x6a8(0x18)
	bool IsActuallyACrane; // 0x6c0(0x01)
	char pad_6C1[0x3]; // 0x6c1(0x03)
	float MaxDeviationAngle; // 0x6c4(0x04)
	float ReloadingTime; // 0x6c8(0x04)
	float FiringTime; // 0x6cc(0x04)
	float ProjectileVelocityMod; // 0x6d0(0x04)
	float ReelInSpeed; // 0x6d4(0x04)
	struct UCurveFloat* ReelInSpeedRatio; // 0x6d8(0x08)
	float ReelOutSpeed; // 0x6e0(0x04)
	float PullStrengthUnderTension; // 0x6e4(0x04)
	enum class EMistBallistaState State; // 0x6e8(0x01)
	char pad_6E9[0x7]; // 0x6e9(0x07)
	float ReelingSpeed; // 0x6f0(0x04)
	char pad_6F4[0x6]; // 0x6f4(0x06)
	bool bLockWhenReloading; // 0x6fa(0x01)
	bool bRotateUnderTension; // 0x6fb(0x01)
	char pad_6FC[0x4]; // 0x6fc(0x04)
	struct FMistComponentReference Slider; // 0x700(0x28)
	struct FMistComponentReference BallistaBoltRef; // 0x728(0x28)
	struct FMistComponentReference Tether; // 0x750(0x28)
	struct UMistTetherMasterComponent* TetherComponent; // 0x778(0x08)
	struct FMistProjectileItem ProjectileItem; // 0x780(0x18)
	struct USceneComponent* SliderComponent; // 0x798(0x08)

	void ServerTryReloadOrShoot(); // Function Mist.MistMannedBallistaControlComponent.ServerTryReloadOrShoot // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x10a4190
	void ServerSnapTether(); // Function Mist.MistMannedBallistaControlComponent.ServerSnapTether // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x10a41b0
	void ServerSetReelState(bool bInWantsReelingIn, bool bInWantsReelingOut); // Function Mist.MistMannedBallistaControlComponent.ServerSetReelState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x110d140
	void ReceiveReloadStarted(); // Function Mist.MistMannedBallistaControlComponent.ReceiveReloadStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveReloadFailed(); // Function Mist.MistMannedBallistaControlComponent.ReceiveReloadFailed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveFired(); // Function Mist.MistMannedBallistaControlComponent.ReceiveFired // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_State(); // Function Mist.MistMannedBallistaControlComponent.OnRep_State // (Final|Native|Private) // @ game+0x1131330
	void OnRep_ReelingSpeed(); // Function Mist.MistMannedBallistaControlComponent.OnRep_ReelingSpeed // (Final|Native|Private) // @ game+0x1131310
	void OnRep_ProjectileItem(); // Function Mist.MistMannedBallistaControlComponent.OnRep_ProjectileItem // (Final|Native|Private) // @ game+0x11312f0
	void Event__DelegateSignature(struct UMistMannedBallistaControlComponent* Sender); // DelegateFunction Mist.MistMannedBallistaControlComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistExoskeletonBallistaComponent
// Size: 0x850 (Inherited: 0x7a0)
struct UMistExoskeletonBallistaComponent : UMistMannedBallistaControlComponent {
	char pad_7A0[0x98]; // 0x7a0(0x98)
	float AimAutoCancelDelay; // 0x838(0x04)
	float GunMagazineReloadTime; // 0x83c(0x04)
	bool bArmAiming; // 0x840(0x01)
	bool bArmReloadingMagazine; // 0x841(0x01)
	char pad_842[0xe]; // 0x842(0x0e)

	void ServerSetArmReloading(); // Function Mist.MistExoskeletonBallistaComponent.ServerSetArmReloading // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a4130
	void ServerSetArmAimingState(bool bInValue); // Function Mist.MistExoskeletonBallistaComponent.ServerSetArmAimingState // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10f4000
	void ServerReloadGun(); // Function Mist.MistExoskeletonBallistaComponent.ServerReloadGun // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a4150
};

// Class Mist.MistExoskeletonControlComponent
// Size: 0x5c8 (Inherited: 0x598)
struct UMistExoskeletonControlComponent : UMistMannedGimbalControlComponent {
	char pad_598[0x18]; // 0x598(0x18)
	struct TArray<struct FMistExoskeletonGunState> GunStates; // 0x5b0(0x10)
	struct AMistExoskeleton* Exoskeleton; // 0x5c0(0x08)
};

// Class Mist.MistMannedInfoWidget
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMistMannedInfoWidget : UMistHUDWidget {
	struct UMistMannedControlComponent* MannedComponent; // 0x2e0(0x08)
};

// Class Mist.MistExoskeletonInfoWidget
// Size: 0x330 (Inherited: 0x2e8)
struct UMistExoskeletonInfoWidget : UMistMannedInfoWidget {
	struct AMistExoskeleton* MannedExoskeleton; // 0x2e8(0x08)
	struct UTextBlock* ExoskeletonNameWidget; // 0x2f0(0x08)
	struct UTextBlock* ChassisHealth; // 0x2f8(0x08)
	struct UProgressBar* ChassisHealthBar; // 0x300(0x08)
	struct UWidget* TorqueLabelWidget; // 0x308(0x08)
	struct UTextBlock* TorqueStateWidget; // 0x310(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x318(0x08)
	char pad_320[0x10]; // 0x320(0x10)
};

// Class Mist.MistExoskeletonOperationAnimInstance
// Size: 0x330 (Inherited: 0x280)
struct UMistExoskeletonOperationAnimInstance : UMistMannedControlAnimInstance {
	enum class EAnimationEnslavementMode Mode; // 0x278(0x01)
	bool bForceNewEntry; // 0x279(0x01)
	struct UAnimSequence* CurrentAnimSequence; // 0x280(0x08)
	float AnimSequenceStartTime; // 0x288(0x04)
	bool bLoopAnimSequence; // 0x28c(0x01)
	char pad_28F[0x1]; // 0x28f(0x01)
	float ArmYaw; // 0x290(0x04)
	float ArmPitch; // 0x294(0x04)
	float TorsoYaw; // 0x298(0x04)
	float TorsoPitch; // 0x29c(0x04)
	enum class EExoGunState LeftGunState; // 0x2a0(0x01)
	enum class EExoGunState RightGunState; // 0x2a1(0x01)
	char pad_2A2[0x2]; // 0x2a2(0x02)
	float LeftArmAlpha; // 0x2a4(0x04)
	float RightArmAlpha; // 0x2a8(0x04)
	float ArmAlphaLerpSpeed; // 0x2ac(0x04)
	bool bIsActive; // 0x2b0(0x01)
	bool bIsManned; // 0x2b1(0x01)
	char pad_2B2[0x6]; // 0x2b2(0x06)
	struct TMap<struct UAnimMontage*, struct UAnimationAsset*> MasterSlaveAnimMontageStorage; // 0x2b8(0x50)
	struct UMistExoskeletonAnimInstance* MasterInstance; // 0x308(0x08)
	char pad_310[0x20]; // 0x310(0x20)
};

// Class Mist.MistExoskeletonWeapon
// Size: 0x568 (Inherited: 0x4b0)
struct AMistExoskeletonWeapon : AMistPlaceable {
	char pad_4B0[0x8]; // 0x4b0(0x08)
	struct FMistComponentReference ControlComponentRef; // 0x4b8(0x28)
	char pad_4E0[0x88]; // 0x4e0(0x88)
};

// Class Mist.MistExoskeletonWeaponControlInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistExoskeletonWeaponControlInterface : UInterface {
};

// Class Mist.MistExoskeletonWeaponWidget
// Size: 0x438 (Inherited: 0x2e8)
struct UMistExoskeletonWeaponWidget : UMistMannedInfoWidget {
	struct UMistExoskeletonControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistExoskeletonBallistaComponent* WeaponControlComponent; // 0x2f0(0x08)
	struct FSlateSound LoadSound; // 0x2f8(0x18)
	struct FSlateSound UnloadSound; // 0x310(0x18)
	struct FSlateSound StartLoadingSound; // 0x328(0x18)
	struct FSlateSound StartUnlodingSound; // 0x340(0x18)
	struct FSlateSound RackFullSound; // 0x358(0x18)
	struct FSlateColor BackgroundDefaultColor; // 0x370(0x28)
	struct FSlateColor BackgroundNoAmmoColor; // 0x398(0x28)
	struct UHorizontalBox* UpperHorizontalBox; // 0x3c0(0x08)
	struct UScaleBox* AmmoItemWidget; // 0x3c8(0x08)
	struct UScrollBox* ItemsWidget; // 0x3d0(0x08)
	struct UCanvasPanel* AmmoPanel; // 0x3d8(0x08)
	struct UMistUICircularProgressBar* CapacityBar; // 0x3e0(0x08)
	struct UTextBlock* LoadedCountWidget; // 0x3e8(0x08)
	struct UImage* ExoskeletonImage; // 0x3f0(0x08)
	struct UHorizontalBox* LowerHorizontalBox; // 0x3f8(0x08)
	struct UMistInputBindingHintWidget* ActionHintWidget; // 0x400(0x08)
	struct UVerticalBox* InventoryVerticalBox; // 0x408(0x08)
	struct UTextBlock* InventoryCountWidget; // 0x410(0x08)
	struct UImage* BackgroundImage; // 0x418(0x08)
	int32_t Capacity; // 0x420(0x04)
	int32_t Count; // 0x424(0x04)
	char pad_428[0x8]; // 0x428(0x08)
	struct UMistContainerComponent* BoundContainer; // 0x430(0x08)

	void SetGunSide(enum class EExoskeletonGunSide InGunSide); // Function Mist.MistExoskeletonWeaponWidget.SetGunSide // (Final|Native|Public|BlueprintCallable) // @ game+0x10f7a00
	void HandleMannedControlStateChanged(struct UMistMannedBallistaControlComponent* Sender, enum class EMistBallistaState PrevState, enum class EMistBallistaState NextState); // Function Mist.MistExoskeletonWeaponWidget.HandleMannedControlStateChanged // (Final|Native|Private) // @ game+0x10f7690
	enum class EExoskeletonGunSide GetGunSide(); // Function Mist.MistExoskeletonWeaponWidget.GetGunSide // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x10f75a0
};

// Class Mist.MistExpandableSelectionCategoryWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistExpandableSelectionCategoryWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	int32_t ItemsPerRow; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct UMistTextBlock* LabelWidget; // 0x2e0(0x08)
	struct UUniformGridPanel* GridWidget; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)
};

// Class Mist.MistExpandableSelectionItemWidget
// Size: 0x338 (Inherited: 0x2c0)
struct UMistExpandableSelectionItemWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UPanelWidget* InnerPanelWidget; // 0x2d8(0x08)
	struct UImage* BorderWidget; // 0x2e0(0x08)
	struct UButton* ButtonWidget; // 0x2e8(0x08)
	struct UMenuAnchor* PopupMenuAnchorWidget; // 0x2f0(0x08)
	struct FSlateColor HighlightColor; // 0x2f8(0x28)
	char pad_320[0x8]; // 0x320(0x08)
	struct UMistExpandableSelectionItemInnerWidget* InnerWidget; // 0x328(0x08)
	struct UObject* Item; // 0x330(0x08)

	struct UWidget* HandleGetPopupMenu(); // Function Mist.MistExpandableSelectionItemWidget.HandleGetPopupMenu // (Final|Native|Private) // @ game+0x10f7660
	void HandleButtonClicked(); // Function Mist.MistExpandableSelectionItemWidget.HandleButtonClicked // (Native|Protected) // @ game+0x10a4190
};

// Class Mist.MistExpandableSelectionPopupWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistExpandableSelectionPopupWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UVerticalBox* CategoryListWidget; // 0x2d8(0x08)
	int32_t GridWidth; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UMistExpandableSelectionItemWidget* ItemWidgetClass; // 0x2e8(0x08)
	bool bUseWrapNavigation; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct UMistExpandableSelectionItemWidget* CurrentlySelectedItemWidget; // 0x2f8(0x08)
	char pad_300[0x8]; // 0x300(0x08)
};

// Class Mist.MistExpandableSelectionWidget
// Size: 0x358 (Inherited: 0x2c0)
struct UMistExpandableSelectionWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UButton* ButtonWidget; // 0x2d8(0x08)
	struct UPanelWidget* InnerPanelWidget; // 0x2e0(0x08)
	struct UMenuAnchor* MenuAnchor; // 0x2e8(0x08)
	struct UMistExpandableSelectionItemInnerWidget* ItemWidgetClass; // 0x2f0(0x08)
	struct FSlateColor HighlightColor; // 0x2f8(0x28)
	bool bCanClearSelection; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
	struct UObject* SelectedItem; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)
	struct UMistExpandableSelectionItemInnerWidget* InnerWidget; // 0x338(0x08)
	struct TArray<struct FMistExpandableSelectionCategory> Categories; // 0x340(0x10)
	struct UMistExpandableSelectionPopupWidget* PopupWidget; // 0x350(0x08)

	void HandleMenuAnchorOpenChanged(bool bIsOpen); // Function Mist.MistExpandableSelectionWidget.HandleMenuAnchorOpenChanged // (Final|Native|Private) // @ game+0x10f77c0
	struct UWidget* HandleMenuAnchorGetWidget(); // Function Mist.MistExpandableSelectionWidget.HandleMenuAnchorGetWidget // (Final|Native|Private) // @ game+0x10f7790
	void HandleButtonClicked(); // Function Mist.MistExpandableSelectionWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x10f7640
};

// Class Mist.MistHudLogEntryBaseWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistHudLogEntryBaseWidget : UMistUIWidget {
	struct UWidgetAnimation* ShowAnimation; // 0x2c0(0x08)
	struct UWidgetAnimation* HideAnimation; // 0x2c8(0x08)
	struct UWidgetAnimation* UpdateAnimation; // 0x2d0(0x08)
	struct UMistHudLogEntry* Data; // 0x2d8(0x08)
	char pad_2E0[0x10]; // 0x2e0(0x10)

	void HandleHideAnimationFinished(); // Function Mist.MistHudLogEntryBaseWidget.HandleHideAnimationFinished // (Final|Native|Private) // @ game+0x1111920
};

// Class Mist.MistExperienceHudLogEntryWidget
// Size: 0x300 (Inherited: 0x2f0)
struct UMistExperienceHudLogEntryWidget : UMistHudLogEntryBaseWidget {
	struct UTextBlock* CountWidget; // 0x2f0(0x08)
	struct UMistExperienceHudLogEntry* ExperienceData; // 0x2f8(0x08)
};

// Class Mist.MistExplosiveProjectile
// Size: 0x530 (Inherited: 0x500)
struct AMistExplosiveProjectile : AMistProjectile {
	struct FMulticastInlineDelegate OnExplodeEvent; // 0x500(0x10)
	float ExplosionInnerRadius; // 0x510(0x04)
	float ExplosionOuterRadius; // 0x514(0x04)
	float ExplosionDamageFalloff; // 0x518(0x04)
	float MinimalDamage; // 0x51c(0x04)
	float VelocityImpulseStrength; // 0x520(0x04)
	bool bDebugDraw; // 0x524(0x01)
	char pad_525[0x3]; // 0x525(0x03)
	float MinTimeBeforeExplosion; // 0x528(0x04)
	char pad_52C[0x4]; // 0x52c(0x04)

	void OnExplode(struct FVector ImpactLocation); // Function Mist.MistExplosiveProjectile.OnExplode // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void MulticastHandleExplode(struct FVector ImpactLocation); // Function Mist.MistExplosiveProjectile.MulticastHandleExplode // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x10f7850
	void ExplosionEvent__DelegateSignature(struct FVector Location); // DelegateFunction Mist.MistExplosiveProjectile.ExplosionEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x163f1c0
	void Explode(struct FVector ImpactLocation, struct FVector ImpactVelocity); // Function Mist.MistExplosiveProjectile.Explode // (Final|Native|Public|HasDefaults) // @ game+0x10f7430
};

// Class Mist.MistFallingTree
// Size: 0x680 (Inherited: 0x3c0)
struct AMistFallingTree : AActor {
	struct UStaticMeshComponent* MeshComponent; // 0x3c0(0x08)
	struct UCurveFloat* TreeFallCurve; // 0x3c8(0x08)
	float TreeFallCurveLength; // 0x3d0(0x04)
	float DestroyParticleDelayTime; // 0x3d4(0x04)
	struct UParticleSystem* DestroyParticle; // 0x3d8(0x08)
	bool bHideActorWhenParticleHasBeenSpawned; // 0x3e0(0x01)
	bool bWantsDestroyAfterFall; // 0x3e1(0x01)
	char pad_3E2[0x2]; // 0x3e2(0x02)
	float DestroyDelay; // 0x3e4(0x04)
	bool bCheckFallCollision; // 0x3e8(0x01)
	char pad_3E9[0x3]; // 0x3e9(0x03)
	struct FVector FallDirection; // 0x3ec(0x0c)
	struct FMistFallingTreeSoundSettings LowSoundSettings; // 0x3f8(0xa8)
	struct FMistFallingTreeSoundSettings MediumSoundSettings; // 0x4a0(0xa8)
	struct FMistFallingTreeSoundSettings HighSoundSettings; // 0x548(0xa8)
	float FallingTreeLowScale; // 0x5f0(0x04)
	float FallingTreeMediumScale; // 0x5f4(0x04)
	float FallingTreeLowAbsoluteHeight; // 0x5f8(0x04)
	float FallingTreeMediumAbsoluteHeight; // 0x5fc(0x04)
	struct UMistFallingTreeBaseMesh* TreeBaseMesh; // 0x600(0x08)
	char pad_608[0x8]; // 0x608(0x08)
	struct FQuat StartingRotation; // 0x610(0x10)
	struct FVector FallAxis; // 0x620(0x0c)
	float FallProgress; // 0x62c(0x04)
	bool bFalling; // 0x630(0x01)
	char pad_631[0x4f]; // 0x631(0x4f)

	void ReceiveEndFall(); // Function Mist.MistFallingTree.ReceiveEndFall // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBeginFall(); // Function Mist.MistFallingTree.ReceiveBeginFall // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void Fall(struct FVector& Direction); // Function Mist.MistFallingTree.Fall // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10f7510
};

// Class Mist.MistFallingTreeBaseMesh
// Size: 0x850 (Inherited: 0x850)
struct UMistFallingTreeBaseMesh : UStaticMeshComponent {
	float ScalingRadiusReference; // 0x848(0x04)
};

// Class Mist.MistFarmableAreaActor
// Size: 0x508 (Inherited: 0x4b0)
struct AMistFarmableAreaActor : AMistPlaceable {
	struct TArray<struct UMistFarmableTemplate*> GrowingTemplates; // 0x4b0(0x10)
	struct UBoxComponent* FarmableArea; // 0x4c0(0x08)
	struct TArray<struct FMistGrowingFoliageClient> GrowingStatusClient; // 0x4c8(0x10)
	struct TArray<struct FMistGrowingFoliageServer> GrowingStatusServer; // 0x4d8(0x10)
	struct TArray<struct UMistHarvestableMeshComponent*> Meshes; // 0x4e8(0x10)
	float UpdateTime; // 0x4f8(0x04)
	char pad_4FC[0xc]; // 0x4fc(0x0c)

	void OnRep_GrowingStatus(); // Function Mist.MistFarmableAreaActor.OnRep_GrowingStatus // (Final|Native|Public) // @ game+0x10f79e0
	void BroadcastGrowingStatus(struct FMistGrowingFoliageClient InGrowingStatus, int32_t InInstanceIndex); // Function Mist.MistFarmableAreaActor.BroadcastGrowingStatus // (Net|NetReliableNative|Event|Public) // @ game+0x10f7360
};

// Class Mist.MistFarmableTemplate
// Size: 0x210 (Inherited: 0x1c8)
struct UMistFarmableTemplate : UMistPlaceableTemplate {
	struct UStaticMesh* FoliageMesh; // 0x1c8(0x08)
	struct UMistFoliageComponent* FoliageComponent; // 0x1d0(0x08)
	struct FVector FoliageSize; // 0x1d8(0x0c)
	float MinEfficiency; // 0x1e4(0x04)
	float WaterLevelForMaxEfficiency; // 0x1e8(0x04)
	float WaterConsuptionPerTick; // 0x1ec(0x04)
	float MaxWaterLevelPercentage; // 0x1f0(0x04)
	float InitialWater; // 0x1f4(0x04)
	int32_t SeedlingTimeMultiplier; // 0x1f8(0x04)
	int32_t VegetativeTimeMultiplier; // 0x1fc(0x04)
	int32_t RipeningTimeMultiplier; // 0x200(0x04)
	int32_t TotalTimeSteps; // 0x204(0x04)
	float TimeStep; // 0x208(0x04)
	char pad_20C[0x4]; // 0x20c(0x04)
};

// Class Mist.MistFatalErrorScreen
// Size: 0x3c0 (Inherited: 0x3a0)
struct UMistFatalErrorScreen : UMistUIScreen {
	struct UTextBlock* MessageWidget; // 0x3a0(0x08)
	struct FText Text; // 0x3a8(0x18)
};

// Class Mist.MistFetchQuestEntryWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UMistFetchQuestEntryWidget : UMistBaseQuestEntryWidget {
	struct UTextBlock* ItemAmountWidget; // 0x2e0(0x08)
	struct UImage* ItemIconWidget; // 0x2e8(0x08)
	struct UTextBlock* ItemNameWidget; // 0x2f0(0x08)
	struct UTextBlock* DestinationWidget; // 0x2f8(0x08)
};

// Class Mist.MistFightBotController
// Size: 0x4c8 (Inherited: 0x4c0)
struct AMistFightBotController : AAIController {
	struct AMistPlayer* Target; // 0x4c0(0x08)
};

// Class Mist.MistFightClubWeaponRackComponent
// Size: 0x288 (Inherited: 0x1f0)
struct UMistFightClubWeaponRackComponent : UMistInteractableComponent {
	char pad_1F0[0x20]; // 0x1f0(0x20)
	struct FString Name; // 0x210(0x10)
	struct FMistCheatingItemSet ItemSet; // 0x220(0x50)
	char pad_270[0x8]; // 0x270(0x08)
	struct TArray<struct AMistPlayer*> Players; // 0x278(0x10)
};

// Class Mist.MIstFinishedAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMIstFinishedAnimNotify : UAnimNotify {
};

// Class Mist.MistFireAreaEffectComponent
// Size: 0x800 (Inherited: 0x800)
struct UMistFireAreaEffectComponent : UMistAreaEffectComponent {
};

// Class Mist.MistFireBomb
// Size: 0x508 (Inherited: 0x500)
struct AMistFireBomb : AMistProjectile {
	struct AMistAreaEffect* AreaEffectClass; // 0x500(0x08)
};

// Class Mist.MistProjectileItemTemplate
// Size: 0x250 (Inherited: 0x1d8)
struct UMistProjectileItemTemplate : UMistItemTemplate {
	char pad_1D8[0x8]; // 0x1d8(0x08)
	struct AMistProjectile* ProjectileActor; // 0x1e0(0x08)
	struct TMap<struct UMistPlaceableTemplate*, struct AMistProjectile*> PlaceableSpecificProjectileActors; // 0x1e8(0x50)
	struct FMistWeaponDamage ProjectileDamage; // 0x238(0x10)
	struct UDamageType* DamageType; // 0x248(0x08)
};

// Class Mist.MistFireBombItemTemplate
// Size: 0x250 (Inherited: 0x250)
struct UMistFireBombItemTemplate : UMistProjectileItemTemplate {
};

// Class Mist.MistFlareItemTemplate
// Size: 0x220 (Inherited: 0x208)
struct UMistFlareItemTemplate : UMistConsumableItemTemplate {
	struct AMistFlareActor* FlareActorClass; // 0x208(0x08)
	struct AMistProjectile* ProjectileClass; // 0x210(0x08)
	float ProjectileAngle; // 0x218(0x04)
	char pad_21C[0x4]; // 0x21c(0x04)
};

// Class Mist.MistFlareActor
// Size: 0x3d8 (Inherited: 0x3c0)
struct AMistFlareActor : AActor {
	float PostDetachLifeSpan; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct AMistProjectile* ProjectileClass; // 0x3c8(0x08)
	char pad_3D0[0x8]; // 0x3d0(0x08)

	void ReceiveVFXEvent(enum class EItemUsageEvent EventIndex); // Function Mist.MistFlareActor.ReceiveVFXEvent // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void OnAttachmentChanged(struct USceneComponent* UpdatedComponent, struct USceneComponent* PrevAttachParent, struct USceneComponent* NewAttachParent); // Function Mist.MistFlareActor.OnAttachmentChanged // (Final|Native|Private) // @ game+0x10f78e0
	void HandleAnimEvent(enum class EItemUsageEvent EventIndex); // Function Mist.MistFlareActor.HandleAnimEvent // (Final|Native|Private) // @ game+0x10f75c0
};

// Class Mist.MistProjectileMovementComponent
// Size: 0x2b0 (Inherited: 0x210)
struct UMistProjectileMovementComponent : UProjectileMovementComponent {
	char pad_210[0x18]; // 0x210(0x18)
	bool bShouldContinue; // 0x228(0x01)
	bool bShouldContinueOnce; // 0x229(0x01)
	bool bIgnoreCollisionsOnClient; // 0x22a(0x01)
	char pad_22B[0x1]; // 0x22b(0x01)
	struct FVector InitialVelocity; // 0x22c(0x0c)
	char pad_238[0x68]; // 0x238(0x68)
	struct TArray<struct UMistVirtualCollisionBodiesComponent*> ActiveVirtualCollisions; // 0x2a0(0x10)

	void OnRep_InitialVelocity(); // Function Mist.MistProjectileMovementComponent.OnRep_InitialVelocity // (Final|Native|Private) // @ game+0x117c220
};

// Class Mist.MistFlareMovementComponent
// Size: 0x2c0 (Inherited: 0x2b0)
struct UMistFlareMovementComponent : UMistProjectileMovementComponent {
	struct UCurveFloat* AccelerationCurve; // 0x2b0(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)
};

// Class Mist.MistFlareProjectile
// Size: 0x570 (Inherited: 0x500)
struct AMistFlareProjectile : AMistProjectile {
	struct UNiagaraSystem* ExplosionFX; // 0x500(0x08)
	struct FLinearColor Color1; // 0x508(0x10)
	struct FLinearColor Color2; // 0x518(0x10)
	float SmokeTime; // 0x528(0x04)
	float Scale; // 0x52c(0x04)
	float ExplodeTime; // 0x530(0x04)
	struct FInputRange ExplosionOffsetMinMax; // 0x534(0x08)
	struct FVector ExplosionLocation; // 0x53c(0x0c)
	char pad_548[0x28]; // 0x548(0x28)

	struct UNiagaraComponent* SpawnExplosionVFX(); // Function Mist.MistFlareProjectile.SpawnExplosionVFX // (Final|Native|Public) // @ game+0x10fb830
	void HandleSpawnExplosion(); // Function Mist.MistFlareProjectile.HandleSpawnExplosion // (Final|Native|Public) // @ game+0x10fb1a0
	float GetVFXDuration(); // Function Mist.MistFlareProjectile.GetVFXDuration // (Native|Event|Public|BlueprintEvent) // @ game+0x10fac30
	float GetExplosionDelay(); // Function Mist.MistFlareProjectile.GetExplosionDelay // (Native|Event|Public|BlueprintEvent) // @ game+0x10fa520
	int32_t GetExplosionCount(); // Function Mist.MistFlareProjectile.GetExplosionCount // (Native|Event|Public|BlueprintEvent) // @ game+0x10fa4f0
	void BlueprintExplosion(); // Function Mist.MistFlareProjectile.BlueprintExplosion // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistFlipWalkerComponent
// Size: 0x1f8 (Inherited: 0x1f0)
struct UMistFlipWalkerComponent : UMistInteractableComponent {
	struct AMistWalker* ControlledWalker; // 0x1f0(0x08)
};

// Class Mist.MistFloatingExplosiveProjectile
// Size: 0x588 (Inherited: 0x530)
struct AMistFloatingExplosiveProjectile : AMistExplosiveProjectile {
	struct FMulticastInlineDelegate OnFloatingStarted; // 0x530(0x10)
	float TimeToStartFloating; // 0x540(0x04)
	float FloatSpeed; // 0x544(0x04)
	float SpinSpeed; // 0x548(0x04)
	char pad_54C[0x4]; // 0x54c(0x04)
	struct UStaticMesh* FloatingMineMesh; // 0x550(0x08)
	float MinTimeToExplodeAfterFloating; // 0x558(0x04)
	float TimeToExplode; // 0x55c(0x04)
	struct FVector2D ExplosionDelay; // 0x560(0x08)
	struct UDamageType* DirectHitDamageType; // 0x568(0x08)
	float DirectHitDamage; // 0x570(0x04)
	bool bIsFloating; // 0x574(0x01)
	char pad_575[0x13]; // 0x575(0x13)

	void OnRep_bIsFloating(); // Function Mist.MistFloatingExplosiveProjectile.OnRep_bIsFloating // (Final|Native|Private) // @ game+0x10fb380
	void HandleActorBeginTrigger(struct AActor* SelfActor, struct AActor* OtherActor); // Function Mist.MistFloatingExplosiveProjectile.HandleActorBeginTrigger // (Final|Native|Private) // @ game+0x10fac70
	void FloatingEvent__DelegateSignature(); // DelegateFunction Mist.MistFloatingExplosiveProjectile.FloatingEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistFlotillaReputationWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistFlotillaReputationWidget : UMistUIWidget {
	struct UTextBlock* CurrentRankWidget; // 0x2c0(0x08)
	struct UTextBlock* NextRankWidget; // 0x2c8(0x08)
	struct UTextBlock* ReputationValueWidget; // 0x2d0(0x08)
	struct UMistProgressBar* ReputationProgressBar; // 0x2d8(0x08)
	struct UButton* ClaimRankButtonWidget; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void HandleClaimRankButtonClicked(); // Function Mist.MistFlotillaReputationWidget.HandleClaimRankButtonClicked // (Final|Native|Private) // @ game+0x10fad30
};

// Class Mist.MistFoliageActor
// Size: 0x478 (Inherited: 0x410)
struct AMistFoliageActor : AInstancedFoliageActor {
	char pad_410[0x28]; // 0x410(0x28)
	struct TArray<struct UMistFoliageComponent*> FoliageComponents; // 0x438(0x10)
	struct TArray<struct UMistFoliageComponent*> RespawningFoliageComponents; // 0x448(0x10)
	char pad_458[0x20]; // 0x458(0x20)

	void HandleRespawnTimer(); // Function Mist.MistFoliageActor.HandleRespawnTimer // (Final|Native|Private) // @ game+0x10fb180
};

// Class Mist.MistFoliageActorSpawnerComponent
// Size: 0xa40 (Inherited: 0x9f0)
struct UMistFoliageActorSpawnerComponent : UFoliageInstancedStaticMeshComponent {
	struct AActor* ActorClass; // 0x9f0(0x08)
	struct TArray<struct AActor*> Actors; // 0x9f8(0x10)
	char pad_A08[0x38]; // 0xa08(0x38)
};

// Class Mist.MistFoliageHarvestingInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistFoliageHarvestingInterface : UInterface {
};

// Class Mist.MistClientSideHarvestableInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistClientSideHarvestableInterface : UInterface {
};

// Class Mist.MistFoliageQualityManager
// Size: 0x238 (Inherited: 0xf0)
struct UMistFoliageQualityManager : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	uint32_t LevelSeed; // 0x110(0x04)
	bool bQualityEnabled; // 0x114(0x01)
	char pad_115[0xa3]; // 0x115(0xa3)
	float DefaultThreshold; // 0x1b8(0x04)
	int32_t MaxLevel; // 0x1bc(0x04)
	float OctreeMaxSpan; // 0x1c0(0x04)
	char pad_1C4[0x74]; // 0x1c4(0x74)

	void ShowDebugArea(struct FName FoliageGroupName, struct FVector Position, struct UVirtualLandscapeLayer* LandscapeLayer, float DebugLifeTime, float Radius); // Function Mist.MistFoliageQualityManager.ShowDebugArea // (Final|Native|Public|HasDefaults) // @ game+0x10fb6b0
	void OnRep_LevelSeed(); // Function Mist.MistFoliageQualityManager.OnRep_LevelSeed // (Final|Native|Private) // @ game+0x10fb360
	int32_t GetLevelFromValue(float Value, float InThreshold); // Function Mist.MistFoliageQualityManager.GetLevelFromValue // (Final|Native|Public) // @ game+0x10faad0
	float GetGroundValue(struct UVirtualLandscapeLayer* LandscapeLayer, struct FVector& Position); // Function Mist.MistFoliageQualityManager.GetGroundValue // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x10fa860
	int32_t GetGroundLevel(struct UVirtualLandscapeLayer* LandscapeLayer, struct FVector& Position, float GroundStrengthMulti); // Function Mist.MistFoliageQualityManager.GetGroundLevel // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x10fa740
	float GetFoliageValue(struct FName& FoliageGroupName, struct FVector& Position); // Function Mist.MistFoliageQualityManager.GetFoliageValue // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x10fa650
	int32_t GetFoliageLevel(struct FName& FoliageGroupName, struct FVector& Position); // Function Mist.MistFoliageQualityManager.GetFoliageLevel // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x10fa560
};

// Class Mist.MistFoliageRustleManager
// Size: 0x2d0 (Inherited: 0x108)
struct UMistFoliageRustleManager : UMistPlayerControllerComponent {
	int32_t MaxConsideredCharacters; // 0x108(0x04)
	float UpdateSoundFrequencyRate; // 0x10c(0x04)
	struct TArray<struct FMistFoliageRustleSoundData> SoundSettings; // 0x110(0x10)
	float UpdateSoundFrequencyRateForRupu; // 0x120(0x04)
	float RupuDetectionRadius; // 0x124(0x04)
	float SkipUpdatesPlayerSpeedThreshold; // 0x128(0x04)
	bool bIgnoreSkippingUpdates; // 0x12c(0x01)
	char pad_12D[0x23]; // 0x12d(0x23)
	struct TMap<uint64_t, struct FRuntimeSoundData> RuntimeSoundData; // 0x150(0x50)
	struct TMap<uint64_t, struct FRuntimeSoundCharacterData> RuntimeSoundCharacterData; // 0x1a0(0x50)
	struct TSet<struct UStaticMesh*> OverridenMeshes; // 0x1f0(0x50)
	struct TSet<struct ULevel*> GatheredLevels; // 0x240(0x50)
	char pad_290[0x10]; // 0x290(0x10)
	struct TArray<struct AMistCharacter*> ConsideredCharacters; // 0x2a0(0x10)
	char pad_2B0[0x10]; // 0x2b0(0x10)
	struct AMistOasisPlayerController* PlayerControllerCached; // 0x2c0(0x08)
	struct AMistPlayer* PlayerPawnCached; // 0x2c8(0x08)
};

// Class Mist.MistFootprintComponent
// Size: 0x210 (Inherited: 0xf0)
struct UMistFootprintComponent : UActorComponent {
	bool bDebugLines; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct FString FrontLegName; // 0xf8(0x10)
	struct FString BackLegName; // 0x108(0x10)
	float StartFadeInDelay; // 0x118(0x04)
	float FadeInDelay; // 0x11c(0x04)
	float StartFadeOutDelay; // 0x120(0x04)
	float FadeOutDelay; // 0x124(0x04)
	struct FVector DecalBasicSize; // 0x128(0x0c)
	struct FVector DecalGrowthSize; // 0x134(0x0c)
	struct FVector Direction; // 0x140(0x0c)
	struct FVector DeltaPosition; // 0x14c(0x0c)
	struct TMap<struct UVirtualLandscapeLayer*, struct UParticleSystem*> Particle; // 0x158(0x50)
	struct TMap<struct UVirtualLandscapeLayer*, struct UMaterialInterface*> Decal; // 0x1a8(0x50)
	struct UParticleSystem* DefaultParticle; // 0x1f8(0x08)
	struct UMaterialInterface* DefaultDecal; // 0x200(0x08)
	struct AMistWorldDataHolder* WorldDataHolder; // 0x208(0x08)

	struct FString GetFrontLegName(); // Function Mist.MistFootprintComponent.GetFrontLegName // (Final|Native|Public|BlueprintCallable) // @ game+0x10fe0e0
	struct FString GetBackLegName(); // Function Mist.MistFootprintComponent.GetBackLegName // (Final|Native|Public|BlueprintCallable) // @ game+0x10fe010
	void CreateFootPrint(struct FVector& WorldPosition, struct FRotator& RotationVector, float Speed, struct UParticleSystemComponent*& OutParticleComponent); // Function Mist.MistFootprintComponent.CreateFootPrint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x10fde80
};

// Class Mist.MistForceAreaEffectComponent
// Size: 0x1d8 (Inherited: 0xf0)
struct UMistForceAreaEffectComponent : UActorComponent {
	struct FVector2D EffectIntervalRange; // 0xf0(0x08)
	struct UCurveFloat* EffectCurve; // 0xf8(0x08)
	float WarmupDuration; // 0x100(0x04)
	float CharacterForceScale; // 0x104(0x04)
	float WalkerForceScale; // 0x108(0x04)
	float PhysicalMobForceScale; // 0x10c(0x04)
	struct FMulticastInlineDelegate ForceAreaEffectStarted; // 0x110(0x10)
	struct FMulticastInlineDelegate WarmupStarted; // 0x120(0x10)
	char pad_130[0x30]; // 0x130(0x30)
	struct TArray<struct UCapsuleComponent*> TriggerShapes; // 0x160(0x10)
	struct TMap<struct UPrimitiveComponent*, float> SimulatedComponents; // 0x170(0x50)
	struct TArray<struct AMistCharacter*> Characters; // 0x1c0(0x10)
	struct FForceAreaEffectTimeInterval IntervalProperties; // 0x1d0(0x08)

	void StartWarmup(); // Function Mist.MistForceAreaEffectComponent.StartWarmup // (Final|Native|Private) // @ game+0x10fee70
	void StartApplyingEffect(); // Function Mist.MistForceAreaEffectComponent.StartApplyingEffect // (Final|Native|Private) // @ game+0x10fee50
	void OnRep_IntervalProperties(); // Function Mist.MistForceAreaEffectComponent.OnRep_IntervalProperties // (Final|Native|Private) // @ game+0x10fec90
	void OnComponentEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistForceAreaEffectComponent.OnComponentEndTrigger // (Final|Native|Private) // @ game+0x10febd0
	void OnComponentBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistForceAreaEffectComponent.OnComponentBeginTrigger // (Final|Native|Private) // @ game+0x10feb10
	void HandleActorDestroyed(struct AActor* OtherActor); // Function Mist.MistForceAreaEffectComponent.HandleActorDestroyed // (Final|Native|Private) // @ game+0x10fe160
	void ForceAreaEffectStarted__DelegateSignature(); // DelegateFunction Mist.MistForceAreaEffectComponent.ForceAreaEffectStarted__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistForwardDamageComponent
// Size: 0xf0 (Inherited: 0xf0)
struct UMistForwardDamageComponent : UActorComponent {

	void HandleRadialDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FVector& Origin, struct FDamageSource& DamageSource, struct TArray<struct FHitResult>& Hits); // Function Mist.MistForwardDamageComponent.HandleRadialDamage // (Native|Protected|HasOutParms|HasDefaults) // @ game+0x10fe740
	void HandlePointDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource, struct FHitResult& Hit); // Function Mist.MistForwardDamageComponent.HandlePointDamage // (Native|Protected|HasOutParms) // @ game+0x10fe560
};

// Class Mist.MistStructure
// Size: 0x588 (Inherited: 0x508)
struct AMistStructure : AMistBaseStructurePart {
	struct UMistClanOwnershipComponent* ClanOwnershipComponent; // 0x508(0x08)
	char pad_510[0x28]; // 0x510(0x28)
	enum class EMistStructureType StructureType; // 0x538(0x04)
	char pad_53C[0x4]; // 0x53c(0x04)
	struct TArray<struct AMistStructurePart*> StructureParts; // 0x540(0x10)
	struct TArray<struct AMistInstancedStructurePart*> InstancedStructureParts; // 0x550(0x10)
	bool bIsDecaying; // 0x560(0x01)
	char pad_561[0x7]; // 0x561(0x07)
	struct UMistBaseMaintenanceContainerComponent* MaintenanceContainer; // 0x568(0x08)
	char pad_570[0x4]; // 0x570(0x04)
	float DamageCooldownEndTime; // 0x574(0x04)
	char pad_578[0x10]; // 0x578(0x10)

	void OnRep_DamageCooldownEndTime(); // Function Mist.MistStructure.OnRep_DamageCooldownEndTime // (Final|Native|Private) // @ game+0x11a9540
	void MulticastSetDecayingStatus(bool bDecayingValue); // Function Mist.MistStructure.MulticastSetDecayingStatus // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11a93c0
	void HandleStructurePartDestroyed(struct AActor* InActor); // Function Mist.MistStructure.HandleStructurePartDestroyed // (Final|Native|Private) // @ game+0x11a9000
};

// Class Mist.MistFoundationStructure
// Size: 0x720 (Inherited: 0x588)
struct AMistFoundationStructure : AMistStructure {
	struct UMistClanPermissionComponent* ClanPermissionComponent; // 0x588(0x08)
	struct TSet<struct AMistBaseStructurePart*> FoundationParts; // 0x590(0x50)
	char pad_5E0[0x140]; // 0x5e0(0x140)
};

// Class Mist.MistFragmentMachine
// Size: 0x4a0 (Inherited: 0x3d8)
struct AMistFragmentMachine : AMistDestructibleLootsite {
	char pad_3D8[0x28]; // 0x3d8(0x28)
	float MinDistanceToActivePlayerToRemove; // 0x400(0x04)
	bool bOneTimeUse; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)
	struct UMistSkeletalMeshComponent* FragmentMachineSkelMesh; // 0x408(0x08)
	struct UMistContainerComponent* OutputContainer; // 0x410(0x08)
	struct FMistComponentReference ProximityTriggerRef; // 0x418(0x28)
	struct TMap<enum class EFragmentMachineState, struct UAnimSequence*> FragmentMachineAnimations; // 0x440(0x50)
	enum class EFragmentMachineState State; // 0x490(0x01)
	char pad_491[0x7]; // 0x491(0x07)
	struct UMistAlternativeFurnaceComponent* FurnaceComponent; // 0x498(0x08)

	void ReceiveStartSinking(); // Function Mist.MistFragmentMachine.ReceiveStartSinking // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveStartCrumbling(); // Function Mist.MistFragmentMachine.ReceiveStartCrumbling // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_State(); // Function Mist.MistFragmentMachine.OnRep_State // (Final|Native|Public) // @ game+0x10fee30
	void HandleWorkStarted(struct UMistAlternativeFurnaceComponent* Sender); // Function Mist.MistFragmentMachine.HandleWorkStarted // (Final|Native|Public) // @ game+0x10fea70
	void HandlePlayerLeftProximity(struct UPrimitiveComponent* TriggerComponent, struct AActor* Actor); // Function Mist.MistFragmentMachine.HandlePlayerLeftProximity // (Final|Native|Public) // @ game+0x10fe4a0
	void HandlePlayerEnteredProximity(struct UPrimitiveComponent* TriggerComponent, struct AActor* Actor); // Function Mist.MistFragmentMachine.HandlePlayerEnteredProximity // (Final|Native|Public) // @ game+0x10fe3e0
	void HandleOutputContainerUpdate(struct UMistContainerComponent* Container, int32_t Count, struct UMistItemTemplate* ItemTemplate); // Function Mist.MistFragmentMachine.HandleOutputContainerUpdate // (Final|Native|Public) // @ game+0x10fe2e0
	void HandleCraftingStarted(struct UMistCraftingStationComponent* Sender); // Function Mist.MistFragmentMachine.HandleCraftingStarted // (Final|Native|Public) // @ game+0x10fe260
	void HandleCraftingFinished(struct UMistCraftingStationComponent* Sender); // Function Mist.MistFragmentMachine.HandleCraftingFinished // (Final|Native|Public) // @ game+0x10fe1e0
};

// Class Mist.MistFuelPuddle
// Size: 0x408 (Inherited: 0x3c0)
struct AMistFuelPuddle : AActor {
	bool bIsIgnited; // 0x3c0(0x01)
	char pad_3C1[0x7]; // 0x3c1(0x07)
	struct UParticleSystem* FireEffect; // 0x3c8(0x08)
	float EffectMaxWidth; // 0x3d0(0x04)
	float EffectMaxHeight; // 0x3d4(0x04)
	float VolumeIncreasePerFuelProjectile; // 0x3d8(0x04)
	float VolumeDecreasePerWaterProjectile; // 0x3dc(0x04)
	float VolumeDecreaseBurningSpeed; // 0x3e0(0x04)
	float VolumeDecreaseDecaySpeed; // 0x3e4(0x04)
	float VolumeDecayDisableThreshold; // 0x3e8(0x04)
	float DamagePerSecond; // 0x3ec(0x04)
	float DamageRadius; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct UDamageType* DamageType; // 0x3f8(0x08)
	bool bIsAttachedToDynamicObject; // 0x400(0x01)
	char pad_401[0x3]; // 0x401(0x03)
	float FuelVolume; // 0x404(0x04)

	void OnIgnitedStateChanged__DelegateSignature(); // DelegateFunction Mist.MistFuelPuddle.OnIgnitedStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnIgnitedStateChanged(bool bIgnited); // Function Mist.MistFuelPuddle.OnIgnitedStateChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnFuelRanOut(); // Function Mist.MistFuelPuddle.OnFuelRanOut // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastSetFuelVolume(float InVolume); // Function Mist.MistFuelPuddle.MulticastSetFuelVolume // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x109d030
	void MulticastIgnite(); // Function Mist.MistFuelPuddle.MulticastIgnite // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10feaf0
	void MulticastFuelRunsOut(); // Function Mist.MistFuelPuddle.MulticastFuelRunsOut // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1096c90
	void CreateDecal(struct FVector Location, struct FVector Impact, struct USceneComponent* AttachmentParent, struct FName AttachmentBone); // Function Mist.MistFuelPuddle.CreateDecal // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistFurnaceComponent
// Size: 0x300 (Inherited: 0x1f0)
struct UMistFurnaceComponent : UMistInteractableComponent {
	struct FMulticastInlineDelegate OnFireUpdated; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnWorkFinished; // 0x200(0x10)
	struct FMulticastInlineDelegate OnWorkStarted; // 0x210(0x10)
	struct TArray<struct UMistCraftingCategory*> SupportedCategories; // 0x220(0x10)
	struct FMistComponentReference InputContainerRef; // 0x230(0x28)
	struct FMistComponentReference FuelContainerRef; // 0x258(0x28)
	struct FMistComponentReference OutputContainerRef; // 0x280(0x28)
	struct UMistItemTemplate* FuelTemplate; // 0x2a8(0x08)
	int32_t FuelNeeded; // 0x2b0(0x04)
	enum class FurnaceHeat FurnaceCurrentHeat; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	struct TArray<struct FMistFurnaceRecipe> Recipies; // 0x2b8(0x10)
	float WorkTime; // 0x2c8(0x04)
	float SuccessRateAddition; // 0x2cc(0x04)
	float WindFactor; // 0x2d0(0x04)
	float TemperatureAddition; // 0x2d4(0x04)
	float TemperatureMultiplier; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct AMistPlayer* PlayerOwner; // 0x2e0(0x08)
	float StartingTime; // 0x2e8(0x04)
	int32_t RecipeId; // 0x2ec(0x04)
	char pad_2F0[0x10]; // 0x2f0(0x10)

	void WorkStateEvent__DelegateSignature(struct UMistFurnaceComponent* Sender); // DelegateFunction Mist.MistFurnaceComponent.WorkStateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void TriggerFurnace(float SuccessRate); // Function Mist.MistFurnaceComponent.TriggerFurnace // (Final|Native|Public|BlueprintCallable) // @ game+0x10fee90
	void OnRep_StartingTime(float PrevStartingTime); // Function Mist.MistFurnaceComponent.OnRep_StartingTime // (Final|Native|Private) // @ game+0x10fedb0
	void HandleUpdateCraftingSuccessRate(); // Function Mist.MistFurnaceComponent.HandleUpdateCraftingSuccessRate // (Final|Native|Private) // @ game+0x10fea50
	enum class FurnaceHeat GetCurrentHeatStatus(); // Function Mist.MistFurnaceComponent.GetCurrentHeatStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x10fe0b0
	void FireUpdateEvent__DelegateSignature(float NewScale); // DelegateFunction Mist.MistFurnaceComponent.FireUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistAlternativeFurnaceComponent
// Size: 0x4c8 (Inherited: 0x3b0)
struct UMistAlternativeFurnaceComponent : UMistCraftingStationComponent {
	struct TMap<struct UMistItemTemplate*, struct FMistAltFurnaceRecipe> RecipeDetails; // 0x3b0(0x50)
	bool bIsSmelting; // 0x400(0x01)
	char pad_401[0x7]; // 0x401(0x07)
	struct TArray<struct FMistFurnaceSmeltingAction> SmeltingActions; // 0x408(0x10)
	struct TMap<struct UMistItemTemplate*, float> ShuffleBag; // 0x418(0x50)
	int32_t SmeltingActionsCurrentIndex; // 0x468(0x04)
	float SmeltingTime; // 0x46c(0x04)
	struct UMistContainerComponent* OreContainer; // 0x470(0x08)
	struct FMulticastInlineDelegate OnFireUpdated; // 0x478(0x10)
	struct FMulticastInlineDelegate OnWorkFinished; // 0x488(0x10)
	struct FMulticastInlineDelegate OnWorkStarted; // 0x498(0x10)
	float FireSize; // 0x4a8(0x04)
	enum class FurnaceHeat FurnaceCurrentHeat; // 0x4ac(0x01)
	char pad_4AD[0x3]; // 0x4ad(0x03)
	struct TArray<struct FMistCachedAutoStationRecipe> CachedRecipes; // 0x4b0(0x10)
	float StartingTime; // 0x4c0(0x04)
	int32_t RecipeId; // 0x4c4(0x04)

	void WorkStateEvent__DelegateSignature(struct UMistAlternativeFurnaceComponent* Sender); // DelegateFunction Mist.MistAlternativeFurnaceComponent.WorkStateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_StartingTime(float PrevStartingTime); // Function Mist.MistAlternativeFurnaceComponent.OnRep_StartingTime // (Final|Native|Private) // @ game+0x10fed30
	void OnRep_RecipeId(int32_t PrevRecipeId); // Function Mist.MistAlternativeFurnaceComponent.OnRep_RecipeId // (Final|Native|Private) // @ game+0x10fecb0
	void HandleSmeltingStopped(struct UMistCraftingStationComponent* Sender); // Function Mist.MistAlternativeFurnaceComponent.HandleSmeltingStopped // (Final|Native|Public) // @ game+0x10fe9d0
	void HandleSmeltingStarted(struct UMistCraftingStationComponent* Sender); // Function Mist.MistAlternativeFurnaceComponent.HandleSmeltingStarted // (Final|Native|Public) // @ game+0x10fe950
	enum class FurnaceHeat GetCurrentHeatStatus(); // Function Mist.MistAlternativeFurnaceComponent.GetCurrentHeatStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x10fe090
	void FireUpdateEvent__DelegateSignature(float NewScale); // DelegateFunction Mist.MistAlternativeFurnaceComponent.FireUpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistFurnaceCraftingWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistFurnaceCraftingWidget : UMistUIWidget {
	struct UMistFurnacePrepareWidget* OpenFurnaceWidget; // 0x2c0(0x08)
	struct UMistFurnaceWorkWidget* ClosedFurnaceWidget; // 0x2c8(0x08)
	struct UBorder* BackgroundWidget; // 0x2d0(0x08)
	float DelayLength; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct UMistFurnaceComponent* CraftingStation; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void HandleCraftingStarted(struct UMistFurnaceComponent* Sender); // Function Mist.MistFurnaceCraftingWidget.HandleCraftingStarted // (Final|Native|Private) // @ game+0x1103af0
	void HandleCraftingFinished(struct UMistFurnaceComponent* Sender); // Function Mist.MistFurnaceCraftingWidget.HandleCraftingFinished // (Final|Native|Private) // @ game+0x1103a70
};

// Class Mist.MistFurnacePrepareWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistFurnacePrepareWidget : UMistUIWidget {
	struct UMistContainerWidget* IngredientsContainerWidget; // 0x2c0(0x08)
	struct UMistContainerWidget* FuelContainerWidget; // 0x2c8(0x08)
	struct UMistUIButton* StartCraftingButton; // 0x2d0(0x08)
	struct UGridPanel* RecipesPanelWidget; // 0x2d8(0x08)
	struct UBorder* ChosenRecipeContainer; // 0x2e0(0x08)
	struct UBorder* BackgroundWidget; // 0x2e8(0x08)
	struct UWidget* FinishedMessageWidget; // 0x2f0(0x08)
	struct UMistFurnaceComponent* CraftingStation; // 0x2f8(0x08)
	char pad_300[0x8]; // 0x300(0x08)

	void SelectRecipe(int32_t ItemRecipe, struct UMistRecipeWidget* Sender, int32_t TargetQuality); // Function Mist.MistFurnacePrepareWidget.SelectRecipe // (Final|Native|Private) // @ game+0x11050a0
	void OnDelayedClosing(); // Function Mist.MistFurnacePrepareWidget.OnDelayedClosing // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void InitRecipes(); // Function Mist.MistFurnacePrepareWidget.InitRecipes // (Final|Native|Private) // @ game+0x1105050
	void HandleStartChanceChanged(struct UMistContainerComponent* Container, int32_t SlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistFurnacePrepareWidget.HandleStartChanceChanged // (Final|Native|Private) // @ game+0x11049a0
	void HandleStartButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistFurnacePrepareWidget.HandleStartButtonClicked // (Final|Native|Private) // @ game+0x1104920
};

// Class Mist.MistFurnaceRecipePopupWidget
// Size: 0x3b8 (Inherited: 0x2c0)
struct UMistFurnaceRecipePopupWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UHorizontalBox* QuantityPanelWidget; // 0x2c8(0x08)
	struct UVerticalBox* ItemDetailsPanelWidget; // 0x2d0(0x08)
	struct UTextBlock* WeightWidget; // 0x2d8(0x08)
	struct UTextBlock* QuantityWidget; // 0x2e0(0x08)
	struct UScrollBox* InputListWidget; // 0x2e8(0x08)
	struct UBorder* DetailsContainerWidget; // 0x2f0(0x08)
	struct UBorder* PopupBackgroundWidget; // 0x2f8(0x08)
	struct UScrollBox* VitaminsListWidget; // 0x300(0x08)
	struct UTextBlock* MissingVitaminsWidget; // 0x308(0x08)
	struct UTextBlock* MissingInputWidget; // 0x310(0x08)
	struct UTextBlock* DescriptionTextWidget; // 0x318(0x08)
	struct UMistTemperatureWidget* TemperatureWidget; // 0x320(0x08)
	struct FMistFurnaceRecipe Recipe; // 0x328(0x88)
	struct UMistFurnaceComponent* FurnaceComponent; // 0x3b0(0x08)

	void SetRecipeData(struct FMistFurnaceRecipe InRecipe, struct UMistFurnaceComponent* InFurnaceComponent, bool bIsDocked); // Function Mist.MistFurnaceRecipePopupWidget.SetRecipeData // (Final|Native|Public) // @ game+0x11051a0
};

// Class Mist.MistFurnaceWorkWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistFurnaceWorkWidget : UMistUIWidget {
	struct UMistUIButton* StopCraftingButton; // 0x2c0(0x08)
	struct UImage* RecipeImage; // 0x2c8(0x08)
	struct UMistUICircularProgressBar* TimeWidget; // 0x2d0(0x08)
	struct UMistTemperatureWidget* TemperatureWidget; // 0x2d8(0x08)
	struct UMistFurnaceComponent* CraftingStation; // 0x2e0(0x08)

	void OnDelayedClosing(); // Function Mist.MistFurnaceWorkWidget.OnDelayedClosing // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleStopButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistFurnaceWorkWidget.HandleStopButtonClicked // (Final|Native|Private) // @ game+0x1104aa0
};

// Class Mist.MistGameClientSubsystem
// Size: 0x1d0 (Inherited: 0x30)
struct UMistGameClientSubsystem : UGameInstanceSubsystem {
	char pad_30[0x48]; // 0x30(0x48)
	int32_t ClientNotificationPullInterval; // 0x78(0x04)
	float DelayedPlayDuration; // 0x7c(0x04)
	char pad_80[0x150]; // 0x80(0x150)

	void HandlePreLoadMap(struct FString MapName); // Function Mist.MistGameClientSubsystem.HandlePreLoadMap // (Final|Native|Private) // @ game+0x1104340
	void HandlePostLoadMap(struct UWorld* World); // Function Mist.MistGameClientSubsystem.HandlePostLoadMap // (Final|Native|Private) // @ game+0x1104190
};

// Class Mist.MistGameEngine
// Size: 0xe08 (Inherited: 0xe08)
struct UMistGameEngine : UGameEngine {
};

// Class Mist.MistGameInstance
// Size: 0x3d8 (Inherited: 0x198)
struct UMistGameInstance : UGameInstance {
	struct FSoftObjectPath GameLoadingImage; // 0x198(0x18)
	char pad_1B0[0x60]; // 0x1b0(0x60)
	struct FString BackendApiUrl; // 0x210(0x10)
	struct FString BackendApiUrlOverride; // 0x220(0x10)
	char pad_230[0x8]; // 0x230(0x08)
	struct UMistBackendHttpClient* BackendClient; // 0x238(0x08)
	struct UMistUnlockableTree* TechTree; // 0x240(0x08)
	struct UMistUnlockableTree* PerkTree; // 0x248(0x08)
	struct UMistItemCategoryTree* ItemCategoryTree; // 0x250(0x08)
	struct UMistDataManager* DataManager; // 0x258(0x08)
	struct UMistShopScreen* ShopScreen; // 0x260(0x08)
	char pad_268[0x30]; // 0x268(0x30)
	struct TMap<struct UObject*, struct UObject*> CachedInstances; // 0x298(0x50)
	struct UMistPlayerSFXSet* PlayerMaleSFXSet; // 0x2e8(0x08)
	struct UMistPlayerSFXSet* PlayerFemaleSFXSet; // 0x2f0(0x08)
	struct TArray<struct UMistStructureDecorationTemplate*> CachedStructureDecorationTemplates; // 0x2f8(0x10)
	struct TArray<struct UMistDyeTemplate*> CachedDyeTemplates; // 0x308(0x10)
	struct TArray<struct UMistEmblemTemplate*> CachedEmblemTemplates; // 0x318(0x10)
	struct TArray<struct UMistEdgePatternTemplate*> CachedEdgePatternTemplates; // 0x328(0x10)
	struct TMap<struct FName, struct UObject*> ShopItemAssetMap; // 0x338(0x50)
	char pad_388[0x10]; // 0x388(0x10)
	struct TArray<struct UMistSettingsObject*> SettingsObjects; // 0x398(0x10)
	char pad_3A8[0x30]; // 0x3a8(0x30)
};

// Class Mist.MistGameMenuScreen
// Size: 0x450 (Inherited: 0x3a0)
struct UMistGameMenuScreen : UMistUIScreen {
	struct UButton* BackButtonWidget; // 0x3a0(0x08)
	struct UButton* ShopButtonWidget; // 0x3a8(0x08)
	struct UTextBlock* ShopLabelWidget; // 0x3b0(0x08)
	struct UButton* OptionsButtonWidget; // 0x3b8(0x08)
	struct UButton* ExitButtonWidget; // 0x3c0(0x08)
	struct UButton* QuitButtonWidget; // 0x3c8(0x08)
	struct UButton* SafeLogOutButtonWidget; // 0x3d0(0x08)
	struct UButton* ReportPlayerButtonWidget; // 0x3d8(0x08)
	struct UButton* KickBanPlayerButtonWidget; // 0x3e0(0x08)
	struct UButton* FeedbackButtonWidget; // 0x3e8(0x08)
	struct UButton* WikiHelpButton; // 0x3f0(0x08)
	struct UTextBlock* SafeLogOutLabelWidget; // 0x3f8(0x08)
	struct UButton* RespawnButtonWidget; // 0x400(0x08)
	struct UButton* PlayerListButtonWidget; // 0x408(0x08)
	struct FString FeedbackUrl; // 0x410(0x10)
	struct UMistSettingsScreen* SettingsScreen; // 0x420(0x08)
	struct UMistPlayerListScreen* PlayerListScreen; // 0x428(0x08)
	struct UMistHelpWikiScreen* HelpWikiScreen; // 0x430(0x08)
	struct FText SafeLogOutToolTipText; // 0x438(0x18)

	struct UWidget* SafeLogOutToolTip(); // Function Mist.MistGameMenuScreen.SafeLogOutToolTip // (Final|Native|Private) // @ game+0x1105070
	void HandleWikiHelpClicked(); // Function Mist.MistGameMenuScreen.HandleWikiHelpClicked // (Final|Native|Private) // @ game+0x1104f10
	void HandleShopClicked(); // Function Mist.MistGameMenuScreen.HandleShopClicked // (Final|Native|Private) // @ game+0x1104900
	void HandleSettingsClicked(); // Function Mist.MistGameMenuScreen.HandleSettingsClicked // (Final|Native|Private) // @ game+0x11047c0
	void HandleSafeLogOutClicked(); // Function Mist.MistGameMenuScreen.HandleSafeLogOutClicked // (Final|Native|Private) // @ game+0x11047a0
	void HandleRespawnClicked(); // Function Mist.MistGameMenuScreen.HandleRespawnClicked // (Final|Native|Private) // @ game+0x1104780
	void HandleReportPlayerClicked(); // Function Mist.MistGameMenuScreen.HandleReportPlayerClicked // (Final|Native|Private) // @ game+0x1104520
	void HandleQuitClicked(); // Function Mist.MistGameMenuScreen.HandleQuitClicked // (Final|Native|Private) // @ game+0x1104500
	void HandlePlayerListClicked(); // Function Mist.MistGameMenuScreen.HandlePlayerListClicked // (Final|Native|Private) // @ game+0x1104170
	void HandleKickBanPlayerClicked(); // Function Mist.MistGameMenuScreen.HandleKickBanPlayerClicked // (Final|Native|Private) // @ game+0x1103f10
	void HandleFeedbackClicked(); // Function Mist.MistGameMenuScreen.HandleFeedbackClicked // (Final|Native|Private) // @ game+0x1103cb0
	void HandleExitClicked(); // Function Mist.MistGameMenuScreen.HandleExitClicked // (Final|Native|Private) // @ game+0x1103c90
	void HandleBackClicked(); // Function Mist.MistGameMenuScreen.HandleBackClicked // (Final|Native|Private) // @ game+0x109caa0
};

// Class Mist.MistSettingsWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistSettingsWidget : UMistUIWidget {
	struct TArray<struct UMistSettingOption*> Options; // 0x2c0(0x10)
};

// Class Mist.MistGamepadSettingsWidget
// Size: 0x2f0 (Inherited: 0x2d0)
struct UMistGamepadSettingsWidget : UMistSettingsWidget {
	struct UMistUITabControl* TabControl; // 0x2d0(0x08)
	struct UWidget* GamepadLegendPlayerControls; // 0x2d8(0x08)
	struct UWidget* GamepadLegendWalkerControls; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)
};

// Class Mist.MistGameServerPartnershipWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistGameServerPartnershipWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct FText DialogText; // 0x2c8(0x18)

	void HandleButtonClicked(); // Function Mist.MistGameServerPartnershipWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x1103930
};

// Class Mist.MistGameServerSubsystem
// Size: 0x250 (Inherited: 0x30)
struct UMistGameServerSubsystem : UGameInstanceSubsystem {
	int32_t AuthTokenRefreshInterval; // 0x30(0x04)
	int32_t StatsInterval; // 0x34(0x04)
	int32_t PingInterval; // 0x38(0x04)
	int32_t AccountNotificationsInterval; // 0x3c(0x04)
	char pad_40[0x210]; // 0x40(0x210)
};

// Class Mist.MistGameSettingsWidget
// Size: 0x378 (Inherited: 0x2d0)
struct UMistGameSettingsWidget : UMistSettingsWidget {
	struct UComboBoxString* CultureComboBoxWidget; // 0x2d0(0x08)
	struct UTextBlock* CultureLabel; // 0x2d8(0x08)
	struct UCheckBox* ShowSubtitlesCheckBoxWidget; // 0x2e0(0x08)
	struct UCheckBox* ShowAttackArrowsCheckBoxWidget; // 0x2e8(0x08)
	struct UCheckBox* AnonymizePlayersCheckBoxWidget; // 0x2f0(0x08)
	struct UCheckBox* AnonymizeClansCheckBoxWidget; // 0x2f8(0x08)
	struct UCheckBox* AnonymizeTilesCheckBoxWidget; // 0x300(0x08)
	struct UCheckBox* HideChatCheckBoxWidget; // 0x308(0x08)
	struct UCheckBox* CoverWorldMapCheckBoxWidget; // 0x310(0x08)
	struct UCheckBox* GrapplingHookVisibilityCheckBoxWidget; // 0x318(0x08)
	struct USlider* CameraFollowStrengthSliderWidget; // 0x320(0x08)
	struct UComboBoxString* ZoomedCameraSettingWidget; // 0x328(0x08)
	struct UCheckBox* DisplayDamageInformationCheckBoxWidget; // 0x330(0x08)
	struct UCheckBox* LockSteeringOnUnmanningCheckBoxWidget; // 0x338(0x08)
	struct UCheckBox* DynamicFOVCheckBoxWidget; // 0x340(0x08)
	struct UCheckBox* CameraUseWalkerRotationWidget; // 0x348(0x08)
	struct UCheckBox* RightAlignInventoryWidget; // 0x350(0x08)
	struct UCheckBox* HealthDisplayWidget; // 0x358(0x08)
	char pad_360[0x10]; // 0x360(0x10)
	struct UMistUserGameSettings* UserGameSettings; // 0x370(0x08)

	void HandleCultureChanged(struct FString SelectedItem, enum class ESelectInfo SelectType); // Function Mist.MistGameSettingsWidget.HandleCultureChanged // (Final|Native|Private) // @ game+0x1103b70
	void HandleCameraSettingChanged(struct FString SelectedItem, enum class ESelectInfo SelectType); // Function Mist.MistGameSettingsWidget.HandleCameraSettingChanged // (Final|Native|Private) // @ game+0x1103950
};

// Class Mist.MistGameStatisticsComponent
// Size: 0x500 (Inherited: 0xf0)
struct UMistGameStatisticsComponent : UActorComponent {
	struct TMap<struct UMistItemTemplate*, int32_t> ItemsCrafted; // 0xf0(0x50)
	struct TMap<struct UMistItemTemplate*, int32_t> ItemsLooted; // 0x140(0x50)
	struct TMap<struct UMistItemTemplate*, int32_t> ItemsHarvested; // 0x190(0x50)
	struct TMap<struct UMistItemTemplate*, int32_t> ItemsUsed; // 0x1e0(0x50)
	struct TMap<struct UMistPlaceableTemplate*, int32_t> PlaceablesPlaced; // 0x230(0x50)
	struct TMap<struct UMistItemTemplate*, int32_t> DroppedItems; // 0x280(0x50)
	struct TMap<struct UMistItemTemplate*, int32_t> ProjectilesShot; // 0x2d0(0x50)
	struct TMap<struct UMistFlotillaQuest*, int32_t> AcceptedQuests; // 0x320(0x50)
	struct TMap<struct UMistFlotillaQuest*, int32_t> CompletedQuests; // 0x370(0x50)
	struct TMap<struct UMistFlotillaQuest*, int32_t> RejectedQuests; // 0x3c0(0x50)
	struct TMap<struct UMistItemTemplate*, int32_t> BoughtItemsFromMerchants; // 0x410(0x50)
	struct TMap<struct UMistItemTemplate*, int32_t> SoldItemsToMerchants; // 0x460(0x50)
	char pad_4B0[0x50]; // 0x4b0(0x50)
};

// Class Mist.MistGameTextUtilities
// Size: 0x28 (Inherited: 0x28)
struct UMistGameTextUtilities : UObject {
};

// Class Mist.MistGameUserSettings
// Size: 0x130 (Inherited: 0x120)
struct UMistGameUserSettings : UGameUserSettings {
	struct FMulticastInlineDelegate OnSettingsChanged; // 0x120(0x10)
};

// Class Mist.MistGasAreaEffect
// Size: 0x4c0 (Inherited: 0x4c0)
struct AMistGasAreaEffect : AMistAreaEffect {
};

// Class Mist.MistGasAreaEffectComponent
// Size: 0x800 (Inherited: 0x800)
struct UMistGasAreaEffectComponent : UMistAreaEffectComponent {
};

// Class Mist.MistGasBomb
// Size: 0x508 (Inherited: 0x500)
struct AMistGasBomb : AMistProjectile {
	struct AMistAreaEffect* AreaEffectClass; // 0x500(0x08)
};

// Class Mist.MistGasBombItemTemplate
// Size: 0x250 (Inherited: 0x250)
struct UMistGasBombItemTemplate : UMistProjectileItemTemplate {
};

// Class Mist.MistGeneralHudLogEntryWidget
// Size: 0x308 (Inherited: 0x2f0)
struct UMistGeneralHudLogEntryWidget : UMistHudLogEntryBaseWidget {
	struct UImage* IconWidget; // 0x2f0(0x08)
	struct UMistTextBlock* TextWidget; // 0x2f8(0x08)
	struct UMistGeneralHudLogEntry* GeneralData; // 0x300(0x08)
};

// Class Mist.MistGotExperienceMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistGotExperienceMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* TextWidget; // 0x2c0(0x08)
	struct UMistIntMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistGotItemMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistGotItemMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* TextWidget; // 0x2c0(0x08)
	struct UMistItemMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistGotStatPointsMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistGotStatPointsMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* TextWidget; // 0x2c0(0x08)
	struct UMistIntMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistGraphicsSettingsWidget
// Size: 0x3e8 (Inherited: 0x2d0)
struct UMistGraphicsSettingsWidget : UMistSettingsWidget {
	struct UComboBoxString* WindowModeComboBoxWidget; // 0x2d0(0x08)
	struct UComboBoxString* ResolutionComboBoxWidget; // 0x2d8(0x08)
	struct UComboBoxString* MaxFPSComboBoxWidget; // 0x2e0(0x08)
	struct UCheckBox* VSyncCheckBoxWidget; // 0x2e8(0x08)
	struct USlider* FirstPersonFovOffsetFactorSliderWidget; // 0x2f0(0x08)
	struct USlider* ThirdPersonFovOffsetFactorSliderWidget; // 0x2f8(0x08)
	struct UComboBoxString* FovScalingComboBoxWidget; // 0x300(0x08)
	struct UComboBoxString* QualityPresetComboBoxWidget; // 0x308(0x08)
	struct UComboBoxString* AntiAliasingQualityComboBoxWidget; // 0x310(0x08)
	struct UComboBoxString* TextureQualityComboBoxWidget; // 0x318(0x08)
	struct UComboBoxString* ShadowQualityComboBoxWidget; // 0x320(0x08)
	struct UComboBoxString* PostProcessingQualityComboBoxWidget; // 0x328(0x08)
	struct UComboBoxString* MotionBlurQualityComboBoxWidget; // 0x330(0x08)
	struct UComboBoxString* VisualEffectQualityComboBoxWidget; // 0x338(0x08)
	struct UComboBoxString* ViewDistanceQualityComboBoxWidget; // 0x340(0x08)
	struct UComboBoxString* ResolutionScaleQualityComboBoxWidget; // 0x348(0x08)
	struct UComboBoxString* FoliageQualityComboBoxWidget; // 0x350(0x08)
	struct UVerticalBox* SettingsBoxWidget; // 0x358(0x08)
	struct UCheckBox* MotionBlurEnabledCheckBoxWidget; // 0x360(0x08)
	struct USlider* GammaCorrectionSliderWidget; // 0x368(0x08)
	struct UGameUserSettings* GameUserSettings; // 0x370(0x08)
	struct UMistUserGraphicsSettings* UserGraphicsSettings; // 0x378(0x08)
	char pad_380[0x68]; // 0x380(0x68)

	void HandleWindowModeChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleWindowModeChanged // (Final|Native|Private) // @ game+0x1104f30
	void HandleVSyncChanged(bool bIsChecked); // Function Mist.MistGraphicsSettingsWidget.HandleVSyncChanged // (Final|Native|Private) // @ game+0x1104c40
	void HandleVisualEffectQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleVisualEffectQualityChanged // (Final|Native|Private) // @ game+0x1104df0
	void HandleViewDistanceQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleViewDistanceQualityChanged // (Final|Native|Private) // @ game+0x1104cd0
	void HandleTextureQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleTextureQualityChanged // (Final|Native|Private) // @ game+0x1104b20
	void HandleShadowQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleShadowQualityChanged // (Final|Native|Private) // @ game+0x11047e0
	void HandleResolutionScaleQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleResolutionScaleQualityChanged // (Final|Native|Private) // @ game+0x1104660
	void HandleResolutionChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleResolutionChanged // (Final|Native|Private) // @ game+0x1104540
	void HandleQualityPresetChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleQualityPresetChanged // (Final|Native|Private) // @ game+0x11043e0
	void HandlePostProcessingQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandlePostProcessingQualityChanged // (Final|Native|Private) // @ game+0x1104220
	void HandleMotionBlurQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleMotionBlurQualityChanged // (Final|Native|Private) // @ game+0x1104050
	void HandleMaxFPSChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleMaxFPSChanged // (Final|Native|Private) // @ game+0x1103f30
	void HandleFovScalingChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleFovScalingChanged // (Final|Native|Private) // @ game+0x1103df0
	void HandleFoliageQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleFoliageQualityChanged // (Final|Native|Private) // @ game+0x1103cd0
	void HandleAntiAliasingQualityChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistGraphicsSettingsWidget.HandleAntiAliasingQualityChanged // (Final|Native|Private) // @ game+0x1103810
};

// Class Mist.MistGrappleQuest
// Size: 0x130 (Inherited: 0x110)
struct UMistGrappleQuest : UMistTutorialQuest {
	struct FName TaskNameOnShot; // 0x110(0x08)
	struct FName TaskNameOnReelIn; // 0x118(0x08)
	struct FName TaskNameOnReelOut; // 0x120(0x08)
	struct UMistGrapplingHookComponent* BoundGrapplingHookComponent; // 0x128(0x08)

	void Shot(struct UMistGrapplingHookComponent* GrapplingHookComponent); // Function Mist.MistGrappleQuest.Shot // (Final|Native|Protected) // @ game+0x1108c50
	void ReelOut(struct UMistGrapplingHookComponent* GrapplingHookComponent); // Function Mist.MistGrappleQuest.ReelOut // (Final|Native|Protected) // @ game+0x1108770
	void ReelIn(struct UMistGrapplingHookComponent* GrapplingHookComponent); // Function Mist.MistGrappleQuest.ReelIn // (Final|Native|Protected) // @ game+0x11086f0
	void OnWalkerRemoved(struct AMistWalker* Walker); // Function Mist.MistGrappleQuest.OnWalkerRemoved // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWalkerAdded(struct AMistWalker* Walker); // Function Mist.MistGrappleQuest.OnWalkerAdded // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistGrapplingBeltChargingStationComponent
// Size: 0x228 (Inherited: 0x1f0)
struct UMistGrapplingBeltChargingStationComponent : UMistInteractableComponent {
	float ChargeTime; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
	struct FMulticastInlineDelegate OnStartCharging; // 0x1f8(0x10)
	struct FMulticastInlineDelegate OnStopCharging; // 0x208(0x10)
	char pad_218[0x8]; // 0x218(0x08)
	struct AMistPlayer* ChargingPlayer; // 0x220(0x08)

	void Recharge(struct AMistPlayer* Player); // Function Mist.MistGrapplingBeltChargingStationComponent.Recharge // (Final|Native|Private) // @ game+0x1108670
	void ReceiveStopCharging(); // Function Mist.MistGrapplingBeltChargingStationComponent.ReceiveStopCharging // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveStartCharging(); // Function Mist.MistGrapplingBeltChargingStationComponent.ReceiveStartCharging // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ChargingEvent__DelegateSignature(); // DelegateFunction Mist.MistGrapplingBeltChargingStationComponent.ChargingEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistGrapplingBeltComponent
// Size: 0x310 (Inherited: 0x300)
struct UMistGrapplingBeltComponent : UMistEquipmentContainerComponent {
	float MaxCharges; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct UMistItemTemplate* ChargeItemTemplate; // 0x308(0x08)
};

// Class Mist.MistGrapplingBeltStatusWidget
// Size: 0x2f8 (Inherited: 0x2e0)
struct UMistGrapplingBeltStatusWidget : UMistHUDWidget {
	struct UTextBlock* ChargesTextWidget; // 0x2e0(0x08)
	struct UProgressBar* ChargesBarWidget; // 0x2e8(0x08)
	struct UMistGrapplingBeltComponent* BoundBelt; // 0x2f0(0x08)

	void HandleEquipmentSlotUpdate(struct UMistEquipmentComponent* EquipmentComponent, enum class EEquipmentSlot EquipmentSlot); // Function Mist.MistGrapplingBeltStatusWidget.HandleEquipmentSlotUpdate // (Final|Native|Private) // @ game+0x1107d60
	void HandleChargesChanged(struct UMistContainerComponent* Belt, int32_t NewCount, struct UMistItemTemplate* ItemTemplate); // Function Mist.MistGrapplingBeltStatusWidget.HandleChargesChanged // (Final|Native|Private) // @ game+0x10dc800
};

// Class Mist.MistGrapplingCrosshairWidget
// Size: 0x340 (Inherited: 0x340)
struct UMistGrapplingCrosshairWidget : UMistCrosshairWidget {
};

// Class Mist.MistGrapplingHookComponent
// Size: 0x420 (Inherited: 0x128)
struct UMistGrapplingHookComponent : UMistPlayerEquipmentItemComponent {
	char pad_128[0x28]; // 0x128(0x28)
	struct FMulticastInlineDelegate OnShot; // 0x150(0x10)
	struct FMulticastInlineDelegate OnHit; // 0x160(0x10)
	enum class EMistGrapplingHookMode Mode; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
	struct FMulticastInlineDelegate OnAttach; // 0x178(0x10)
	struct FMulticastInlineDelegate OnReset; // 0x188(0x10)
	struct FMulticastInlineDelegate OnBeginReelIn; // 0x198(0x10)
	struct FMulticastInlineDelegate OnEndReelIn; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnBeginReelOut; // 0x1b8(0x10)
	struct FMulticastInlineDelegate OnEndReelOut; // 0x1c8(0x10)
	struct FMulticastInlineDelegate OnStressChanged; // 0x1d8(0x10)
	struct FMulticastInlineDelegate OnChargeUsed; // 0x1e8(0x10)
	struct FMulticastInlineDelegate OnRequiresCharge; // 0x1f8(0x10)
	struct FMulticastInlineDelegate OnReadyToBeShot; // 0x208(0x10)
	struct FMulticastInlineDelegate OnTargetChanged; // 0x218(0x10)
	struct FMulticastInlineDelegate OnCrossairTargetChanged; // 0x228(0x10)
	struct AMistGrapplingHookProjectile* GrapplingHookProjectileClass; // 0x238(0x08)
	struct UMistProjectileItemTemplate* GunProjectileClass; // 0x240(0x08)
	struct UMistTetherMasterComponent* TetherClass; // 0x248(0x08)
	float ReelSpeedUnpowered; // 0x250(0x04)
	float ReelSpeedPowered; // 0x254(0x04)
	float ReelInPowerUsage; // 0x258(0x04)
	float HitscanSize; // 0x25c(0x04)
	float PrecisionModeDelay; // 0x260(0x04)
	float AimingDistance; // 0x264(0x04)
	float CooldownSecs; // 0x268(0x04)
	float LoosenThreshold; // 0x26c(0x04)
	float StaminaConsumption; // 0x270(0x04)
	float StaminaMinConsumption; // 0x274(0x04)
	float StressChangedInterval; // 0x278(0x04)
	float TensionChangedThreshold; // 0x27c(0x04)
	float HealthChangedThreshold; // 0x280(0x04)
	float SprintPreventionTime; // 0x284(0x04)
	float PrimaryCrosshairDisplayDurationWhenUsed; // 0x288(0x04)
	float CrosshairHideDurationInCombat; // 0x28c(0x04)
	float PrimaryCrosshairForcedDisplayDuration; // 0x290(0x04)
	float AttachmentToggleCooldown; // 0x294(0x04)
	float ReloadDuration; // 0x298(0x04)
	float TetherLengthNetworkCorrectionSpeed; // 0x29c(0x04)
	float ReelingDelay; // 0x2a0(0x04)
	char pad_2A4[0x4]; // 0x2a4(0x04)
	struct UAudioComponent* ReelInAudioComponent; // 0x2a8(0x08)
	struct UAudioComponent* ReelOutAudioComponent; // 0x2b0(0x08)
	struct USoundBase* ReelOutSound; // 0x2b8(0x08)
	struct USoundBase* ReelInSound; // 0x2c0(0x08)
	struct FMistSoundBasicParams ShotSuccessfullySound; // 0x2c8(0x28)
	bool bAiming; // 0x2f0(0x01)
	bool bPrecisionMode; // 0x2f1(0x01)
	char pad_2F2[0x3e]; // 0x2f2(0x3e)
	struct FTransform LastAttachmentPointPosition; // 0x330(0x30)
	struct UPrimitiveComponent* LastAttachmentComponent; // 0x360(0x08)
	int32_t LastAttachmentItem; // 0x368(0x04)
	struct FName LastAttachmentBone; // 0x36c(0x08)
	char pad_374[0x14]; // 0x374(0x14)
	float MaxAgeOfLastValidAttachmentPointToBeUsed; // 0x388(0x04)
	bool bShowDebugInfo; // 0x38c(0x01)
	char pad_38D[0x3]; // 0x38d(0x03)
	struct UPhysicsConstraintComponent* ConstraintComponent; // 0x390(0x08)
	char pad_398[0x8]; // 0x398(0x08)
	struct FMistGrapplingHookNetState NetState; // 0x3a0(0x60)
	struct UMistGrapplingTetherComponent* TetherComponent; // 0x400(0x08)
	bool bGunActive; // 0x408(0x01)
	enum class EMistGrapplingHookGunState GunState; // 0x409(0x01)
	enum class EMistGrapplingHookType ActiveHookType; // 0x40a(0x01)
	char pad_40B[0x15]; // 0x40b(0x15)

	void TetherComponentStressChangedEvent__DelegateSignature(struct UMistTetherMasterComponent* TetherComponent, float NewTension, float OldTension, float NewHealth, float OldHealth, float DeltaTime); // DelegateFunction Mist.MistGrapplingHookComponent.TetherComponentStressChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void TargetChangedEvent__DelegateSignature(struct UMistGrapplingHookComponent* GrapplingHookComponent); // DelegateFunction Mist.MistGrapplingHookComponent.TargetChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void StopReelOutSound(); // Function Mist.MistGrapplingHookComponent.StopReelOutSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1108cf0
	void StopRealInSound(); // Function Mist.MistGrapplingHookComponent.StopRealInSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1108cd0
	void ServerToggleGrapplingHookMode(); // Function Mist.MistGrapplingHookComponent.ServerToggleGrapplingHookMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108c30
	void ServerShootProjectile(struct FVector TargetLocation); // Function Mist.MistGrapplingHookComponent.ServerShootProjectile // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x1108ba0
	void ServerSetTetherLength(float InLength); // Function Mist.MistGrapplingHookComponent.ServerSetTetherLength // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1108b20
	void ServerSetSwingDirection(struct FVector InDirection); // Function Mist.MistGrapplingHookComponent.ServerSetSwingDirection // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x1108aa0
	void ServerSetReelingMode(enum class EMistGrapplingHookReelingMode InMode, bool InValue, float InLength); // Function Mist.MistGrapplingHookComponent.ServerSetReelingMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108990
	void ServerReloadProjectile(); // Function Mist.MistGrapplingHookComponent.ServerReloadProjectile // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c2470
	void ServerDetach(); // Function Mist.MistGrapplingHookComponent.ServerDetach // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c1d50
	void ServerAttachToComponent(struct UPrimitiveComponent* Component, struct FTransform AttachmentPointPosition, int32_t Item, struct FName BoneName); // Function Mist.MistGrapplingHookComponent.ServerAttachToComponent // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x11087f0
	void ResetEvent__DelegateSignature(struct UMistGrapplingHookComponent* GrapplingHookComponent, enum class EMistGrapplingHookResetReason Reason, bool bWasAttached); // DelegateFunction Mist.MistGrapplingHookComponent.ResetEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ReceiveStressChanged(float NewTension, float OldTension, float NewHealth, float OldHealth, float DeltaTime); // Function Mist.MistGrapplingHookComponent.ReceiveStressChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveShot(); // Function Mist.MistGrapplingHookComponent.ReceiveShot // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveReset(enum class EMistGrapplingHookResetReason Reason, bool bWasAttached); // Function Mist.MistGrapplingHookComponent.ReceiveReset // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveRequiresCharge(); // Function Mist.MistGrapplingHookComponent.ReceiveRequiresCharge // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveReadyToBeShot(); // Function Mist.MistGrapplingHookComponent.ReceiveReadyToBeShot // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveHit(struct FHitResult& HitResult); // Function Mist.MistGrapplingHookComponent.ReceiveHit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveEndReelOut(); // Function Mist.MistGrapplingHookComponent.ReceiveEndReelOut // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveEndReelIn(); // Function Mist.MistGrapplingHookComponent.ReceiveEndReelIn // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveDetach(); // Function Mist.MistGrapplingHookComponent.ReceiveDetach // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveChargeUsed(bool bWasLastCharge); // Function Mist.MistGrapplingHookComponent.ReceiveChargeUsed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveCannotShoot(); // Function Mist.MistGrapplingHookComponent.ReceiveCannotShoot // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBeginReelOut(); // Function Mist.MistGrapplingHookComponent.ReceiveBeginReelOut // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBeginReelIn(); // Function Mist.MistGrapplingHookComponent.ReceiveBeginReelIn // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveAttach(struct FHitResult& HitResult); // Function Mist.MistGrapplingHookComponent.ReceiveAttach // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void PlayReelOutSound(); // Function Mist.MistGrapplingHookComponent.PlayReelOutSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1108650
	void PlayReelInSound(); // Function Mist.MistGrapplingHookComponent.PlayReelInSound // (Final|Native|Public|BlueprintCallable) // @ game+0x1108630
	void OnRep_TetherComponent(); // Function Mist.MistGrapplingHookComponent.OnRep_TetherComponent // (Final|Native|Private) // @ game+0x1108610
	void OnRep_NetState(); // Function Mist.MistGrapplingHookComponent.OnRep_NetState // (Final|Native|Private) // @ game+0x11085f0
	void OnRep_GunState(); // Function Mist.MistGrapplingHookComponent.OnRep_GunState // (Final|Native|Private) // @ game+0x11085d0
	void OnRep_ActiveHookType(); // Function Mist.MistGrapplingHookComponent.OnRep_ActiveHookType // (Final|Native|Private) // @ game+0x11085b0
	void MulticastShoot(); // Function Mist.MistGrapplingHookComponent.MulticastShoot // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10cccf0
	void MulticastSetTetherLength(float InLength); // Function Mist.MistGrapplingHookComponent.MulticastSetTetherLength // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108530
	void MulticastSetReelingMode(enum class EMistGrapplingHookReelingMode InMode, bool InValue, float InLength); // Function Mist.MistGrapplingHookComponent.MulticastSetReelingMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108420
	void MulticastReset(bool bServerForce); // Function Mist.MistGrapplingHookComponent.MulticastReset // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1108390
	void MulticastPlayShotSuccesfullySound(); // Function Mist.MistGrapplingHookComponent.MulticastPlayShotSuccesfullySound // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x10c2f70
	void MulticastDetach(bool isServerForced); // Function Mist.MistGrapplingHookComponent.MulticastDetach // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1108300
	void MulticastAttach(struct USceneComponent* AttachComponent, int32_t AttachComponentInstanceIndex, struct FName BoneName, struct FTransform AttachTransform); // Function Mist.MistGrapplingHookComponent.MulticastAttach // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x1108160
	void HitEvent__DelegateSignature(struct UMistGrapplingHookComponent* GrapplingHookComponent, struct FHitResult& HitResult); // DelegateFunction Mist.MistGrapplingHookComponent.HitEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
	void HandleStressChanged(struct UMistTetherMasterComponent* InTetherComponent, float NewTension, float OldTension, float NewHealth, float OldHealth, float DeltaTime); // Function Mist.MistGrapplingHookComponent.HandleStressChanged // (Final|Native|Private) // @ game+0x1107fa0
	void HandleProjectileImpact(struct AMistProjectile* Projectile, struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // Function Mist.MistGrapplingHookComponent.HandleProjectileImpact // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1107e20
	void HandleCharacterStateChanged(struct AMistCharacter* Character, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistGrapplingHookComponent.HandleCharacterStateChanged // (Final|Native|Private) // @ game+0x1107c60
	void HandleAttachInstancedStructureDestroyed(struct FTransform& Transform, int32_t ItemIndex); // Function Mist.MistGrapplingHookComponent.HandleAttachInstancedStructureDestroyed // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1107a80
	void HandleAttachedFoliageDestroyed(struct UMistFoliageComponent* Component, int32_t InstanceIndex); // Function Mist.MistGrapplingHookComponent.HandleAttachedFoliageDestroyed // (Final|Native|Private) // @ game+0x1107ba0
	void HandleAttachActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistGrapplingHookComponent.HandleAttachActorDestroyed // (Final|Native|Private) // @ game+0x1107a00
	struct FVector GetProjectileLocation(); // Function Mist.MistGrapplingHookComponent.GetProjectileLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11079c0
	struct AMistGrapplingHookProjectile* GetProjectile(); // Function Mist.MistGrapplingHookComponent.GetProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x1107990
	void ClientDenyAttachment(); // Function Mist.MistGrapplingHookComponent.ClientDenyAttachment // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x10c25f0
	void ChargeUsedEvent__DelegateSignature(struct UMistGrapplingHookComponent* GrapplingHookComponent, bool bWasLastCharge); // DelegateFunction Mist.MistGrapplingHookComponent.ChargeUsedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ActionEvent__DelegateSignature(struct UMistGrapplingHookComponent* GrapplingHookComponent); // DelegateFunction Mist.MistGrapplingHookComponent.ActionEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistGrapplingHookProjectile
// Size: 0x528 (Inherited: 0x500)
struct AMistGrapplingHookProjectile : AMistProjectile {
	struct UMistTetherSlaveComponent* TetherComponent; // 0x500(0x08)
	float BaseDamage; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)
	struct UDamageType* DamageType; // 0x510(0x08)
	float ReelAmountOnAttach; // 0x518(0x04)
	char pad_51C[0xc]; // 0x51c(0x0c)
};

// Class Mist.MistGrapplingHookPullerAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UMistGrapplingHookPullerAnimInstance : UAnimInstance {
	enum class EGrapplingHookPullerState PullerState; // 0x268(0x01)
	struct UMistGrapplingHookPullerComponent* CachedComponent; // 0x270(0x08)
	char pad_279[0x7]; // 0x279(0x07)
};

// Class Mist.MistGrapplingHookPullerComponent
// Size: 0x840 (Inherited: 0x7e0)
struct UMistGrapplingHookPullerComponent : UBoxComponent {
	char pad_7E0[0x8]; // 0x7e0(0x08)
	struct AMistPlayer* CurrentUser; // 0x7e8(0x08)
	char pad_7F0[0x10]; // 0x7f0(0x10)
	struct USceneComponent* FinalDestination; // 0x800(0x08)
	float AcceptableDistanceToSpool; // 0x808(0x04)
	float AcceptableDistanceToLanding; // 0x80c(0x04)
	float LaunchSpeed; // 0x810(0x04)
	float PullingMultiplier; // 0x814(0x04)
	char pad_818[0x28]; // 0x818(0x28)

	void ServerStartPulling(struct AMistPlayer* User); // Function Mist.MistGrapplingHookPullerComponent.ServerStartPulling // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x110d210
	void OnGrapplingReset(struct UMistGrapplingHookComponent* GrapplingHookComponent, enum class EMistGrapplingHookResetReason Reason, bool bWasAttached); // Function Mist.MistGrapplingHookPullerComponent.OnGrapplingReset // (Final|Native|Private) // @ game+0x110ce50
	void NewGrapplingHookHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComponent, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Mist.MistGrapplingHookPullerComponent.NewGrapplingHookHit // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x110cc80
	void MulticastStartPulling(); // Function Mist.MistGrapplingHookPullerComponent.MulticastStartPulling // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x110cc60
	void MulticastSetLocationOfHookOwner(struct UMistGrapplingHookComponent* GrapplingHookComponent, struct FVector NewLocation); // Function Mist.MistGrapplingHookPullerComponent.MulticastSetLocationOfHookOwner // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x110cb00
	void MulticastLaunchHookOwner(struct UMistGrapplingHookComponent* GrapplingHookComponent, struct FVector Velocity); // Function Mist.MistGrapplingHookPullerComponent.MulticastLaunchHookOwner // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x110c7a0
	void MulticastInterruptPulling(); // Function Mist.MistGrapplingHookPullerComponent.MulticastInterruptPulling // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x110c780
	void HandleNetRemoved(); // Function Mist.MistGrapplingHookPullerComponent.HandleNetRemoved // (Final|Native|Private) // @ game+0x110c000
	void HandleNetAttached(); // Function Mist.MistGrapplingHookPullerComponent.HandleNetAttached // (Final|Native|Private) // @ game+0x110bfe0
	void ClientStartPulling(struct AMistPlayer* User); // Function Mist.MistGrapplingHookPullerComponent.ClientStartPulling // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x110bbf0
};

// Class Mist.MistGrapplingHookUsableComponent
// Size: 0x108 (Inherited: 0xf0)
struct UMistGrapplingHookUsableComponent : UActorComponent {
	char pad_F0[0x18]; // 0xf0(0x18)
};

// Class Mist.MistGrapplingSnapStatusEffect
// Size: 0xe0 (Inherited: 0xe0)
struct UMistGrapplingSnapStatusEffect : UMistStatusEffect {
};

// Class Mist.MistTetherComponent
// Size: 0x2a0 (Inherited: 0x290)
struct UMistTetherComponent : USceneComponent {
	struct UMistTextRenderComponent* DebugTextRenderComponent; // 0x290(0x08)
	bool bShowDebugInfo; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
};

// Class Mist.MistTetherMasterComponent
// Size: 0x590 (Inherited: 0x2a0)
struct UMistTetherMasterComponent : UMistTetherComponent {
	char pad_2A0[0x8]; // 0x2a0(0x08)
	struct FMulticastInlineDelegate OnSnapped; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnConnectionBroken; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnStressChanged; // 0x2c8(0x10)
	float StressChangedInterval; // 0x2d8(0x04)
	float TensionChangedThreshold; // 0x2dc(0x04)
	float HealthChangedThreshold; // 0x2e0(0x04)
	bool bReplicateCableActor; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	struct AMistTetherCable* CableActor; // 0x2e8(0x08)
	struct FMistTetherParameters TetherParameters; // 0x2f0(0x90)
	float Length; // 0x380(0x04)
	char pad_384[0x4]; // 0x384(0x04)
	struct UMistTetherSlaveComponent* LinkedTether; // 0x388(0x08)
	struct AActor* HACK_LinkedTetherActor; // 0x390(0x08)
	char pad_398[0xb8]; // 0x398(0xb8)
	float Health; // 0x450(0x04)
	float OverrideMaxHealth; // 0x454(0x04)
	char pad_458[0x8]; // 0x458(0x08)
	struct UMaterialInstanceDynamic* RopeDebugMaterialInstance; // 0x460(0x08)
	struct FMistAttachmentMonitor MasterAttachmentMonitor; // 0x468(0x80)
	struct FMistAttachmentMonitor SlaveAttachmentMonitor; // 0x4e8(0x80)
	char pad_568[0x28]; // 0x568(0x28)

	void TetherComponentStressChangedEvent__DelegateSignature(struct UMistTetherMasterComponent* TetherComponent, float NewTension, float OldTension, float NewHealth, float OldHealth, float DeltaTime); // DelegateFunction Mist.MistTetherMasterComponent.TetherComponentStressChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void SnappedEvent__DelegateSignature(struct AActor* Snapped, struct AActor* Attached); // DelegateFunction Mist.MistTetherMasterComponent.SnappedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void Snap(bool bSnapSelf); // Function Mist.MistTetherMasterComponent.Snap // (Final|Native|Public|BlueprintCallable) // @ game+0x11b1b90
	void Reel(float Amount); // Function Mist.MistTetherMasterComponent.Reel // (Final|Native|Public|BlueprintCallable) // @ game+0x11b1b10
	void ReceiveStressChanged(float NewTension, float OldTension, float NewHealth, float OldHealth, float DeltaTime); // Function Mist.MistTetherMasterComponent.ReceiveStressChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveSnapped(struct AActor* Snapped, struct AActor* Attached); // Function Mist.MistTetherMasterComponent.ReceiveSnapped // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OverwriteHpAndDamage(float MaxHp, float DamageThreshold); // Function Mist.MistTetherMasterComponent.OverwriteHpAndDamage // (Native|Public) // @ game+0x11b1940
	void OnRep_LinkedTether(struct UMistTetherSlaveComponent* PrevLinkedTether); // Function Mist.MistTetherMasterComponent.OnRep_LinkedTether // (Native|Protected) // @ game+0x10c5380
	void OnRep_Length(float PrevLength); // Function Mist.MistTetherMasterComponent.OnRep_Length // (Native|Protected) // @ game+0x11b18c0
	void MulticastSnapCableActor(bool bSnapSelf); // Function Mist.MistTetherMasterComponent.MulticastSnapCableActor // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x11b1830
	void MulticastSetOverrideMaxHealth(float InOverrideMaxHealth); // Function Mist.MistTetherMasterComponent.MulticastSetOverrideMaxHealth // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x11b17b0
	void MulticastBreakCableActor(); // Function Mist.MistTetherMasterComponent.MulticastBreakCableActor // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x11b1790
	void Lock(); // Function Mist.MistTetherMasterComponent.Lock // (Native|Public|BlueprintCallable) // @ game+0x11b1770
	void Link(struct UMistTetherSlaveComponent* TargetTether); // Function Mist.MistTetherMasterComponent.Link // (Final|Native|Public|BlueprintCallable) // @ game+0x11b16f0
	bool IsTethered(); // Function Mist.MistTetherMasterComponent.IsTethered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1690
	bool IsLocked(); // Function Mist.MistTetherMasterComponent.IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1660
	float GetTension(); // Function Mist.MistTetherMasterComponent.GetTension // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1620
	float GetStretch(); // Function Mist.MistTetherMasterComponent.GetStretch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b15f0
	struct UMistTetherSlaveComponent* GetSlaveTether(); // Function Mist.MistTetherMasterComponent.GetSlaveTether // (Final|Native|Public|BlueprintCallable) // @ game+0x11b15c0
	float GetMinLength(); // Function Mist.MistTetherMasterComponent.GetMinLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1590
	float GetMaxStretch(); // Function Mist.MistTetherMasterComponent.GetMaxStretch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1560
	float GetMaxLength(); // Function Mist.MistTetherMasterComponent.GetMaxLength // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1520
	float GetMaxHealth(); // Function Mist.MistTetherMasterComponent.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b14f0
	float GetLinearForce(); // Function Mist.MistTetherMasterComponent.GetLinearForce // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1490
	float GetLength(); // Function Mist.MistTetherMasterComponent.GetLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1460
	float GetHealth(); // Function Mist.MistTetherMasterComponent.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1430
	float GetDistance(); // Function Mist.MistTetherMasterComponent.GetDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b1400
	void Event__DelegateSignature(struct UMistTetherMasterComponent* Sender); // DelegateFunction Mist.MistTetherMasterComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void Break(); // Function Mist.MistTetherMasterComponent.Break // (Final|Native|Public|BlueprintCallable) // @ game+0x11b10e0
};

// Class Mist.MistGrapplingTetherComponent
// Size: 0x5b0 (Inherited: 0x590)
struct UMistGrapplingTetherComponent : UMistTetherMasterComponent {
	char pad_590[0x8]; // 0x590(0x08)
	struct UCurveFloat* StretchTensionCurve; // 0x598(0x08)
	struct AMistWalker* TetheredToWalker; // 0x5a0(0x08)
	char pad_5A8[0x8]; // 0x5a8(0x08)
};

// Class Mist.MistGridPanelWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistGridPanelWidget : UMistUIWidget {
	struct UGridPanel* GridPanelWidget; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)
};

// Class Mist.MistDamageDealtHandleStatusEffect
// Size: 0xe8 (Inherited: 0xe0)
struct UMistDamageDealtHandleStatusEffect : UMistStatusEffect {
	float ApplyEffectChance; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Mist.MistStaminaDamageStatusEffect
// Size: 0xf8 (Inherited: 0xe8)
struct UMistStaminaDamageStatusEffect : UMistDamageDealtHandleStatusEffect {
	bool bIsDamageDependent; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float StaminaDamagePercent; // 0xec(0x04)
	float StaminaRawDamage; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Mist.MistDurabilityDamageStatusEffect
// Size: 0xf8 (Inherited: 0xe8)
struct UMistDurabilityDamageStatusEffect : UMistDamageDealtHandleStatusEffect {
	bool bIsDamageDependent; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float DurabilityDamagePercent; // 0xec(0x04)
	float DurabilityDamage; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Mist.MistHarpoonProjectile
// Size: 0x540 (Inherited: 0x500)
struct AMistHarpoonProjectile : AMistProjectile {
	struct UMistTetherSlaveComponent* TetherComponent; // 0x500(0x08)
	struct FMistComponentReference PullInteractableRef; // 0x508(0x28)
	struct UMistItemTemplate* PullReturnedItem; // 0x530(0x08)
	char pad_538[0x8]; // 0x538(0x08)

	void HarpoonPullInteractionEnded(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistHarpoonProjectile.HarpoonPullInteractionEnded // (Final|Native|Private|HasOutParms) // @ game+0x110c6a0
	void HandleTetherConnectionBroken(struct UMistTetherMasterComponent* Sender); // Function Mist.MistHarpoonProjectile.HandleTetherConnectionBroken // (Final|Native|Private) // @ game+0x110c620
};

// Class Mist.MistHarvestableActor
// Size: 0x3f0 (Inherited: 0x3d0)
struct AMistHarvestableActor : AStaticMeshActor {
	struct UStaticMeshComponent* HarvestableRootComponent; // 0x3d0(0x08)
	struct UStaticMesh* Mesh; // 0x3d8(0x08)
	struct UMistFoliageComponent* FoliageType; // 0x3e0(0x08)
	bool bDestroyActorOnHarvested; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)

	void OnRep_Mesh(struct UStaticMesh* PrevMesh); // Function Mist.MistHarvestableActor.OnRep_Mesh // (Native|Protected) // @ game+0x110d090
	void OnRep_FoliageType(struct UMistFoliageComponent* PrevType); // Function Mist.MistHarvestableActor.OnRep_FoliageType // (Native|Protected) // @ game+0x110cf60
};

// Class Mist.MistHarvestableMeshComponent
// Size: 0x900 (Inherited: 0x850)
struct UMistHarvestableMeshComponent : UStaticMeshComponent {
	char pad_850[0x50]; // 0x850(0x50)
	struct FMulticastInlineDelegate OnHarvested; // 0x8a0(0x10)
	struct UMistFoliageComponent* FoliageType; // 0x8b0(0x08)
	float RespawnTime; // 0x8b8(0x04)
	char pad_8BC[0xc]; // 0x8bc(0x0c)
	float FoliageDamage; // 0x8c8(0x04)
	bool bIsHarvested; // 0x8cc(0x01)
	bool bCollisionOnClientOnly; // 0x8cd(0x01)
	char pad_8CE[0x2]; // 0x8ce(0x02)
	struct FMistInteractableProperties InteractableProperties; // 0x8d0(0x14)
	bool bUseQualityManager; // 0x8e4(0x01)
	char pad_8E5[0x3]; // 0x8e5(0x03)
	int32_t MaxHarvestingQuality; // 0x8e8(0x04)
	char pad_8EC[0x4]; // 0x8ec(0x04)
	struct TArray<struct FMistFoliageHarvestingEntry> HarvestingEntries; // 0x8f0(0x10)

	void SetMaxHarvestingQuality(int32_t InMaxQuality); // Function Mist.MistHarvestableMeshComponent.SetMaxHarvestingQuality // (Final|Native|Public) // @ game+0x110d2a0
	void OnRep_IsHarvested(); // Function Mist.MistHarvestableMeshComponent.OnRep_IsHarvested // (Final|Native|Public) // @ game+0x110d070
	void OnHarvested__DelegateSignature(); // DelegateFunction Mist.MistHarvestableMeshComponent.OnHarvested__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MulticastSetIsHarvested(bool InValue); // Function Mist.MistHarvestableMeshComponent.MulticastSetIsHarvested // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x110c9e0
	void MulticastPlayEffects(struct FVector Location); // Function Mist.MistHarvestableMeshComponent.MulticastPlayEffects // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x110c880
	void HandleRadialDamage(struct UPrimitiveComponent* DamagedComponent, float Damage, struct UDamageType* DamageType, struct FVector Origin, struct FDamageSource& DamageSource, struct FHitResult& Hit); // Function Mist.MistHarvestableMeshComponent.HandleRadialDamage // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x110c360
	void HandlePointDamage(struct UPrimitiveComponent* DamagedComponent, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource, struct FHitResult& Hit); // Function Mist.MistHarvestableMeshComponent.HandlePointDamage // (Final|Native|Public|HasOutParms) // @ game+0x110c170
	int32_t GetMaxHarvestingQuality(); // Function Mist.MistHarvestableMeshComponent.GetMaxHarvestingQuality // (Native|Public) // @ game+0x110bcc0
};

// Class Mist.MistHarvestablePhysicsActor
// Size: 0x400 (Inherited: 0x3f0)
struct AMistHarvestablePhysicsActor : AMistHarvestableActor {
	float NetFrequencyAwake; // 0x3f0(0x04)
	float NetFrequencySleeping; // 0x3f4(0x04)
	struct UMistFallingTreeBaseMesh* TreeBaseMesh; // 0x3f8(0x08)

	void HandleComponentWake(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function Mist.MistHarvestablePhysicsActor.HandleComponentWake // (Final|Native|Public) // @ game+0x110bf20
	void HandleComponentSleep(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function Mist.MistHarvestablePhysicsActor.HandleComponentSleep // (Final|Native|Public) // @ game+0x110be60
};

// Class Mist.MistHarvestableStaticActor
// Size: 0x3f0 (Inherited: 0x3f0)
struct AMistHarvestableStaticActor : AMistHarvestableActor {
};

// Class Mist.MistHarvestHudLogEntryWidget
// Size: 0x318 (Inherited: 0x2f0)
struct UMistHarvestHudLogEntryWidget : UMistHudLogEntryBaseWidget {
	struct UImage* IconWidget; // 0x2f0(0x08)
	struct UTextBlock* NameWidget; // 0x2f8(0x08)
	struct UTextBlock* CountWidget; // 0x300(0x08)
	struct UTextBlock* QualityWidget; // 0x308(0x08)
	struct UMistHarvestHudLogEntry* HarvestData; // 0x310(0x08)
};

// Class Mist.MistHeaderTextWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistHeaderTextWidget : UMistUIWidget {
	struct UTextBlock* TextWidget; // 0x2c0(0x08)
	struct FText Text; // 0x2c8(0x18)

	void SetText(struct FText& InText); // Function Mist.MistHeaderTextWidget.SetText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x110d330
};

// Class Mist.MistHealingStatusEffect
// Size: 0xe8 (Inherited: 0xe0)
struct UMistHealingStatusEffect : UMistStatusEffect {
	float HealingValue; // 0xe0(0x04)
	bool bSkipIfDehydrated; // 0xe4(0x01)
	bool bAllowHealingItemUse; // 0xe5(0x01)
	char pad_E6[0x2]; // 0xe6(0x02)
};

// Class Mist.MistHelpWikiScreen
// Size: 0x400 (Inherited: 0x3a0)
struct UMistHelpWikiScreen : UMistUIScreen {
	struct UButton* WikiWelcomeButton; // 0x3a0(0x08)
	struct UButton* WikiProgressionButton; // 0x3a8(0x08)
	struct UButton* WikiLogoutButton; // 0x3b0(0x08)
	struct UButton* WikiWalkerButton; // 0x3b8(0x08)
	struct UButton* WikiTradeButton; // 0x3c0(0x08)
	struct UButton* WikiClaimButton; // 0x3c8(0x08)
	struct UButton* WikiOasisButton; // 0x3d0(0x08)
	struct UButton* WikiQualityButton; // 0x3d8(0x08)
	struct UButton* WikiEventsButton; // 0x3e0(0x08)
	struct UButton* CloseWikiButton; // 0x3e8(0x08)
	struct UScrollBox* ScrollBoxWidget; // 0x3f0(0x08)
	float GamepadScrollSpeed; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)

	void ResetScrollPos(); // Function Mist.MistHelpWikiScreen.ResetScrollPos // (Final|Native|Public|BlueprintCallable) // @ game+0x110d120
	void HandleScrollBoxScroll(float Value); // Function Mist.MistHelpWikiScreen.HandleScrollBoxScroll // (Final|Native|Protected) // @ game+0x110c5a0
};

// Class Mist.MistHexagonWithBorderWidget
// Size: 0x3f8 (Inherited: 0x2c0)
struct UMistHexagonWithBorderWidget : UMistUIWidget {
	struct UImage* HexagonImageWidget; // 0x2c0(0x08)
	struct UImage* HexagonBorderImageWidget; // 0x2c8(0x08)
	int32_t Direction; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct UMaterialInterface* HexagonTriangleMaterialType; // 0x2d8(0x08)
	struct FSlateBrush HexagonImageBrush; // 0x2e0(0x88)
	struct FSlateBrush HexagonBorderImageBrush; // 0x368(0x88)
	struct TWeakObjectPtr<struct UMaterialInstanceDynamic> HexagonTriangleMaterialInstance; // 0x3f0(0x08)
};

// Class Mist.MistHoistControlComponent
// Size: 0x6c8 (Inherited: 0x598)
struct UMistHoistControlComponent : UMistMannedGimbalControlComponent {
	struct FMulticastInlineDelegate OnReelInBegin; // 0x598(0x10)
	struct FMulticastInlineDelegate OnReelInEnd; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnReelOutBegin; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnReelOutEnd; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnReloadStarted; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnFold; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnUnfold; // 0x5f8(0x10)
	struct FMulticastInlineDelegate OnSnapped; // 0x608(0x10)
	struct FMulticastInlineDelegate OnFired; // 0x618(0x10)
	struct FMulticastInlineDelegate OnReloadFailed; // 0x628(0x10)
	char pad_638[0x10]; // 0x638(0x10)
	float ReloadingTime; // 0x648(0x04)
	float FiringTime; // 0x64c(0x04)
	float ProjectileVelocityMod; // 0x650(0x04)
	float ReelInSpeed; // 0x654(0x04)
	struct UCurveFloat* ReelInSpeedRatio; // 0x658(0x08)
	float ReelOutSpeed; // 0x660(0x04)
	float FoldingDistance; // 0x664(0x04)
	float PullStrengthUnderTension; // 0x668(0x04)
	char pad_66C[0x4]; // 0x66c(0x04)
	float ReelingSpeed; // 0x670(0x04)
	char pad_674[0x2]; // 0x674(0x02)
	bool bLockWhenReloading; // 0x676(0x01)
	bool bRotateUnderTension; // 0x677(0x01)
	struct FMistComponentReference Tether; // 0x678(0x28)
	struct UMistTetherMasterComponent* TetherComponent; // 0x6a0(0x08)
	struct AActor* ActorToSpawn; // 0x6a8(0x08)
	struct FName SocketName; // 0x6b0(0x08)
	struct AActor* Kite; // 0x6b8(0x08)
	enum class EMistHoistState State; // 0x6c0(0x01)
	char pad_6C1[0x7]; // 0x6c1(0x07)

	void SpawnKite(); // Function Mist.MistHoistControlComponent.SpawnKite // (Final|Native|Private|BlueprintCallable) // @ game+0x110d400
	void ServerTryReloadOrShoot(); // Function Mist.MistHoistControlComponent.ServerTryReloadOrShoot // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x10a4190
	void ServerSnapTether(); // Function Mist.MistHoistControlComponent.ServerSnapTether // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x10a41b0
	void ServerSetReelState(bool bInWantsReelingIn, bool bInWantsReelingOut); // Function Mist.MistHoistControlComponent.ServerSetReelState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x110d140
	void ReceiveSpawned(); // Function Mist.MistHoistControlComponent.ReceiveSpawned // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveReloadStarted(); // Function Mist.MistHoistControlComponent.ReceiveReloadStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveReloadFailed(); // Function Mist.MistHoistControlComponent.ReceiveReloadFailed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveFired(); // Function Mist.MistHoistControlComponent.ReceiveFired // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_InitialState(); // Function Mist.MistHoistControlComponent.OnRep_InitialState // (Final|Native|Private) // @ game+0x10968b0
	void MulticastSetState(enum class EMistHoistState InState); // Function Mist.MistHoistControlComponent.MulticastSetState // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x110cbe0
	void MulticastSetKite(struct AActor* KiteActor); // Function Mist.MistHoistControlComponent.MulticastSetKite // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x110ca70
	void MulticastFoldKite(); // Function Mist.MistHoistControlComponent.MulticastFoldKite // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a19f0
	void HandlePlaceableConstructed(struct FTransform& Transform, int32_t ItemIndex, struct AMistPlayer* Player); // Function Mist.MistHoistControlComponent.HandlePlaceableConstructed // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x110c020
	enum class EMistHoistState GetHoistState(); // Function Mist.MistHoistControlComponent.GetHoistState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x110bca0
	void Event__DelegateSignature(struct UMistHoistControlComponent* Sender); // DelegateFunction Mist.MistHoistControlComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void DestroyKite(); // Function Mist.MistHoistControlComponent.DestroyKite // (Final|Native|Private|BlueprintCallable|Const) // @ game+0x110bc80
};

// Class Mist.MistHoldButtonWidget
// Size: 0x350 (Inherited: 0x2e0)
struct UMistHoldButtonWidget : UMistBaseButtonWidget {
	float HoldActionTime; // 0x2e0(0x04)
	bool AutoRepeat; // 0x2e4(0x01)
	bool ActionDisabled; // 0x2e5(0x01)
	char pad_2E6[0x2]; // 0x2e6(0x02)
	float AutoRepeatDelay; // 0x2e8(0x04)
	int32_t RepeatsNum; // 0x2ec(0x04)
	char pad_2F0[0x60]; // 0x2f0(0x60)

	void UpdateProgress(); // Function Mist.MistHoldButtonWidget.UpdateProgress // (Final|Native|Private) // @ game+0x1112260
	void ReceiveHoldStarted(); // Function Mist.MistHoldButtonWidget.ReceiveHoldStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveHoldCompleted(int32_t Repeats); // Function Mist.MistHoldButtonWidget.ReceiveHoldCompleted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveHoldCanceled(); // Function Mist.MistHoldButtonWidget.ReceiveHoldCanceled // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveDisabledClicked(); // Function Mist.MistHoldButtonWidget.ReceiveDisabledClicked // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleRetry(); // Function Mist.MistHoldButtonWidget.HandleRetry // (Final|Native|Private) // @ game+0x1111a00
};

// Class Mist.MistHorizontalSelectionIndicatorWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistHorizontalSelectionIndicatorWidget : UMistUIWidget {
	struct UHorizontalBox* Container; // 0x2c0(0x08)
	struct UTexture2D* DefaultTexture; // 0x2c8(0x08)
	struct UTexture2D* SelectedTexture; // 0x2d0(0x08)
	struct FMargin IndicatorPadding; // 0x2d8(0x10)
	struct FVector2D IndicatorSize; // 0x2e8(0x08)
	int32_t Num; // 0x2f0(0x04)
	int32_t SelectedIndex; // 0x2f4(0x04)
	struct TArray<struct UImage*> Indicators; // 0x2f8(0x10)

	void SetSelected(int32_t InIndex); // Function Mist.MistHorizontalSelectionIndicatorWidget.SetSelected // (Final|Native|Public|BlueprintCallable) // @ game+0x11120c0
	void SetNum(int32_t InNum); // Function Mist.MistHorizontalSelectionIndicatorWidget.SetNum // (Final|Native|Public|BlueprintCallable) // @ game+0x1112040
};

// Class Mist.MistHoseAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UMistHoseAnimInstance : UMistMannedControlAnimInstance {
	enum class EMistHoseState HoseState; // 0x278(0x01)
	float HoseRotationYaw; // 0x27c(0x04)
	float HoseRotationPitch; // 0x280(0x04)
	char pad_289[0x7]; // 0x289(0x07)
};

// Class Mist.MistHoseControlComponent
// Size: 0x770 (Inherited: 0x598)
struct UMistHoseControlComponent : UMistMannedGimbalControlComponent {
	char pad_598[0x8]; // 0x598(0x08)
	struct FMulticastInlineDelegate OnSprayStart; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnFiringStart; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnFiringEnd; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnSprayEnd; // 0x5d0(0x10)
	struct FMulticastInlineDelegate OnPumpingStart; // 0x5e0(0x10)
	struct FMistHoseAmmoProperties WaterProperties; // 0x5f0(0x48)
	struct FMistHoseAmmoProperties FuelProperties; // 0x638(0x48)
	struct FMistComponentReference ShootComponentRef; // 0x680(0x28)
	struct FMistComponentReference AmmoContainerRef; // 0x6a8(0x28)
	struct AMistFuelPuddle* FuelPuddleClass; // 0x6d0(0x08)
	float ReachIncreasePerSecond; // 0x6d8(0x04)
	float MaxReach; // 0x6dc(0x04)
	float PushPowerPerSecond; // 0x6e0(0x04)
	float TimeToPushInSeconds; // 0x6e4(0x04)
	bool bShowDebugInfo; // 0x6e8(0x01)
	char pad_6E9[0x3]; // 0x6e9(0x03)
	float ExtinguishMaxDistance; // 0x6ec(0x04)
	float ExtinguishStartRadius; // 0x6f0(0x04)
	float ExtinguishEndRadius; // 0x6f4(0x04)
	float ExtinguishLifeTimeReductionStart; // 0x6f8(0x04)
	float ExtinguishLifeTimeReductionEnd; // 0x6fc(0x04)
	enum class EMistHoseState HoseState; // 0x700(0x01)
	enum class EMistHoseMode HoseMode; // 0x701(0x01)
	char pad_702[0x6]; // 0x702(0x06)
	float CurrentReach; // 0x708(0x04)
	char pad_70C[0xc]; // 0x70c(0x0c)
	struct UMistHoseStationControlComponent* ParentControlComponent; // 0x718(0x08)
	struct TMap<struct AMistCharacter*, struct FMistHoseCharacterAffect> AffectedCharacters; // 0x720(0x50)

	void ServerStopClimbing(); // Function Mist.MistHoseControlComponent.ServerStopClimbing // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a19f0
	void ServerSetIsAttacking(bool bInValue); // Function Mist.MistHoseControlComponent.ServerSetIsAttacking // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1111f20
	void MulticastSetHoseMode(enum class EMistHoseMode InNewMode); // Function Mist.MistHoseControlComponent.MulticastSetHoseMode // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1111df0
	void ActionEvent__DelegateSignature(struct UMistHoseControlComponent* Sender); // DelegateFunction Mist.MistHoseControlComponent.ActionEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistHoseProjectile
// Size: 0x500 (Inherited: 0x500)
struct AMistHoseProjectile : AMistProjectile {
};

// Class Mist.MistHoseStationAnimInstance
// Size: 0x280 (Inherited: 0x280)
struct UMistHoseStationAnimInstance : UMistMannedControlAnimInstance {
	float RotationSpeed; // 0x278(0x04)
};

// Class Mist.MistHoseStationControlComponent
// Size: 0x5d8 (Inherited: 0x598)
struct UMistHoseStationControlComponent : UMistMannedGimbalControlComponent {
	struct UMistProjectileItemTemplate* ProjectileItem; // 0x598(0x08)
	float MaxCharge; // 0x5a0(0x04)
	float CurrentCharge; // 0x5a4(0x04)
	struct FMistComponentReference ChargeInteractableRef; // 0x5a8(0x28)
	char pad_5D0[0x8]; // 0x5d0(0x08)

	void ServerSetIsCharging(bool bInValue); // Function Mist.MistHoseStationControlComponent.ServerSetIsCharging // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1111fb0
	void EndChargeInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool bCancelled); // Function Mist.MistHoseStationControlComponent.EndChargeInteract // (Final|Native|Private|HasOutParms) // @ game+0x1111580
	void BeginChargeInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistHoseStationControlComponent.BeginChargeInteract // (Final|Native|Private|HasOutParms) // @ game+0x11114a0
};

// Class Mist.MistHoveringComponent
// Size: 0x300 (Inherited: 0x290)
struct UMistHoveringComponent : USceneComponent {
	float LinearDumping; // 0x290(0x04)
	float AngularDumping; // 0x294(0x04)
	float HoverForceMultiplier; // 0x298(0x04)
	float VelocityMultiplier; // 0x29c(0x04)
	float ThrowForceMultiplier; // 0x2a0(0x04)
	float DestroyTime; // 0x2a4(0x04)
	struct FMulticastInlineDelegate OnUnfold; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnFold; // 0x2b8(0x10)
	struct FMulticastInlineDelegate OnFire; // 0x2c8(0x10)
	struct AActor* Base; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct UPrimitiveComponent* PrimitiveComponent; // 0x2e8(0x08)
	bool bUseMultipliedForce; // 0x2f0(0x01)
	bool bShouldHover; // 0x2f1(0x01)
	bool bBaseWasSet; // 0x2f2(0x01)
	char pad_2F3[0xd]; // 0x2f3(0x0d)

	void Unfold(struct UMistHoistControlComponent* Sender); // Function Mist.MistHoveringComponent.Unfold // (Final|Native|Private) // @ game+0x11121e0
	void Snap(struct UMistHoistControlComponent* Sender); // Function Mist.MistHoveringComponent.Snap // (Final|Native|Private) // @ game+0x1112160
	void OnRep_ShouldHover(); // Function Mist.MistHoveringComponent.OnRep_ShouldHover // (Final|Native|Public) // @ game+0x1111f00
	void OnDestroy(); // Function Mist.MistHoveringComponent.OnDestroy // (Final|Native|Private|Const) // @ game+0x10d52d0
	void MulticastSetShouldHover(bool ShouldHover); // Function Mist.MistHoveringComponent.MulticastSetShouldHover // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1111e70
	void MulticastSetBase(struct AActor* InBase); // Function Mist.MistHoveringComponent.MulticastSetBase // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1111d60
	void Fold(struct UMistHoistControlComponent* Sender); // Function Mist.MistHoveringComponent.Fold // (Final|Native|Private) // @ game+0x1111720
	void Fire(struct UMistHoistControlComponent* Sender); // Function Mist.MistHoveringComponent.Fire // (Final|Native|Private) // @ game+0x11116a0
	void Event__DelegateSignature(); // DelegateFunction Mist.MistHoveringComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistHPInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistHPInterface : UInterface {
};

// Class Mist.MistHUD
// Size: 0x4e8 (Inherited: 0x4b0)
struct AMistHUD : AHUD {
	char pad_4B0[0x38]; // 0x4b0(0x38)

	void ShowDebugForDrivenWalkerToggle(); // Function Mist.MistHUD.ShowDebugForDrivenWalkerToggle // (Final|Exec|Native|Public) // @ game+0x1112140
};

// Class Mist.MistHUDCrosshairInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistHUDCrosshairInterface : UInterface {
};

// Class Mist.MistHUDDownedWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistHUDDownedWidget : UMistHUDWidget {
	struct UTextBlock* CountdownText; // 0x2e0(0x08)
	struct UProgressBar* HoldProgressWidget; // 0x2e8(0x08)
};

// Class Mist.MistEquipmentStatusIcon
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistEquipmentStatusIcon : UMistUIWidget {
	struct UImage* IconWidget; // 0x2c0(0x08)
};

// Class Mist.MistHUDEquipmentStatus
// Size: 0x340 (Inherited: 0x2e0)
struct UMistHUDEquipmentStatus : UMistHUDWidget {
	int32_t MaxItemsShown; // 0x2e0(0x04)
	float NotificationDamageThreshold; // 0x2e4(0x04)
	struct UGridPanel* PanelWidget; // 0x2e8(0x08)
	struct TMap<enum class EEquipmentSlot, int32_t> SlotToWidgetIndex; // 0x2f0(0x50)

	void HandleEquipmentSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot EquipmentSlot); // Function Mist.MistHUDEquipmentStatus.HandleEquipmentSlotUpdate // (Final|Native|Private) // @ game+0x1111860
	void HandleControlledObjectChanged(struct AMistCharacter* InCharacter, struct UMistMannedControlComponent* InMannedComponent); // Function Mist.MistHUDEquipmentStatus.HandleControlledObjectChanged // (Final|Native|Private) // @ game+0x11117a0
};

// Class Mist.MistHUDKnowledgeProgressWidget
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMistHUDKnowledgeProgressWidget : UMistHUDWidget {
	char pad_2E0[0x8]; // 0x2e0(0x08)

	void HideKnowledgeHud(); // Function Mist.MistHUDKnowledgeProgressWidget.HideKnowledgeHud // (Final|Native|Private) // @ game+0x1111d40
	void HandleKnowledgeGathered(struct UMistKnowledgeType* InType, int32_t InKnowledge); // Function Mist.MistHUDKnowledgeProgressWidget.HandleKnowledgeGathered // (Final|Native|Private) // @ game+0x1111940
};

// Class Mist.MistHudLogEntry
// Size: 0x28 (Inherited: 0x28)
struct UMistHudLogEntry : UObject {
};

// Class Mist.MistGeneralHudLogEntry
// Size: 0x48 (Inherited: 0x28)
struct UMistGeneralHudLogEntry : UMistHudLogEntry {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Mist.MistHarvestHudLogEntry
// Size: 0x48 (Inherited: 0x28)
struct UMistHarvestHudLogEntry : UMistHudLogEntry {
	char pad_28[0x20]; // 0x28(0x20)
};

// Class Mist.MistExperienceHudLogEntry
// Size: 0x30 (Inherited: 0x28)
struct UMistExperienceHudLogEntry : UMistHudLogEntry {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Mist.MistStatPointsHudLogEntry
// Size: 0x30 (Inherited: 0x28)
struct UMistStatPointsHudLogEntry : UMistHudLogEntry {
	char pad_28[0x8]; // 0x28(0x08)
};

// Class Mist.MistHUDManager
// Size: 0x108 (Inherited: 0xf0)
struct UMistHUDManager : UActorComponent {
	struct UMistHUDScreen* HUDScreen; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)
	struct AMistPlayer* BoundPlayer; // 0x100(0x08)
};

// Class Mist.MistHUDScreen
// Size: 0x340 (Inherited: 0x2e0)
struct UMistHUDScreen : UMistHUDWidget {
	struct USizeBox* InformationWidget; // 0x2e0(0x08)
	struct UVerticalBox* TimersPanelWidget; // 0x2e8(0x08)
	struct UCanvasPanel* MessagesPanelWidget; // 0x2f0(0x08)
	struct UMistLogHudWidget* LogWidget; // 0x2f8(0x08)
	struct UMistMessageLogWidget* MessageLogWidget; // 0x300(0x08)
	struct TArray<struct UMistHUDWidget*> HUDWidgets; // 0x308(0x10)
	struct UMistMessageHudWidget* CurrentMessageWidget; // 0x318(0x08)
	char pad_320[0x20]; // 0x320(0x20)

	void HandleScreenOpened(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistHUDScreen.HandleScreenOpened // (Native|Event|Public|BlueprintEvent) // @ game+0x1111bb0
	void HandleScreenClosed(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistHUDScreen.HandleScreenClosed // (Native|Event|Public|BlueprintEvent) // @ game+0x1111a20
};

// Class Mist.MistHUDShortcutsEntryWidget
// Size: 0x368 (Inherited: 0x2c0)
struct UMistHUDShortcutsEntryWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UImage* IconWidget; // 0x2c8(0x08)
	struct FSlateBrush IconBrush; // 0x2d0(0x88)
	struct FName BindingName; // 0x358(0x08)
	struct UMistInputBindingHintWidget* InputBindingHintWidget; // 0x360(0x08)

	void OnSelected(); // Function Mist.MistHUDShortcutsEntryWidget.OnSelected // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnDeSelected(); // Function Mist.MistHUDShortcutsEntryWidget.OnDeSelected // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistHUDShortcutsWidget
// Size: 0x318 (Inherited: 0x2e0)
struct UMistHUDShortcutsWidget : UMistHUDWidget {
	struct UHorizontalBox* InputHintWidgetEntries; // 0x2e0(0x08)
	struct UImage* LeftInputImageWidget; // 0x2e8(0x08)
	struct UImage* RightInputImageWidget; // 0x2f0(0x08)
	struct UVerticalBox* KeyboardImageWidgetBox; // 0x2f8(0x08)
	struct UVerticalBox* HelpVoiceChat; // 0x300(0x08)
	float DisplayDelayInSec; // 0x308(0x04)
	char pad_30C[0xc]; // 0x30c(0x0c)

	void ReceiveExpanded(); // Function Mist.MistHUDShortcutsWidget.ReceiveExpanded // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveCollapsed(); // Function Mist.MistHUDShortcutsWidget.ReceiveCollapsed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleScreenOpened(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistHUDShortcutsWidget.HandleScreenOpened // (Final|Native|Private) // @ game+0x1111c80
	void HandleScreenClosed(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistHUDShortcutsWidget.HandleScreenClosed // (Final|Native|Private) // @ game+0x1111af0
};

// Class Mist.MistHUDTargetInfoWidget
// Size: 0x3f8 (Inherited: 0x2e0)
struct UMistHUDTargetInfoWidget : UMistHUDWidget {
	float DamageAreaShrinkingTime; // 0x2e0(0x04)
	float LingerTime; // 0x2e4(0x04)
	struct URichTextBlock* NameWidget; // 0x2e8(0x08)
	struct UImage* IconWidget; // 0x2f0(0x08)
	struct UWidget* WeightWidget; // 0x2f8(0x08)
	struct UTextBlock* WeightValueWidget; // 0x300(0x08)
	struct UBorder* DetailsWidget; // 0x308(0x08)
	struct URichTextBlock* OwnerNameWidget; // 0x310(0x08)
	struct UTextBlock* QualityWidget; // 0x318(0x08)
	struct UWidget* HealthWidget; // 0x320(0x08)
	struct UTextBlock* CurrentHpWidget; // 0x328(0x08)
	struct UProgressBar* HpProgressWidget; // 0x330(0x08)
	struct UProgressBar* RepairProgressWidget; // 0x338(0x08)
	struct UTextBlock* ArmorValueWidget; // 0x340(0x08)
	struct UProgressBar* DamageAreaProgressWidget; // 0x348(0x08)
	struct UWidget* CombatTimerWidget; // 0x350(0x08)
	struct UMistUICircularProgressBar* CombatTimerProgress; // 0x358(0x08)
	struct UWidget* UnlockWidget; // 0x360(0x08)
	struct UHorizontalBox* LockedArea; // 0x368(0x08)
	struct UHorizontalBox* UnlockedArea; // 0x370(0x08)
	struct UTextBlock* CurrentUnlockWidget; // 0x378(0x08)
	struct UProgressBar* UnlockProgressWidget; // 0x380(0x08)
	struct UProgressBar* UnlockAreaProgressWidget; // 0x388(0x08)
	struct UWidget* TimerWidget; // 0x390(0x08)
	struct UTextBlock* TimerWidgetText; // 0x398(0x08)
	struct UTextBlock* TimerWidgetValue; // 0x3a0(0x08)
	struct UWidget* DecayingWidget; // 0x3a8(0x08)
	char pad_3B0[0x30]; // 0x3b0(0x30)
	struct AActor* TargetActor; // 0x3e0(0x08)
	struct UPrimitiveComponent* TargetPrimitiveComponent; // 0x3e8(0x08)
	char pad_3F0[0x8]; // 0x3f0(0x08)

	void OnUnlocked(); // Function Mist.MistHUDTargetInfoWidget.OnUnlocked // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnLocked(); // Function Mist.MistHUDTargetInfoWidget.OnLocked // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistHumanoidMob
// Size: 0xac0 (Inherited: 0x970)
struct AMistHumanoidMob : AMistCharacter {
	char pad_970[0x49]; // 0x970(0x49)
	enum class EMistJogType JogType; // 0x9b9(0x01)
	char pad_9BA[0x2]; // 0x9ba(0x02)
	float JogDistanceThreshold; // 0x9bc(0x04)
	struct UAnimMontage* CurrentMontage; // 0x9c0(0x08)
	struct FText MobName; // 0x9c8(0x18)
	struct UTexture2D* MobIcon; // 0x9e0(0x08)
	struct TArray<struct UMistEquipmentItemTemplate*> InitialEquipment; // 0x9e8(0x10)
	struct UAnimMontage* TauntMontage; // 0x9f8(0x08)
	float StrengthEstimation; // 0xa00(0x04)
	int32_t Tribe; // 0xa04(0x04)
	bool bHasNet; // 0xa08(0x01)
	bool bCanJump; // 0xa09(0x01)
	char pad_A0A[0x2]; // 0xa0a(0x02)
	float ChanceToHaveNet; // 0xa0c(0x04)
	struct AMistProjectile* DefaultProjectileClass; // 0xa10(0x08)
	struct USoundBase* BecomeTargetSound; // 0xa18(0x08)
	struct USoundConcurrency* BecomeTargetSoundConcurrency; // 0xa20(0x08)
	struct UMistEquipmentComponent* EquipmentComponent; // 0xa28(0x08)
	struct FMistLootDesc Loot; // 0xa30(0x30)
	struct UMistContainerComponent* ContainerComponent; // 0xa60(0x08)
	struct UMistMeleeCombatComponent* CombatComponent; // 0xa68(0x08)
	bool bWantsJump; // 0xa70(0x01)
	bool bReachedApex; // 0xa71(0x01)
	bool bWantsLand; // 0xa72(0x01)
	bool bIsHighJump; // 0xa73(0x01)
	float AnimLandingPointTime; // 0xa74(0x04)
	float AnimLandingPointTimeHighJump; // 0xa78(0x04)
	char pad_A7C[0x14]; // 0xa7c(0x14)
	struct AMistMobCamp* MobCampOwner; // 0xa90(0x08)
	char pad_A98[0x8]; // 0xa98(0x08)
	struct AMistCharacter* TargetActor; // 0xaa0(0x08)
	char pad_AA8[0x18]; // 0xaa8(0x18)

	void OnRupuBeginCombat(); // Function Mist.MistHumanoidMob.OnRupuBeginCombat // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastSetTarget(struct AMistCharacter* Target); // Function Mist.MistHumanoidMob.MulticastSetTarget // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x1115930
	void MulticastSetIsAttacking(bool bIsAttacking); // Function Mist.MistHumanoidMob.MulticastSetIsAttacking // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x11158a0
	void HandleAnimSoundNotifyFired(struct USkeletalMeshComponent* MeshComponent, struct UAnimSequenceBase* Animation, struct FName& NotifyName, float VolumeMultiplier); // Function Mist.MistHumanoidMob.HandleAnimSoundNotifyFired // (Final|Native|Protected|HasOutParms) // @ game+0x1115190
	void BroadcastTaunt(); // Function Mist.MistHumanoidMob.BroadcastTaunt // (Net|NetReliableNative|Event|Public) // @ game+0x1115170
	void BroadcastStopMontage(struct UAnimMontage* Montage); // Function Mist.MistHumanoidMob.BroadcastStopMontage // (Net|NetReliableNative|Event|Public) // @ game+0x11150e0
	void BroadcastPlayMontage(struct UAnimMontage* Montage, bool bDisableMovement); // Function Mist.MistHumanoidMob.BroadcastPlayMontage // (Net|NetReliableNative|Event|Public) // @ game+0x1115010
};

// Class Mist.MistHumanoidMobAnimInstance
// Size: 0x2a0 (Inherited: 0x270)
struct UMistHumanoidMobAnimInstance : UAnimInstance {
	struct AMistCharacter* Character; // 0x268(0x08)
	float Speed; // 0x270(0x04)
	float Direction; // 0x274(0x04)
	enum class ECombatAction CurrentCombatAction; // 0x278(0x01)
	enum class ECombatDirection CurrentCombatDirection; // 0x279(0x01)
	int32_t HACK_CombatPlayIndex; // 0x27c(0x04)
	struct UMistMeleeWeaponType* WeaponType; // 0x280(0x08)
	struct UAnimSequence* CurrentCombatAnimation; // 0x288(0x08)
	struct UAnimSequence* CurrentCombatAnimation_2; // 0x290(0x08)
	struct UAnimSequence* CurrentCombatAnimation_3; // 0x298(0x08)
};

// Class Mist.MistHumanoidMobController
// Size: 0x600 (Inherited: 0x5f8)
struct AMistHumanoidMobController : AMistMobController {
	struct UMistAiMeleeControlComponent* MeleeControlComponent; // 0x5f8(0x08)
};

// Class Mist.MistHuntBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistHuntBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistHuntingMobPartySpawner
// Size: 0x418 (Inherited: 0x3c0)
struct AMistHuntingMobPartySpawner : AActor {
	struct AMistHumanoidMob* MobClass; // 0x3c0(0x08)
	struct AAIController* MobController; // 0x3c8(0x08)
	float Radius; // 0x3d0(0x04)
	int32_t PartySize; // 0x3d4(0x04)
	float AvgSpawnInterval; // 0x3d8(0x04)
	float DespawnTime; // 0x3dc(0x04)
	float ChaseRange; // 0x3e0(0x04)
	float TargetBonusAggro; // 0x3e4(0x04)
	float SpawnDistance; // 0x3e8(0x04)
	float DespawnRange; // 0x3ec(0x04)
	char pad_3F0[0x10]; // 0x3f0(0x10)
	struct TArray<struct AMistHumanoidMob*> SpawnedMobs; // 0x400(0x10)
	char pad_410[0x8]; // 0x410(0x08)
};

// Class Mist.MistHuntRupuQuest
// Size: 0x128 (Inherited: 0x110)
struct UMistHuntRupuQuest : UMistTutorialQuest {
	struct FName ChestTaskName; // 0x110(0x08)
	struct AMistHumanoidMob* HitActor; // 0x118(0x08)
	struct FName RupuTaskName; // 0x120(0x08)

	void KillTarget(struct APawn* Target); // Function Mist.MistHuntRupuQuest.KillTarget // (Final|Native|Private) // @ game+0x1115510
	void Interact(struct FMistInteraction& Interaction); // Function Mist.MistHuntRupuQuest.Interact // (Final|Native|Private|HasOutParms) // @ game+0x1115470
};

// Class Mist.MistIcChangedMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistIcChangedMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* TextWidget; // 0x2c0(0x08)
	struct UMistIntMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistIconButtonWidget
// Size: 0x640 (Inherited: 0x2e0)
struct UMistIconButtonWidget : UMistBaseButtonWidget {
	struct UScaleBox* IconScaleWidget; // 0x2e0(0x08)
	struct UImage* IconWidget; // 0x2e8(0x08)
	struct FSlateColor NormalTintColor; // 0x2f0(0x28)
	struct FSlateColor HoveredTintColor; // 0x318(0x28)
	struct FSlateColor PressedTintColor; // 0x340(0x28)
	struct FSlateColor DisabledTintColor; // 0x368(0x28)
	struct FSlateBrush IconBrush; // 0x390(0x88)
	enum class EHorizontalAlignment IconHorizontalAlignment; // 0x418(0x01)
	enum class EVerticalAlignment IconVerticalAlignment; // 0x419(0x01)
	enum class EStretchDirection IconStretchDirection; // 0x41a(0x01)
	char pad_41B[0x225]; // 0x41b(0x225)
};

// Class Mist.MistIdleServerGameMode
// Size: 0x460 (Inherited: 0x460)
struct AMistIdleServerGameMode : AGameModeBase {
};

// Class Mist.MistIgnitableComponent
// Size: 0x210 (Inherited: 0xf0)
struct UMistIgnitableComponent : UActorComponent {
	bool bBurnsOnItsOwn; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	float IgnitionAccumulationTimeLimit; // 0xf4(0x04)
	float IgnitionDamageThreshold; // 0xf8(0x04)
	float DetonationDamageThreshold; // 0xfc(0x04)
	float IgnitionDamageReductionByWaterImpact; // 0x100(0x04)
	float WetnessIncreaseByWaterImpact; // 0x104(0x04)
	float WetnessExtinguishThreshold; // 0x108(0x04)
	float WetnessAccumulationTimeLimit; // 0x10c(0x04)
	float ExternalExplosionPowerThreshold; // 0x110(0x04)
	float ExplosivePowerToSelfDamageMultiplier; // 0x114(0x04)
	float ExplosivePowerToDamageMultiplier; // 0x118(0x04)
	float BaseExplosionRadius; // 0x11c(0x04)
	int32_t SpilledGasBombLimit; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct UDamageType* ExplosionDamageTypeClass; // 0x128(0x08)
	struct FMistComponentReference ExplosionComponentRef; // 0x130(0x28)
	struct UMistItemTemplate* DefaultExplodedItemClass; // 0x158(0x08)
	struct UCurveFloat* RadiusByPowerCurve; // 0x160(0x08)
	float RadiusMultiplier; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct UCurveFloat* CharacterVelocityImpulseByPowerCurve; // 0x170(0x08)
	float CharacterVelocityImpulseMultiplier; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct UCurveFloat* WalkerImpulseByPowerCurve; // 0x180(0x08)
	float WalkerImpulseMultiplier; // 0x188(0x04)
	struct FVector2D BurningDurationRange; // 0x18c(0x08)
	char pad_194[0x44]; // 0x194(0x44)
	struct FDamageSource PendingDamageSource; // 0x1d8(0x30)
	char pad_208[0x8]; // 0x208(0x08)

	void ReceiveExplodeInternal(struct FVector& Location, float ExplosionPower); // Function Mist.MistIgnitableComponent.ReceiveExplodeInternal // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveExplodeExternal(struct FVector& Location, float ExplosionPower, float ExplosionRadius); // Function Mist.MistIgnitableComponent.ReceiveExplodeExternal // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBurningStarted(struct FVector& Location, bool bExplodes, float ExplosionPower, float ExplosionRadius); // Function Mist.MistIgnitableComponent.ReceiveBurningStarted // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveBurningFinished(); // Function Mist.MistIgnitableComponent.ReceiveBurningFinished // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnBurningEvent__DelegateSignature(); // DelegateFunction Mist.MistIgnitableComponent.OnBurningEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MulticastExplodeInternal(struct FVector Location, float InPower); // Function Mist.MistIgnitableComponent.MulticastExplodeInternal // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x11157e0
	void MulticastExplodeExternal(struct FVector Location, float InPower, float InRadius); // Function Mist.MistIgnitableComponent.MulticastExplodeExternal // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x11156e0
	void MulticastBurningStarted(struct FVector Location, bool bExplodes, float InPower, float InRadius); // Function Mist.MistIgnitableComponent.MulticastBurningStarted // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x1115590
	void MulticastBurningFinished(); // Function Mist.MistIgnitableComponent.MulticastBurningFinished // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d4dd0
	void HandleTakeAnyDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistIgnitableComponent.HandleTakeAnyDamage // (Final|Native|Private|HasOutParms) // @ game+0x11152f0
};

// Class Mist.MistInactiveObjectsRemovalComponent
// Size: 0x108 (Inherited: 0xf0)
struct UMistInactiveObjectsRemovalComponent : UActorComponent {
	float DespawnAfterSeconds; // 0xf0(0x04)
	float RetryInterval; // 0xf4(0x04)
	bool bForbidRemoveWithActivePlayersAround; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	float AcitvePlayersRadius; // 0xfc(0x04)
	char pad_100[0x8]; // 0x100(0x08)
};

// Class Mist.MistInformationMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistInformationMessageLogContentWidget : UMistMessageLogContentWidget {
	struct UTextBlock* MessageTextWidget; // 0x2c0(0x08)
	struct UMistTextMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistInfoTarget
// Size: 0x28 (Inherited: 0x28)
struct UMistInfoTarget : UInterface {
};

// Class Mist.MistInGameLoadingScreen
// Size: 0x3d8 (Inherited: 0x3a0)
struct UMistInGameLoadingScreen : UMistUIScreen {
	struct UBorder* BackgroundWidget; // 0x3a0(0x08)
	struct UScaleBox* ImageScaleWidget; // 0x3a8(0x08)
	struct UImage* ImageWidget; // 0x3b0(0x08)
	struct UBorder* HintBackgroundWidget; // 0x3b8(0x08)
	struct UHorizontalBox* HintContainerWidget; // 0x3c0(0x08)
	struct UCircularThrobber* HintProgressWidget; // 0x3c8(0x08)
	struct UTextBlock* HintTextWidget; // 0x3d0(0x08)
};

// Class Mist.MistInGameRenderActor
// Size: 0x3c8 (Inherited: 0x3c0)
struct AMistInGameRenderActor : AActor {
	struct UTextureRenderTarget2D* TargetTexture; // 0x3c0(0x08)

	void SetPath(struct FMistRealmMapPath PathData); // Function Mist.MistInGameRenderActor.SetPath // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void SetDisplayInfo(struct FMistRealmMapDisplayInfo DisplayInfo); // Function Mist.MistInGameRenderActor.SetDisplayInfo // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void SetDisplayedTiles(struct FMistRealmMapDisplayedTiles DisplayedTiles); // Function Mist.MistInGameRenderActor.SetDisplayedTiles // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistInputBindingHintWidget
// Size: 0x378 (Inherited: 0x2c0)
struct UMistInputBindingHintWidget : UMistUIWidget {
	struct UImage* HoldIconWidget; // 0x2c0(0x08)
	struct UWidget* ShiftWidget; // 0x2c8(0x08)
	struct UWidget* CtrlWidget; // 0x2d0(0x08)
	struct UWidget* AltWidget; // 0x2d8(0x08)
	struct USizeBox* KeySizePanelWidget; // 0x2e0(0x08)
	struct UImage* KeyIconWidget; // 0x2e8(0x08)
	struct UTextBlock* KeyLabelWidget; // 0x2f0(0x08)
	struct UTextBlock* LeftLabelWidget; // 0x2f8(0x08)
	struct UTextBlock* RightLabelWidget; // 0x300(0x08)
	struct FName BindingName; // 0x308(0x08)
	bool bOverrideKeyNameWithBindingName; // 0x310(0x01)
	bool bIsAxis; // 0x311(0x01)
	char pad_312[0x2]; // 0x312(0x02)
	float AxisScale; // 0x314(0x04)
	bool bHold; // 0x318(0x01)
	bool bIsChord; // 0x319(0x01)
	char pad_31A[0x6]; // 0x31a(0x06)
	struct FInputChord Chord; // 0x320(0x20)
	struct FText Label; // 0x340(0x18)
	struct FText OtherLabel; // 0x358(0x18)
	enum class ETextJustify Justification; // 0x370(0x01)
	char pad_371[0x7]; // 0x371(0x07)
};

// Class Mist.MistInputDebugItemWidget
// Size: 0x340 (Inherited: 0x2c0)
struct UMistInputDebugItemWidget : UMistUIWidget {
	struct UTexture2D* PressedTexture; // 0x2c0(0x08)
	struct UTexture2D* ReleasedTexture; // 0x2c8(0x08)
	struct UTexture2D* RepeatTexture; // 0x2d0(0x08)
	struct UTexture2D* DoubleClickTexture; // 0x2d8(0x08)
	struct UTexture2D* AxisTexture; // 0x2e0(0x08)
	struct UImage* InputEventImageWidget; // 0x2e8(0x08)
	struct UMistTextBlock* SourceTextWidget; // 0x2f0(0x08)
	struct UMistTextBlock* NameTextWidget; // 0x2f8(0x08)
	struct UMistInputBindingHintWidget* BindingHintWidget; // 0x300(0x08)
	struct UInputComponent* OriginInputComponent; // 0x308(0x08)
	char pad_310[0x30]; // 0x310(0x30)
};

// Class Mist.MistInputDebugWidget
// Size: 0x398 (Inherited: 0x2d8)
struct UMistInputDebugWidget : UMistDraggableDebugWidget {
	struct UVerticalBox* InputListWidget; // 0x2d8(0x08)
	char pad_2E0[0xb8]; // 0x2e0(0xb8)
};

// Class Mist.MistInputFocusDebugItemWidget
// Size: 0x300 (Inherited: 0x2c0)
struct UMistInputFocusDebugItemWidget : UMistUIWidget {
	struct UTexture2D* FocusReceivedTexture; // 0x2c0(0x08)
	struct UTexture2D* FocusLostTexture; // 0x2c8(0x08)
	struct UTexture2D* NavigateTexture; // 0x2d0(0x08)
	struct UImage* EventImageWidget; // 0x2d8(0x08)
	struct UMistTextBlock* HandlerTextWidget; // 0x2e0(0x08)
	char pad_2E8[0x18]; // 0x2e8(0x18)
};

// Class Mist.MistInputFocusDebugWidget
// Size: 0x2f0 (Inherited: 0x2d8)
struct UMistInputFocusDebugWidget : UMistDraggableDebugWidget {
	struct UVerticalBox* ListWidget; // 0x2d8(0x08)
	char pad_2E0[0x10]; // 0x2e0(0x10)
};

// Class Mist.MistInputHistoryDebugItemWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistInputHistoryDebugItemWidget : UMistUIWidget {
	struct UTexture2D* KeyDownTexture; // 0x2c0(0x08)
	struct UTexture2D* KeyUpTexture; // 0x2c8(0x08)
	struct UImage* InputEventImageWidget; // 0x2d0(0x08)
	struct UMistInputBindingHintWidget* BindingHintWidget; // 0x2d8(0x08)
	struct UMistTextBlock* HandlerTextWidget; // 0x2e0(0x08)
	char pad_2E8[0x38]; // 0x2e8(0x38)
};

// Class Mist.MistInputHistoryDebugWidget
// Size: 0x2f0 (Inherited: 0x2d8)
struct UMistInputHistoryDebugWidget : UMistDraggableDebugWidget {
	struct UVerticalBox* ListWidget; // 0x2d8(0x08)
	char pad_2E0[0x10]; // 0x2e0(0x10)
};

// Class Mist.MistInputSettingsWidget
// Size: 0x340 (Inherited: 0x2d0)
struct UMistInputSettingsWidget : UMistSettingsWidget {
	struct USlider* MouseSensitivitySliderWidget; // 0x2d0(0x08)
	struct USlider* GamepadCombatDirectionsDeadzoneSlider; // 0x2d8(0x08)
	struct USlider* RightStickHorizontalSensitivitySlider; // 0x2e0(0x08)
	struct USlider* RightStickVerticalSensitivitySlider; // 0x2e8(0x08)
	struct UCheckBox* EnableMouseSmoothingCheckBoxWidget; // 0x2f0(0x08)
	struct UCheckBox* InvertYAxisCheckBoxWidget; // 0x2f8(0x08)
	struct UCheckBox* ShowLocalizedKeysCheckBoxWidget; // 0x300(0x08)
	struct UCheckBox* EnableFluidBlockingCheckBoxWidget; // 0x308(0x08)
	struct USlider* FluidBlockingHorizontalSensitivitySliderWidget; // 0x310(0x08)
	struct USlider* FluidBlockingVerticalSensitivitySliderWidget; // 0x318(0x08)
	struct UCheckBox* DoubleTapDodgingCheckBoxWidget; // 0x320(0x08)
	struct UGridPanel* GridPanelWidget; // 0x328(0x08)
	struct UCheckBox* InvertWingsuitAxisCheckBox; // 0x330(0x08)
	struct UMistUserInputSettings* UserInputSettings; // 0x338(0x08)
};

// Class Mist.MistInstancedStructurePart
// Size: 0x638 (Inherited: 0x508)
struct AMistInstancedStructurePart : AMistBaseStructurePart {
	char pad_508[0x10]; // 0x508(0x10)
	struct TArray<struct FMistStructurePartInstance> Instances; // 0x518(0x10)
	struct FMistStructurePartInstanceConnectionMap InstanceConnections; // 0x528(0x50)
	struct TArray<struct UInstancedStaticMeshComponent*> InstancedMeshComponents; // 0x578(0x10)
	char pad_588[0xb0]; // 0x588(0xb0)

	void ReceiveDecayDamage(struct FTransform& Transform, int32_t ItemIndex); // Function Mist.MistInstancedStructurePart.ReceiveDecayDamage // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_Instances(); // Function Mist.MistInstancedStructurePart.OnRep_Instances // (Final|Native|Private) // @ game+0x111a100
	void OnRep_InstanceConnections(); // Function Mist.MistInstancedStructurePart.OnRep_InstanceConnections // (Final|Native|Private) // @ game+0x111a0e0
	void MulticastSetInstancesHealthBatch(struct TArray<int32_t> InstancesArray, struct TArray<float> HealthArray, bool bRaiseDecayDamageEvent); // Function Mist.MistInstancedStructurePart.MulticastSetInstancesHealthBatch // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1119f30
	void MulticastSetInstanceHealth(int32_t InstanceIndex, float NewHealth); // Function Mist.MistInstancedStructurePart.MulticastSetInstanceHealth // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1119e60
	void MulticastRemoveInstanceArray(struct TArray<int32_t> InDelayedRemovedInstances); // Function Mist.MistInstancedStructurePart.MulticastRemoveInstanceArray // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1119dc0
	void MulticastRemoveInstance(int32_t InstanceIndex); // Function Mist.MistInstancedStructurePart.MulticastRemoveInstance // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1119d30
	void MulticastAddInstance(int32_t InstanceIndex, struct FTransform InstanceTransform, int32_t InstanceQuality, int32_t ConnectionId); // Function Mist.MistInstancedStructurePart.MulticastAddInstance // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x1119ba0
	void HandleDelayedRemoveTimer(); // Function Mist.MistInstancedStructurePart.HandleDelayedRemoveTimer // (Final|Native|Private) // @ game+0x1119b00
};

// Class Mist.MistInteractable
// Size: 0x28 (Inherited: 0x28)
struct UMistInteractable : UInterface {
};

// Class Mist.MistInteractableInventoryComponent
// Size: 0x260 (Inherited: 0x1f0)
struct UMistInteractableInventoryComponent : UMistInteractableComponent {
	struct FMulticastInlineDelegate OnOpened; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnClosed; // 0x200(0x10)
	struct FMistComponentReference ContainerRef; // 0x210(0x28)
	bool bShowAllContainers; // 0x238(0x01)
	char pad_239[0x7]; // 0x239(0x07)
	struct UMistBaseActorWidget* CustomInventoryWidget; // 0x240(0x08)
	struct FMistInteraction CharacterInteraction; // 0x248(0x18)

	void ReceiveOpened(struct AMistCharacter* Character); // Function Mist.MistInteractableInventoryComponent.ReceiveOpened // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveClosed(struct AMistCharacter* Character); // Function Mist.MistInteractableInventoryComponent.ReceiveClosed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void NotifyScreenOpen(struct UMistUIScreen* UIScreen); // Function Mist.MistInteractableInventoryComponent.NotifyScreenOpen // (Final|Native|Private) // @ game+0x111a060
	void HandleScreenClose(struct UMistUIScreen* UIScreen); // Function Mist.MistInteractableInventoryComponent.HandleScreenClose // (Final|Native|Private) // @ game+0x1119b20
	void Event__DelegateSignature(struct AMistCharacter* Character); // DelegateFunction Mist.MistInteractableInventoryComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistInteractionEntryWidget
// Size: 0x350 (Inherited: 0x2c0)
struct UMistInteractionEntryWidget : UMistUIWidget {
	struct UWidget* ActiveBackgroundWidget; // 0x2c0(0x08)
	struct UWidget* InactiveBackgroundWidget; // 0x2c8(0x08)
	struct UMistInteractionIconWidget* ScrollWidget; // 0x2d0(0x08)
	struct UMistInteractionIconWidget* ActionButtonWidget; // 0x2d8(0x08)
	struct URichTextBlock* ActiveTextWidget; // 0x2e0(0x08)
	struct URichTextBlock* InactiveTextWidget; // 0x2e8(0x08)
	struct FLinearColor CanUseTextColor; // 0x2f0(0x10)
	struct FLinearColor CantUseTextColor; // 0x300(0x10)
	struct FLinearColor CantUseWithReasonTextColor; // 0x310(0x10)
	struct FLinearColor SelectedCanUseTextColor; // 0x320(0x10)
	struct FLinearColor SelectedCantUseTextColor; // 0x330(0x10)
	struct FLinearColor SelectedCantUseWithReasonTextColor; // 0x340(0x10)

	void ActivateWidget(); // Function Mist.MistInteractionEntryWidget.ActivateWidget // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistInteractionIconWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistInteractionIconWidget : UMistUIWidget {
	struct UImage* BackgroundImage; // 0x2c0(0x08)
	struct UTextBlock* OverlayText; // 0x2c8(0x08)
	struct UMistInputBindingHintWidget* BindingWidget; // 0x2d0(0x08)
	struct FName UseTag; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class Mist.MistInteractionItemDetailsWidget
// Size: 0x320 (Inherited: 0x2e0)
struct UMistInteractionItemDetailsWidget : UMistItemDetailsWidget {
	struct UHorizontalBox* UseDefaultLine; // 0x2e0(0x08)
	struct UHorizontalBox* UseConsumeLine; // 0x2e8(0x08)
	struct UHorizontalBox* UseEquipLine; // 0x2f0(0x08)
	struct UHorizontalBox* UseUnequipLine; // 0x2f8(0x08)
	struct UHorizontalBox* DragLine; // 0x300(0x08)
	struct UHorizontalBox* ModifierSplitLine; // 0x308(0x08)
	struct UHorizontalBox* ModifierSingleLine; // 0x310(0x08)
	struct UHorizontalBox* ModifierDropLine; // 0x318(0x08)
};

// Class Mist.MistInteractionTraderWidget
// Size: 0x2f8 (Inherited: 0x2e0)
struct UMistInteractionTraderWidget : UMistItemDetailsWidget {
	struct UHorizontalBox* UseAcquireLine; // 0x2e0(0x08)
	struct UHorizontalBox* UseMissingFlotsLine; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)
};

// Class Mist.MistInteractionWidget
// Size: 0x310 (Inherited: 0x2e0)
struct UMistInteractionWidget : UMistHUDWidget {
	struct UScrollBox* ScrollBoxWidget; // 0x2e0(0x08)
	struct UProgressBar* ProgressBarWidget; // 0x2e8(0x08)
	struct UProgressBar* MarqueeWidget; // 0x2f0(0x08)
	struct TArray<struct UMistInteractionEntryWidget*> EntryWidgets; // 0x2f8(0x10)
	char pad_308[0x8]; // 0x308(0x08)

	void ActivateWidget(); // Function Mist.MistInteractionWidget.ActivateWidget // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistInteractorComponent
// Size: 0x328 (Inherited: 0x118)
struct UMistInteractorComponent : UMistPlayerComponent {
	char pad_118[0x18]; // 0x118(0x18)
	struct FMulticastInlineDelegate OnSelectionChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnInteract; // 0x140(0x10)
	enum class EMistInteractionAnimationType AnimationToPlayType; // 0x150(0x01)
	char pad_151[0x3]; // 0x151(0x03)
	float SweepSphereRadius; // 0x154(0x04)
	float VisibilitySweepSphereRadius; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct TArray<struct FMistSortedInteractable> SortedInteractables; // 0x160(0x10)
	char pad_170[0x8]; // 0x170(0x08)
	struct FMistInteractableObject LastSelectedInteractable; // 0x178(0x18)
	struct FMistInteractableObject CurrentSelection; // 0x190(0x18)
	char pad_1A8[0x18]; // 0x1a8(0x18)
	struct TMap<struct FMistInteractableObject, struct FMistInteractableData> ClientInteractables; // 0x1c0(0x50)
	struct TArray<struct FReplaceInteractablesEntry> ReplaceInteractablesStack; // 0x210(0x10)
	struct FMistInteractableObject HighlightedInteractable; // 0x220(0x18)
	struct TSet<struct UMeshComponent*> HighlightedMeshes; // 0x238(0x50)
	struct FMistInteractableObject InteractableInUse; // 0x288(0x18)
	struct FMistInteractableProperties InteractableInUseProperties; // 0x2a0(0x14)
	char pad_2B4[0x4]; // 0x2b4(0x04)
	struct FMistInteractionQuery InteractableInUseQuery; // 0x2b8(0x68)
	char pad_320[0x8]; // 0x320(0x08)

	void ServerStopInteracting(); // Function Mist.MistInteractorComponent.ServerStopInteracting // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c2490
	void ServerStartInteracting(struct FMistInteractableObject Interactable); // Function Mist.MistInteractorComponent.ServerStartInteracting // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111a120
	void SelectionChangedEvent__DelegateSignature(struct AActor* Actor, struct UActorComponent* Component, int32_t InstanceIndex); // DelegateFunction Mist.MistInteractorComponent.SelectionChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void InteractEvent__DelegateSignature(struct FMistInteraction& Interaction); // DelegateFunction Mist.MistInteractorComponent.InteractEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
	void ClientSetInteractableInUse(struct FMistInteractableObject Interactable); // Function Mist.MistInteractorComponent.ClientSetInteractableInUse // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1119a70
	void ClientEndInteractableInUse(struct FMistInteractableObject Interactable, bool bCanceled); // Function Mist.MistInteractorComponent.ClientEndInteractableInUse // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1119990
	void ClientClearInteractableInUse(struct FMistInteractableObject Interactable); // Function Mist.MistInteractorComponent.ClientClearInteractableInUse // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1119900
};

// Class Mist.MistIntermediateCurrencyTraderComponent
// Size: 0x230 (Inherited: 0x1f0)
struct UMistIntermediateCurrencyTraderComponent : UMistInteractableComponent {
	char pad_1F0[0x20]; // 0x1f0(0x20)
	int32_t OffersNumber; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct UMistIntermediateCurrencyTraderWidget* InteractionWidget; // 0x218(0x08)
	struct TArray<struct FMistICTraderItemInfo> PurchasableItems; // 0x220(0x10)

	void OnRep_PurchasableItems(); // Function Mist.MistIntermediateCurrencyTraderComponent.OnRep_PurchasableItems // (Final|Native|Private) // @ game+0x111e2a0
	void MulticastUpdatePurchasableItems(struct TArray<struct FMistICTraderItemInfo> NewItems); // Function Mist.MistIntermediateCurrencyTraderComponent.MulticastUpdatePurchasableItems // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x111e090
};

// Class Mist.MistIntermediateCurrencyTraderItemWidget
// Size: 0x338 (Inherited: 0x2c0)
struct UMistIntermediateCurrencyTraderItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UTextBlock* ItemNameWidget; // 0x2c8(0x08)
	struct UWidget* SelectionWidget; // 0x2d0(0x08)
	struct UImage* CategoryIconWidget; // 0x2d8(0x08)
	struct UImage* ImageWidget; // 0x2e0(0x08)
	struct UTextBlock* AmountGloballyOwned; // 0x2e8(0x08)
	struct UTextBlock* AmountLocallyOwned; // 0x2f0(0x08)
	struct UTextBlock* OfferAmount; // 0x2f8(0x08)
	struct UMistShopBuyButtonWidget* BuyButtonWidget; // 0x300(0x08)
	struct UMistIconButtonWidget* PreviewButtonWidget; // 0x308(0x08)
	struct UMenuAnchor* PopupMenuAnchorWidget; // 0x310(0x08)
	struct UWidgetAnimation* Hover; // 0x318(0x08)
	struct UMistICTraderItemInfoListEntry* ItemInfo; // 0x320(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)

	void HandlePreviewClicked(); // Function Mist.MistIntermediateCurrencyTraderItemWidget.HandlePreviewClicked // (Final|Native|Private) // @ game+0x111df80
	struct UWidget* HandleGetPopupMenu(); // Function Mist.MistIntermediateCurrencyTraderItemWidget.HandleGetPopupMenu // (Final|Native|Private) // @ game+0x111d8b0
	void HandleBuyClicked(); // Function Mist.MistIntermediateCurrencyTraderItemWidget.HandleBuyClicked // (Final|Native|Private) // @ game+0x111d370
};

// Class Mist.MistIntermediateCurrencyTraderPreviewWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistIntermediateCurrencyTraderPreviewWidget : UMistUIWidget {
	struct UMistMTXPreviewWidget* PreviewWidget; // 0x2c0(0x08)
	struct UCanvasPanel* PreviewPanel; // 0x2c8(0x08)
	struct UImage* PreviewedItemIcon; // 0x2d0(0x08)
	struct UMistIconButtonWidget* ClosePreviewButton; // 0x2d8(0x08)

	void HandleClosePreview(); // Function Mist.MistIntermediateCurrencyTraderPreviewWidget.HandleClosePreview // (Final|Native|Private) // @ game+0x111d650
};

// Class Mist.MistICTraderItemInfoListEntry
// Size: 0xa0 (Inherited: 0x28)
struct UMistICTraderItemInfoListEntry : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct UMistIntermediateCurrencyTraderWidget* TraderWidget; // 0x98(0x08)
};

// Class Mist.MistIntermediateCurrencyTraderWidget
// Size: 0x378 (Inherited: 0x2c0)
struct UMistIntermediateCurrencyTraderWidget : UMistUIWidget {
	struct UListView* ItemListWidget; // 0x2c0(0x08)
	struct UGridPanel* ItemSlotPopupContainer; // 0x2c8(0x08)
	struct UTextBlock* TimerWidget; // 0x2d0(0x08)
	struct UGridPanel* VoucherPanel; // 0x2d8(0x08)
	char pad_2E0[0x70]; // 0x2e0(0x70)
	struct UMistIntermediateCurrencyTraderPreviewWidget* PreviewWidget; // 0x350(0x08)
	struct TArray<struct UMistICTraderItemInfoListEntry*> ItemInfoObjects; // 0x358(0x10)
	struct UMistIntermediateCurrencyTraderComponent* Trader; // 0x368(0x08)
	struct UWidget* FocusedPanel; // 0x370(0x08)

	void OwnedItemsUpdated(); // Function Mist.MistIntermediateCurrencyTraderWidget.OwnedItemsUpdated // (Final|Native|Private) // @ game+0x111e2c0
	void OnIntermediateCurrencyUpdated(struct AMistOasisPlayerState* PlayerState, uint64_t NewIC); // Function Mist.MistIntermediateCurrencyTraderWidget.OnIntermediateCurrencyUpdated // (Final|Native|Private) // @ game+0x111e1e0
	void HandleInventoryUpdated(); // Function Mist.MistIntermediateCurrencyTraderWidget.HandleInventoryUpdated // (Final|Native|Private) // @ game+0x10cc500
	void HandleInputContainerSlotUpdate(struct UMistContainerComponent* Container, int32_t InSlot, struct UMistItemTemplate* Item); // Function Mist.MistIntermediateCurrencyTraderWidget.HandleInputContainerSlotUpdate // (Final|Native|Private) // @ game+0x10dc800
};

// Class Mist.MistIntermediateCurrencyVoucherItemWidget
// Size: 0x370 (Inherited: 0x2c0)
struct UMistIntermediateCurrencyVoucherItemWidget : UMistUIWidget {
	struct UMistUIButton* RedeemButton; // 0x2c0(0x08)
	struct UWidgetAnimation* FrameAnimation; // 0x2c8(0x08)
	struct UWidgetAnimation* RedeemButtonAnimation; // 0x2d0(0x08)
	struct UTextBlock* OwnedAmount; // 0x2d8(0x08)
	struct UMistShopCurrencyWidget* CurrencyWidget; // 0x2e0(0x08)
	struct UMenuAnchor* PopupMenuAnchorWidget; // 0x2e8(0x08)
	struct UMistIntermediateCurrencyTraderWidget* TraderWidget; // 0x2f0(0x08)
	char pad_2F8[0x78]; // 0x2f8(0x78)

	struct UWidget* HandleGetPopupMenu(); // Function Mist.MistIntermediateCurrencyVoucherItemWidget.HandleGetPopupMenu // (Final|Native|Private) // @ game+0x111d8e0
	void HandleBuyClicked(struct UMistUIButton* Sender); // Function Mist.MistIntermediateCurrencyVoucherItemWidget.HandleBuyClicked // (Final|Native|Private) // @ game+0x111d390
};

// Class Mist.MistIntroSceneController
// Size: 0x428 (Inherited: 0x3c0)
struct AMistIntroSceneController : AActor {
	bool bAutoPlay; // 0x3c0(0x01)
	char pad_3C1[0xf]; // 0x3c1(0x0f)
	struct ULevelSequence* LevelSequence; // 0x3d0(0x08)
	struct ALevelSequenceActor* LevelSequenceActor; // 0x3d8(0x08)
	struct ULevelSequencePlayer* LevelSequencePlayer; // 0x3e0(0x08)
	struct UAnimMontage* TransitionAnimMontage; // 0x3e8(0x08)
	struct AMistPlayer* Player; // 0x3f0(0x08)
	struct AMistOasisPlayerController* PlayerController; // 0x3f8(0x08)
	struct UCameraComponent* LastUsedCinematicCamera; // 0x400(0x08)
	char pad_408[0x20]; // 0x408(0x20)

	void HandleIntroSceneStop(); // Function Mist.MistIntroSceneController.HandleIntroSceneStop // (Final|Native|Private) // @ game+0x111da50
	void HandleIntroScenePlayReverse(); // Function Mist.MistIntroSceneController.HandleIntroScenePlayReverse // (Final|Native|Private) // @ game+0x111da30
	void HandleIntroScenePlay(); // Function Mist.MistIntroSceneController.HandleIntroScenePlay // (Final|Native|Private) // @ game+0x111da10
	void HandleIntroScenePause(); // Function Mist.MistIntroSceneController.HandleIntroScenePause // (Final|Native|Private) // @ game+0x111d9f0
	void HandleIntroSceneFinished(); // Function Mist.MistIntroSceneController.HandleIntroSceneFinished // (Final|Native|Private) // @ game+0x111d9d0
	void HandleCameraCut(struct UCameraComponent* CameraComponent); // Function Mist.MistIntroSceneController.HandleCameraCut // (Final|Native|Private) // @ game+0x111d410
};

// Class Mist.MistInventoryComponent
// Size: 0x2a0 (Inherited: 0x118)
struct UMistInventoryComponent : UMistPlayerComponent {
	char pad_118[0x48]; // 0x118(0x48)
	struct FMulticastInlineDelegate OnItemUsed; // 0x160(0x10)
	struct FMulticastInlineDelegate OnItemAdded; // 0x170(0x10)
	struct FMulticastInlineDelegate OnItemMoved; // 0x180(0x10)
	struct UMistContainerComponent* DropContainerComponent; // 0x190(0x08)
	struct UMistContainerComponent* TransactionContainerComponent; // 0x198(0x08)
	struct AActor* OpenContainerActor; // 0x1a0(0x08)
	struct TArray<struct UMistContainerComponent*> OpenContainerComponents; // 0x1a8(0x10)
	char pad_1B8[0x8]; // 0x1b8(0x08)
	struct FMistClanOwnershipMonitor OwnershipMonitor; // 0x1c0(0x60)
	struct TArray<struct FMistInventoryOperationLeftovers> OperationLeftovers; // 0x220(0x10)
	char pad_230[0x8]; // 0x230(0x08)
	struct TSet<struct UMistContainerComponent*> TransactedContainerUpdates; // 0x238(0x50)
	char pad_288[0x18]; // 0x288(0x18)

	void ServerUse(struct FMistInventoryOperationSource Source, struct FMistInventoryOperationParams Params, bool bAlternativeAction); // Function Mist.MistInventoryComponent.ServerUse // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111eb40
	void ServerSwap(struct FMistInventoryOperationSource Source, struct FMistInventoryOperationTarget Target, int64_t CompletionEventId); // Function Mist.MistInventoryComponent.ServerSwap // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e9f0
	void ServerSort(struct FMistInventoryOperationTarget Target); // Function Mist.MistInventoryComponent.ServerSort // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e950
	void ServerRevertTransaction(); // Function Mist.MistInventoryComponent.ServerRevertTransaction // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e930
	void ServerRepair(struct FMistInventoryOperationSource Source, struct FMistInventoryOperationTarget Target, int64_t CompletionEventId); // Function Mist.MistInventoryComponent.ServerRepair // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e7e0
	void ServerRemove(struct FMistInventoryOperationSource Source, int64_t CompletionEventId); // Function Mist.MistInventoryComponent.ServerRemove // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e6f0
	void ServerOpen(struct AActor* InContainerActor, struct TArray<struct UMistContainerComponent*> InContainerComponents); // Function Mist.MistInventoryComponent.ServerOpen // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e610
	void ServerMove(struct FMistInventoryOperationSource Source, struct FMistInventoryOperationTarget Target, int64_t CompletionEventId); // Function Mist.MistInventoryComponent.ServerMove // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e4c0
	void ServerMerge(struct FMistInventoryOperationSource Source, struct FMistInventoryOperationTarget Target, int64_t CompletionEventId); // Function Mist.MistInventoryComponent.ServerMerge // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e370
	void ServerClose(struct AActor* InContainerActor); // Function Mist.MistInventoryComponent.ServerClose // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e2e0
	void RemoveEvent__DelegateSignature(struct AActor* Source, struct UMistItemTemplate* SourceItemTemplate, int32_t NumItemsToRemove); // DelegateFunction Mist.MistInventoryComponent.RemoveEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MoveEvent__DelegateSignature(struct AActor* Source, struct UMistItemTemplate* SourceItemTemplate, struct UMistContainerComponent* TargetContainer, int32_t NumItemsToMove); // DelegateFunction Mist.MistInventoryComponent.MoveEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ItemEvent__DelegateSignature(int32_t SoundId, struct UMistItemTemplate* ItemTemplate, int32_t Count); // DelegateFunction Mist.MistInventoryComponent.ItemEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleOpenContainerOwnershipChanged(struct UMistClanOwnershipComponent* Sender); // Function Mist.MistInventoryComponent.HandleOpenContainerOwnershipChanged // (Final|Native|Private) // @ game+0x111df00
	void HandleOpenContainerComponentDestroyed(struct UActorComponent* DestroyedComponent); // Function Mist.MistInventoryComponent.HandleOpenContainerComponentDestroyed // (Final|Native|Private) // @ game+0x111de80
	void HandleOpenContainerActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistInventoryComponent.HandleOpenContainerActorDestroyed // (Final|Native|Private) // @ game+0x111de00
	void HandleCharacterStateChanged(struct AMistCharacter* InCharacter, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistInventoryComponent.HandleCharacterStateChanged // (Final|Native|Private) // @ game+0x111d550
	void HandleCharacterPossessed(struct AMistCharacter* InCharacter, struct AController* NewController); // Function Mist.MistInventoryComponent.HandleCharacterPossessed // (Final|Native|Private) // @ game+0x111d490
	void ClientUse(struct FMistInventoryOperationSource Source, struct FMistInventoryOperationParams Params, bool bAlternativeAction); // Function Mist.MistInventoryComponent.ClientUse // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x111d1b0
	void ClientUpdateContainer(struct UMistContainerComponent* Container, int32_t Capacity, int32_t MaxStackOverride, struct TArray<struct FMistContainerSlotUpdateData> UpdatedSlots); // Function Mist.MistInventoryComponent.ClientUpdateContainer // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x111d060
	void ClientOpen(struct AActor* InContainerActor, struct TArray<struct UMistContainerComponent*> InContainerComponents); // Function Mist.MistInventoryComponent.ClientOpen // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x111cf80
	void ClientNotifyUnreliableCompletionEvent(int64_t EventId, int32_t Result); // Function Mist.MistInventoryComponent.ClientNotifyUnreliableCompletionEvent // (Final|Net|Native|Event|Private|NetClient) // @ game+0x111ceb0
	void ClientNotifyReliableCompletionEvent(int64_t EventId, int32_t Result); // Function Mist.MistInventoryComponent.ClientNotifyReliableCompletionEvent // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x111cde0
	void ClientEndUpdate(); // Function Mist.MistInventoryComponent.ClientEndUpdate // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10c2490
	void ClientClose(struct AActor* InContainerActor); // Function Mist.MistInventoryComponent.ClientClose // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10dd1b0
};

// Class Mist.MistInventoryWidget
// Size: 0x4e8 (Inherited: 0x2c0)
struct UMistInventoryWidget : UMistUIWidget {
	struct FSlateSound QuickSlotUpdateSound; // 0x2c0(0x18)
	struct UMistContainerWidget* LeftPouchContainerWidget; // 0x2d8(0x08)
	struct UMistContainerWidget* RightPouchContainerWidget; // 0x2e0(0x08)
	struct UMistContainerWidget* BackpackContainerWidget; // 0x2e8(0x08)
	struct UMistContainerWidget* CharacterContainerWidget; // 0x2f0(0x08)
	struct UMistUIButton* EquipmentButton; // 0x2f8(0x08)
	struct UButton* ConsumablesFilterContainerWidget; // 0x300(0x08)
	struct UButton* ResourcesFilterContainerWidget; // 0x308(0x08)
	struct UButton* EquipmentFilterContainerWidget; // 0x310(0x08)
	struct UCheckBox* ConsumablesFilterWidget; // 0x318(0x08)
	struct UCheckBox* ResourcesFilterWidget; // 0x320(0x08)
	struct UCheckBox* EquipmentFilterWidget; // 0x328(0x08)
	struct UTextBlock* WeightWidget; // 0x330(0x08)
	struct UMistItemSlotWidget* BeltSlotWidget; // 0x338(0x08)
	struct UMistItemSlotWidget* PouchLeftSlotWidget; // 0x340(0x08)
	struct UMistItemSlotWidget* PouchRightSlotWidget; // 0x348(0x08)
	struct UMistItemSlotWidget* WeaponRSlot; // 0x350(0x08)
	struct UMistItemSlotWidget* WeaponLSlot; // 0x358(0x08)
	struct UMistItemSlotWidget* Slot0Widget; // 0x360(0x08)
	struct UMistItemSlotWidget* Slot1Widget; // 0x368(0x08)
	struct UMistItemSlotWidget* Slot2Widget; // 0x370(0x08)
	struct UMistItemSlotWidget* Slot3Widget; // 0x378(0x08)
	struct UMistItemSlotWidget* Slot4Widget; // 0x380(0x08)
	struct UMistItemSlotWidget* Slot5Widget; // 0x388(0x08)
	struct UMistItemSlotWidget* Slot6Widget; // 0x390(0x08)
	struct UGridPanel* LeftItemSlotPopupContainer; // 0x398(0x08)
	struct UGridPanel* RightItemSlotPopupContainer; // 0x3a0(0x08)
	struct UTextBlock* MoneyWidget; // 0x3a8(0x08)
	struct UTextBlock* IntermediateCurrencyWidget; // 0x3b0(0x08)
	struct UPanelWidget* IntermediateCurrencyPanel; // 0x3b8(0x08)
	struct UMistItemCategoryGroup* ConsumablesItemCategoryGroup; // 0x3c0(0x08)
	struct UMistItemCategoryGroup* ResourcesItemCategoryGroup; // 0x3c8(0x08)
	struct UMistItemCategoryGroup* EquipmentItemCategoryGroup; // 0x3d0(0x08)
	struct UMistUIWidget* IcTooltipWidgetClass; // 0x3d8(0x08)
	char pad_3E0[0x8]; // 0x3e0(0x08)
	struct TArray<struct UMistItemCategory*> ConsumablesItemCategories; // 0x3e8(0x10)
	struct TArray<struct UMistItemCategory*> ResourcesItemCategories; // 0x3f8(0x10)
	struct TArray<struct UMistItemCategory*> EquipmentItemCategories; // 0x408(0x10)
	struct TMap<enum class EEquipmentSlot, struct UMistItemSlotWidget*> EquipmentSlotWidgets; // 0x418(0x50)
	struct UMistItemSlotWidget* ItemSlotWidgets[0x7]; // 0x468(0x38)
	char pad_4A0[0x48]; // 0x4a0(0x48)

	void SetupContainers(struct UMistEquipmentComponent* EqComp, enum class EEquipmentSlot EqSlot); // Function Mist.MistInventoryWidget.SetupContainers // (Final|Native|Private) // @ game+0x111ecd0
	void HideEquipmentButton(); // Function Mist.MistInventoryWidget.HideEquipmentButton // (Final|Native|Public) // @ game+0x111e070
	void HandleWeightChanged(); // Function Mist.MistInventoryWidget.HandleWeightChanged // (Final|Native|Private) // @ game+0x111e050
	void HandleResourcesFilterShow(); // Function Mist.MistInventoryWidget.HandleResourcesFilterShow // (Final|Native|Private) // @ game+0x111e030
	void HandleResourcesFilterChanged(bool bIsChecked); // Function Mist.MistInventoryWidget.HandleResourcesFilterChanged // (Final|Native|Private) // @ game+0x111dfa0
	struct UWidget* HandleNavToRightPouch(enum class EUINavigation Nav); // Function Mist.MistInventoryWidget.HandleNavToRightPouch // (Final|Native|Public|BlueprintCallable) // @ game+0x111dd70
	struct UWidget* HandleNavToLeftPouch(enum class EUINavigation Nav); // Function Mist.MistInventoryWidget.HandleNavToLeftPouch // (Final|Native|Public|BlueprintCallable) // @ game+0x111dce0
	struct UWidget* HandleNavToHotbar(enum class EUINavigation Nav); // Function Mist.MistInventoryWidget.HandleNavToHotbar // (Final|Native|Public|BlueprintCallable) // @ game+0x111dc50
	struct UWidget* HandleNavToCharacterContainer(enum class EUINavigation Nav); // Function Mist.MistInventoryWidget.HandleNavToCharacterContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x111dbc0
	struct UWidget* HandleNavToBackpack(enum class EUINavigation Nav); // Function Mist.MistInventoryWidget.HandleNavToBackpack // (Final|Native|Public|BlueprintCallable) // @ game+0x111db30
	void HandleMoneyChanged(struct AMistOasisPlayerState* Sender, uint64_t NewMoney); // Function Mist.MistInventoryWidget.HandleMoneyChanged // (Final|Native|Private) // @ game+0x111da70
	void HandleIntermediateCurrencyChanged(struct AMistOasisPlayerState* Sender, uint64_t NewIC); // Function Mist.MistInventoryWidget.HandleIntermediateCurrencyChanged // (Final|Native|Private) // @ game+0x111d910
	void HandleFilterHide(); // Function Mist.MistInventoryWidget.HandleFilterHide // (Final|Native|Private) // @ game+0x111d890
	void HandleEquipmentSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot InSlot); // Function Mist.MistInventoryWidget.HandleEquipmentSlotUpdate // (Final|Native|Private) // @ game+0x111d7d0
	void HandleEquipmentFilterShow(); // Function Mist.MistInventoryWidget.HandleEquipmentFilterShow // (Final|Native|Private) // @ game+0x111d7b0
	void HandleEquipmentFilterChanged(bool bIsChecked); // Function Mist.MistInventoryWidget.HandleEquipmentFilterChanged // (Final|Native|Private) // @ game+0x111d720
	void HandleConsumablesFilterShow(); // Function Mist.MistInventoryWidget.HandleConsumablesFilterShow // (Final|Native|Private) // @ game+0x111d700
	void HandleConsumablesFilterChanged(bool bIsChecked); // Function Mist.MistInventoryWidget.HandleConsumablesFilterChanged // (Final|Native|Private) // @ game+0x111d670
	struct UWidget* CreateIcToolTipWidget(); // Function Mist.MistInventoryWidget.CreateIcToolTipWidget // (Final|Native|Private) // @ game+0x111d340
};

// Class Mist.MistInviteCandidateWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistInviteCandidateWidget : UMistUIWidget {
	struct URichTextBlock* PlayerNameTextWidget; // 0x2c0(0x08)
	struct UButton* InviteButtonWidget; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)

	void HandleInviteClicked(); // Function Mist.MistInviteCandidateWidget.HandleInviteClicked // (Final|Native|Private) // @ game+0x1122b20
};

// Class Mist.MistInviteNotificationWidget
// Size: 0x330 (Inherited: 0x2e0)
struct UMistInviteNotificationWidget : UMistHUDWidget {
	char pad_2E0[0x50]; // 0x2e0(0x50)

	void OnWidgetAppeared(); // Function Mist.MistInviteNotificationWidget.OnWidgetAppeared // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistItemRarity
// Size: 0x60 (Inherited: 0x30)
struct UMistItemRarity : UDataAsset {
	struct FText Name; // 0x30(0x18)
	struct FColor Color; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UTexture2D* RarityTexture; // 0x50(0x08)
	int32_t Order; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Mist.MistItemCategory
// Size: 0x70 (Inherited: 0x30)
struct UMistItemCategory : UDataAsset {
	struct FText Name; // 0x30(0x18)
	struct FText ShortName; // 0x48(0x18)
	struct UMistItemCategoryGroup* Parent; // 0x60(0x08)
	int32_t Order; // 0x68(0x04)
	enum class EMistBuildCategory BuildCategory; // 0x6c(0x01)
	char pad_6D[0x3]; // 0x6d(0x03)
};

// Class Mist.MistItemCategoryGroup
// Size: 0xd0 (Inherited: 0x30)
struct UMistItemCategoryGroup : UDataAsset {
	struct FText Name; // 0x30(0x18)
	struct UTexture2D* CategoryTexture; // 0x48(0x08)
	struct FLinearColor CategoryColor; // 0x50(0x10)
	struct FSlateColor QualityTint; // 0x60(0x28)
	struct FText QualityHintText; // 0x88(0x18)
	struct UMistItemCategoryGroup* Parent; // 0xa0(0x08)
	struct UTexture2D* CustomSlotBackground; // 0xa8(0x08)
	int32_t Order; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FText MissingContainerName; // 0xb8(0x18)
};

// Class Mist.MistItemCategoryTree
// Size: 0x120 (Inherited: 0x28)
struct UMistItemCategoryTree : UObject {
	char pad_28[0x8]; // 0x28(0x08)
	struct TArray<struct UMistItemCategoryGroup*> GroupCDOs; // 0x30(0x10)
	struct TArray<struct UMistItemCategory*> CategoryCDOs; // 0x40(0x10)
	struct TArray<struct UMistItemCategoryGroup*> Groups; // 0x50(0x10)
	struct TArray<struct UMistItemCategory*> Categories; // 0x60(0x10)
	struct TArray<struct UMistItemCategoryGroup*> RootGroups; // 0x70(0x10)
	struct TMap<struct UMistItemCategoryGroup*, struct FMistItemCategoryTreeGroupCache> GroupCache; // 0x80(0x50)
	struct TMap<struct UMistItemCategory*, struct FMistItemCategoryTreeCategoryCache> CategoryCache; // 0xd0(0x50)
};

// Class Mist.MistItemDragDropPayload
// Size: 0x90 (Inherited: 0x28)
struct UMistItemDragDropPayload : UObject {
	struct FMistInventoryOperationSource Source; // 0x28(0x38)
	enum class EMistItemDragDropAction Action; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct FMistInventoryOperationTarget OngoingOperationTarget; // 0x68(0x20)
	char pad_88[0x8]; // 0x88(0x08)
};

// Class Mist.MistItemDragPreviewWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistItemDragPreviewWidget : UMistUIWidget {
	struct UMistBasicItemIconWidget* IconWidget; // 0x2c0(0x08)
	struct UWidget* DropTypeWidget; // 0x2c8(0x08)
	struct UMistGenericInfoPopupWidget* GenericInfoPopup; // 0x2d0(0x08)
	struct FMistItem Item; // 0x2d8(0x18)
	int32_t Count; // 0x2f0(0x04)
	enum class EMistItemSlotDropType DropType; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	struct FLinearColor MergeColor; // 0x2f8(0x10)
	char pad_308[0x8]; // 0x308(0x08)
};

// Class Mist.MistItemHoverActionButtonWidget
// Size: 0x438 (Inherited: 0x2e0)
struct UMistItemHoverActionButtonWidget : UMistBaseButtonWidget {
	struct UPanelWidget* HoverPanelWidget; // 0x2e0(0x08)
	struct UImage* HoverBackgroundWidget; // 0x2e8(0x08)
	struct UImage* HoverIconWidget; // 0x2f0(0x08)
	struct UTextBlock* HoverLabelWidget; // 0x2f8(0x08)
	struct UWidgetAnimation* HoverAnimation; // 0x300(0x08)
	struct FSlateBrush HoverBackgroundBrush; // 0x308(0x88)
	struct FSlateBrush HoverIconBrush; // 0x390(0x88)
	struct FText HoverLabelText; // 0x418(0x18)
	char pad_430[0x8]; // 0x430(0x08)
};

// Class Mist.MistItemNameSearchResultWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistItemNameSearchResultWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UTextBlock* TextWidget; // 0x2c8(0x08)
	char pad_2D0[0x18]; // 0x2d0(0x18)
	struct UMistItemTemplate* ItemTemplate; // 0x2e8(0x08)

	void HandleClicked(); // Function Mist.MistItemNameSearchResultWidget.HandleClicked // (Final|Native|Private) // @ game+0x1122b00
};

// Class Mist.MistItemNameSearchWidget
// Size: 0x338 (Inherited: 0x2c0)
struct UMistItemNameSearchWidget : UMistUIWidget {
	struct UEditableTextBox* InputWidget; // 0x2c0(0x08)
	struct UScrollBox* ResultWidget; // 0x2c8(0x08)
	struct UMistItemNameSearchResultWidget* ResultItemClass; // 0x2d0(0x08)
	bool bHasResult; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct TArray<struct UMistItemTemplate*> Result; // 0x2e0(0x10)
	char pad_2F0[0x30]; // 0x2f0(0x30)
	struct TArray<struct FMistItemSearchEntry> SearchEntries; // 0x320(0x10)
	char pad_330[0x8]; // 0x330(0x08)

	void HandleTextChanged(struct FText& Text); // Function Mist.MistItemNameSearchWidget.HandleTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1122b60
};

// Class Mist.MistItemPerkItemModifierWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistItemPerkItemModifierWidget : UMistUIWidget {
	struct UTextBlock* DescriptionWidget; // 0x2c0(0x08)
	struct UMistItemPerk* Perk; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class Mist.MistItemPerk
// Size: 0x48 (Inherited: 0x28)
struct UMistItemPerk : UObject {
	struct TArray<struct UMistStatusEffect*> StatusEffects; // 0x28(0x10)
	struct TArray<struct FMistItemPropertyModifier> ItemPropertyModifiers; // 0x38(0x10)
};

// Class Mist.MistItemPerksProfile
// Size: 0x50 (Inherited: 0x30)
struct UMistItemPerksProfile : UDataAsset {
	struct TArray<struct UMistItemPerk*> ItemPerks; // 0x30(0x10)
	struct TArray<struct UMistItemPerk*> DefaultItemPerks; // 0x40(0x10)
};

// Class Mist.MistItemPerkStatusEffectWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistItemPerkStatusEffectWidget : UMistUIWidget {
	struct UTextBlock* DescriptionWidget; // 0x2c0(0x08)
	struct UMistStatusEffect* Effect; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class Mist.MistItemPopupPerkWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistItemPopupPerkWidget : UMistUIWidget {
	struct UMistItemPerk* Perk; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)
	struct UVerticalBox* EffectsListWidget; // 0x2d0(0x08)
};

// Class Mist.MistItemPopupWidget
// Size: 0x3a0 (Inherited: 0x2c0)
struct UMistItemPopupWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UTextBlock* RarityWidget; // 0x2c8(0x08)
	struct UTextBlock* WeightWidget; // 0x2d0(0x08)
	struct UHorizontalBox* WeightBox; // 0x2d8(0x08)
	struct UBorder* DetailsBorderWidget; // 0x2e0(0x08)
	struct UVerticalBox* DetailsContainerWidget; // 0x2e8(0x08)
	struct UVerticalBox* ItemPerksBoxWidget; // 0x2f0(0x08)
	struct USizeBox* InteractionSizeBox; // 0x2f8(0x08)
	struct UVerticalBox* InteractionContainerWidget; // 0x300(0x08)
	struct UMistInteractionItemDetailsWidget* InteractionWidget; // 0x308(0x08)
	struct UMistInteractionTraderWidget* InteractionTraderWidget; // 0x310(0x08)
	struct UVerticalBox* DescriptionContainerWidget; // 0x318(0x08)
	struct UTextBlock* DescriptionTextWidget; // 0x320(0x08)
	struct UBorder* QualityContainerWidget; // 0x328(0x08)
	struct UTextBlock* QualityValueWidget; // 0x330(0x08)
	struct UTextBlock* QualityHintTextWidget; // 0x338(0x08)
	struct UBorder* WaterBorderWidget; // 0x340(0x08)
	struct UTextBlock* WaterQuantityWidget; // 0x348(0x08)
	struct UBorder* MissingContainerBorderWidget; // 0x350(0x08)
	struct UTextBlock* MissingContainerTextWidget; // 0x358(0x08)
	struct FText QualityHintFallbackText; // 0x360(0x18)
	struct FMistItem Item; // 0x378(0x18)
	int32_t Count; // 0x390(0x04)
	int32_t UnitPrice; // 0x394(0x04)
	bool bIsMissingContainer; // 0x398(0x01)
	bool bIsTraderSellOffer; // 0x399(0x01)
	bool bIsTraderBuyOffer; // 0x39a(0x01)
	char pad_39B[0x5]; // 0x39b(0x05)
};

// Class Mist.MistItemProcessorComponent
// Size: 0x168 (Inherited: 0xf0)
struct UMistItemProcessorComponent : UActorComponent {
	struct FMistComponentReference InputContainerRef; // 0xf0(0x28)
	struct FMistComponentReference OutputContainerRef; // 0x118(0x28)
	float Interval; // 0x140(0x04)
	int32_t InputCount; // 0x144(0x04)
	int32_t OutputCount; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct UMistItemTemplate* InputItemClass; // 0x150(0x08)
	struct UMistItemTemplate* OutputItemClass; // 0x158(0x08)
	char pad_160[0x8]; // 0x160(0x08)

	void HandleProcessingTimer(); // Function Mist.MistItemProcessorComponent.HandleProcessingTimer // (Final|Native|Private) // @ game+0x1122b40
};

// Class Mist.MistItemRepairStationComponent
// Size: 0x258 (Inherited: 0x1f0)
struct UMistItemRepairStationComponent : UMistInteractableComponent {
	struct FMistComponentReference InputContainerRef; // 0x1f0(0x28)
	struct FMistComponentReference OutputContainerRef; // 0x218(0x28)
	struct UCurveFloat* RepairCostByDamageCurve; // 0x240(0x08)
	struct UMistContainerComponent* InputContainer; // 0x248(0x08)
	struct UMistContainerComponent* OutputContainer; // 0x250(0x08)
};

// Class Mist.MistItemRepairStationWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistItemRepairStationWidget : UMistUIWidget {
	struct UMistContainerWidget* InputContainerWidget; // 0x2c0(0x08)
	struct UMistContainerWidget* OutputContainerWidget; // 0x2c8(0x08)
	struct UGridPanel* RecipesPanelWidget; // 0x2d0(0x08)
	struct UGridPanel* ItemSlotPopupContainer; // 0x2d8(0x08)
	struct UMistItemRepairStationComponent* RepairStation; // 0x2e0(0x08)
	struct UMistContainerComponent* InputContainer; // 0x2e8(0x08)

	void HandleInputContainerUpdate(struct UMistContainerComponent* Container, int32_t InSlot, struct UMistItemTemplate* Item); // Function Mist.MistItemRepairStationWidget.HandleInputContainerUpdate // (Final|Native|Private) // @ game+0x10dc800
};

// Class Mist.MistItemRolloutSlotWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistItemRolloutSlotWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UButton* ButtonWidget; // 0x2d8(0x08)
	struct UMistEquipmentSelectionItemSlotWidget* ItemWidget; // 0x2e0(0x08)
	struct UWidgetAnimation* FocusAnimation; // 0x2e8(0x08)
	int8_t SlotIndex; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)

	void HandleSlotClicked(); // Function Mist.MistItemRolloutSlotWidget.HandleSlotClicked // (Final|Native|Private) // @ game+0x1126440
};

// Class Mist.MistItemRolloutWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistItemRolloutWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UUniformGridPanel* ItemsWidget; // 0x2d8(0x08)
	struct TArray<struct UMistItemRolloutSlotWidget*> ItemSlots; // 0x2e0(0x10)

	void HandleSlotClicked(int8_t SlotIndex); // Function Mist.MistItemRolloutWidget.HandleSlotClicked // (Final|Native|Private) // @ game+0x1126460
};

// Class Mist.MistItemTemplateWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistItemTemplateWidget : UMistUIWidget {
	struct UImage* ResourceIconWidget; // 0x2c0(0x08)
	struct UTextBlock* ResourceNameWidget; // 0x2c8(0x08)
	struct UMistItemTemplate* ItemTemplate; // 0x2d0(0x08)
	bool bShowName; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	struct FName ResourceDiscoveryId; // 0x2dc(0x08)
	char pad_2E4[0x4]; // 0x2e4(0x04)
};

// Class Mist.MistJackhammerControlComponent
// Size: 0x618 (Inherited: 0x598)
struct UMistJackhammerControlComponent : UMistMannedGimbalControlComponent {
	char pad_598[0x8]; // 0x598(0x08)
	struct FMistComponentReference HammerRef; // 0x5a0(0x28)
	float HammerExtensionLength; // 0x5c8(0x04)
	float HammerExtensionSpeed; // 0x5cc(0x04)
	float HammerRetractionSpeed; // 0x5d0(0x04)
	float HammerDamage; // 0x5d4(0x04)
	bool bAutomatic; // 0x5d8(0x01)
	char pad_5D9[0x7]; // 0x5d9(0x07)
	struct TArray<struct FMistToolTier> ToolTiers; // 0x5e0(0x10)
	struct UDamageType* HammerDamageTypeClass; // 0x5f0(0x08)
	bool bWantsHammering; // 0x5f8(0x01)
	char pad_5F9[0x1f]; // 0x5f9(0x1f)

	void ServerStopHammering(); // Function Mist.MistJackhammerControlComponent.ServerStopHammering // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a19f0
	void ServerStartHammering(); // Function Mist.MistJackhammerControlComponent.ServerStartHammering // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a41d0
	void ReceiveHammerHit(); // Function Mist.MistJackhammerControlComponent.ReceiveHammerHit // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveHammered(); // Function Mist.MistJackhammerControlComponent.ReceiveHammered // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastHammer(); // Function Mist.MistJackhammerControlComponent.MulticastHammer // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x10a1a10
};

// Class Mist.MistJavelinItemTemplate
// Size: 0x438 (Inherited: 0x428)
struct UMistJavelinItemTemplate : UMistWeaponItemTemplate {
	char pad_428[0x8]; // 0x428(0x08)
	struct AMistProjectile* ThrowingProjectile; // 0x430(0x08)
};

// Class Mist.MistJoinQueueStatusData
// Size: 0x1d8 (Inherited: 0x28)
struct UMistJoinQueueStatusData : UObject {
	char pad_28[0x128]; // 0x28(0x128)
	struct UMistBackendHttpClient* BackendClient; // 0x150(0x08)
	char pad_158[0x80]; // 0x158(0x80)
};

// Class Mist.MistJoinQueueDataManager
// Size: 0x88 (Inherited: 0x28)
struct UMistJoinQueueDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistDataManager* DataManager; // 0x30(0x08)
	struct TMap<int64_t, struct UMistJoinQueueStatusData*> StatusDataItems; // 0x38(0x50)
};

// Class Mist.MistJoinQueueScreen
// Size: 0x4e8 (Inherited: 0x3a0)
struct UMistJoinQueueScreen : UMistUIScreen {
	struct UPanelWidget* PlayPanelWidget; // 0x3a0(0x08)
	struct UPanelWidget* DelayedPlayPanelWidget; // 0x3a8(0x08)
	struct UPanelWidget* JoinQueuePanelWidget; // 0x3b0(0x08)
	struct UPanelWidget* JoinQueueLoadingPanelWidget; // 0x3b8(0x08)
	struct UPanelWidget* JoinQueueQueuedPanelWidget; // 0x3c0(0x08)
	struct UPanelWidget* JoinQueueLeavingPanelWidget; // 0x3c8(0x08)
	struct UPanelWidget* JoinQueueEvadingPanelWidget; // 0x3d0(0x08)
	struct UPanelWidget* ConnectPanelWidget; // 0x3d8(0x08)
	struct UTextBlock* JoinQueueQueuedPositionTextWidget; // 0x3e0(0x08)
	struct UTextBlock* JoinQueueQueuedEstimatedWaitingTimeWidget; // 0x3e8(0x08)
	struct UTextBlock* JoinQueueQueuedWaitingTimeWidget; // 0x3f0(0x08)
	struct UWidget* JoinQueueQueuedHostingPanelWidget; // 0x3f8(0x08)
	struct UMistDataLoadingIndicatorWidget* ActionIndicatorWidget; // 0x400(0x08)
	struct UMistBaseButtonWidget* CancelButtonWidget; // 0x408(0x08)
	struct UMistBaseButtonWidget* EvadeButtonWidget; // 0x410(0x08)
	struct FText JoinQueuePositionFormatText; // 0x418(0x18)
	struct FText TimeFormatText; // 0x430(0x18)
	struct FText TimeHoursFormatText; // 0x448(0x18)
	struct FText CancelActionIndicatorText; // 0x460(0x18)
	struct FText EvadeActionIndicatorText; // 0x478(0x18)
	struct UMistGameClientSubsystem* GameClientInstance; // 0x490(0x08)
	struct UMistJoinQueueStatusData* Data; // 0x498(0x08)
	struct UPanelWidget* StubPanelWidget; // 0x4a0(0x08)
	struct UButton* StubPlayNewButtonWidget; // 0x4a8(0x08)
	struct UButton* StubPlayButtonWidget; // 0x4b0(0x08)
	struct UButton* StubDelayedPlayButtonWidget; // 0x4b8(0x08)
	struct UButton* StubJoinQueueQueuedButtonWidget; // 0x4c0(0x08)
	struct UButton* StubJoinQueueLeavingButtonWidget; // 0x4c8(0x08)
	struct UButton* StubJoinQueueEvadingButtonWidget; // 0x4d0(0x08)
	struct UButton* StubJoinQueueCancelingButtonWidget; // 0x4d8(0x08)
	struct UButton* StubJoinQueueConnectButtonWidget; // 0x4e0(0x08)

	void HandleStubPlayNewButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubPlayNewButtonClicked // (Final|Native|Private) // @ game+0x11265c0
	void HandleStubPlayButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubPlayButtonClicked // (Final|Native|Private) // @ game+0x11265a0
	void HandleStubJoinQueueQueuedButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubJoinQueueQueuedButtonClicked // (Final|Native|Private) // @ game+0x1126580
	void HandleStubJoinQueueLeavingButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubJoinQueueLeavingButtonClicked // (Final|Native|Private) // @ game+0x1126560
	void HandleStubJoinQueueEvadingButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubJoinQueueEvadingButtonClicked // (Final|Native|Private) // @ game+0x1126540
	void HandleStubJoinQueueConnectButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubJoinQueueConnectButtonClicked // (Final|Native|Private) // @ game+0x1126520
	void HandleStubJoinQueueCancelingButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubJoinQueueCancelingButtonClicked // (Final|Native|Private) // @ game+0x1126500
	void HandleStubDelayedPlayButtonClicked(); // Function Mist.MistJoinQueueScreen.HandleStubDelayedPlayButtonClicked // (Final|Native|Private) // @ game+0x11264e0
};

// Class Mist.MistJoinRealmSearchResultItemData
// Size: 0xc0 (Inherited: 0x28)
struct UMistJoinRealmSearchResultItemData : UObject {
	char pad_28[0x90]; // 0x28(0x90)
	struct UMistAccountCharacterData* Character; // 0xb8(0x08)
};

// Class Mist.MistJoinRealmSearchData
// Size: 0xf0 (Inherited: 0x28)
struct UMistJoinRealmSearchData : UObject {
	char pad_28[0xb0]; // 0x28(0xb0)
	struct TArray<struct UMistJoinRealmSearchResultItemData*> Result; // 0xd8(0x10)
	struct UMistBackendHttpClient* BackendClient; // 0xe8(0x08)
};

// Class Mist.MistJoinRealmVerifyRealmPasswordData
// Size: 0xc0 (Inherited: 0x28)
struct UMistJoinRealmVerifyRealmPasswordData : UObject {
	char pad_28[0x90]; // 0x28(0x90)
	struct UMistBackendHttpClient* BackendClient; // 0xb8(0x08)
};

// Class Mist.MistJoinRealmDataManager
// Size: 0x40 (Inherited: 0x28)
struct UMistJoinRealmDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistDataManager* DataManager; // 0x30(0x08)
	struct UMistJoinRealmSearchData* SearchData; // 0x38(0x08)
};

// Class Mist.MistJoinRealmRegionWidget
// Size: 0x410 (Inherited: 0x2c0)
struct UMistJoinRealmRegionWidget : UMistUIWidget {
	struct UBorder* TintWidget; // 0x2c0(0x08)
	struct UPanelWidget* BackgroundImagePanelWidget; // 0x2c8(0x08)
	struct UBorder* BackgroundImageTintWidget; // 0x2d0(0x08)
	struct UImage* BackgroundImageWidget; // 0x2d8(0x08)
	struct UTextBlock* NameTextWidget; // 0x2e0(0x08)
	struct UTextBlock* InformationTextWidget; // 0x2e8(0x08)
	struct UMistBaseButtonWidget* JoinRandomButtonWidget; // 0x2f0(0x08)
	struct UMistBaseButtonWidget* TileListButtonWidget; // 0x2f8(0x08)
	struct UMistBaseButtonWidget* PlayButtonWidget; // 0x300(0x08)
	struct UMistBaseButtonWidget* OffMapLobbyButtonWidget; // 0x308(0x08)
	struct UWidgetAnimation* ActiveAnimation; // 0x310(0x08)
	struct UWidgetAnimation* InactiveAnimation; // 0x318(0x08)
	struct FLinearColor BackgroundImageActiveTintColor; // 0x320(0x10)
	struct FText NoSpawnTilesAvailableText; // 0x330(0x18)
	struct FText UnavailableTileText; // 0x348(0x18)
	char pad_360[0x90]; // 0x360(0x90)
	struct UMistJoinRealmScreen* Parent; // 0x3f0(0x08)
	struct UMistAccountRealmRegionData* Data; // 0x3f8(0x08)
	struct UMistAccountRealmData* RealmData; // 0x400(0x08)
	char pad_408[0x8]; // 0x408(0x08)
};

// Class Mist.MistJoinRealmScreen
// Size: 0x560 (Inherited: 0x3a0)
struct UMistJoinRealmScreen : UMistUIScreen {
	struct UPanelWidget* ContentPanelWidget; // 0x3a0(0x08)
	struct UPanelWidget* RealmPanelWidget; // 0x3a8(0x08)
	struct UMistHeaderTextWidget* RealmNameWidget; // 0x3b0(0x08)
	struct UPanelWidget* CharacterStatusPanelWidget; // 0x3b8(0x08)
	struct UTextBlock* CharacterStatusTextWidget; // 0x3c0(0x08)
	struct UPanelWidget* RealmStatusPanelWidget; // 0x3c8(0x08)
	struct UTextBlock* RealmStatusTextWidget; // 0x3d0(0x08)
	struct UPanelWidget* RealmOfflinePanelWidget; // 0x3d8(0x08)
	struct UPanelWidget* RealmRestrictedAccessPanelWidget; // 0x3e0(0x08)
	struct UTextBlock* RealmRestrictedAccessTextWidget; // 0x3e8(0x08)
	struct UMistBaseButtonWidget* DiscordButtonWidget; // 0x3f0(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x3f8(0x08)
	struct UUniformGridPanel* RegionsWidget; // 0x400(0x08)
	struct UVerticalBox* DescriptionPanel; // 0x408(0x08)
	struct UTextBlock* DescriptionText; // 0x410(0x08)
	struct UVerticalBox* MotdPanel; // 0x418(0x08)
	struct UTextBlock* MotdText; // 0x420(0x08)
	struct UMistJoinRealmTileListWidget* TilesWidget; // 0x428(0x08)
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x430(0x08)
	struct UMistNotificationsWidget* NotificationsWidget; // 0x438(0x08)
	struct FText CharacterUnassignedText; // 0x440(0x18)
	struct FText CharacterEvadingText; // 0x458(0x18)
	struct FText CharacterMigratingText; // 0x470(0x18)
	struct FText RealmHasPasswordText; // 0x488(0x18)
	struct FText RealmHasAllowlistText; // 0x4a0(0x18)
	char pad_4B8[0x78]; // 0x4b8(0x78)
	struct UMistAccountRealmCharacterData* Data; // 0x530(0x08)
	struct UMistAccountRealmRegionData* SelectedRealmRegionData; // 0x538(0x08)
	struct UMistAccountRealmRegionSpawnTileData* SelectedRealmRegionSpawnTileData; // 0x540(0x08)
	struct UMistVerifyRealmPasswordDialog* VerifyRealmPasswordDialog; // 0x548(0x08)
	char pad_550[0x8]; // 0x550(0x08)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x558(0x08)
};

// Class Mist.MistJoinRealmSearchListItemWidget
// Size: 0x3d8 (Inherited: 0x2c0)
struct UMistJoinRealmSearchListItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UWidget* CharacterIndicatorWidget; // 0x2c8(0x08)
	struct UTextBlock* RealmNameTextWidget; // 0x2d0(0x08)
	struct UWidget* RegionParentWidget; // 0x2d8(0x08)
	struct UImage* RegionImageWidget; // 0x2e0(0x08)
	struct UTextBlock* RegionNameWidget; // 0x2e8(0x08)
	struct UWidget* PlatformIndicatorXboxWidget; // 0x2f0(0x08)
	struct UWidget* PlatformIndicatorSteamWidget; // 0x2f8(0x08)
	struct UTextBlock* RealmSizeTextWidget; // 0x300(0x08)
	struct UTextBlock* RealmPopulationTextWidget; // 0x308(0x08)
	struct UWidget* ClanSizeParentWidget; // 0x310(0x08)
	struct UTextBlock* ClanSizeTextWidget; // 0x318(0x08)
	struct UWidget* HasRestrictedAccessWidget; // 0x320(0x08)
	struct UButton* JoinRealmNewCharacterWidget; // 0x328(0x08)
	struct UButton* JoinRealmExistingCharacterWidget; // 0x330(0x08)
	struct UWidgetAnimation* HoverAnimation; // 0x338(0x08)
	struct FSlateBrush OfficialRegion; // 0x340(0x88)
	struct UMistJoinRealmSearchResultItemData* Data; // 0x3c8(0x08)
	char pad_3D0[0x8]; // 0x3d0(0x08)

	bool IsOnline(); // Function Mist.MistJoinRealmSearchListItemWidget.IsOnline // (Final|Native|Public|BlueprintCallable) // @ game+0x11265e0
	void HandlePlayButtonClicked(); // Function Mist.MistJoinRealmSearchListItemWidget.HandlePlayButtonClicked // (Final|Native|Protected) // @ game+0x1126420
	struct FString GetOfflineReason(); // Function Mist.MistJoinRealmSearchListItemWidget.GetOfflineReason // (Final|Native|Public|BlueprintCallable) // @ game+0x11263e0
};

// Class Mist.MistJoinRealmSearchRegionFilterWidget
// Size: 0x3a8 (Inherited: 0x2c0)
struct UMistJoinRealmSearchRegionFilterWidget : UMistUIWidget {
	struct UCheckBox* CheckBoxWidget; // 0x2c0(0x08)
	struct UTextBlock* LabelWidget; // 0x2c8(0x08)
	struct FMistRealmRegionTableRow Data; // 0x2d0(0xd8)
};

// Class Mist.MistJoinRealmSearchScreen
// Size: 0x5a0 (Inherited: 0x3a0)
struct UMistJoinRealmSearchScreen : UMistUIScreen {
	struct UPanelWidget* ContentPanelWidget; // 0x3a0(0x08)
	struct UPanelWidget* ResultPanelWidget; // 0x3a8(0x08)
	struct UListView* ResultListWidget; // 0x3b0(0x08)
	struct UPanelWidget* LoadingPanelWidget; // 0x3b8(0x08)
	struct UMistDataLoadingIndicatorWidget* LoadingIndicatorWidget; // 0x3c0(0x08)
	struct UBorder* DescriptionBorder; // 0x3c8(0x08)
	struct UTextBlock* DescriptionTextWidget; // 0x3d0(0x08)
	struct UButton* SortButtonTime; // 0x3d8(0x08)
	struct UButton* SortButtonRegion; // 0x3e0(0x08)
	struct UButton* SortButtonPlatform; // 0x3e8(0x08)
	struct UButton* SortButtonName; // 0x3f0(0x08)
	struct UButton* SortButtonRealmsize; // 0x3f8(0x08)
	struct UButton* SortButtonPopulation; // 0x400(0x08)
	struct UButton* SortButtonClansize; // 0x408(0x08)
	struct UButton* SortButtonJoin; // 0x410(0x08)
	struct UWidget* SortingArrowTime; // 0x418(0x08)
	struct UWidget* SortingArrowRegion; // 0x420(0x08)
	struct UWidget* SortingArrowPlatform; // 0x428(0x08)
	struct UWidget* SortingOrderNameAsc; // 0x430(0x08)
	struct UWidget* SortingOrderNameDesc; // 0x438(0x08)
	struct UWidget* SortingArrowRealmsize; // 0x440(0x08)
	struct UWidget* SortingArrowPopulation; // 0x448(0x08)
	struct UWidget* SortingArrowClansize; // 0x450(0x08)
	struct UWidget* SortingArrowJoin; // 0x458(0x08)
	struct UMistCheckBox* FilterProviderOfficial; // 0x460(0x08)
	struct UMistCheckBox* FilterProviderPrivate; // 0x468(0x08)
	struct UMistCheckBox* FilterStatusOnline; // 0x470(0x08)
	struct UMistCheckBox* FilterStatusOffline; // 0x478(0x08)
	struct UMistCheckBox* FilterStatusHasCharacterYes; // 0x480(0x08)
	struct UMistCheckBox* FilterStatusHasCharacterNo; // 0x488(0x08)
	struct UPanelWidget* FilterRegionPanelWidget; // 0x490(0x08)
	struct UMistCheckBox* FilterPlatformPc; // 0x498(0x08)
	struct UMistCheckBox* FilterPlatformXbox; // 0x4a0(0x08)
	struct UMistCheckBox* FilterPlatformCross; // 0x4a8(0x08)
	struct UMistCheckBox* FilterRestrictedAccessYes; // 0x4b0(0x08)
	struct UMistCheckBox* FilterRestrictedAccessNo; // 0x4b8(0x08)
	struct UEditableTextBox* FilterName; // 0x4c0(0x08)
	struct UVerticalBox* FiltersBox; // 0x4c8(0x08)
	struct UMistBaseButtonWidget* SearchButtonWidget; // 0x4d0(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x4d8(0x08)
	char pad_4E0[0x18]; // 0x4e0(0x18)
	struct UMistJoinRealmSearchData* Data; // 0x4f8(0x08)
	char pad_500[0x8]; // 0x500(0x08)
	struct TArray<struct UWidget*> SortingIndicators; // 0x508(0x10)
	struct TArray<struct UButton*> SortingButtons; // 0x518(0x10)
	struct UButton* ActiveSortButton; // 0x528(0x08)
	char pad_530[0x8]; // 0x530(0x08)
	struct TArray<struct UMistCheckBox*> FilterProvider; // 0x538(0x10)
	struct TArray<struct UMistCheckBox*> FilterStatus; // 0x548(0x10)
	struct TArray<struct UMistCheckBox*> FilterCharacter; // 0x558(0x10)
	struct TArray<struct UMistJoinRealmSearchRegionFilterWidget*> FilterRegion; // 0x568(0x10)
	struct TArray<struct UMistCheckBox*> FilterPlatform; // 0x578(0x10)
	struct TArray<struct UMistCheckBox*> FilterRestrictedAccess; // 0x588(0x10)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x598(0x08)

	struct UWidget* NavigateToFilters(enum class EUINavigation Nav); // Function Mist.MistJoinRealmSearchScreen.NavigateToFilters // (Final|Native|Public|BlueprintCallable) // @ game+0x112a760
	struct UWidget* NavigateToContent(enum class EUINavigation Nav); // Function Mist.MistJoinRealmSearchScreen.NavigateToContent // (Final|Native|Public|BlueprintCallable) // @ game+0x112a6d0
	void HandleSortButtonClicked_Time(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Time // (Final|Native|Private) // @ game+0x112a5e0
	void HandleSortButtonClicked_Region(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Region // (Final|Native|Private) // @ game+0x112a5b0
	void HandleSortButtonClicked_Realmsize(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Realmsize // (Final|Native|Private) // @ game+0x112a580
	void HandleSortButtonClicked_Population(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Population // (Final|Native|Private) // @ game+0x112a550
	void HandleSortButtonClicked_Platform(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Platform // (Final|Native|Private) // @ game+0x112a520
	void HandleSortButtonClicked_Name(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Name // (Final|Native|Private) // @ game+0x112a4f0
	void HandleSortButtonClicked_Join(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Join // (Final|Native|Private) // @ game+0x112a4c0
	void HandleSortButtonClicked_Clansize(); // Function Mist.MistJoinRealmSearchScreen.HandleSortButtonClicked_Clansize // (Final|Native|Private) // @ game+0x112a490
};

// Class Mist.MistJoinRealmTileListItemWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistJoinRealmTileListItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UTextBlock* NameTextWidget; // 0x2c8(0x08)
	struct UPanelWidget* UsedSlotsPanelWidget; // 0x2d0(0x08)
	struct UBorder* UsedSlotsBackgroundWidget; // 0x2d8(0x08)
	struct UTextBlock* UsedSlotsTextWidget; // 0x2e0(0x08)
	struct UMistBaseButtonWidget* JoinButtonWidget; // 0x2e8(0x08)
	struct UMistAccountRealmRegionSpawnTileData* Data; // 0x2f0(0x08)
};

// Class Mist.MistJoinRealmTileListWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistJoinRealmTileListWidget : UMistUIWidget {
	struct UMistDataLoadingIndicatorWidget* LoadingIndicatorWidget; // 0x2c0(0x08)
	struct UListView* ListWidget; // 0x2c8(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x2d0(0x08)
	char pad_2D8[0x18]; // 0x2d8(0x18)
	struct UMistAccountRealmRegionData* Data; // 0x2f0(0x08)
};

// Class Mist.MistKeyBindingsSettingsWidget
// Size: 0x410 (Inherited: 0x2d0)
struct UMistKeyBindingsSettingsWidget : UMistSettingsWidget {
	struct UGridPanel* BindingsGridPanelWidget; // 0x2d0(0x08)
	struct UMistHeaderTextWidget* HeaderTextWidget; // 0x2d8(0x08)
	struct UMistHeaderTextWidget* TextWidget; // 0x2e0(0x08)
	struct UMistUIWidget* SpacerWidget; // 0x2e8(0x08)
	struct UMistUserInputSettings* UserInputSettings; // 0x2f0(0x08)
	struct TArray<struct FMistActionMappingBinding> InitialActionBindings; // 0x2f8(0x10)
	struct TArray<struct FMistAxisMappingBinding> InitialAxisBindings; // 0x308(0x10)
	char pad_318[0xf8]; // 0x318(0xf8)

	void HandleAxisKeySelectionChanged(struct UMistKeyBindingWidget* Sender, struct FName AxisName, int32_t ScaleIndex); // Function Mist.MistKeyBindingsSettingsWidget.HandleAxisKeySelectionChanged // (Final|Native|Private) // @ game+0x1129b80
	void HandleActionKeySelectionChanged(struct UMistKeyBindingWidget* Sender, struct FName ActionName); // Function Mist.MistKeyBindingsSettingsWidget.HandleActionKeySelectionChanged // (Final|Native|Private) // @ game+0x11299b0
};

// Class Mist.MistKeyBindingWidget
// Size: 0x350 (Inherited: 0x2c0)
struct UMistKeyBindingWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UKiBLIIInputKeySelector* KeySelectorWidget; // 0x2d8(0x08)
	struct UMistInputBindingHintWidget* KeySelectorDisplayWidget; // 0x2e0(0x08)
	struct UKiBLIIInputKeySelector* AlternativeKeySelectorWidget; // 0x2e8(0x08)
	struct UMistInputBindingHintWidget* AlternativeKeySelectorDisplayWidget; // 0x2f0(0x08)
	struct UWidgetAnimation* KeySelectorDisplayAnimation; // 0x2f8(0x08)
	struct UWidgetAnimation* AlternativeKeySelectorDisplayAnimation; // 0x300(0x08)
	char pad_308[0x48]; // 0x308(0x48)

	void HandleSelectingKeyChanged(); // Function Mist.MistKeyBindingWidget.HandleSelectingKeyChanged // (Final|Native|Private) // @ game+0x112a470
	void HandleSelectingAlternativeKeyChanged(); // Function Mist.MistKeyBindingWidget.HandleSelectingAlternativeKeyChanged // (Final|Native|Private) // @ game+0x112a450
	void HandleKeySelected(struct FInputChord InSelectedKey); // Function Mist.MistKeyBindingWidget.HandleKeySelected // (Final|Native|Private) // @ game+0x1129d60
	void HandleAlternativeKeySelected(struct FInputChord InSelectedKey); // Function Mist.MistKeyBindingWidget.HandleAlternativeKeySelected // (Final|Native|Private) // @ game+0x1129a70
};

// Class Mist.MistKillCreatureQuest
// Size: 0x58 (Inherited: 0x48)
struct UMistKillCreatureQuest : UMistFlotillaQuest {
	struct APawn* TargetClass; // 0x48(0x08)
	char pad_50[0x8]; // 0x50(0x08)

	void HandleKillTarget(struct APawn* Target); // Function Mist.MistKillCreatureQuest.HandleKillTarget // (Final|Native|Private) // @ game+0x1129e70
};

// Class Mist.MistKillCreatureQuestGenerator
// Size: 0x90 (Inherited: 0x30)
struct UMistKillCreatureQuestGenerator : UMistBaseQuestGenerator {
	struct TSoftObjectPtr<UDataTable> KillCreatureTable; // 0x30(0x28)
	enum class EFlotillaQuestDifficulty Difficulty; // 0x58(0x01)
	char pad_59[0x37]; // 0x59(0x37)
};

// Class Mist.MistKillMessageLogContentWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistKillMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* VictimTextWidget; // 0x2c0(0x08)
	struct UTextBlock* ActionTextWidget; // 0x2c8(0x08)
	struct URichTextBlock* KillerTextWidget; // 0x2d0(0x08)
	struct UMistKillMessageData* Data; // 0x2d8(0x08)
};

// Class Mist.MistKillSpeicalRupuQuest
// Size: 0x78 (Inherited: 0x48)
struct UMistKillSpeicalRupuQuest : UMistFlotillaQuest {
	struct AMistHumanoidMob* MobClass; // 0x48(0x08)
	struct FVector SpawnLocation; // 0x50(0x0c)
	char pad_5C[0x1c]; // 0x5c(0x1c)

	void SpawnRupu(); // Function Mist.MistKillSpeicalRupuQuest.SpawnRupu // (Final|Native|Private) // @ game+0x112a7f0
	void HandleLocationTimer(); // Function Mist.MistKillSpeicalRupuQuest.HandleLocationTimer // (Final|Native|Private) // @ game+0x112a0f0
	void HandleKillTarget(struct APawn* Target); // Function Mist.MistKillSpeicalRupuQuest.HandleKillTarget // (Final|Native|Private) // @ game+0x1129ef0
};

// Class Mist.MistKiteWidget
// Size: 0x318 (Inherited: 0x2e8)
struct UMistKiteWidget : UMistMannedInfoWidget {
	struct UMistHoistControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistMannedWeaponTetherWidget* TetherWidget; // 0x2f0(0x08)
	struct UMistInputBindingHintWidget* ShootHintWidget; // 0x2f8(0x08)
	struct UMistInputBindingHintWidget* ReloadHintWidget; // 0x300(0x08)
	struct UTextBlock* HeaderWidget; // 0x308(0x08)
	char pad_310[0x8]; // 0x310(0x08)

	void HandleMannedControlStateChanged(struct UMistHoistControlComponent* Sender); // Function Mist.MistKiteWidget.HandleMannedControlStateChanged // (Final|Native|Private) // @ game+0x112a110
};

// Class Mist.MistKnowledgeGatherableComponent
// Size: 0x130 (Inherited: 0xf0)
struct UMistKnowledgeGatherableComponent : UActorComponent {
	struct FMistComponentReference InteractableRef; // 0xf0(0x28)
	struct UMistKnowledgeType* KnowledgeType; // 0x118(0x08)
	bool bDestroyOnInteraction; // 0x120(0x01)
	bool bIsLockedByTutorial; // 0x121(0x01)
	char pad_122[0x2]; // 0x122(0x02)
	struct FName TutorialQuestName; // 0x124(0x08)
	char pad_12C[0x4]; // 0x12c(0x04)

	void HandleQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& InOutProperties, struct FMistInteractionQuery& InOutQuery); // Function Mist.MistKnowledgeGatherableComponent.HandleQuery // (Final|Native|Public|HasOutParms) // @ game+0x112a190
	void HandleInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistKnowledgeGatherableComponent.HandleInteract // (Final|Native|Public|HasOutParms) // @ game+0x1129c80
};

// Class Mist.MistKnowledgeItemTemplate
// Size: 0x1e0 (Inherited: 0x1d8)
struct UMistKnowledgeItemTemplate : UMistItemTemplate {
	enum class EMistTechTreeTier MinTier; // 0x1d8(0x04)
	enum class EMistTechTreeTier MaxTier; // 0x1dc(0x04)
};

// Class Mist.MistKnowledgeObjectsManager
// Size: 0x170 (Inherited: 0xf0)
struct UMistKnowledgeObjectsManager : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	struct TArray<struct UMistKnowledgeType*> KnowledgeVisibleByDefault; // 0x110(0x10)
	struct TMap<int64_t, struct FMistGatheredKnowledge> KnowledgeGathered; // 0x120(0x50)
};

// Class Mist.MistKnowledgeProgressWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistKnowledgeProgressWidget : UMistUIWidget {
	struct UVerticalBox* KnowledgeTypesListWidget; // 0x2c0(0x08)
	struct TArray<struct UMistKnowledgeType*> KnowledgeTypesWithCreatedWidgets; // 0x2c8(0x10)

	void HandleKnowledgeGathered(struct UMistKnowledgeType* InType, int32_t InKnowledge); // Function Mist.MistKnowledgeProgressWidget.HandleKnowledgeGathered // (Final|Native|Private) // @ game+0x1129f70
};

// Class Mist.MistKnowledgeType
// Size: 0xb0 (Inherited: 0x30)
struct UMistKnowledgeType : UPrimaryDataAsset {
	struct FText Description; // 0x30(0x18)
	int32_t MaxKnowledgeFromMap; // 0x48(0x04)
	bool bAllowGatheringAfterCompleting; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	struct FMistLootDesc InteractionLoot; // 0x50(0x30)
	struct FMistLootDesc BonusLoot; // 0x80(0x30)
};

// Class Mist.MistKnowledgeTypeWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistKnowledgeTypeWidget : UMistUIWidget {
	struct UTextBlock* KnowledgeTypeProgressTextWidget; // 0x2c0(0x08)
	struct UMistProgressBar* KnowledgeTypeProgressBarWidget; // 0x2c8(0x08)
	char pad_2D0[0x18]; // 0x2d0(0x18)
	struct UMistKnowledgeType* KnowledgeType; // 0x2e8(0x08)
	struct UMistPlayerKnowledgeGatheringComponent* KnowledgeGatheringComponent; // 0x2f0(0x08)

	void HandleKnowledgeGathered(struct UMistKnowledgeType* InType, int32_t InKnowledge); // Function Mist.MistKnowledgeTypeWidget.HandleKnowledgeGathered // (Final|Native|Private) // @ game+0x112a030
};

// Class Mist.MistPhysicalMobAnimInstance
// Size: 0x330 (Inherited: 0x270)
struct UMistPhysicalMobAnimInstance : UAnimInstance {
	struct AActor* Target; // 0x268(0x08)
	struct FVector2D LookAtCoords; // 0x270(0x08)
	struct FName ReferenceFrameBone; // 0x278(0x08)
	struct FName LeftCarryBone; // 0x280(0x08)
	struct FName RightCarryBone; // 0x288(0x08)
	bool bDrawDebug; // 0x290(0x01)
	bool bAlignsToTerrain; // 0x291(0x01)
	bool bCarryingObject; // 0x292(0x01)
	struct AActor* CarriedActor; // 0x298(0x08)
	enum class EMobMovementMode MovementMode; // 0x2a0(0x01)
	enum class ECardinalDirection CardinalDirection; // 0x2a1(0x01)
	bool bIsInAir; // 0x2a2(0x01)
	bool bIsSprinting; // 0x2a3(0x01)
	bool bIsInCombat; // 0x2a4(0x01)
	float Speed; // 0x2a8(0x04)
	float Direction; // 0x2ac(0x04)
	int32_t MovementPresetId; // 0x2b0(0x04)
	bool bMovementTilting; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float MaxPitchRotation; // 0x2b8(0x04)
	float MaxRollRotation; // 0x2bc(0x04)
	float TiltRollScale; // 0x2c0(0x04)
	float TiltMaxDiff; // 0x2c4(0x04)
	bool bIsDead; // 0x2c8(0x01)
	bool bIsAttacking; // 0x2c9(0x01)
	char pad_2CA[0x2]; // 0x2ca(0x02)
	float LayeredAttackAlpha; // 0x2cc(0x04)
	struct FRotator AdditiveRootRotation; // 0x2d0(0x0c)
	float AdditiveRootAlpha; // 0x2dc(0x04)
	char pad_2E0[0x10]; // 0x2e0(0x10)
	struct AMistPhysicalMob* Character; // 0x2f0(0x08)
	char pad_2F8[0x18]; // 0x2f8(0x18)
	struct UPhysicsConstraintComponent* CarryingConstraint; // 0x310(0x08)
	char pad_318[0x18]; // 0x318(0x18)
};

// Class Mist.MistKoaAnimInstance
// Size: 0x340 (Inherited: 0x330)
struct UMistKoaAnimInstance : UMistPhysicalMobAnimInstance {
	bool bRolling; // 0x330(0x01)
	bool bHidingInLake; // 0x331(0x01)
	char pad_332[0x2]; // 0x332(0x02)
	float AnnoyedAlpha; // 0x334(0x04)
	float BlinkingAlpha; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
};

// Class Mist.MistLabelButtonWidget
// Size: 0x310 (Inherited: 0x2e0)
struct UMistLabelButtonWidget : UMistBaseButtonWidget {
	struct UMistTextBlock* LabelTextWidget; // 0x2e0(0x08)
	struct FText LabelText; // 0x2e8(0x18)
	enum class EHorizontalAlignment LabelHorizontalAlignment; // 0x300(0x01)
	enum class EVerticalAlignment LabelVerticalAlignment; // 0x301(0x01)
	char pad_302[0x6]; // 0x302(0x06)
	struct FMistLabelButtonStyle ButtonStyle; // 0x308(0x08)
};

// Class Mist.MistLabelCheckBoxWidget
// Size: 0x2f0 (Inherited: 0x2c8)
struct UMistLabelCheckBoxWidget : UMistBaseCheckBoxWidget {
	struct UMistTextBlock* LabelTextWidget; // 0x2c8(0x08)
	struct FText LabelText; // 0x2d0(0x18)
	struct FMistLabelCheckBoxStyle CheckBoxStyle; // 0x2e8(0x08)
};

// Class Mist.MistLandStructure
// Size: 0x588 (Inherited: 0x588)
struct AMistLandStructure : AMistStructure {
};

// Class Mist.MistLastQuest
// Size: 0x128 (Inherited: 0x110)
struct UMistLastQuest : UMistTutorialQuest {
	float FinishTime; // 0x110(0x04)
	struct FName CongratsTaskName; // 0x114(0x08)
	char pad_11C[0xc]; // 0x11c(0x0c)
};

// Class Mist.MistLaunchPadComponent
// Size: 0x2a0 (Inherited: 0x290)
struct UMistLaunchPadComponent : USceneComponent {
	struct UStaticMeshComponent* InnerRing; // 0x290(0x08)
	float BaseLaunchVelocity; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)

	void LaunchPlayer(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistLaunchPadComponent.LaunchPlayer // (Final|Native|Public) // @ game+0x112a610
};

// Class Mist.MistLayerWeightActorComponent
// Size: 0xf0 (Inherited: 0xf0)
struct UMistLayerWeightActorComponent : UActorComponent {

	bool GetLayerWeightsAtLocation(struct FVector& Location, struct TArray<struct FName>& Layers, struct TArray<float>& LayerWeights); // Function Mist.MistLayerWeightActorComponent.GetLayerWeightsAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1129840
	bool GetHitWeightAtLocation(struct ALandscapeStreamingProxy* Landscape, struct ULandscapeHeightfieldCollisionComponent* HitLandscapeCollision, struct FVector& Location, struct TArray<struct FName> LayersName, struct TMap<struct FName, float>& LayersWeight); // Function Mist.MistLayerWeightActorComponent.GetHitWeightAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x1129540
};

// Class Mist.MistLegendEntryWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistLegendEntryWidget : UMistUIWidget {
	struct UTextBlock* TextObject; // 0x2c0(0x08)
	struct UTextBlock* HoldTextBlock; // 0x2c8(0x08)
	struct UMistInputBindingHintWidget* InputBindingHintWidget; // 0x2d0(0x08)
	char pad_2D8[0x8]; // 0x2d8(0x08)
};

// Class Mist.MistLegendWidget
// Size: 0x330 (Inherited: 0x2c0)
struct UMistLegendWidget : UMistUIWidget {
	struct UMistLegendEntryWidget* EntryWidgetTemplate; // 0x2c0(0x08)
	struct UHorizontalBox* ButtonsContainer; // 0x2c8(0x08)
	char pad_2D0[0x60]; // 0x2d0(0x60)
};

// Class Mist.MistLevelActor
// Size: 0x4d0 (Inherited: 0x3c8)
struct AMistLevelActor : ALevelScriptActor {
	char pad_3C8[0x28]; // 0x3c8(0x28)
	struct AMistMobCampManager* MobCampManager; // 0x3f0(0x08)
	struct UTexture2D* MapTexture; // 0x3f8(0x08)
	int32_t MobCampManagerMaxActiveCamps; // 0x400(0x04)
	float MobCampManagerMinInactiveTime; // 0x404(0x04)
	struct UMistRateLimitedQueue* RateLimitedMobSpawnQueue; // 0x408(0x08)
	bool bIsDropZone; // 0x410(0x01)
	bool bIsWormMap; // 0x411(0x01)
	char pad_412[0x1e]; // 0x412(0x1e)
	struct AMistWorldTravelZonesManager* WorldTravelZonesManager; // 0x430(0x08)
	struct AMistWeatherSystem* WeatherSystem; // 0x438(0x08)
	struct AMistDynamicMusicManager* DynamicMusicManager; // 0x440(0x08)
	struct AMistIntroSceneController* IntroSceneController; // 0x448(0x08)
	struct AMistWormAttractorController* WormAttractorController; // 0x450(0x08)
	char pad_458[0x78]; // 0x458(0x78)

	void HandleCollisionGroupActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistLevelActor.HandleCollisionGroupActorDestroyed // (Final|Native|Private) // @ game+0x112e740
};

// Class Mist.MistLevelBounds
// Size: 0x3f8 (Inherited: 0x3f8)
struct AMistLevelBounds : AVolume {
};

// Class Mist.MistLevelingQuest
// Size: 0x128 (Inherited: 0x110)
struct UMistLevelingQuest : UMistTutorialQuest {
	struct FName StatTaskName; // 0x110(0x08)
	struct UMistItemTemplate* ItemToUseTemplate; // 0x118(0x08)
	struct FName ItemToUseTaskName; // 0x120(0x08)

	void StatUpdated(struct AMistOasisPlayerState* State); // Function Mist.MistLevelingQuest.StatUpdated // (Final|Native|Private) // @ game+0x112eea0
	void ItemUsed(int32_t SoundId, struct UMistItemTemplate* ItemTemplate, int32_t Count); // Function Mist.MistLevelingQuest.ItemUsed // (Final|Native|Private) // @ game+0x112ec30
};

// Class Mist.MistLevelSequenceDirector
// Size: 0x40 (Inherited: 0x30)
struct UMistLevelSequenceDirector : ULevelSequenceDirector {
	struct AMistIntroSceneController* IntroSceneControllerCached; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)

	void HandleSwitchToGameplayEndPoint(); // Function Mist.MistLevelSequenceDirector.HandleSwitchToGameplayEndPoint // (Final|Native|Public|BlueprintCallable) // @ game+0x112ebe0
	void HandleStartPlayingLastAnimation(); // Function Mist.MistLevelSequenceDirector.HandleStartPlayingLastAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x112ebc0
};

// Class Mist.MistLiquidComponent
// Size: 0x890 (Inherited: 0x7e0)
struct UMistLiquidComponent : UBoxComponent {
	char pad_7E0[0x28]; // 0x7e0(0x28)
	struct UMistInteractableComponent* CollectInteractable; // 0x808(0x08)
	struct UMistInteractableComponent* DrinkInteractable; // 0x810(0x08)
	float MaxZPosition; // 0x818(0x04)
	float MinZPosition; // 0x81c(0x04)
	int64_t MaxCapacity; // 0x820(0x08)
	struct UMistItemTemplate* LiquidItem; // 0x828(0x08)
	int64_t SingleUseQuantity; // 0x830(0x08)
	int64_t UnitsRefilledPerSecond; // 0x838(0x08)
	float RefillStartDelay; // 0x840(0x04)
	bool bCanDrink; // 0x844(0x01)
	bool bCanCollect; // 0x845(0x01)
	bool bEnableDepleting; // 0x846(0x01)
	char pad_847[0x1]; // 0x847(0x01)
	struct FMulticastInlineDelegate OnDrinkInteraction; // 0x848(0x10)
	char pad_858[0x38]; // 0x858(0x38)

	void HandleRefillStart(); // Function Mist.MistLiquidComponent.HandleRefillStart // (Final|Native|Private) // @ game+0x112eba0
	void HandleRefillCycle(); // Function Mist.MistLiquidComponent.HandleRefillCycle // (Final|Native|Private) // @ game+0x112eb80
	void HandleEndCollectInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool bCanceled); // Function Mist.MistLiquidComponent.HandleEndCollectInteraction // (Final|Native|Private|HasOutParms) // @ game+0x112e8a0
	void HandleDrinkInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistLiquidComponent.HandleDrinkInteraction // (Final|Native|Private|HasOutParms) // @ game+0x112e7c0
	void HandleCollectInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistLiquidComponent.HandleCollectInteraction // (Final|Native|Private|HasOutParms) // @ game+0x112e660
	void HandleBeginCollectInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistLiquidComponent.HandleBeginCollectInteraction // (Final|Native|Private|HasOutParms) // @ game+0x112e580
	void ComponentDrinkInteraction__DelegateSignature(struct FMistInteraction Interaction); // DelegateFunction Mist.MistLiquidComponent.ComponentDrinkInteraction__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistLiquidGridComponent
// Size: 0x148 (Inherited: 0xf0)
struct UMistLiquidGridComponent : UActorComponent {
	char pad_F0[0x58]; // 0xf0(0x58)
};

// Class Mist.MistLiquidInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistLiquidInterface : UInterface {
};

// Class Mist.MistLiquidItemTemplate
// Size: 0x1e0 (Inherited: 0x1d8)
struct UMistLiquidItemTemplate : UMistItemTemplate {
	float QuenchThirst; // 0x1d8(0x04)
	char pad_1DC[0x4]; // 0x1dc(0x04)
};

// Class Mist.MistLiquidPumpComponent
// Size: 0x2e0 (Inherited: 0x290)
struct UMistLiquidPumpComponent : USceneComponent {
	struct FMistComponentReference ContainerRef; // 0x290(0x28)
	float PumpInterval; // 0x2b8(0x04)
	int32_t PumpedQuantity; // 0x2bc(0x04)
	int32_t AutoDeactivateFailureCount; // 0x2c0(0x04)
	char pad_2C4[0x1c]; // 0x2c4(0x1c)

	void HandlePumpLiquidTimer(); // Function Mist.MistLiquidPumpComponent.HandlePumpLiquidTimer // (Final|Native|Private) // @ game+0x112eb60
};

// Class Mist.MistLoadingOverlayWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistLoadingOverlayWidget : UMistUIWidget {
	struct UTextBlock* LoadingHintWidget; // 0x2c0(0x08)
	struct FText LoadingHintText; // 0x2c8(0x18)
};

// Class Mist.MistLoadingScreenSettings
// Size: 0x178 (Inherited: 0x38)
struct UMistLoadingScreenSettings : UMistSettingsObject {
	struct FLinearColor BackgroundColor; // 0x38(0x10)
	struct FSoftObjectPath Image; // 0x48(0x18)
	enum class EStretch ImageStretch; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	struct FLinearColor ImageTint; // 0x64(0x10)
	char pad_74[0x4]; // 0x74(0x04)
	struct FSlateFontInfo HintFont; // 0x78(0x50)
	struct FLinearColor HintColor; // 0xc8(0x10)
	struct FLinearColor HintBackgroundColor; // 0xd8(0x10)
	struct FText LoadingGameText; // 0xe8(0x18)
	struct FText LoadingMapText; // 0x100(0x18)
	struct FText StreamingMapText; // 0x118(0x18)
	struct FText LoadingOffMapLobby; // 0x130(0x18)
	struct FText LoadingPlayInRealm; // 0x148(0x18)
	struct FText WaitingForGameData; // 0x160(0x18)
};

// Class Mist.MistLocalPlayer
// Size: 0x2d0 (Inherited: 0x258)
struct UMistLocalPlayer : ULocalPlayer {
	char pad_258[0x78]; // 0x258(0x78)
};

// Class Mist.MistLocalPlayerSubsystem
// Size: 0x138 (Inherited: 0x30)
struct UMistLocalPlayerSubsystem : ULocalPlayerSubsystem {
	struct TSet<struct USoundMix*> ActiveSoundMixes; // 0x30(0x50)
	struct USoundMix* DownedSoundMix; // 0x80(0x08)
	struct USoundMix* SilenceSoundMix; // 0x88(0x08)
	struct USoundMix* UISoundMix; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)
	struct UAudioComponent* TravelMusicAudioComponent; // 0xa0(0x08)
	struct UAudioComponent* TravelMusic2AudioComponent; // 0xa8(0x08)
	struct UAudioComponent* MenuMusicAudioComponent; // 0xb0(0x08)
	struct UAudioComponent* MenuThemeMusicCompnent; // 0xb8(0x08)
	struct USoundBase* MenuMusic; // 0xc0(0x08)
	struct USoundBase* MenuThemeMusic; // 0xc8(0x08)
	struct USoundBase* TravelMusic_A1; // 0xd0(0x08)
	struct USoundBase* TravelMusic_A2; // 0xd8(0x08)
	struct USoundBase* TravelMusic_B; // 0xe0(0x08)
	char pad_E8[0x50]; // 0xe8(0x50)

	void StopMenuMusic(); // Function Mist.MistLocalPlayerSubsystem.StopMenuMusic // (Final|Native|Public|BlueprintCallable) // @ game+0x112ef20
	void PlayTravelMusic(); // Function Mist.MistLocalPlayerSubsystem.PlayTravelMusic // (Final|Native|Public|BlueprintCallable) // @ game+0x112ee60
	void PlayMenuMusic(float StaringTime); // Function Mist.MistLocalPlayerSubsystem.PlayMenuMusic // (Final|Native|Public|BlueprintCallable) // @ game+0x112ede0
	bool IsPlayingMenuMusic(); // Function Mist.MistLocalPlayerSubsystem.IsPlayingMenuMusic // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112ec00
	float GetMenuMusicDelay(); // Function Mist.MistLocalPlayerSubsystem.GetMenuMusicDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x112e560
};

// Class Mist.MistLocomotionStateMachineAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistLocomotionStateMachineAnimNotify : UAnimNotify {
};

// Class Mist.MistLogHudWidget
// Size: 0x310 (Inherited: 0x2e0)
struct UMistLogHudWidget : UMistHUDWidget {
	struct UPanelWidget* LogEntriesWidget; // 0x2e0(0x08)
	int32_t MaxEntries; // 0x2e8(0x04)
	float LifeTime; // 0x2ec(0x04)
	float ShortLifetime; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct TArray<struct UMistHudLogEntry*> EntriesQueue; // 0x2f8(0x10)
	char pad_308[0x8]; // 0x308(0x08)

	void HandleMessageReceived(struct UMistBaseMessageData* Message); // Function Mist.MistLogHudWidget.HandleMessageReceived // (Final|Native|Private) // @ game+0x112eae0
};

// Class Mist.MistLootableCampTreasureComponent
// Size: 0x9b0 (Inherited: 0x9a0)
struct UMistLootableCampTreasureComponent : UMistLootableMeshComponent {
	bool bRequireKillingGuards; // 0x9a0(0x01)
	char pad_9A1[0xf]; // 0x9a1(0x0f)
};

// Class Mist.MistLootableInteractiveMeshComponent
// Size: 0x9d0 (Inherited: 0x9a0)
struct UMistLootableInteractiveMeshComponent : UMistLootableMeshComponent {
	struct FMistComponentReference InteractableReference; // 0x9a0(0x28)
	char pad_9C8[0x8]; // 0x9c8(0x08)

	void HandleExternalLooted(struct UActorComponent* Sender); // Function Mist.MistLootableInteractiveMeshComponent.HandleExternalLooted // (Final|Native|Public|BlueprintCallable) // @ game+0x112e9c0
};

// Class Mist.MistLootablePhysicsActor
// Size: 0x408 (Inherited: 0x400)
struct AMistLootablePhysicsActor : AMistHarvestablePhysicsActor {
	struct UMistLootableMeshComponent* LootableRootComponent; // 0x400(0x08)
};

// Class Mist.MistLootBoxItem
// Size: 0x208 (Inherited: 0x1d8)
struct UMistLootBoxItem : UMistItemTemplate {
	struct FMistLootDesc Loot; // 0x1d8(0x30)
};

// Class Mist.MistLootRuinsQuest
// Size: 0x68 (Inherited: 0x48)
struct UMistLootRuinsQuest : UMistFlotillaQuest {
	struct TArray<struct FMistLootRuinQuestSubtask> Subtasks; // 0x48(0x10)
	struct TArray<struct AActor*> LootedActors; // 0x58(0x10)

	void HandleInteract(struct FMistInteraction& InInteraction); // Function Mist.MistLootRuinsQuest.HandleInteract // (Final|Native|Private|HasOutParms) // @ game+0x112ea40
};

// Class Mist.MistLootSpawner
// Size: 0x430 (Inherited: 0x3c0)
struct AMistLootSpawner : AActor {
	struct FMistLootDesc Loot; // 0x3c0(0x30)
	bool bInheritAttachment; // 0x3f0(0x01)
	bool bPlaceOnGround; // 0x3f1(0x01)
	char pad_3F2[0x2]; // 0x3f2(0x02)
	float GroundAngleLimit; // 0x3f4(0x04)
	struct FRotator MinRotation; // 0x3f8(0x0c)
	struct FRotator MaxRotation; // 0x404(0x0c)
	bool bManualSpawnMode; // 0x410(0x01)
	char pad_411[0x3]; // 0x411(0x03)
	float SpawnDelay; // 0x414(0x04)
	int32_t SpawnAttempts; // 0x418(0x04)
	bool bDrawDebugTraces; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	struct USceneComponent* SceneComponent; // 0x420(0x08)
	struct UBoxComponent* BoxComponent; // 0x428(0x08)

	void SpawnLoot(); // Function Mist.MistLootSpawner.SpawnLoot // (Final|Native|Public|BlueprintCallable) // @ game+0x1131480
	void HandleMatchStateChanged(struct FName NewState); // Function Mist.MistLootSpawner.HandleMatchStateChanged // (Final|Native|Private) // @ game+0x1131170
};

// Class Mist.MistLootSpawnerComponent
// Size: 0x148 (Inherited: 0xf0)
struct UMistLootSpawnerComponent : UActorComponent {
	struct FMistLootDesc Loot; // 0xf0(0x30)
	struct FMistComponentReference ContainerRef; // 0x120(0x28)
};

// Class Mist.MistLumbermillComponent
// Size: 0x168 (Inherited: 0xf0)
struct UMistLumbermillComponent : UActorComponent {
	char pad_F0[0x28]; // 0xf0(0x28)
	struct FMistComponentReference TreeTriggerRef; // 0x118(0x28)
	struct UDamageType* DamageType; // 0x140(0x08)
	struct TArray<struct FMistToolTier> ToolTiers; // 0x148(0x10)
	struct TArray<struct UMistContainerComponent*> OutputContainers; // 0x158(0x10)

	void TreeTriggerOverlap(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistLumbermillComponent.TreeTriggerOverlap // (Final|Native|Public) // @ game+0x11314a0
};

// Class Mist.MistMainMenuBackgroundWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistMainMenuBackgroundWidget : UMistUIBackgroundWidget {
	struct UWidget* LogoPanelWidget; // 0x2c0(0x08)
	struct UWidgetAnimation* LogoAnimation; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class Mist.MistMainMenuCharacterItemWidget
// Size: 0x330 (Inherited: 0x2c0)
struct UMistMainMenuCharacterItemWidget : UMistUIWidget {
	struct UTextBlock* RealmNameWidget; // 0x2c0(0x08)
	struct UTextBlock* CharacterNameWidget; // 0x2c8(0x08)
	struct UTextBlock* ClanNameWidget; // 0x2d0(0x08)
	struct UTextBlock* CharacterLevelWidget; // 0x2d8(0x08)
	struct UTextBlock* CharacterMoneyWidget; // 0x2e0(0x08)
	struct UWidget* CharacterStatusWidget; // 0x2e8(0x08)
	struct UWidget* RealmStatusWidget; // 0x2f0(0x08)
	struct UWidget* RealmOfflineWidget; // 0x2f8(0x08)
	struct UWidget* LoadingIndicatorWidget; // 0x300(0x08)
	struct UMistBaseButtonWidget* PlayButtonWidget; // 0x308(0x08)
	struct UMistBaseButtonWidget* LobbyButtonWidget; // 0x310(0x08)
	struct UMistBaseButtonWidget* DetailsButtonWidget; // 0x318(0x08)
	struct UMistAccountCharacterListItemData* ItemData; // 0x320(0x08)
	struct UMistAccountRealmCharacterData* Data; // 0x328(0x08)
};

// Class Mist.MistMainMenuGameMode
// Size: 0x4c8 (Inherited: 0x460)
struct AMistMainMenuGameMode : AGameModeBase {
	struct UMistMainMenuScreen* MainMenuScreen; // 0x460(0x08)
	struct UMistJoinRealmScreen* JoinRealmScreen; // 0x468(0x08)
	struct UMistJoinRealmSearchScreen* JoinRealmSearchScreen; // 0x470(0x08)
	struct UMistOffMapLobby2Screen* OffMapLobbyScreen; // 0x478(0x08)
	struct UMistCreateCharacterScreen* CreateCharacterScreen; // 0x480(0x08)
	struct UMistDeleteCharacterScreen* DeleteCharacterScreen; // 0x488(0x08)
	struct UMistJoinQueueScreen* JoinQueueScreen; // 0x490(0x08)
	struct UMistGameInstance* GameInstance; // 0x498(0x08)
	struct UMistGameClientSubsystem* GameClientInstance; // 0x4a0(0x08)
	char pad_4A8[0x20]; // 0x4a8(0x20)
};

// Class Mist.MistMainMenuScreen
// Size: 0x4e8 (Inherited: 0x3a0)
struct UMistMainMenuScreen : UMistUIScreen {
	struct UCanvasPanel* CanvasPanelWidget; // 0x3a0(0x08)
	struct UMistEngagementWidget* EngagementWidget; // 0x3a8(0x08)
	struct UMistEarlyAccessScreen* EarlyAccessScreen; // 0x3b0(0x08)
	struct UButton* PlayButtonWidget; // 0x3b8(0x08)
	struct UButton* OptionsButtonWidget; // 0x3c0(0x08)
	struct UButton* CreditsButtonWidget; // 0x3c8(0x08)
	struct UButton* QuitButtonWidget; // 0x3d0(0x08)
	struct UButton* SuggestionsButton; // 0x3d8(0x08)
	struct UButton* FeedbackButton; // 0x3e0(0x08)
	struct UTextBlock* UserSwitchButtonLabel; // 0x3e8(0x08)
	struct UPanelWidget* CharactersPanelWidget; // 0x3f0(0x08)
	struct UPanelWidget* CharactersListWidget; // 0x3f8(0x08)
	struct UPanelWidget* MotdPanelWidget; // 0x400(0x08)
	struct UTextBlock* MotdTextWidget; // 0x408(0x08)
	struct UWidget* StatusPanelWidget; // 0x410(0x08)
	struct UTextBlock* StatusTextWidget; // 0x418(0x08)
	struct UCircularThrobber* StatusIndicatorWidget; // 0x420(0x08)
	struct UWidget* ErrorPanelWidget; // 0x428(0x08)
	struct UTextBlock* ErrorTitleTextWidget; // 0x430(0x08)
	struct UTextBlock* ErrorTextWidget; // 0x438(0x08)
	struct FText SignInRetryText; // 0x440(0x18)
	struct FString SuggestionsUrl; // 0x458(0x10)
	struct FString FeedbackUrl; // 0x468(0x10)
	char pad_478[0x48]; // 0x478(0x48)
	struct UMistAccountAuthDataManager* AuthData; // 0x4c0(0x08)
	struct UMistAccountCharacterListData* Data; // 0x4c8(0x08)
	struct UMistSettingsScreen* SettingsScreen; // 0x4d0(0x08)
	struct UMistCreditsScreen* CreditsScreen; // 0x4d8(0x08)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x4e0(0x08)

	void HandleUserSwitchClicked(); // Function Mist.MistMainMenuScreen.HandleUserSwitchClicked // (Final|Native|Private) // @ game+0x10968b0
	void HandleSuggestionsClicked(); // Function Mist.MistMainMenuScreen.HandleSuggestionsClicked // (Final|Native|Private) // @ game+0x11312d0
	void HandleQuitClicked(); // Function Mist.MistMainMenuScreen.HandleQuitClicked // (Final|Native|Private) // @ game+0x1131230
	void HandlePlayClicked(); // Function Mist.MistMainMenuScreen.HandlePlayClicked // (Final|Native|Private) // @ game+0x1131210
	void HandleOptionsClicked(); // Function Mist.MistMainMenuScreen.HandleOptionsClicked // (Final|Native|Private) // @ game+0x11311f0
	void HandleFeedbackClicked(); // Function Mist.MistMainMenuScreen.HandleFeedbackClicked // (Final|Native|Private) // @ game+0x1130f40
	void HandleCreditsClicked(); // Function Mist.MistMainMenuScreen.HandleCreditsClicked // (Final|Native|Private) // @ game+0x1130f20
	struct UWidget* FocusRecentlyPlayed(enum class EUINavigation UINavigation); // Function Mist.MistMainMenuScreen.FocusRecentlyPlayed // (Final|Native|Public|BlueprintCallable) // @ game+0x1130e60
};

// Class Mist.MistManagedActorSpawnLocation
// Size: 0x428 (Inherited: 0x3c0)
struct AMistManagedActorSpawnLocation : AActor {
	char pad_3C0[0x30]; // 0x3c0(0x30)
	struct AActor* ActorClassToSpawn; // 0x3f0(0x08)
	struct FName ActorGroup; // 0x3f8(0x08)
	float MinDistanceToPlayerToSpawn; // 0x400(0x04)
	float MinInactiveTime; // 0x404(0x04)
	struct AActor* SpawnedActor; // 0x408(0x08)
	char pad_410[0x18]; // 0x410(0x18)

	void HandleManagedActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistManagedActorSpawnLocation.HandleManagedActorDestroyed // (Final|Native|Private) // @ game+0x1130f60
};

// Class Mist.MistMannedBallistaWidget
// Size: 0x330 (Inherited: 0x2e8)
struct UMistMannedBallistaWidget : UMistMannedInfoWidget {
	struct UMistMannedBallistaControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistMannedWeaponInventoryWidget* InventoryWidget; // 0x2f0(0x08)
	struct UMistMannedWeaponAmmoRackWidget* AmmoRackWidget; // 0x2f8(0x08)
	struct UMistMannedWeaponTetherWidget* TetherWidget; // 0x300(0x08)
	struct UMistInputBindingHintWidget* ShootHintWidget; // 0x308(0x08)
	char pad_310[0x20]; // 0x310(0x20)

	void HandleMannedControlStateChanged(struct UMistMannedBallistaControlComponent* Sender, enum class EMistBallistaState PrevState, enum class EMistBallistaState NextState); // Function Mist.MistMannedBallistaWidget.HandleMannedControlStateChanged // (Final|Native|Private) // @ game+0x1130ff0
};

// Class Mist.MistMannedBattleFanWidget
// Size: 0x370 (Inherited: 0x2e8)
struct UMistMannedBattleFanWidget : UMistMannedInfoWidget {
	struct UMistBattleFanComponent* BattleFanControlComponent; // 0x2e8(0x08)
	struct UProgressBar* OverheatProgress; // 0x2f0(0x08)
	struct UTextBlock* SuperblowChargedText; // 0x2f8(0x08)
	struct UMistUICircularProgressBar* ChargingProgressWidget; // 0x300(0x08)
	struct UTextBlock* ChargingCountdownWidget; // 0x308(0x08)
	struct UMistContainerWidget* LavaContainerWidget; // 0x310(0x08)
	struct UMistContainerWidget* TorqueContainerWidget; // 0x318(0x08)
	struct UMistBattleFanEffectContainerWidget* EffectContainerWidget; // 0x320(0x08)
	struct UMistInputBindingHintWidget* SuperBlowBindingWidget; // 0x328(0x08)
	struct UMistInputBindingHintWidget* AbsorbBlowBindingWidget; // 0x330(0x08)
	struct UMistInputBindingHintWidget* AbsorbShiftBindingWidget; // 0x338(0x08)
	struct UMistInputBindingHintWidget* NormalBlowBindingWidget; // 0x340(0x08)
	struct UTextBlock* OverheatedPanel; // 0x348(0x08)
	struct UMistContainerComponent* TorqueContainerComponent; // 0x350(0x08)
	char pad_358[0x18]; // 0x358(0x18)

	void HandleStoredEffectChanged(struct AMistAreaEffect* InEffectClass); // Function Mist.MistMannedBattleFanWidget.HandleStoredEffectChanged // (Final|Native|Private) // @ game+0x1131250
};

// Class Mist.MistMannedCatapultControlComponent
// Size: 0x848 (Inherited: 0x638)
struct UMistMannedCatapultControlComponent : UMistMannedWithAmmoRackControlComponent {
	struct FMulticastInlineDelegate OnBlockMoveBegin; // 0x638(0x10)
	struct FMulticastInlineDelegate OnBlockMoveEnd; // 0x648(0x10)
	struct FMulticastInlineDelegate OnArmMoveBegin; // 0x658(0x10)
	struct FMulticastInlineDelegate OnArmMoveEnd; // 0x668(0x10)
	struct FMulticastInlineDelegate OnArmReleased; // 0x678(0x10)
	struct FMulticastInlineDelegate OnArmHitBlock; // 0x688(0x10)
	struct FMulticastInlineDelegate OnReloadFailed; // 0x698(0x10)
	struct FMulticastInlineDelegate OnReloadSucceed; // 0x6a8(0x10)
	char pad_6B8[0x28]; // 0x6b8(0x28)
	struct FMistComponentReference BlockComponentRef; // 0x6e0(0x28)
	struct FMistComponentReference ArmComponentRef; // 0x708(0x28)
	float MinArmPitch; // 0x730(0x04)
	float MaxArmPitch; // 0x734(0x04)
	float BlockSpeed; // 0x738(0x04)
	float MinBlockPitch; // 0x73c(0x04)
	float MaxBlockPitch; // 0x740(0x04)
	float MinShootAngle; // 0x744(0x04)
	float BlockSpeedInputModifierDeceleration; // 0x748(0x04)
	float BlockSpeedInverseInputModifier; // 0x74c(0x04)
	float ArmSpeed; // 0x750(0x04)
	float RetractingSpeed; // 0x754(0x04)
	struct UCurveFloat* ArmFiringSpeedCurve; // 0x758(0x08)
	struct UCurveFloat* FiringPowerCurve; // 0x760(0x08)
	float ArmBlockOffset; // 0x768(0x04)
	float ArmReloadThreshold; // 0x76c(0x04)
	float FiringPowerMultiplier; // 0x770(0x04)
	float PedalsSpeedMultiplier; // 0x774(0x04)
	float CrankSpeedMultiplier; // 0x778(0x04)
	char pad_77C[0x4]; // 0x77c(0x04)
	struct FMistComponentReference ProjectileMeshRef; // 0x780(0x28)
	struct FMistComponentReference ReloadInteractableRef; // 0x7a8(0x28)
	float CurrentBlockSpeed; // 0x7d0(0x04)
	float CurrentArmSpeed; // 0x7d4(0x04)
	char pad_7D8[0xc]; // 0x7d8(0x0c)
	enum class EMistCatapultState State; // 0x7e4(0x01)
	char pad_7E5[0x23]; // 0x7e5(0x23)
	struct FMistProjectileItem ProjectileItem; // 0x808(0x18)
	struct USceneComponent* ArmComponent; // 0x820(0x08)
	struct USceneComponent* BlockComponent; // 0x828(0x08)
	float CurrentArmPitch; // 0x830(0x04)
	float CurrentBlockPitch; // 0x834(0x04)
	float TargetArmPitch; // 0x838(0x04)
	float TargetBlockPitch; // 0x83c(0x04)
	float TargetBlockSpeedInputModifier; // 0x840(0x04)
	char pad_844[0x4]; // 0x844(0x04)

	void ServerTryReloadOrShoot(); // Function Mist.MistMannedCatapultControlComponent.ServerTryReloadOrShoot // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a41b0
	void ServerSetTargetRotations(float InArmPitch, float InBlockPitch, float InBlockSpeedInputModifier); // Function Mist.MistMannedCatapultControlComponent.ServerSetTargetRotations // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1131370
	void OnRep_State(); // Function Mist.MistMannedCatapultControlComponent.OnRep_State // (Final|Native|Private) // @ game+0x1131350
	void EventArmHitBlock__DelegateSignature(struct UMistMannedCatapultControlComponent* Sender, float ArmAngleDifference); // DelegateFunction Mist.MistMannedCatapultControlComponent.EventArmHitBlock__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void Event__DelegateSignature(struct UMistMannedCatapultControlComponent* Sender); // DelegateFunction Mist.MistMannedCatapultControlComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistMannedCatapultWidget
// Size: 0x338 (Inherited: 0x2e8)
struct UMistMannedCatapultWidget : UMistMannedInfoWidget {
	struct UMistMannedCatapultControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistMannedWeaponInventoryWidget* InventoryWidget; // 0x2f0(0x08)
	struct UMistMannedWeaponAmmoRackWidget* AmmoRackWidget; // 0x2f8(0x08)
	struct UMistInputBindingHintWidget* ShootHintWidget; // 0x300(0x08)
	struct UMistInputBindingHintWidget* LowerArmToReloadHintWidget; // 0x308(0x08)
	char pad_310[0x28]; // 0x310(0x28)

	void HandleMannedControlStateChanged(struct UMistMannedCatapultControlComponent* Sender); // Function Mist.MistMannedCatapultWidget.HandleMannedControlStateChanged // (Final|Native|Private) // @ game+0x11310f0
};

// Class Mist.MistMannedCraneControlComponent
// Size: 0x630 (Inherited: 0x598)
struct UMistMannedCraneControlComponent : UMistMannedGimbalControlComponent {
	struct AActor* HookActorClass; // 0x598(0x08)
	struct FVector2D ActorMassRange; // 0x5a0(0x08)
	struct FVector2D ArmExtensionSpeed; // 0x5a8(0x08)
	struct FVector2D HookRetractionSpeed; // 0x5b0(0x08)
	struct FVector2D CraneRotationSpeed; // 0x5b8(0x08)
	float PedalsSpeedMultiplier; // 0x5c0(0x04)
	float CrankSpeedMultiplier; // 0x5c4(0x04)
	struct FMistComponentReference HookMasterTetherRef; // 0x5c8(0x28)
	float CurrentHookSpeed; // 0x5f0(0x04)
	float CurrentArmSpeed; // 0x5f4(0x04)
	float CurrentArmExtension; // 0x5f8(0x04)
	float CurrentPedalsPosition; // 0x5fc(0x04)
	float CurrentArmCrankPosition; // 0x600(0x04)
	float CurrentBlockCrankPosition; // 0x604(0x04)
	char pad_608[0x8]; // 0x608(0x08)
	enum class EMistCraneState State; // 0x610(0x01)
	char pad_611[0x7]; // 0x611(0x07)
	struct AActor* HookActor; // 0x618(0x08)
	struct AActor* AttachedActor; // 0x620(0x08)
	struct UMistTetherMasterComponent* HookMasterTether; // 0x628(0x08)

	void ServerTryGrab(); // Function Mist.MistMannedCraneControlComponent.ServerTryGrab // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a19f0
	void ServerSetReelState(float InHookInput); // Function Mist.MistMannedCraneControlComponent.ServerSetReelState // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1133e50
	void ServerSetArmInput(float InValue); // Function Mist.MistMannedCraneControlComponent.ServerSetArmInput // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1133dd0
	void ServerRelease(); // Function Mist.MistMannedCraneControlComponent.ServerRelease // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a1a10
	void OnRep_State(); // Function Mist.MistMannedCraneControlComponent.OnRep_State // (Final|Native|Private) // @ game+0x10968b0
};

// Class Mist.MistMannedCraneWidget
// Size: 0x338 (Inherited: 0x2e8)
struct UMistMannedCraneWidget : UMistMannedInfoWidget {
	struct UMistMannedBallistaControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistMannedWeaponTetherWidget* TetherWidget; // 0x2f0(0x08)
	struct UMistInputBindingHintWidget* ShootHintWidget; // 0x2f8(0x08)
	struct UMistInputBindingHintWidget* SnapHint; // 0x300(0x08)
	struct UMistInputBindingHintWidget* ReelInHint; // 0x308(0x08)
	struct UMistInputBindingHintWidget* ReelOutHint; // 0x310(0x08)
	struct UCanvasPanel* CountdownModule; // 0x318(0x08)
	struct UMistUICircularProgressBar* CountdownProgress; // 0x320(0x08)
	struct UTextBlock* CountdownValue; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)

	void HandleMannedControlStateChanged(struct UMistMannedBallistaControlComponent* Sender, enum class EMistBallistaState PrevState, enum class EMistBallistaState NextState); // Function Mist.MistMannedCraneWidget.HandleMannedControlStateChanged // (Final|Native|Private) // @ game+0x11338e0
};

// Class Mist.MistMannedDoubleBarreledGunWidget
// Size: 0x328 (Inherited: 0x2e8)
struct UMistMannedDoubleBarreledGunWidget : UMistMannedInfoWidget {
	struct UMistDoubleBarreledGunControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistMannedWeaponInventoryWidget* InventoryWidget; // 0x2f0(0x08)
	struct UMistMannedWeaponDoubleBarrelsWidget* DoubleBarrelsWidget; // 0x2f8(0x08)
	char pad_300[0x28]; // 0x300(0x28)
};

// Class Mist.MistMannedGimbalControlAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UMistMannedGimbalControlAnimInstance : UMistMannedControlAnimInstance {
	float CurrentPitchAngle; // 0x278(0x04)
	float CurrentYawAngle; // 0x27c(0x04)
	float PitchRotationSpeed; // 0x280(0x04)
	float YawRotationSpeed; // 0x284(0x04)
	struct UMistMannedGimbalControlComponent* CachedGimbalControlComponent; // 0x288(0x08)
};

// Class Mist.MistMannedRepeaterControlComponent
// Size: 0x740 (Inherited: 0x638)
struct UMistMannedRepeaterControlComponent : UMistMannedWithAmmoRackControlComponent {
	char pad_638[0x8]; // 0x638(0x08)
	struct FMulticastInlineDelegate OnReloadFailed; // 0x640(0x10)
	struct FMulticastInlineDelegate OnFire; // 0x650(0x10)
	struct FMulticastInlineDelegate OnLastBoltFired; // 0x660(0x10)
	char pad_670[0x18]; // 0x670(0x18)
	float PreparingTime; // 0x688(0x04)
	float FiringTime; // 0x68c(0x04)
	float CoolingDownTime; // 0x690(0x04)
	float BaseTurningThreshold; // 0x694(0x04)
	float GunSpeed; // 0x698(0x04)
	float PedalsSpeedMultiplier; // 0x69c(0x04)
	struct FMistComponentReference GunRef; // 0x6a0(0x28)
	struct FMistComponentReference LoadedBoltRef; // 0x6c8(0x28)
	enum class EMistRepeaterState State; // 0x6f0(0x01)
	char pad_6F1[0x3]; // 0x6f1(0x03)
	float TargetGunPitch; // 0x6f4(0x04)
	float TargetGunYaw; // 0x6f8(0x04)
	float CurrentGunPitch; // 0x6fc(0x04)
	float CurrentGunYaw; // 0x700(0x04)
	char pad_704[0xc]; // 0x704(0x0c)
	float CurrentGunYawSpeed; // 0x710(0x04)
	float CurrentGunPitchSpeed; // 0x714(0x04)
	struct USceneComponent* GunComponent; // 0x718(0x08)
	struct FMistProjectileItem LoadedProjectileItem; // 0x720(0x18)
	char pad_738[0x8]; // 0x738(0x08)

	void ServerSetWantsToFire(bool bValue); // Function Mist.MistMannedRepeaterControlComponent.ServerSetWantsToFire // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c3b20
	void ServerSetTargetRotations(float InPitch, float InYaw); // Function Mist.MistMannedRepeaterControlComponent.ServerSetTargetRotations // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1134020
	void OnRep_State(); // Function Mist.MistMannedRepeaterControlComponent.OnRep_State // (Final|Native|Private) // @ game+0x1133d90
	void OnRep_LoadedProjectileItem(); // Function Mist.MistMannedRepeaterControlComponent.OnRep_LoadedProjectileItem // (Final|Native|Private) // @ game+0x1133d70
	void Event__DelegateSignature(struct UMistMannedRepeaterControlComponent* Sender); // DelegateFunction Mist.MistMannedRepeaterControlComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistMannedRepeaterWidget
// Size: 0x328 (Inherited: 0x2e8)
struct UMistMannedRepeaterWidget : UMistMannedInfoWidget {
	struct UMistMannedRepeaterControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistMannedWeaponInventoryWidget* InventoryWidget; // 0x2f0(0x08)
	struct UMistMannedWeaponAmmoRackWidget* AmmoRackWidget; // 0x2f8(0x08)
	struct UMistInputBindingHintWidget* ShootHintWidget; // 0x300(0x08)
	char pad_308[0x20]; // 0x308(0x20)
};

// Class Mist.MistMannedSlingshotWidget
// Size: 0x320 (Inherited: 0x2e8)
struct UMistMannedSlingshotWidget : UMistMannedInfoWidget {
	struct UMistSlingshotControlComponent* MannedControlComponent; // 0x2e8(0x08)
	struct UMistMannedWeaponInventoryWidget* InventoryWidget; // 0x2f0(0x08)
	struct UMistInputBindingHintWidget* ShootHintWidget; // 0x2f8(0x08)
	char pad_300[0x20]; // 0x300(0x20)
};

// Class Mist.MistMannedWalkerInfoWidget
// Size: 0x448 (Inherited: 0x2e8)
struct UMistMannedWalkerInfoWidget : UMistMannedInfoWidget {
	struct AMistWalker* MannedWalker; // 0x2e8(0x08)
	struct UTextBlock* WalkerNameWidget; // 0x2f0(0x08)
	struct UTextBlock* ChassisHealth; // 0x2f8(0x08)
	struct UProgressBar* ChassisHealthBar; // 0x300(0x08)
	struct UPanelWidget* WingsLeftPanel; // 0x308(0x08)
	struct UTextBlock* WingsLeftHealth; // 0x310(0x08)
	struct UProgressBar* WingsLeftHealthBar; // 0x318(0x08)
	struct UPanelWidget* WingsRightPanel; // 0x320(0x08)
	struct UTextBlock* WingsRightHealth; // 0x328(0x08)
	struct UProgressBar* WingsRightHealthBar; // 0x330(0x08)
	struct UPanelWidget* LegsLeftPanel; // 0x338(0x08)
	struct UTextBlock* LegsLeftHealth; // 0x340(0x08)
	struct UProgressBar* LegsLeftHealthBar; // 0x348(0x08)
	struct UPanelWidget* LegsRightPanel; // 0x350(0x08)
	struct UTextBlock* LegsRightHealth; // 0x358(0x08)
	struct UMistCheckBox* SpawnSelectedCheckbox; // 0x360(0x08)
	struct UProgressBar* LegsRightHealthBar; // 0x368(0x08)
	struct UTextBlock* AttachedMassWidget; // 0x370(0x08)
	struct UTextBlock* WaterStateWidget; // 0x378(0x08)
	struct UWidget* TorqueLabelWidget; // 0x380(0x08)
	struct UTextBlock* TorqueStateWidget; // 0x388(0x08)
	struct UTextBlock* RespawnAmountWidget; // 0x390(0x08)
	struct UWidget* NoRespawnsLeftWidget; // 0x398(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x3a0(0x08)
	struct UWidgetAnimation* NoRespawnsLeftAnimation; // 0x3a8(0x08)
	struct UWidget* SandinessLabelWidget; // 0x3b0(0x08)
	struct UProgressBar* SandinessLevelBar; // 0x3b8(0x08)
	struct UBorder* SandinessWarning; // 0x3c0(0x08)
	int32_t RespawnsLeft; // 0x3c8(0x04)
	int32_t RespawnsMax; // 0x3cc(0x04)
	struct UCanvasPanel* WalkerInputHintContainer; // 0x3d0(0x08)
	struct UCanvasPanel* SkywalkerInputHintContainer; // 0x3d8(0x08)
	struct UMistInputBindingHintWidget* SprintBindingHintWidget; // 0x3e0(0x08)
	struct FSlateColor UsingTorqueColor; // 0x3e8(0x28)
	struct FSlateColor NotUsingTorqueColor; // 0x410(0x28)
	char pad_438[0x10]; // 0x438(0x10)

	void OnSandinessWarningDisappeared(); // Function Mist.MistMannedWalkerInfoWidget.OnSandinessWarningDisappeared // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistMannedWeaponAmmoRackItemWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistMannedWeaponAmmoRackItemWidget : UMistUIWidget {
	struct FMistItem Item; // 0x2c0(0x18)
};

// Class Mist.MistMannedWeaponAmmoRackWidget
// Size: 0x380 (Inherited: 0x2c0)
struct UMistMannedWeaponAmmoRackWidget : UMistUIWidget {
	struct FSlateSound LoadSound; // 0x2c0(0x18)
	struct FSlateSound UnloadSound; // 0x2d8(0x18)
	struct FSlateSound StartLoadingSound; // 0x2f0(0x18)
	struct FSlateSound StartUnlodingSound; // 0x308(0x18)
	struct FSlateSound RackFullSound; // 0x320(0x18)
	struct UScrollBox* ItemsWidget; // 0x338(0x08)
	struct UMistInputBindingHintWidget* ReloadHintWidget; // 0x340(0x08)
	int32_t Capacity; // 0x348(0x04)
	int32_t Count; // 0x34c(0x04)
	char pad_350[0x20]; // 0x350(0x20)
	struct UMistContainerComponent* BoundContainer; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)

	void ReceiveContentChanged(); // Function Mist.MistMannedWeaponAmmoRackWidget.ReceiveContentChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistMannedWeaponDoubleBarrelsWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistMannedWeaponDoubleBarrelsWidget : UMistUIWidget {
	struct UMistInputBindingHintWidget* ShootBarrel0HintWidget; // 0x2c0(0x08)
	struct UMistInputBindingHintWidget* ShootBarrel1HintWidget; // 0x2c8(0x08)
	int32_t CapacityPerBarrel; // 0x2d0(0x04)
	int32_t BarrelCount0; // 0x2d4(0x04)
	int32_t BarrelCount1; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct UMistDoubleBarreledGunControlComponent* BoundMannedControlComponent; // 0x2e0(0x08)

	void ReceiveUpdated(); // Function Mist.MistMannedWeaponDoubleBarrelsWidget.ReceiveUpdated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveReloading(int32_t BarrelIndex, float Duration); // Function Mist.MistMannedWeaponDoubleBarrelsWidget.ReceiveReloading // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveFiring(int32_t BarrelIndex); // Function Mist.MistMannedWeaponDoubleBarrelsWidget.ReceiveFiring // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleReloadBegin(struct UMistDoubleBarreledGunControlComponent* InSender, int32_t InBarrelIndex); // Function Mist.MistMannedWeaponDoubleBarrelsWidget.HandleReloadBegin // (Final|Native|Private) // @ game+0x1137370
	void HandleFireEnd(struct UMistDoubleBarreledGunControlComponent* InSender, int32_t InBarrelIndex, bool bInBarrelIsEmpty); // Function Mist.MistMannedWeaponDoubleBarrelsWidget.HandleFireEnd // (Final|Native|Private) // @ game+0x11371c0
};

// Class Mist.MistMannedWeaponInventoryItemWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistMannedWeaponInventoryItemWidget : UMistUIWidget {
	struct FMistItem Item; // 0x2c0(0x18)
	int32_t Count; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
};

// Class Mist.MistMannedWeaponInventoryWidget
// Size: 0x408 (Inherited: 0x2c0)
struct UMistMannedWeaponInventoryWidget : UMistUIWidget {
	struct UMistHorizontalSelectionIndicatorWidget* SelectionWidget; // 0x2c0(0x08)
	struct UScrollBox* ItemsWidget; // 0x2c8(0x08)
	struct UMistInputBindingHintWidget* ReloadHintWidget; // 0x2d0(0x08)
	struct UMistInputBindingHintWidget* ReloadBarrel0HintWidget; // 0x2d8(0x08)
	struct UMistInputBindingHintWidget* ReloadBarrel1HintWidget; // 0x2e0(0x08)
	struct UMistInputBindingHintWidget* PreviousItemHint; // 0x2e8(0x08)
	struct UMistInputBindingHintWidget* NextItemHint; // 0x2f0(0x08)
	struct FSlateSound ChangeSelectionSound; // 0x2f8(0x18)
	char pad_310[0x50]; // 0x310(0x50)
	struct AMistWalker* BoundWalker; // 0x360(0x08)
	struct TArray<struct UMistContainerComponent*> BoundContainers; // 0x368(0x10)
	struct TSet<struct UMistItemTemplate*> AllowedItems; // 0x378(0x50)
	struct TArray<struct FMistMannedWeaponInventoryItemData> DataItems; // 0x3c8(0x10)
	char pad_3D8[0x30]; // 0x3d8(0x30)
};

// Class Mist.MistMannedWeaponTetherWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistMannedWeaponTetherWidget : UMistUIWidget {
	float Tension; // 0x2c0(0x04)
	float Health; // 0x2c4(0x04)
	float State; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct UMistInputBindingHintWidget* ReelOutHint; // 0x2d0(0x08)
	struct UMistInputBindingHintWidget* ReelInHint; // 0x2d8(0x08)
	struct UMistInputBindingHintWidget* SnapHint; // 0x2e0(0x08)
	struct UMistTetherMasterComponent* BoundTetherComponent; // 0x2e8(0x08)
	char pad_2F0[0x18]; // 0x2f0(0x18)

	void HandleTetherStressChanged(struct UMistTetherMasterComponent* InTetherComponent, float InNewTension, float InOldTension, float InNewHealth, float InOldHealth, float InDeltaTime); // Function Mist.MistMannedWeaponTetherWidget.HandleTetherStressChanged // (Final|Native|Private) // @ game+0x1137650
};

// Class Mist.MistMap2Screen
// Size: 0x418 (Inherited: 0x3a0)
struct UMistMap2Screen : UMistUIScreen {
	char pad_3A0[0x18]; // 0x3a0(0x18)
	struct UMistRealmMapWidget* RealmMapWidget; // 0x3b8(0x08)
	struct UMistRealmMapMigrationWidget* RealmMapMigrationWidget; // 0x3c0(0x08)
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x3c8(0x08)
	struct UMistNotificationsWidget* NotificationsWidget; // 0x3d0(0x08)
	char pad_3D8[0x10]; // 0x3d8(0x10)
	struct UMistRealmMapData* RealmMapData; // 0x3e8(0x08)
	char pad_3F0[0x28]; // 0x3f0(0x28)
};

// Class Mist.MistMapFilterTooltipWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistMapFilterTooltipWidget : UMistUIWidget {
	struct UTextBlock* MapTooltipTextWidget; // 0x2c0(0x08)
	char pad_2C8[0x18]; // 0x2c8(0x18)

	void CustomInit(struct UWidget* ParentWidget); // Function Mist.MistMapFilterTooltipWidget.CustomInit // (Final|Native|Public|BlueprintCallable) // @ game+0x1137120
};

// Class Mist.MistMapFoliageCell
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistMapFoliageCell : UMistUIWidget {
	struct UImage* FoliageIcon; // 0x2c0(0x08)
	struct TArray<struct FMistCurrentFoliageEntry> FoliageEntries; // 0x2c8(0x10)
	struct FString MapPath; // 0x2d8(0x10)
	bool bUnlocked; // 0x2e8(0x01)
	bool bShowName; // 0x2e9(0x01)
	char pad_2EA[0x6]; // 0x2ea(0x06)

	void SetFoliageEntry(struct TArray<struct FMistCurrentFoliageEntry> InFoliageEntry, bool bInShowName); // Function Mist.MistMapFoliageCell.SetFoliageEntry // (Final|Native|Public) // @ game+0x1137dc0
};

// Class Mist.MistMapFoliageList
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistMapFoliageList : UMistUIWidget {
	struct UGridPanel* FoliageGrid; // 0x2c0(0x08)
	struct UTexture2D* UndiscoveredTexture; // 0x2c8(0x08)
	struct UTexture2D* DefaultDiscoveredTexture; // 0x2d0(0x08)
	bool bCellsShowNames; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
};

// Class Mist.MistResourceDiscoveryWidget
// Size: 0x320 (Inherited: 0x2e0)
struct UMistResourceDiscoveryWidget : UMistHUDWidget {
	char pad_2E0[0x8]; // 0x2e0(0x08)
	bool bRedrawNewFoliage; // 0x2e8(0x01)
	bool bDiscoveryWidgetVisible; // 0x2e9(0x01)
	char pad_2EA[0x6]; // 0x2ea(0x06)
	struct UTextBlock* FoliageHeaderName; // 0x2f0(0x08)
	struct UTextBlock* FoliageDescriptionText; // 0x2f8(0x08)
	struct UImage* FoliageIcon; // 0x300(0x08)
	struct UVerticalBox* DiscoveryList; // 0x308(0x08)
	bool bShowName; // 0x310(0x01)
	bool bDebugView; // 0x311(0x01)
	char pad_312[0xe]; // 0x312(0x0e)

	void OnDiscoveryAchieved(); // Function Mist.MistResourceDiscoveryWidget.OnDiscoveryAchieved // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistMapFoliagePopup
// Size: 0x320 (Inherited: 0x320)
struct UMistMapFoliagePopup : UMistResourceDiscoveryWidget {
};

// Class Mist.MistMapIconComponent
// Size: 0xad0 (Inherited: 0xa60)
struct UMistMapIconComponent : UMapIconComponent {
	char pad_A60[0x70]; // 0xa60(0x70)
};

// Class Mist.MistMapIconManagerComponent
// Size: 0x208 (Inherited: 0xf0)
struct UMistMapIconManagerComponent : UActorComponent {
	char pad_F0[0x50]; // 0xf0(0x50)
	struct TMap<uint64_t, struct FMistMapIconData> MapIcons; // 0x140(0x50)
	char pad_190[0x78]; // 0x190(0x78)
};

// Class Mist.MistMapIconProviderComponent
// Size: 0x260 (Inherited: 0xf0)
struct UMistMapIconProviderComponent : UActorComponent {
	struct UMistMapIconComponent* MapIconClass; // 0xf0(0x08)
	bool bHideWhenNotOwned; // 0xf8(0x01)
	bool bHideForClanMembers; // 0xf9(0x01)
	bool bGroupChildren; // 0xfa(0x01)
	bool bAllowGrouping; // 0xfb(0x01)
	char pad_FC[0x4]; // 0xfc(0x04)
	uint64_t IconId; // 0x100(0x08)
	int64_t OwnerId; // 0x108(0x08)
	bool bAutoUpdate; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct UMistMapIconProviderComponent* GroupingParent; // 0x118(0x08)
	struct TSet<struct UMistMapIconProviderComponent*> GroupedChildren; // 0x120(0x50)
	struct FMistAttachmentMonitor AttachmentMonitor; // 0x170(0x80)
	struct FMistClanOwnershipMonitor OwnershipMonitor; // 0x1f0(0x60)
	struct UMistMapIconManagerComponent* CachedMapIconManagerComponent; // 0x250(0x08)
	struct UMistPlayerMapIconManagerComponent* CachedPlayerMapIconManagerComponent; // 0x258(0x08)
};

// Class Mist.MistMapScreen
// Size: 0x410 (Inherited: 0x3a0)
struct UMistMapScreen : UMistUIScreen {
	struct UMistDraggableMapWidget* DraggableMapWidget; // 0x3a0(0x08)
	struct UButton* ShowWorldMapButtonWidget; // 0x3a8(0x08)
	struct UButton* ShowOasisMapButtonWidget; // 0x3b0(0x08)
	struct UScrollBox* ScrollBoxSpawnButtons; // 0x3b8(0x08)
	struct UCheckBox* SpawnWithEquipmentCheckBox; // 0x3c0(0x08)
	struct UCheckBox* SpawnOnTheGroundNextToWalkerCheckBox; // 0x3c8(0x08)
	struct UMistEquipmentSelectionWidget* EquipmentSelectionWidget; // 0x3d0(0x08)
	bool bIsSpawnSelection; // 0x3d8(0x01)
	char pad_3D9[0x27]; // 0x3d9(0x27)
	struct TArray<struct UMistSpawnPointMapIconComponent*> SpawnIcons; // 0x400(0x10)

	void OnIconMaterialChanged(struct UMapIconComponent* Icon); // Function Mist.MistMapScreen.OnIconMaterialChanged // (Final|Native|Public) // @ game+0x1137920
	struct UWidget* NavToEquipment(enum class EUINavigation Nav); // Function Mist.MistMapScreen.NavToEquipment // (Final|Native|Private) // @ game+0x1137890
	void HandleWalkerSpawnButtonClicked(uint64_t SpawnIconId); // Function Mist.MistMapScreen.HandleWalkerSpawnButtonClicked // (Final|Native|Private) // @ game+0x1137810
	void HandleSpawnPointSelected(struct UMistSpawnPointMapIconComponent* Icon); // Function Mist.MistMapScreen.HandleSpawnPointSelected // (Final|Native|Private) // @ game+0x11375d0
	void HandleSpawnPointDeselected(struct UMistSpawnPointMapIconComponent* Icon); // Function Mist.MistMapScreen.HandleSpawnPointDeselected // (Final|Native|Private) // @ game+0x1137550
	void HandleSpawnIconDestroyed(struct UActorComponent* IconComponent); // Function Mist.MistMapScreen.HandleSpawnIconDestroyed // (Final|Native|Private) // @ game+0x11374d0
	void HandleSpawnButtonClicked(uint64_t SpawnIconId); // Function Mist.MistMapScreen.HandleSpawnButtonClicked // (Final|Native|Private) // @ game+0x1137450
	void HandleShowWorldMapButtonClick(); // Function Mist.MistMapScreen.HandleShowWorldMapButtonClick // (Final|Native|Private) // @ game+0x1137430
	void HandleGearRequestComplete(struct TArray<struct FWalkerGearItemInfo>& Gear); // Function Mist.MistMapScreen.HandleGearRequestComplete // (Final|Native|Private|HasOutParms) // @ game+0x11372c0
	void HandleDefaultSpawnButtonClick(); // Function Mist.MistMapScreen.HandleDefaultSpawnButtonClick // (Final|Native|Private) // @ game+0x11371a0
};

// Class Mist.MistMapSetupProfile
// Size: 0x320 (Inherited: 0x30)
struct UMistMapSetupProfile : UDataAsset {
	struct TArray<struct UProceduralFoliageSpawner*> FoliageSpawners; // 0x30(0x10)
	struct TArray<struct FName> FoliageSpawnersFoldersToCopy; // 0x40(0x10)
	struct TSoftObjectPtr<UWorld> MapToCopyPresetsFrom; // 0x50(0x28)
	struct TArray<struct FName> PresetsFoldersToCopy; // 0x78(0x10)
	struct TSoftObjectPtr<UMaterialInterface> GroundMaterial; // 0x88(0x28)
	struct TSoftObjectPtr<UWorld> EmptyMap; // 0xb0(0x28)
	struct TSoftClassPtr<UObject> OasisGameModeClass; // 0xd8(0x28)
	struct TSoftObjectPtr<UStaticMesh> CubeMesh; // 0x100(0x28)
	struct TSoftObjectPtr<UMaterialInterface> TranslucentMaterial; // 0x128(0x28)
	struct TSoftClassPtr<UObject> WaterPlaneClass; // 0x150(0x28)
	struct TSoftClassPtr<UObject> SulfurWaterPlaneClass; // 0x178(0x28)
	struct TSoftClassPtr<UObject> LavaPlaneClass; // 0x1a0(0x28)
	struct TSoftObjectPtr<UProceduralFoliageSpawner> SpecialObjectsFoliageSpawner; // 0x1c8(0x28)
	struct TSoftClassPtr<UObject> SpecialObjectsTempActor; // 0x1f0(0x28)
	struct TSoftClassPtr<UObject> PoiSpawnInfo; // 0x218(0x28)
	float LevelStreamingDistance; // 0x240(0x04)
	char pad_244[0x4]; // 0x244(0x04)
	struct TArray<float> LodDistances; // 0x248(0x10)
	struct TArray<struct FLevelSimplificationDetails> LODSettings; // 0x258(0x10)
	float FogLevelZ; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
	struct TSoftClassPtr<UObject> MapTravelSettings; // 0x270(0x28)
	int32_t ActiveRupuCamps; // 0x298(0x04)
	float MinInactiveTimeForCamp; // 0x29c(0x04)
	struct TSoftObjectPtr<UDataTable> FoliageParametersOptions; // 0x2a0(0x28)
	bool bIsDropZone; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct TSoftClassPtr<UObject> WorldEventsProfile; // 0x2d0(0x28)
	struct TSoftObjectPtr<UProceduralFoliageSpawner> PlayerSpawnSpawner; // 0x2f8(0x28)
};

// Class Mist.MistMapSetupData
// Size: 0xb0 (Inherited: 0x30)
struct UMistMapSetupData : UPrimaryDataAsset {
	struct FString MapName; // 0x30(0x10)
	struct FString FolderPath; // 0x40(0x10)
	struct FVector ImportScale; // 0x50(0x0c)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TSoftObjectPtr<UWorld> MapToSetup; // 0x60(0x28)
	struct UTexture2D* playermap; // 0x88(0x08)
	struct UMistMapSetupProfile* MapProfile; // 0x90(0x08)
	float OverridenFogZOffset; // 0x98(0x04)
	bool bCopyPresetsDone; // 0x9c(0x01)
	bool bSetupAssetLabelsDone; // 0x9d(0x01)
	bool bSetupLevelBoundsDone; // 0x9e(0x01)
	bool bSetupWorldSettingsDone; // 0x9f(0x01)
	bool bSetupWorldTravelSettingsDone; // 0xa0(0x01)
	bool bSetupMapBackgroundDone; // 0xa1(0x01)
	bool bSetupLandscapeDone; // 0xa2(0x01)
	bool bSetupWorldDataHolderDone; // 0xa3(0x01)
	bool bSetupInvisibleWallsDone; // 0xa4(0x01)
	bool bSetLevelsStreamingDistanceDone; // 0xa5(0x01)
	bool bAddSpawnersDone; // 0xa6(0x01)
	bool bResimulateFoliageDone; // 0xa7(0x01)
	bool bGenerateLandscapeLodsDone; // 0xa8(0x01)
	bool bSpawnWaterPlanesDone; // 0xa9(0x01)
	bool bSpawnPoiDone; // 0xaa(0x01)
	bool bAddPlayerSpawnsDone; // 0xab(0x01)
	bool bSetupEventManagerDone; // 0xac(0x01)
	bool bOverrideFogZOffsetDone; // 0xad(0x01)
	char pad_AE[0x2]; // 0xae(0x02)
};

// Class Mist.MistMapSetupSet
// Size: 0x40 (Inherited: 0x30)
struct UMistMapSetupSet : UPrimaryDataAsset {
	struct TArray<struct TSoftObjectPtr<UMistMapSetupData>> Maps; // 0x30(0x10)
};

// Class Mist.MistMapSpawnButton
// Size: 0x3e8 (Inherited: 0x2c0)
struct UMistMapSpawnButton : UMistUIWidget {
	char pad_2C0[0x90]; // 0x2c0(0x90)
	struct UButton* SpawnButtonWidget; // 0x350(0x08)
	struct UTextBlock* SpawnText; // 0x358(0x08)
	struct UTextBlock* RemainingRespawnsTextWidget; // 0x360(0x08)
	struct UTextBlock* NextRespawnInTextWidget; // 0x368(0x08)
	struct UImage* RespawnIconWidget; // 0x370(0x08)
	float HighlightedSpawnIconSizeFactor; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct UWidgetAnimation* RespawnQueuedAnimation; // 0x380(0x08)
	uint64_t LocalMapSpawnIconId; // 0x388(0x08)
	bool bDefaultSpawn; // 0x390(0x01)
	bool bClosestSpawn; // 0x391(0x01)
	bool bLocalMapSpawn; // 0x392(0x01)
	bool bWorldTileSpawn; // 0x393(0x01)
	bool bWalkerSpawn; // 0x394(0x01)
	char pad_395[0x3]; // 0x395(0x03)
	struct FText RemainingRespawnsText; // 0x398(0x18)
	struct FText NextRespawnInText; // 0x3b0(0x18)
	char pad_3C8[0x18]; // 0x3c8(0x18)
	struct UMistSpawnPointMapIconComponent* SpawnMapIcon; // 0x3e0(0x08)

	void SetWorldMapTileSpawn(); // Function Mist.MistMapSpawnButton.SetWorldMapTileSpawn // (Final|Native|Public) // @ game+0x113b760
	void SetOffMapLobbySpawn(); // Function Mist.MistMapSpawnButton.SetOffMapLobbySpawn // (Final|Native|Public) // @ game+0x113b740
	void SetLocalMapSpawn(struct UMistSpawnPointMapIconComponent* InSpawnMapIcon); // Function Mist.MistMapSpawnButton.SetLocalMapSpawn // (Final|Native|Public) // @ game+0x113b6c0
	void SetDefaultSpawn(); // Function Mist.MistMapSpawnButton.SetDefaultSpawn // (Final|Native|Public) // @ game+0x113b6a0
	void SetClosestSpawn(); // Function Mist.MistMapSpawnButton.SetClosestSpawn // (Final|Native|Public) // @ game+0x113b680
	void HandleWorldMapTileSpawn(); // Function Mist.MistMapSpawnButton.HandleWorldMapTileSpawn // (Final|Native|Public) // @ game+0x113ae40
	void HandleSpawnWithEquipmentStateChanged(bool bNewState); // Function Mist.MistMapSpawnButton.HandleSpawnWithEquipmentStateChanged // (Final|Native|Public) // @ game+0x113adb0
	void HandleSpawnButtonClick(); // Function Mist.MistMapSpawnButton.HandleSpawnButtonClick // (Final|Native|Public) // @ game+0x113ad90
	void HandleRespawnConfirmed(); // Function Mist.MistMapSpawnButton.HandleRespawnConfirmed // (Final|Native|Public) // @ game+0x113ad70
	void HandleOtherButtonRespawnQueued(); // Function Mist.MistMapSpawnButton.HandleOtherButtonRespawnQueued // (Final|Native|Public) // @ game+0x113ad50
	void HandleOffMapLobbySpawn(); // Function Mist.MistMapSpawnButton.HandleOffMapLobbySpawn // (Final|Native|Private) // @ game+0x113ad30
};

// Class Mist.MistMapTravelSettings
// Size: 0x58 (Inherited: 0x30)
struct UMistMapTravelSettings : UPrimaryDataAsset {
	float Thickness; // 0x30(0x04)
	float ZoneOffsetFromEdge; // 0x34(0x04)
	float InitiateTravelDistance; // 0x38(0x04)
	float ExecuteTravelDistance; // 0x3c(0x04)
	float BorderDistance; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct AMistWorldTravelZone* TravelZoneClass; // 0x48(0x08)
	bool bDrawDebugOutlines; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Mist.MistMapViewerActor
// Size: 0x3c8 (Inherited: 0x3c0)
struct AMistMapViewerActor : AActor {
	struct UMapViewComponent* MapViewComponent; // 0x3c0(0x08)
};

// Class Mist.MistPlayerStateComponent
// Size: 0x108 (Inherited: 0xf0)
struct UMistPlayerStateComponent : UActorComponent {
	struct AMistOasisPlayerState* PlayerStateOwner; // 0xf0(0x08)
	struct AMistPlayer* ControlledPlayer; // 0xf8(0x08)
	char pad_100[0x8]; // 0x100(0x08)

	void ReceiveUncontrolled(struct AMistPlayer* Player); // Function Mist.MistPlayerStateComponent.ReceiveUncontrolled // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveControlled(struct AMistPlayer* Player); // Function Mist.MistPlayerStateComponent.ReceiveControlled // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void HandlePlayerStatePawnChanged(); // Function Mist.MistPlayerStateComponent.HandlePlayerStatePawnChanged // (Final|Native|Private) // @ game+0x1171510
};

// Class Mist.MistMarkerControlComponent
// Size: 0x170 (Inherited: 0x108)
struct UMistMarkerControlComponent : UMistPlayerStateComponent {
	struct UInputComponent* InputComponent; // 0x108(0x08)
	struct APlayerController* PlayerControllerCached; // 0x110(0x08)
	char pad_118[0x8]; // 0x118(0x08)
	struct TArray<struct AStaticMeshActor*> Markers; // 0x120(0x10)
	struct TArray<struct FBatchedLine> LinePoints; // 0x130(0x10)
	char pad_140[0x10]; // 0x140(0x10)
	struct FLinearColor LineModeColor; // 0x150(0x10)
	char pad_160[0xc]; // 0x160(0x0c)
	bool bDrawLines; // 0x16c(0x01)
	char pad_16D[0x3]; // 0x16d(0x03)

	void ServerUnhideMarkers(); // Function Mist.MistMarkerControlComponent.ServerUnhideMarkers // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108c30
	void ServerStopLineMode(); // Function Mist.MistMarkerControlComponent.ServerStopLineMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c2490
	void ServerStartNewLine(); // Function Mist.MistMarkerControlComponent.ServerStartNewLine // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c2540
	void ServerStartLineMode(); // Function Mist.MistMarkerControlComponent.ServerStartLineMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10cccf0
	void ServerSpawnMarker(struct FVector Location, struct FLinearColor InColor); // Function Mist.MistMarkerControlComponent.ServerSpawnMarker // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x113b5d0
	void ServerSetLineModeColor(struct FLinearColor InColor); // Function Mist.MistMarkerControlComponent.ServerSetLineModeColor // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x113b550
	void ServerRemoveMarkers(); // Function Mist.MistMarkerControlComponent.ServerRemoveMarkers // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c4c60
	void ServerHideMarkers(); // Function Mist.MistMarkerControlComponent.ServerHideMarkers // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x113b050
	void ServerClearLine(); // Function Mist.MistMarkerControlComponent.ServerClearLine // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10dc1c0
	void ServerAddNewLinePoint(struct FVector Point); // Function Mist.MistMarkerControlComponent.ServerAddNewLinePoint // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x113b370
	void OnRep_bDrawLines(); // Function Mist.MistMarkerControlComponent.OnRep_bDrawLines // (Final|Native|Private) // @ game+0x10968b0
	void MulticastSpawnMarker(struct FVector Location, struct FLinearColor InColor); // Function Mist.MistMarkerControlComponent.MulticastSpawnMarker // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x113afa0
	void MulticastRemoveMarkers(); // Function Mist.MistMarkerControlComponent.MulticastRemoveMarkers // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x113ae60
	void BroadcastUnhideMarkers(); // Function Mist.MistMarkerControlComponent.BroadcastUnhideMarkers // (Final|Net|NetReliableNative|Event|Private) // @ game+0x10c1e80
	void BroadcastHideMarkers(); // Function Mist.MistMarkerControlComponent.BroadcastHideMarkers // (Final|Net|NetReliableNative|Event|Private) // @ game+0x111e930
};

// Class Mist.MistMaterialProtectionWidget
// Size: 0x388 (Inherited: 0x2c0)
struct UMistMaterialProtectionWidget : UMistUIWidget {
	struct UMistDamageType* DamageType; // 0x2c0(0x08)
	struct UWidget* NoProtectionWidget; // 0x2c8(0x08)
	struct UWidget* SoftWidget; // 0x2d0(0x08)
	struct UWidget* RobustWidget; // 0x2d8(0x08)
	struct UWidget* HardenedWidget; // 0x2e0(0x08)
	struct UWidget* WoodWidget; // 0x2e8(0x08)
	struct UWidget* SolidWidget; // 0x2f0(0x08)
	struct UTextBlock* NoProtectionText; // 0x2f8(0x08)
	struct UTextBlock* SoftText; // 0x300(0x08)
	struct UTextBlock* RobustText; // 0x308(0x08)
	struct UTextBlock* HardenedText; // 0x310(0x08)
	struct UTextBlock* WoodText; // 0x318(0x08)
	struct UTextBlock* SolidText; // 0x320(0x08)
	struct UTextBlock* NoProtectionPreText; // 0x328(0x08)
	struct UTextBlock* SoftPreText; // 0x330(0x08)
	struct UTextBlock* RobustPreText; // 0x338(0x08)
	struct UTextBlock* HardenedPreText; // 0x340(0x08)
	struct UTextBlock* WoodPreText; // 0x348(0x08)
	struct UTextBlock* SolidPreText; // 0x350(0x08)
	struct UTextBlock* NoProtectionValue; // 0x358(0x08)
	struct UTextBlock* SoftValue; // 0x360(0x08)
	struct UTextBlock* RobustValue; // 0x368(0x08)
	struct UTextBlock* HardenedValue; // 0x370(0x08)
	struct UTextBlock* WoodValue; // 0x378(0x08)
	struct UTextBlock* SolidValue; // 0x380(0x08)
};

// Class Mist.MistMeleeAiEasy
// Size: 0x1c0 (Inherited: 0x1b8)
struct UMistMeleeAiEasy : UMistAiMeleeControlComponent {
	float LastAttackTime; // 0x1b8(0x04)
	char pad_1BC[0x4]; // 0x1bc(0x04)
};

// Class Mist.MistMeleeCombatComponent
// Size: 0x9d0 (Inherited: 0x118)
struct UMistMeleeCombatComponent : UMistPlayerComponent {
	char pad_118[0x8]; // 0x118(0x08)
	struct FMulticastInlineDelegate MeleeHitEvent; // 0x120(0x10)
	struct FMulticastInlineDelegate MeleeHitReceivedEvent; // 0x130(0x10)
	char pad_140[0x78]; // 0x140(0x78)
	struct FMeleeCombatPostPhysicsTickFunction PostPhysicsTickFunction; // 0x1b8(0x30)
	char pad_1E8[0x158]; // 0x1e8(0x158)
	bool bCombatActive; // 0x340(0x01)
	bool bInCombatState; // 0x341(0x01)
	char pad_342[0xe]; // 0x342(0x0e)
	struct UPhysicalMaterial* DefaultBodyMaterial; // 0x350(0x08)
	struct FMistMeleeHitReactions DefaultHitReactions; // 0x358(0x20)
	float BlockAngle; // 0x378(0x04)
	struct FMistBlockAnglesConfiguration BlockAngles; // 0x37c(0x60)
	float BlockWithoutInputTime; // 0x3dc(0x04)
	struct FCombatDelaysContainer CombatDelays; // 0x3e0(0xe0)
	struct UMistCombatStaminaCost* DefaultStaminaCostData; // 0x4c0(0x08)
	float LowStaminaDelayPenalty; // 0x4c8(0x04)
	float ExhaustionDelayPenalty; // 0x4cc(0x04)
	float AnimationPlayrateScale; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct FMistWeaponItem WeaponItem; // 0x4d8(0x18)
	struct FCombatAnimTrack CurrentAnimTrack; // 0x4f0(0x38)
	char pad_528[0x58]; // 0x528(0x58)
	struct TMap<enum class ECombatAction, float> ActionSpeedModifiers; // 0x580(0x50)
	struct TMap<enum class ECombatAction, float> ActionAccelModifiers; // 0x5d0(0x50)
	struct FPostAttackRecoveryConfig PostAttackRecoveryConfig; // 0x620(0x30)
	float CombatStateSpeedModifier; // 0x650(0x04)
	float CombatStateAccelModifier; // 0x654(0x04)
	float CombatStateIdleTime; // 0x658(0x04)
	bool bUseAttackTimeSweetspot; // 0x65c(0x01)
	bool bUseAngleSweetspot; // 0x65d(0x01)
	char pad_65E[0x2]; // 0x65e(0x02)
	float MaxAttackChainingTime; // 0x660(0x04)
	float MaxQuickAttackHoldingTime; // 0x664(0x04)
	struct UMistMeleeWeaponType* UnarmedWeaponType; // 0x668(0x08)
	struct FMistWeaponDamage UnarmedDamage; // 0x670(0x10)
	float FistRadius; // 0x680(0x04)
	char pad_684[0x4]; // 0x684(0x04)
	struct UDamageType* UnarmedDamageType; // 0x688(0x08)
	struct UDamageType* KickDamageType; // 0x690(0x08)
	struct UPhysicalMaterial* UnarmedMaterial; // 0x698(0x08)
	struct UPhysicalMaterial* KickMaterial; // 0x6a0(0x08)
	float MaxAccelerationDuringDisplacement; // 0x6a8(0x04)
	float QuickAttackHitDisplacementDuration; // 0x6ac(0x04)
	float QuickAttackBlockDisplacementDuration; // 0x6b0(0x04)
	float HeavyAttackHitDisplacementDuration; // 0x6b4(0x04)
	float HeavyAttackBlockDisplacementDuration; // 0x6b8(0x04)
	bool bUseComplexTrace; // 0x6bc(0x01)
	char pad_6BD[0x3]; // 0x6bd(0x03)
	struct TMap<enum class ECombatAction, struct FCharacterDisplacementParameters> DisplacementParameters; // 0x6c0(0x50)
	struct UCurveFloat* QuickAttackHitDisplacementCurve; // 0x710(0x08)
	struct UCurveFloat* HeavyAttackHitDisplacementCurve; // 0x718(0x08)
	struct UCurveFloat* HeavyAttackBlockDisplacementCurve; // 0x720(0x08)
	float QuickAttackHitRotationRate; // 0x728(0x04)
	float QuickAttackBlockRotationRate; // 0x72c(0x04)
	float HeavyAttackHitRotationRate; // 0x730(0x04)
	float HeavyAttackBlockRotationRate; // 0x734(0x04)
	struct UMistWeaponSheathingAnimData* WeaponSwitchingAnims; // 0x738(0x08)
	char pad_740[0x1f]; // 0x740(0x1f)
	bool bAttackStartedDealingDamage; // 0x75f(0x01)
	bool bAttackStoppedDealingDamage; // 0x760(0x01)
	bool bShowDebugTrace; // 0x761(0x01)
	char pad_762[0x2]; // 0x762(0x02)
	float DebugHitDetectionLineDuration; // 0x764(0x04)
	char pad_768[0xd8]; // 0x768(0xd8)
	struct UPrimitiveComponent* SavedBasedMovementComponent; // 0x840(0x08)
	char pad_848[0x68]; // 0x848(0x68)
	struct TArray<struct TWeakObjectPtr<struct AActor>> HitActors; // 0x8b0(0x10)
	struct TArray<struct FFoliageHitEntry> FoliageHitEntries; // 0x8c0(0x10)
	char pad_8D0[0xf8]; // 0x8d0(0xf8)
	struct UMistWeaponTypeBase* WeaponType; // 0x9c8(0x08)

	void StartDodge(); // Function Mist.MistMeleeCombatComponent.StartDodge // (Final|Native|Public) // @ game+0x113b780
	void ServerStartDodge(); // Function Mist.MistMeleeCombatComponent.ServerStartDodge // (Net|Native|Event|Public|NetServer) // @ game+0x113ae60
	void ServerHarvestFoliageClientSide(struct UPrimitiveComponent* HitComponent, int32_t InInstanceId, struct FVector InHitLocation, float Sweetspot); // Function Mist.MistMeleeCombatComponent.ServerHarvestFoliageClientSide // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x113b3f0
	void ServerActionRequest(struct FCombatAnimTrack AnimTrack, bool bPredicted); // Function Mist.MistMeleeCombatComponent.ServerActionRequest // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x113b290
	void OnMovementModeChanged(struct ACharacter* InCharacter, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Mist.MistMeleeCombatComponent.OnMovementModeChanged // (Final|Native|Private) // @ game+0x113b190
	void OnLanded(struct FHitResult& Hit); // Function Mist.MistMeleeCombatComponent.OnLanded // (Final|Native|Public|HasOutParms) // @ game+0x113b0b0
	void OnJumpApexReached(); // Function Mist.MistMeleeCombatComponent.OnJumpApexReached // (Final|Native|Public) // @ game+0x113b090
	void OnDisplacementFinished(); // Function Mist.MistMeleeCombatComponent.OnDisplacementFinished // (Final|Native|Public) // @ game+0x113b070
	void OnCombatActionChangedEvent(enum class ECombatAction PrevAction, enum class ECombatAction NewAction); // Function Mist.MistMeleeCombatComponent.OnCombatActionChangedEvent // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnCombatActionChanged__DelegateSignature(enum class ECombatAction PrevAction, enum class ECombatAction NewAction); // DelegateFunction Mist.MistMeleeCombatComponent.OnCombatActionChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnAttackStoppedDealingDamage__DelegateSignature(); // DelegateFunction Mist.MistMeleeCombatComponent.OnAttackStoppedDealingDamage__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnAnimTrackChanged__DelegateSignature(struct FCombatAnimTrack AnimTack); // DelegateFunction Mist.MistMeleeCombatComponent.OnAnimTrackChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MulticastStartDodge(); // Function Mist.MistMeleeCombatComponent.MulticastStartDodge // (Net|Native|Event|Public|NetServer) // @ game+0x113b050
	void MulticastSetInCombatState(bool bValue); // Function Mist.MistMeleeCombatComponent.MulticastSetInCombatState // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x113af10
	void MulticastSetCurrentAnimTrack(struct FCombatAnimTrack AnimTrack); // Function Mist.MistMeleeCombatComponent.MulticastSetCurrentAnimTrack // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x113ae80
	void MulticastJavelinThrown(); // Function Mist.MistMeleeCombatComponent.MulticastJavelinThrown // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x111e930
	void MeleeHitEvent__DelegateSignature(struct FMeleeHitInfo HitInfo); // DelegateFunction Mist.MistMeleeCombatComponent.MeleeHitEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleHandsSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentHand Hand); // Function Mist.MistMeleeCombatComponent.HandleHandsSlotUpdate // (Final|Native|Private) // @ game+0x113ac70
	void HandleEquipmentSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot Slot); // Function Mist.MistMeleeCombatComponent.HandleEquipmentSlotUpdate // (Final|Native|Public) // @ game+0x113abb0
	void HandleCharacterStateChanged(struct AMistCharacter* InCharacter, enum class EMistCharacterState OldState, enum class EMistCharacterState NewState); // Function Mist.MistMeleeCombatComponent.HandleCharacterStateChanged // (Final|Native|Private) // @ game+0x113aab0
	void HandleCharacterRadialDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FVector& Origin, struct FDamageSource& DamageSource, struct TArray<struct FHitResult>& Hits); // Function Mist.MistMeleeCombatComponent.HandleCharacterRadialDamage // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x113a8a0
	void HandleCharacterPointDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource, struct FHitResult& Hit); // Function Mist.MistMeleeCombatComponent.HandleCharacterPointDamage // (Final|Native|Private|HasOutParms) // @ game+0x113a6b0
	struct UMeshComponent* GetWeaponComponent(); // Function Mist.MistMeleeCombatComponent.GetWeaponComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x113a680
	float GetPowerAlpha(); // Function Mist.MistMeleeCombatComponent.GetPowerAlpha // (Final|Native|Public|BlueprintCallable) // @ game+0x113a650
	float GetDamageMultiplierForTarget(struct AActor* Target); // Function Mist.MistMeleeCombatComponent.GetDamageMultiplierForTarget // (Native|Event|Public|BlueprintEvent) // @ game+0x113a5b0
	float GetAttackPowerAlpha(); // Function Mist.MistMeleeCombatComponent.GetAttackPowerAlpha // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x113a580
	void ClientSetNewDelays(float InAttackDelay, float InBlockDelay, float InDodgeDelay, float InBashDelay); // Function Mist.MistMeleeCombatComponent.ClientSetNewDelays // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x113a430
	void ClientSetConsumedItem(struct UMistConsumableItemTemplate* InConsumableItem); // Function Mist.MistMeleeCombatComponent.ClientSetConsumedItem // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x109cac0
	void ClientActionDenied(int32_t InClientActionId); // Function Mist.MistMeleeCombatComponent.ClientActionDenied // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x113a3a0
	void ClientActionChanged(struct FCombatAnimTrack AnimTrack); // Function Mist.MistMeleeCombatComponent.ClientActionChanged // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x113a310
	void ClientActionAccepted(int32_t InClientActionId, int32_t InServerActionId); // Function Mist.MistMeleeCombatComponent.ClientActionAccepted // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x113a250
};

// Class Mist.MistCombatStaminaCost
// Size: 0x90 (Inherited: 0x30)
struct UMistCombatStaminaCost : UDataAsset {
	float QuickAttackStartCost; // 0x30(0x04)
	float QuickAttackCommitCost; // 0x34(0x04)
	float QuickAttackBlockImpactCost; // 0x38(0x04)
	float QuickAttackBodyImpactCost; // 0x3c(0x04)
	float MediumAttackStartCost; // 0x40(0x04)
	float MediumAttackCommitCost; // 0x44(0x04)
	float MediumAttackBlockImpactCost; // 0x48(0x04)
	float MediumAttackBodyImpactCost; // 0x4c(0x04)
	float HeavyAttackStartCost; // 0x50(0x04)
	float HeavyAttackCommitCost; // 0x54(0x04)
	float HeavyAttackBlockImpactCost; // 0x58(0x04)
	float HeavyAttackBodyImpactCost; // 0x5c(0x04)
	float QuickBlockCost; // 0x60(0x04)
	float MediumBlockCost; // 0x64(0x04)
	float HeavyBlockCost; // 0x68(0x04)
	float FeintCost; // 0x6c(0x04)
	float BlockCost; // 0x70(0x04)
	float BlockDirectionChangeCost; // 0x74(0x04)
	float KickStartCost; // 0x78(0x04)
	float KickHitCost; // 0x7c(0x04)
	float KickMissCost; // 0x80(0x04)
	float KickedCost; // 0x84(0x04)
	float DodgeCost; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class Mist.MistWeaponTypeBase
// Size: 0x1d0 (Inherited: 0x30)
struct UMistWeaponTypeBase : UDataAsset {
	bool bMeleeBlockingEnabled; // 0x30(0x01)
	bool bDirectionalBlocking; // 0x31(0x01)
	bool bLoopAttackHold; // 0x32(0x01)
	bool bCanWorkWithGrapplingHook; // 0x33(0x01)
	float MinAttackPower; // 0x34(0x04)
	enum class ECombatAnimationType AnimationType; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct UAnimationAsset* NeutralIdleAnim; // 0x40(0x08)
	struct UAnimationAsset* CombatIdleAnim; // 0x48(0x08)
	struct UAnimationAsset* ShortCombatToNeutral; // 0x50(0x08)
	struct UAnimationAsset* LongCombatToNeutral; // 0x58(0x08)
	struct TArray<struct FMistMeleeAttackAnimData> HeavyAttackAnims; // 0x60(0x10)
	struct TArray<struct UAnimationAsset*> AttackReadyAnims; // 0x70(0x10)
	struct TArray<struct UAnimationAsset*> AttackHoldAnims; // 0x80(0x10)
	struct TArray<struct UAnimationAsset*> BlockAnims; // 0x90(0x10)
	struct TArray<struct UAnimationAsset*> BlockImpactAnims; // 0xa0(0x10)
	struct TArray<struct UAnimationAsset*> HeavyBlockImpactAnims; // 0xb0(0x10)
	struct FMistMeleeAttackAnimData Kick; // 0xc0(0x40)
	struct FMistMeleeHitReactions HitReactions; // 0x100(0x20)
	struct TMap<enum class ECombatDelay, struct FCombatDelays> Delays; // 0x120(0x50)
	struct FCombatStaminaCost StaminaCost; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
	struct UMistCombatStaminaCost* CombatStaminaCost; // 0x178(0x08)
	struct TMap<enum class ECombatAction, struct FCharacterDisplacementParameters> DisplacementParameters; // 0x180(0x50)
};

// Class Mist.MistMeleeWeaponType
// Size: 0x270 (Inherited: 0x1d0)
struct UMistMeleeWeaponType : UMistWeaponTypeBase {
	struct TMap<int32_t, struct FMotionMatchingMetaData> SimilarityMap; // 0x1d0(0x50)
	struct TArray<struct FMistMeleeAttackAnimData> QuickAttackAnims; // 0x220(0x10)
	struct TArray<struct UAnimationAsset*> AttackImpactAnims; // 0x230(0x10)
	struct TArray<struct UAnimationAsset*> HeavyAttackImpactAnims; // 0x240(0x10)
	struct TArray<struct FMistCombatAnimTransition> Transitions; // 0x250(0x10)
	struct UCurveFloat* DefaultAngleSweetspot; // 0x260(0x08)
	int32_t ReferenceWeaponSpeed; // 0x268(0x04)
	char pad_26C[0x4]; // 0x26c(0x04)
};

// Class Mist.MistMeleeShieldWeaponType
// Size: 0x270 (Inherited: 0x270)
struct UMistMeleeShieldWeaponType : UMistMeleeWeaponType {
};

// Class Mist.MistThrowingWeaponType
// Size: 0x1f0 (Inherited: 0x1d0)
struct UMistThrowingWeaponType : UMistWeaponTypeBase {
	enum class EThrowingWeaponType ThrowingType; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
	struct UCurveFloat* VelocityModByPower; // 0x1d8(0x08)
	struct UCurveFloat* DamageModByPower; // 0x1e0(0x08)
	struct UCurveFloat* DeviationAngleByPower; // 0x1e8(0x08)
};

// Class Mist.MistMenuLevelScriptActor
// Size: 0x3d0 (Inherited: 0x3c8)
struct AMistMenuLevelScriptActor : ALevelScriptActor {
	struct UMistLocalPlayerSubsystem* PlayerSubsystemCached; // 0x3c8(0x08)
};

// Class Mist.MistMeshPoolComponent
// Size: 0x1a8 (Inherited: 0xf0)
struct UMistMeshPoolComponent : UActorComponent {
	struct AActor* PoolActor; // 0xf0(0x08)
	struct TArray<struct UStaticMeshComponent*> MeshPool; // 0xf8(0x10)
	char pad_108[0xa0]; // 0x108(0xa0)
};

// Class Mist.MistBaseMessageData
// Size: 0x38 (Inherited: 0x28)
struct UMistBaseMessageData : UObject {
	enum class EMistMessageType Type; // 0x28(0x01)
	char pad_29[0xf]; // 0x29(0x0f)
};

// Class Mist.MistChatMessageData
// Size: 0x80 (Inherited: 0x38)
struct UMistChatMessageData : UMistBaseMessageData {
	char pad_38[0x48]; // 0x38(0x48)
};

// Class Mist.MistTextMessageData
// Size: 0x50 (Inherited: 0x38)
struct UMistTextMessageData : UMistBaseMessageData {
	char pad_38[0x18]; // 0x38(0x18)
};

// Class Mist.MistIntMessageData
// Size: 0x40 (Inherited: 0x38)
struct UMistIntMessageData : UMistBaseMessageData {
	char pad_38[0x8]; // 0x38(0x08)
};

// Class Mist.MistKillMessageData
// Size: 0xb0 (Inherited: 0x38)
struct UMistKillMessageData : UMistBaseMessageData {
	char pad_38[0x78]; // 0x38(0x78)
};

// Class Mist.MistItemMessageData
// Size: 0x58 (Inherited: 0x38)
struct UMistItemMessageData : UMistBaseMessageData {
	struct FMistItem Item; // 0x38(0x18)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class Mist.MistClaimMurderReportMessageData
// Size: 0xb0 (Inherited: 0x38)
struct UMistClaimMurderReportMessageData : UMistBaseMessageData {
	char pad_38[0x78]; // 0x38(0x78)
};

// Class Mist.MistCombatHitMessageData
// Size: 0x48 (Inherited: 0x38)
struct UMistCombatHitMessageData : UMistBaseMessageData {
	char pad_38[0x10]; // 0x38(0x10)
};

// Class Mist.MistMessageHudWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UMistMessageHudWidget : UMistHUDWidget {
	struct UTextBlock* MessageTextWidget; // 0x2e0(0x08)
	struct UMistInputBindingHintWidget* ConfirmHintWidget; // 0x2e8(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x2f0(0x08)
	struct UWidgetAnimation* HideAnimation; // 0x2f8(0x08)

	void HandleHideAnimationFinished(); // Function Mist.MistMessageHudWidget.HandleHideAnimationFinished // (Final|Native|Private) // @ game+0x113ed50
};

// Class Mist.MistMessageLogCategoryWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistMessageLogCategoryWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UTextBlock* LabelWidget; // 0x2c8(0x08)
	struct UBorder* BorderWidget; // 0x2d0(0x08)
	struct FText Label; // 0x2d8(0x18)
	struct FLinearColor Color; // 0x2f0(0x10)
	bool bColorIsBright; // 0x300(0x01)
	bool bIsSelected; // 0x301(0x01)
	char pad_302[0x6]; // 0x302(0x06)
	struct UMistMessageLogWidget* Data; // 0x308(0x08)
	char pad_310[0x8]; // 0x310(0x08)

	void HandleButtonClicked(); // Function Mist.MistMessageLogCategoryWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x113ed30
};

// Class Mist.MistMessageLogChatWidget
// Size: 0x460 (Inherited: 0x2c0)
struct UMistMessageLogChatWidget : UMistUIWidget {
	struct UEditableTextBox* InputWidget; // 0x2c0(0x08)
	struct UWidget* AutocompleteHintPanelWidget; // 0x2c8(0x08)
	struct UScrollBox* AutocompleteHintScrollWidget; // 0x2d0(0x08)
	struct UTextBlock* AutocompleteArgumentNameWidget; // 0x2d8(0x08)
	enum class EMistMessageLogChatType ChatType; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct FText AutomaticChatTypeToken; // 0x2e8(0x18)
	struct FText MapChatTypeToken; // 0x300(0x18)
	struct FText ClanChatTypeToken; // 0x318(0x18)
	struct FMistFontStyle AutocompleteHintFontStyle; // 0x330(0x10)
	struct FMistFontStyle AutocompleteSelectedHintFontStyle; // 0x340(0x10)
	char pad_350[0x110]; // 0x350(0x110)

	void SetChatType(enum class EMistMessageLogChatType InType); // Function Mist.MistMessageLogChatWidget.SetChatType // (Final|Native|Public|BlueprintCallable) // @ game+0x113ef60
	void ReceiveDeactivated(); // Function Mist.MistMessageLogChatWidget.ReceiveDeactivated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveChatTypeChanged(); // Function Mist.MistMessageLogChatWidget.ReceiveChatTypeChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveActivated(); // Function Mist.MistMessageLogChatWidget.ReceiveActivated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleInputTextCommitted(struct FText& InText, enum class ETextCommit InCommitMethod); // Function Mist.MistMessageLogChatWidget.HandleInputTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x113ee40
	void HandleInputTextChanged(struct FText& InText); // Function Mist.MistMessageLogChatWidget.HandleInputTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x113ed70
};

// Class Mist.MistMessageLogItemWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistMessageLogItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UMistMessageLogWidget* Parent; // 0x2c8(0x08)
	struct UMistBaseMessageData* Data; // 0x2d0(0x08)
	struct USizeBox* ContentContainerWidget; // 0x2d8(0x08)
	struct UMenuAnchor* MenuAnchorWidget; // 0x2e0(0x08)
	struct UTextBlock* TimeTextWidget; // 0x2e8(0x08)
	struct UMistMessageLogContentWidget* ContentWidget; // 0x2f0(0x08)

	void HandleMenuOpenChanged(bool bIsOpen); // Function Mist.MistMessageLogItemWidget.HandleMenuOpenChanged // (Final|Native|Private) // @ game+0x1141c90
	struct UWidget* HandleGetMenuContent(); // Function Mist.MistMessageLogItemWidget.HandleGetMenuContent // (Final|Native|Private) // @ game+0x1141be0
};

// Class Mist.MistMessageLogWidget
// Size: 0x3f0 (Inherited: 0x2e0)
struct UMistMessageLogWidget : UMistHUDWidget {
	int32_t MaxLogEntries; // 0x2e0(0x04)
	float InactivityHideDuration; // 0x2e4(0x04)
	float ActivateMessageLogDelay; // 0x2e8(0x04)
	float GamepadScrollValue; // 0x2ec(0x04)
	struct UMistMessageLogCategoryWidget* CustomCategoryWidget; // 0x2f0(0x08)
	struct UMistMessageLogCategoryWidget* MapChatCategoryWidget; // 0x2f8(0x08)
	struct UMistMessageLogCategoryWidget* ClanChatCategoryWidget; // 0x300(0x08)
	struct UMistMessageLogCategoryWidget* CombatCategoryWidget; // 0x308(0x08)
	struct UMistMessageLogCategoryWidget* EventCategoryWidget; // 0x310(0x08)
	struct UListView* LogWidget; // 0x318(0x08)
	struct UMistMessageLogChatWidget* ChatWidget; // 0x320(0x08)
	struct UHorizontalBox* MessageLogCategoryContainer; // 0x328(0x08)
	struct USizeBox* SwitchMessageCategoryRightHintContainer; // 0x330(0x08)
	struct USizeBox* SwitchMessageCategoryLeftHintContainer; // 0x338(0x08)
	struct UVerticalBox* ScrollChatHintContainer; // 0x340(0x08)
	struct UButton* VisibilityButton; // 0x348(0x08)
	struct UBorder* VisibilityBorder; // 0x350(0x08)
	enum class EMistMessageLogCategory Category; // 0x358(0x01)
	bool bIsActive; // 0x359(0x01)
	char pad_35A[0x6]; // 0x35a(0x06)
	struct TArray<struct UMistBaseMessageData*> CurrentMessageLog; // 0x360(0x10)
	struct TArray<struct UMistBaseMessageData*> CustomMessageLog; // 0x370(0x10)
	struct TArray<struct UMistBaseMessageData*> MapChatMessageLog; // 0x380(0x10)
	struct TArray<struct UMistBaseMessageData*> ClanChatMessageLog; // 0x390(0x10)
	struct TArray<struct UMistBaseMessageData*> CombatMessageLog; // 0x3a0(0x10)
	struct TArray<struct UMistBaseMessageData*> EventMessageLog; // 0x3b0(0x10)
	struct TArray<struct UMistMessageLogCategoryWidget*> MessageLogCategories; // 0x3c0(0x10)
	char pad_3D0[0x20]; // 0x3d0(0x20)

	void SetCategory(enum class EMistMessageLogCategory InCategory); // Function Mist.MistMessageLogWidget.SetCategory // (Final|Native|Public|BlueprintCallable) // @ game+0x11424c0
	void ReceiveSwitchedCategory(); // Function Mist.MistMessageLogWidget.ReceiveSwitchedCategory // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveDeactivated(); // Function Mist.MistMessageLogWidget.ReceiveDeactivated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveActivated(); // Function Mist.MistMessageLogWidget.ReceiveActivated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleMessageReceived(struct UMistBaseMessageData* InMessage); // Function Mist.MistMessageLogWidget.HandleMessageReceived // (Final|Native|Private) // @ game+0x1141d20
	void DelayedScrollDown(); // Function Mist.MistMessageLogWidget.DelayedScrollDown // (Final|Native|Private|Const) // @ game+0x1141820
	void Activate(); // Function Mist.MistMessageLogWidget.Activate // (Final|Native|Public) // @ game+0x11416b0
};

// Class Mist.MistMicrophoneStatusWidget
// Size: 0x318 (Inherited: 0x2e0)
struct UMistMicrophoneStatusWidget : UMistHUDWidget {
	struct UImage* TalkingImageWidget; // 0x2e0(0x08)
	struct UImage* MutedImageWidget; // 0x2e8(0x08)
	struct UWidgetAnimation* TalkingStartAnimation; // 0x2f0(0x08)
	struct UWidgetAnimation* TalkingStopAnimation; // 0x2f8(0x08)
	struct UTexture2D* TalkingImage; // 0x300(0x08)
	struct UTexture2D* InputLowImage; // 0x308(0x08)
	char pad_310[0x8]; // 0x310(0x08)
};

// Class Mist.MistTurretComponent
// Size: 0x2a8 (Inherited: 0xf0)
struct UMistTurretComponent : UActorComponent {
	char pad_F0[0x8]; // 0xf0(0x08)
	struct FMulticastInlineDelegate OnWindupStarted; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnWindupInterrupted; // 0x108(0x10)
	struct FMulticastInlineDelegate OnTurretFired; // 0x118(0x10)
	struct FMulticastInlineDelegate OnWindupProgressUpdated; // 0x128(0x10)
	struct FMulticastInlineDelegate OnPatrolRotationStarted; // 0x138(0x10)
	struct FMistComponentReference RotatingComponentReference; // 0x148(0x28)
	float TargetRange; // 0x170(0x04)
	float WindupProgress; // 0x174(0x04)
	float ScanTimer; // 0x178(0x04)
	bool bShowDebugForLeadingAngles; // 0x17c(0x01)
	char pad_17D[0x3]; // 0x17d(0x03)
	float BaseAccuracyPenaltyHalfAngle; // 0x180(0x04)
	float MovingAccuracyPenaltyHalfAngle; // 0x184(0x04)
	struct UCurveFloat* MovingInaccuracyMultiplierCurve; // 0x188(0x08)
	bool bNewRandomTargetAfterShot; // 0x190(0x01)
	bool bLeadShots; // 0x191(0x01)
	char pad_192[0x2]; // 0x192(0x02)
	float LeadingAddition; // 0x194(0x04)
	float WindupTime_Min; // 0x198(0x04)
	float WindupTime_Max; // 0x19c(0x04)
	float ScanTime_Min; // 0x1a0(0x04)
	float ScanTime_Max; // 0x1a4(0x04)
	float ReloadTime; // 0x1a8(0x04)
	char pad_1AC[0x4]; // 0x1ac(0x04)
	struct TArray<struct UObject*> TargetClassFilter; // 0x1b0(0x10)
	struct TArray<struct UObject*> ExcludedTargetSubclasses; // 0x1c0(0x10)
	float PitchAndRollAngleTollerance; // 0x1d0(0x04)
	float ProjectileSpawnRelativeHeight; // 0x1d4(0x04)
	float ActionTimer; // 0x1d8(0x04)
	float YawSpeed; // 0x1dc(0x04)
	bool ShouldDoPatrols; // 0x1e0(0x01)
	bool bShouldReplicatePatrols; // 0x1e1(0x01)
	char pad_1E2[0x2]; // 0x1e2(0x02)
	float PatrolCooldownMin; // 0x1e4(0x04)
	float PatrolCooldownMax; // 0x1e8(0x04)
	enum class ETurretYawRotation YawRotationState; // 0x1ec(0x01)
	enum class ETurretState TurretState; // 0x1ed(0x01)
	char pad_1EE[0x2]; // 0x1ee(0x02)
	struct AActor* CurrentTarget; // 0x1f0(0x08)
	float AngularDistance; // 0x1f8(0x04)
	int32_t TorqueCost; // 0x1fc(0x04)
	bool bInfiniteAmmo; // 0x200(0x01)
	char pad_201[0x7]; // 0x201(0x07)
	struct UMistProjectileItemTemplate* AmmoClass; // 0x208(0x08)
	struct FMistComponentReference ContainerComponentRef; // 0x210(0x28)
	struct FMistProjectileItem ProjectileItem; // 0x238(0x18)
	char pad_250[0x18]; // 0x250(0x18)
	struct UMistTorqueContainerComponent* TorqueContainer; // 0x268(0x08)
	struct USceneComponent* RotatingComponent; // 0x270(0x08)
	char pad_278[0x30]; // 0x278(0x30)

	void WindupStarted__DelegateSignature(); // DelegateFunction Mist.MistTurretComponent.WindupStarted__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void WindupProgressUpdated__DelegateSignature(float WindupProgress); // DelegateFunction Mist.MistTurretComponent.WindupProgressUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void WindupInterrupted__DelegateSignature(); // DelegateFunction Mist.MistTurretComponent.WindupInterrupted__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void TurretFired__DelegateSignature(); // DelegateFunction Mist.MistTurretComponent.TurretFired__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void Shoot(); // Function Mist.MistTurretComponent.Shoot // (Final|Native|Public) // @ game+0x11c1330
	void RotateTurret(struct FVector TargetLocation, float DeltaTime); // Function Mist.MistTurretComponent.RotateTurret // (Final|Native|Public|HasDefaults) // @ game+0x11c1260
	void PatrolRotationStarted__DelegateSignature(float AngleDifference); // DelegateFunction Mist.MistTurretComponent.PatrolRotationStarted__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnTargetChanged(struct AActor* Target); // Function Mist.MistTurretComponent.OnTargetChanged // (Native|Event|Public|BlueprintEvent) // @ game+0x11c11d0
	void OnRep_CurrentTarget(); // Function Mist.MistTurretComponent.OnRep_CurrentTarget // (Final|Native|Public) // @ game+0x11c1190
	void MulticastWindingUpStarted(float TimeToShoot); // Function Mist.MistTurretComponent.MulticastWindingUpStarted // (Net|Native|Event|NetMulticast|Public) // @ game+0x119b2f0
	void MulticastWindingUpInterrupted(); // Function Mist.MistTurretComponent.MulticastWindingUpInterrupted // (Net|Native|Event|NetMulticast|Public) // @ game+0x109c850
	void MulticastTargetChanged(struct AActor* Target); // Function Mist.MistTurretComponent.MulticastTargetChanged // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x11593e0
	void MulticastPatrolRotationStarted(struct FVector NewPatrolTargetLocation, float NewGoalPatrolCooldown); // Function Mist.MistTurretComponent.MulticastPatrolRotationStarted // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x11c10a0
	bool HasAmmoAndTorque(); // Function Mist.MistTurretComponent.HasAmmoAndTorque // (Final|Native|Public) // @ game+0x11c0fb0
};

// Class Mist.MistMobAirTurretComponent
// Size: 0x358 (Inherited: 0x2a8)
struct UMistMobAirTurretComponent : UMistTurretComponent {
	struct FMulticastInlineDelegate OnTurretDestroy; // 0x2a8(0x10)
	struct FMulticastInlineDelegate OnTurretRepair; // 0x2b8(0x10)
	struct FMistComponentReference TurretMeshComponent; // 0x2c8(0x28)
	struct FMistComponentReference TurretProxyMeshComponent; // 0x2f0(0x28)
	struct UStaticMesh* InitalMesh; // 0x318(0x08)
	struct UStaticMesh* DestroyedMesh; // 0x320(0x08)
	struct UStaticMesh* InitalProxyMesh; // 0x328(0x08)
	struct UStaticMesh* DestroyedProxyMesh; // 0x330(0x08)
	int32_t RespawnTimeMax; // 0x338(0x04)
	int32_t RespawnTimeMin; // 0x33c(0x04)
	float ReloadAfterBurstDuration; // 0x340(0x04)
	int32_t RoundsInBurst; // 0x344(0x04)
	char pad_348[0x10]; // 0x348(0x10)

	void SetDestroyedState(); // Function Mist.MistMobAirTurretComponent.SetDestroyedState // (Final|Native|Public) // @ game+0x1142650
	void RespawnTurret(); // Function Mist.MistMobAirTurretComponent.RespawnTurret // (Final|Native|Public) // @ game+0x11424a0
	void MulticastSetDestroyedState(); // Function Mist.MistMobAirTurretComponent.MulticastSetDestroyedState // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10cccf0
	void MulticastRespawnTurret(); // Function Mist.MistMobAirTurretComponent.MulticastRespawnTurret // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10c2490
	void MistPropTurretRepaired__DelegateSignature(); // DelegateFunction Mist.MistMobAirTurretComponent.MistPropTurretRepaired__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MistPropTurretDestroyed__DelegateSignature(); // DelegateFunction Mist.MistMobAirTurretComponent.MistPropTurretDestroyed__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleAnyDamage(struct UMistHealthComponent* HealthComponent, float PrevHealth, float NewHealth); // Function Mist.MistMobAirTurretComponent.HandleAnyDamage // (Final|Native|Public) // @ game+0x11418e0
};

// Class Mist.MistMobCampNavMeshBoundsComponent
// Size: 0x100 (Inherited: 0xf0)
struct UMistMobCampNavMeshBoundsComponent : UActorComponent {
	struct FVector BoxBounds; // 0xf0(0x0c)
	char pad_FC[0x4]; // 0xfc(0x04)
};

// Class Mist.MistMobCamp
// Size: 0x500 (Inherited: 0x3d8)
struct AMistMobCamp : AMistDestructibleLootsite {
	struct USceneComponent* SceneComponent; // 0x3d8(0x08)
	struct AMistMobCampSpawner* ResponsibleSpawner; // 0x3e0(0x08)
	float VisionDistance; // 0x3e8(0x04)
	float AlertDistance; // 0x3ec(0x04)
	float HostileDistance; // 0x3f0(0x04)
	float TimeToStopBeingHostile; // 0x3f4(0x04)
	float WalkerVisionDistance; // 0x3f8(0x04)
	float WalkerHostileDistance; // 0x3fc(0x04)
	struct TArray<struct FMistMobSpawnEntry> Mobs; // 0x400(0x10)
	struct AMistMobController* RoamingAiController; // 0x410(0x08)
	struct TArray<struct FMistComponentReference> DefaultSpawnLocations; // 0x418(0x10)
	struct AMistMobCampManager* ManagedBy; // 0x428(0x08)
	struct FString ManagerGroup; // 0x430(0x10)
	float TimeToBecomeInvisible; // 0x440(0x04)
	float MinDistanceToPlayerToHide; // 0x444(0x04)
	float MinDistanceToPlayerToShow; // 0x448(0x04)
	char pad_44C[0x4]; // 0x44c(0x04)
	struct FMulticastInlineDelegate OnStateChanged; // 0x450(0x10)
	struct TArray<struct FMistMobGuardEntry> GuardMobs; // 0x460(0x10)
	struct TMap<struct AMistCharacter*, struct FIntruderEntry> Intruders; // 0x470(0x50)
	enum class EMistMobCampAiState CurrentAiState; // 0x4c0(0x01)
	char pad_4C1[0x2f]; // 0x4c1(0x2f)
	enum class EMistMobCampState State; // 0x4f0(0x01)
	bool bHasAliveGuards; // 0x4f1(0x01)
	char pad_4F2[0xe]; // 0x4f2(0x0e)

	void StateChangedEvent__DelegateSignature(struct AMistMobCamp* Sender); // DelegateFunction Mist.MistMobCamp.StateChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	struct AMistHumanoidMob* SpawnMob(struct AMistCharacter* MobClass, struct AAIController* MobController, struct USceneComponent* Location, bool bSetToGround); // Function Mist.MistMobCamp.SpawnMob // (Final|Native|Public|BlueprintCallable) // @ game+0x1142670
	void RespawnGuardTimer(); // Function Mist.MistMobCamp.RespawnGuardTimer // (Final|Native|Private) // @ game+0x1142480
	void ReceiveDeactivated(); // Function Mist.MistMobCamp.ReceiveDeactivated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveActivated(); // Function Mist.MistMobCamp.ReceiveActivated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_State(); // Function Mist.MistMobCamp.OnRep_State // (Final|Native|Private) // @ game+0x11422c0
	void MulticastSetHasAliveGuards(bool bInValue); // Function Mist.MistMobCamp.MulticastSetHasAliveGuards // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1142230
	void HandleMobStateChanged(struct AMistCharacter* Character, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistMobCamp.HandleMobStateChanged // (Final|Native|Private) // @ game+0x1141e20
	void HandleMobDestroyed(struct AActor* InActor); // Function Mist.MistMobCamp.HandleMobDestroyed // (Final|Native|Private) // @ game+0x1141da0
	void HandleIntruderDestroyed(struct AActor* DestroyedActor); // Function Mist.MistMobCamp.HandleIntruderDestroyed // (Final|Native|Private) // @ game+0x1141c10
	enum class EMistMobCampState GetState(); // Function Mist.MistMobCamp.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11418c0
	void Deactivate(); // Function Mist.MistMobCamp.Deactivate // (Final|Native|Public|BlueprintCallable) // @ game+0x1141800
	void BroadcastSetState(enum class EMistMobCampState InState); // Function Mist.MistMobCamp.BroadcastSetState // (Final|Net|NetReliableNative|Event|Private) // @ game+0x1141780
};

// Class Mist.MistMobCampManager
// Size: 0x438 (Inherited: 0x3c0)
struct AMistMobCampManager : AActor {
	int32_t MaxActiveCamps; // 0x3c0(0x04)
	float MinInactiveTime; // 0x3c4(0x04)
	struct TArray<struct AMistMobCampSpawner*> CampSpawners; // 0x3c8(0x10)
	char pad_3D8[0x60]; // 0x3d8(0x60)

	void HandleCampSpawned(struct AMistMobCampSpawner* CampSpawner); // Function Mist.MistMobCampManager.HandleCampSpawned // (Final|Native|Private) // @ game+0x1141ae0
	void HandleCampRemoved(struct AMistMobCampSpawner* CampSpawner); // Function Mist.MistMobCampManager.HandleCampRemoved // (Final|Native|Private) // @ game+0x1141a60
	void ActivateGroupCamps(struct FName& Group); // Function Mist.MistMobCampManager.ActivateGroupCamps // (Final|Native|Private|HasOutParms) // @ game+0x11416f0
	void ActivateCamps(); // Function Mist.MistMobCampManager.ActivateCamps // (Final|Native|Private) // @ game+0x11416d0
};

// Class Mist.MistMobCampSpawner
// Size: 0x420 (Inherited: 0x3c0)
struct AMistMobCampSpawner : AActor {
	char pad_3C0[0x30]; // 0x3c0(0x30)
	struct AMistMobCamp* CampClass; // 0x3f0(0x08)
	struct FName CampGroup; // 0x3f8(0x08)
	float MinDistanceToPlayerToShow; // 0x400(0x04)
	char pad_404[0x4]; // 0x404(0x04)
	struct AMistMobCamp* SpawnedCamp; // 0x408(0x08)
	char pad_410[0x10]; // 0x410(0x10)

	void HandleCampStateChanged(struct AMistMobCamp* Camp); // Function Mist.MistMobCampSpawner.HandleCampStateChanged // (Final|Native|Public) // @ game+0x1141b60
	void HandleCampDestroyed(struct AActor* DestroyedActor); // Function Mist.MistMobCampSpawner.HandleCampDestroyed // (Final|Native|Public) // @ game+0x11419e0
};

// Class Mist.MistMobDifficultyLevel
// Size: 0xc8 (Inherited: 0x30)
struct UMistMobDifficultyLevel : UDataAsset {
	struct TSoftObjectPtr<UDataTable> FootworkTable; // 0x30(0x28)
	struct UBTTask_BlackboardBase* AttackTaskType; // 0x58(0x08)
	float WaitAtEngagingDuration; // 0x60(0x04)
	float WaitAfterAttackDuration; // 0x64(0x04)
	float AttackStrafeProbability; // 0x68(0x04)
	float DefendStrafeProbability; // 0x6c(0x04)
	float AttackGetCloseWeight; // 0x70(0x04)
	float AttackStandWeight; // 0x74(0x04)
	float AttackDisengageWeight; // 0x78(0x04)
	float WaitGetCloseWeight; // 0x7c(0x04)
	float WaitStandWeight; // 0x80(0x04)
	float WaitDisengageWeight; // 0x84(0x04)
	float DefendGetCloseWeight; // 0x88(0x04)
	float DefendStandWeight; // 0x8c(0x04)
	float DefendDisengageWeight; // 0x90(0x04)
	float CorrectBlockChance; // 0x94(0x04)
	float TimeToCorrectBlock; // 0x98(0x04)
	float ChanceToCancelAttack; // 0x9c(0x04)
	float ChanceToFeint; // 0xa0(0x04)
	float ChanceToFeintIfOpponentBlocks; // 0xa4(0x04)
	struct UDataTable* CachedFootworkTable; // 0xa8(0x08)
	char pad_B0[0x18]; // 0xb0(0x18)
};

// Class Mist.MistMob
// Size: 0x28 (Inherited: 0x28)
struct UMistMob : UInterface {
};

// Class Mist.MistPhysicalMobImpactDamage
// Size: 0x28 (Inherited: 0x28)
struct UMistPhysicalMobImpactDamage : UInterface {
};

// Class Mist.MistMobNestComponent
// Size: 0x1c8 (Inherited: 0xf0)
struct UMistMobNestComponent : UActorComponent {
	struct AMistPhysicalMob* MobClass; // 0xf0(0x08)
	struct AAIController* MobController; // 0xf8(0x08)
	struct FMistComponentReference SpawnLocationRef; // 0x100(0x28)
	struct FMistComponentReference LootTriggerComponentRef; // 0x128(0x28)
	struct FMistComponentReference AggroTriggerComponentRef; // 0x150(0x28)
	struct AActor* PatrolTargetClass; // 0x178(0x08)
	float NestRespawnDelay; // 0x180(0x04)
	float MobRespawnDelay; // 0x184(0x04)
	bool bPreferredNestEntryDirection; // 0x188(0x01)
	enum class EAxisOption EntryDirection; // 0x189(0x01)
	char pad_18A[0x6]; // 0x18a(0x06)
	struct AMistPhysicalMob* SpawnedMob; // 0x190(0x08)
	enum class EMistNestState NestState; // 0x198(0x01)
	char pad_199[0x2f]; // 0x199(0x2f)

	void OnRep_NestState(); // Function Mist.MistMobNestComponent.OnRep_NestState // (Final|Native|Private) // @ game+0x1147660
	void OnPlayerTriggerLeft(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistMobNestComponent.OnPlayerTriggerLeft // (Final|Native|Private) // @ game+0x11475a0
	void OnPlayerTriggerEntered(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistMobNestComponent.OnPlayerTriggerEntered // (Final|Native|Private) // @ game+0x11474e0
	void OnLootTriggerEntered(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistMobNestComponent.OnLootTriggerEntered // (Final|Native|Private) // @ game+0x1147420
	void NestStartedBurning(); // Function Mist.MistMobNestComponent.NestStartedBurning // (Final|Native|Private) // @ game+0x1147400
	void NestFinishedBurning(); // Function Mist.MistMobNestComponent.NestFinishedBurning // (Final|Native|Private) // @ game+0x11473e0
	void MulticastSetState(enum class EMistNestState NewState); // Function Mist.MistMobNestComponent.MulticastSetState // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d17f0
	void HandleMobDead(struct AActor* DestroyedMob); // Function Mist.MistMobNestComponent.HandleMobDead // (Final|Native|Private) // @ game+0x1146d80
};

// Class Mist.MistMobSpawner
// Size: 0x410 (Inherited: 0x3c0)
struct AMistMobSpawner : AActor {
	struct AMistCharacter* MobClass; // 0x3c0(0x08)
	struct AAIController* MobController; // 0x3c8(0x08)
	float AvgSpawnInterval; // 0x3d0(0x04)
	float SpawnDistance; // 0x3d4(0x04)
	float SpawnRadius; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct UMistMobDifficultyLevel* EasyMobLevel; // 0x3e0(0x08)
	struct UMistMobDifficultyLevel* MediumMobLevel; // 0x3e8(0x08)
	struct UMistMobDifficultyLevel* HardMobLevel; // 0x3f0(0x08)
	char pad_3F8[0x18]; // 0x3f8(0x18)
};

// Class Mist.MistMobSpawnerExperimental
// Size: 0x438 (Inherited: 0x3c0)
struct AMistMobSpawnerExperimental : AActor {
	struct APawn* MobClass; // 0x3c0(0x08)
	struct AAIController* MobController; // 0x3c8(0x08)
	float AvgSpawnInterval; // 0x3d0(0x04)
	float MonkeyRespawnTimer; // 0x3d4(0x04)
	float DespawnDelay; // 0x3d8(0x04)
	int32_t TotalMonkeys; // 0x3dc(0x04)
	float SpawnDistance; // 0x3e0(0x04)
	float SpawnRadius; // 0x3e4(0x04)
	bool IgnorePlayersDistance; // 0x3e8(0x01)
	bool bForbidIfCloseToTravelZone; // 0x3e9(0x01)
	char pad_3EA[0x2]; // 0x3ea(0x02)
	float ProximityToTravelZoneDistance; // 0x3ec(0x04)
	char pad_3F0[0x48]; // 0x3f0(0x48)

	void HandleMobStateChanged(struct APawn* Mob, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistMobSpawnerExperimental.HandleMobStateChanged // (Final|Native|Private) // @ game+0x1146e80
	void HandleMobDestroyed(struct AActor* Mob); // Function Mist.MistMobSpawnerExperimental.HandleMobDestroyed // (Final|Native|Private) // @ game+0x1146e00
};

// Class Mist.MistMoneyChangedMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistMoneyChangedMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* TextWidget; // 0x2c0(0x08)
	struct UMistIntMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistMoneyWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistMoneyWidget : UMistUIWidget {
	struct UTextBlock* MoneyWidget; // 0x2c0(0x08)
};

// Class Mist.MistMonkeyShrineComponent
// Size: 0x158 (Inherited: 0xf0)
struct UMistMonkeyShrineComponent : UActorComponent {
	struct FMistLootDesc Loot; // 0xf0(0x30)
	float SpawnInterval; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct FMistComponentReference ContainerRef; // 0x128(0x28)
	bool ShrineActive; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
};

// Class Mist.MistMTXPreviewWidget
// Size: 0x360 (Inherited: 0x2c0)
struct UMistMTXPreviewWidget : UMistUIWidget {
	struct AMistCharacterMannequin* MannequinActorClass; // 0x2c0(0x08)
	struct AMistWalker* PreviewWalkerClass; // 0x2c8(0x08)
	struct AActor* FlagActorClass; // 0x2d0(0x08)
	struct TArray<struct UMistEquipmentItemTemplate*> MannequinEquipmentItemClasses; // 0x2d8(0x10)
	struct UHorizontalBox* ItemsListWidget; // 0x2e8(0x08)
	struct UMistPhotoStageWidget* PreviewWidget; // 0x2f0(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x2f8(0x08)
	struct UMistShopInventoryItemData* InventoryItem; // 0x300(0x08)
	struct UMistShopPreviewItemIconWidget* SelectedItemWidget; // 0x308(0x08)
	struct AActor* PreviewActor; // 0x310(0x08)
	struct UTexture2D* ClanEmblem; // 0x318(0x08)
	char pad_320[0x40]; // 0x320(0x40)
};

// Class Mist.MistNamedSlot
// Size: 0x140 (Inherited: 0x130)
struct UMistNamedSlot : UNamedSlot {
	char pad_130[0x10]; // 0x130(0x10)
};

// Class Mist.MistNavLinkProxy
// Size: 0x410 (Inherited: 0x410)
struct AMistNavLinkProxy : ANavLinkProxy {

	void HandleOnSmartLinkReached(struct AActor* MovingActor, struct FVector& DestinationPoint); // Function Mist.MistNavLinkProxy.HandleOnSmartLinkReached // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x11471e0
};

// Class Mist.MistNetProjectile
// Size: 0x518 (Inherited: 0x500)
struct AMistNetProjectile : AMistProjectile {
	struct UStaticMesh* AttachedNetMesh; // 0x500(0x08)
	float VelocityEffectOnHitProjectile; // 0x508(0x04)
	float VelocityEffectOnSmallHitProjectile; // 0x50c(0x04)
	float VelocityEffectFromSmallHitProjectile; // 0x510(0x04)
	char pad_514[0x4]; // 0x514(0x04)
};

// Class Mist.MistNettableComponent
// Size: 0x1a8 (Inherited: 0xf0)
struct UMistNettableComponent : UActorComponent {
	struct FMulticastInlineDelegate OnHitByNet; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnNetAttached; // 0x100(0x10)
	struct FMulticastInlineDelegate OnNetRemoved; // 0x110(0x10)
	struct AMistNetProjectile* NetAttached; // 0x120(0x08)
	struct UStaticMeshComponent* NetComponent; // 0x128(0x08)
	struct UMistInteractableComponent* InteractableComponent; // 0x130(0x08)
	bool bAttachNetOnImpact; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)
	struct FMistComponentReference NetAttachComponent; // 0x140(0x28)
	bool bOverrideNetSizeAndOffset; // 0x168(0x01)
	char pad_169[0x3]; // 0x169(0x03)
	struct FVector OverrideNetOffset; // 0x16c(0x0c)
	struct FVector OverrideNetScale; // 0x178(0x0c)
	bool bAllowRemovingNetByInteracting; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)
	struct USoundBase* RemovingNetSound; // 0x188(0x08)
	struct USoundBase* AttachingNetSound; // 0x190(0x08)
	float RemovingVolume; // 0x198(0x04)
	float AttachingVolume; // 0x19c(0x04)
	struct AMistCharacter* NettingInstigator; // 0x1a0(0x08)

	void RaiseNetRemoved(); // Function Mist.MistNettableComponent.RaiseNetRemoved // (Final|Native|Public) // @ game+0x11476a0
	void RaiseNetAttached(); // Function Mist.MistNettableComponent.RaiseNetAttached // (Final|Native|Public) // @ game+0x1147680
	void OnRep_NetAttached(); // Function Mist.MistNettableComponent.OnRep_NetAttached // (Native|Protected) // @ game+0x10c2540
	void OnNetRemoved__DelegateSignature(); // DelegateFunction Mist.MistNettableComponent.OnNetRemoved__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnNetAttached__DelegateSignature(); // DelegateFunction Mist.MistNettableComponent.OnNetAttached__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnHitByNet__DelegateSignature(struct AMistNetProjectile* NetProjectile); // DelegateFunction Mist.MistNettableComponent.OnHitByNet__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	bool IsNetAttached(); // Function Mist.MistNettableComponent.IsNetAttached // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11473b0
	void HandleInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistNettableComponent.HandleInteraction // (Native|Protected|HasOutParms) // @ game+0x1146ca0
	void BroadcastRemoveNet(); // Function Mist.MistNettableComponent.BroadcastRemoveNet // (Net|NetReliableNative|Event|Public|BlueprintCallable) // @ game+0x108bfd0
	void BroadcastAttachNet(struct AMistNetProjectile* Net, struct AMistCharacter* InNettingInstigator); // Function Mist.MistNettableComponent.BroadcastAttachNet // (Net|NetReliableNative|Event|Public|BlueprintCallable) // @ game+0x11469e0
};

// Class Mist.MistNetThrowerAnimInstance
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistNetThrowerAnimInstance : UMistDoubleBarreledGunAnimInstance {
	float AnimationStartPosition; // 0x2b8(0x04)
	struct FVector YawControllerHandleLocation; // 0x2bc(0x0c)
	struct FVector PitchControllerHandleLocation; // 0x2c8(0x0c)
	char pad_2DC[0x14]; // 0x2dc(0x14)
};

// Class Mist.MistNettingSmallWalkerBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistNettingSmallWalkerBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistNetworkFailureWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UMistNetworkFailureWidget : UMistHUDWidget {
	struct UTextBlock* TextWidget; // 0x2e0(0x08)
	char pad_2E8[0x18]; // 0x2e8(0x18)

	void SetWarningStyle(); // Function Mist.MistNetworkFailureWidget.SetWarningStyle // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void SetErrorStyle(); // Function Mist.MistNetworkFailureWidget.SetErrorStyle // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleNetworkLag(struct UWorld* World, struct UNetDriver* NetDriver, enum class ENetworkLagState LagType); // Function Mist.MistNetworkFailureWidget.HandleNetworkLag // (Final|Native|Private) // @ game+0x11470e0
	void HandleNetworkFailure(struct UWorld* World, struct UNetDriver* NetDriver, enum class ENetworkFailure FailureType, struct FString ErrorString); // Function Mist.MistNetworkFailureWidget.HandleNetworkFailure // (Final|Native|Private) // @ game+0x1146f80
};

// Class Mist.MistNotificationItemWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistNotificationItemWidget : UMistUIWidget {
	struct UTextBlock* TitleWidget; // 0x2c0(0x08)
	struct UTextBlock* DetailsWidget; // 0x2c8(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x2d0(0x08)
	struct UWidgetAnimation* HideAnimation; // 0x2d8(0x08)
	struct UMistNotificationsWidget* Parent; // 0x2e0(0x08)
	struct UMistNotificationItemData* Data; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	void HandleHideAnimationFinished(); // Function Mist.MistNotificationItemWidget.HandleHideAnimationFinished // (Final|Native|Private) // @ game+0x113ed50
};

// Class Mist.MistNotificationItemData
// Size: 0x78 (Inherited: 0x28)
struct UMistNotificationItemData : UObject {
	char pad_28[0x50]; // 0x28(0x50)
};

// Class Mist.MistNotificationsWidget
// Size: 0x368 (Inherited: 0x2c0)
struct UMistNotificationsWidget : UMistUIWidget {
	struct UPanelWidget* ItemsWidget; // 0x2c0(0x08)
	struct TMap<enum class EMistNotificationItemType, struct UMistNotificationItemWidget*> NotificationWidgetTypes; // 0x2c8(0x50)
	struct FText ErrorTitleText; // 0x318(0x18)
	struct FText ErrorNoDetailsText; // 0x330(0x18)
	int32_t MaxItems; // 0x348(0x04)
	float DisplayTime; // 0x34c(0x04)
	bool bCanClickAway; // 0x350(0x01)
	char pad_351[0x7]; // 0x351(0x07)
	struct TArray<struct UMistNotificationItemData*> Items; // 0x358(0x10)
};

// Class Mist.MistNumberInputWidget
// Size: 0x390 (Inherited: 0x2c0)
struct UMistNumberInputWidget : UMistUIWidget {
	struct UEditableTextBox* InputWidget; // 0x2c0(0x08)
	char pad_2C8[0x18]; // 0x2c8(0x18)
	struct FText TooSmallError; // 0x2e0(0x18)
	struct FText TooLargeError; // 0x2f8(0x18)
	struct FText NotValidError; // 0x310(0x18)
	struct FText RequiredError; // 0x328(0x18)
	char pad_340[0x50]; // 0x340(0x50)

	void HandleInputTextCommitted(struct FText& InText, enum class ETextCommit InCommitMethod); // Function Mist.MistNumberInputWidget.HandleInputTextCommitted // (Final|Native|Private|HasOutParms) // @ game+0x1146b80
	void HandleInputTextChanged(struct FText& InText); // Function Mist.MistNumberInputWidget.HandleInputTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1146ab0
};

// Class Mist.MistNumberSliderWidget
// Size: 0x340 (Inherited: 0x2c0)
struct UMistNumberSliderWidget : UMistUIWidget {
	struct USlider* SliderWidget; // 0x2c0(0x08)
	struct UTextBlock* ValueDisplayWidget; // 0x2c8(0x08)
	struct FText ValueDisplayFormat; // 0x2d0(0x18)
	char ValueDisplayDecimalPlaces; // 0x2e8(0x01)
	char pad_2E9[0x57]; // 0x2e9(0x57)

	void HandleSliderValueChanged(float InValue); // Function Mist.MistNumberSliderWidget.HandleSliderValueChanged // (Final|Native|Private) // @ game+0x1147330
};

// Class Mist.MistOasisGameMode
// Size: 0xc98 (Inherited: 0x4a8)
struct AMistOasisGameMode : AGameMode {
	char pad_4A8[0xc0]; // 0x4a8(0xc0)
	struct UMistPersistenceComponent* PersistenceComponent; // 0x568(0x08)
	struct UMistWorldTravelComponent* WorldTravelComponent; // 0x570(0x08)
	struct UMistMapIconManagerComponent* MapIconManagerComponent; // 0x578(0x08)
	struct TMap<struct FMistPlayerStateIdentifier, struct AMistOasisPlayerState*> IdToPlayerStateMap; // 0x580(0x50)
	struct TMap<int64_t, struct AMistOasisPlayerState*> CharacterIdToPlayerStateMap; // 0x5d0(0x50)
	struct TMap<int64_t, struct FMistCharacterLookupData> CharacterLookupTable; // 0x620(0x50)
	struct TMap<int64_t, struct FMistClanLookupData> ClanLookupTable; // 0x670(0x50)
	struct TSet<int64_t> MissingClanLookups; // 0x6c0(0x50)
	struct TSet<int64_t> MissingCharacterLookups; // 0x710(0x50)
	char pad_760[0x250]; // 0x760(0x250)
	struct TArray<struct AMistAuthPlayerState*> AuthPlayerStates; // 0x9b0(0x10)
	char pad_9C0[0x2d8]; // 0x9c0(0x2d8)

	void HandlePlayerStateDestroyed(struct AActor* DestroyedActor); // Function Mist.MistOasisGameMode.HandlePlayerStateDestroyed // (Final|Native|Private) // @ game+0x11472b0
};

// Class Mist.MistOasisGameSession
// Size: 0x3d8 (Inherited: 0x3d8)
struct AMistOasisGameSession : AGameSession {
};

// Class Mist.MistOasisGameState
// Size: 0x848 (Inherited: 0x430)
struct AMistOasisGameState : AGameState {
	char pad_430[0x30]; // 0x430(0x30)
	struct FMistRealmInformation RealmInformation; // 0x460(0x88)
	struct UMistReplicatedConfigComponent* ReplicatedConfigComponent; // 0x4e8(0x08)
	struct FText RealmShuttingDownText; // 0x4f0(0x18)
	struct FText RealmTileDecayingText; // 0x508(0x18)
	struct FText RealmTileDecayingImminentText; // 0x520(0x18)
	float RealmTileDecayingDisplayDuration; // 0x538(0x04)
	char pad_53C[0x4]; // 0x53c(0x04)
	struct TMap<int32_t, struct AMistWaypoint*> Waypoints; // 0x540(0x50)
	struct TMap<int64_t, int32_t> ShadowMuteCharacters; // 0x590(0x50)
	struct TArray<struct FString> ShadowMuteWords; // 0x5e0(0x10)
	struct TMap<int64_t, int32_t> ClanMemberCount; // 0x5f0(0x50)
	struct TArray<struct FName> ActiveCheats; // 0x640(0x10)
	char pad_650[0x18]; // 0x650(0x18)
	struct TArray<struct FCheatLog> CheatsLog; // 0x668(0x10)
	char pad_678[0x8]; // 0x678(0x08)
	struct TArray<struct UMistTechTreeItem*> DisabledTechs; // 0x680(0x10)
	struct TMap<struct APawn*, float> MobRespawnTimeMultipliers; // 0x690(0x50)
	struct TMap<struct APawn*, float> MobSpawnNumberMultiplier; // 0x6e0(0x50)
	char pad_730[0xa0]; // 0x730(0xa0)
	struct AMistTileTimeActor* TileTimeActor; // 0x7d0(0x08)
	char pad_7D8[0x70]; // 0x7d8(0x70)

	void OnRep_RealmInformation(struct FMistRealmInformation& PreviousValue); // Function Mist.MistOasisGameState.OnRep_RealmInformation // (Final|Native|Private|HasOutParms) // @ game+0x114ebf0
	void OnRep_ActiveCheats(); // Function Mist.MistOasisGameState.OnRep_ActiveCheats // (Final|Native|Private) // @ game+0x114ebd0
	void MulticastUpdateCheatLog(struct FCheatLog CheatLog); // Function Mist.MistOasisGameState.MulticastUpdateCheatLog // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x114ea20
	void MulticastStartCineTimer(float Time, struct FString Msg); // Function Mist.MistOasisGameState.MulticastStartCineTimer // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x114e940
	void MulticastSpawnParticleEmitterAtLocation(struct UParticleSystem* System, struct FTransform Transform); // Function Mist.MistOasisGameState.MulticastSpawnParticleEmitterAtLocation // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114e830
	void MulticastSetCheatValue(struct FName InCheat, bool bValue); // Function Mist.MistOasisGameState.MulticastSetCheatValue // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x114e760
	void MulticastPlaySoundAtLocation(struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings); // Function Mist.MistOasisGameState.MulticastPlaySoundAtLocation // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114e500
	void MulticastMoveSandstorm(struct FVector NewLocation, struct FRotator NewRotation, float Speed, float RotationSpeed); // Function Mist.MistOasisGameState.MulticastMoveSandstorm // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114e370
	void MulticastDrawDebugString(struct FVector TextLocation, struct FString Text, struct AActor* TextBaseActor, struct FColor TextColor, float Duration, bool bDrawShadow); // Function Mist.MistOasisGameState.MulticastDrawDebugString // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114e1a0
	void MulticastDrawDebugStaticMeshCollisions(struct TArray<struct FKAggregateGeom> InGeoms, struct TArray<struct FTransform> Transforms, struct FColor Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugStaticMeshCollisions // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114de40
	void MulticastDrawDebugStaticMeshCollision(struct FKAggregateGeom InGeom, struct FTransform Transform, struct FColor Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugStaticMeshCollision // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114dae0
	void MulticastDrawDebugSphere(struct FVector Center, float Radius, int32_t Segments, struct FColor Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugSphere // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114d8a0
	void MulticastDrawDebugSolidPlane(struct FPlane P, struct FVector Loc, struct FVector2D Extents, struct FColor Color, bool bPersistent, float LifeTime, char DepthPriority); // Function Mist.MistOasisGameState.MulticastDrawDebugSolidPlane // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114d6b0
	void MulticastDrawDebugLine(struct FVector LineStart, struct FVector LineEnd, struct FColor Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugLine // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114d4c0
	void MulticastDrawDebugDirectionalArrow(struct FVector LineStart, struct FVector LineEnd, float ArrowSize, struct FColor Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugDirectionalArrow // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114d280
	void MulticastDrawDebugCoordinateSystem(struct FVector AxisLoc, struct FRotator AxisRot, float Scale, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugCoordinateSystem // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114d080
	void MulticastDrawDebugCapsule(struct FVector Center, float HalfHeight, float Radius, struct FQuat Rotation, struct FColor Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugCapsule // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114ce00
	void MulticastDrawDebugBox(struct FVector Center, struct FVector Box, struct FQuat Rotation, struct FColor Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function Mist.MistOasisGameState.MulticastDrawDebugBox // (Net|Native|Event|NetMulticast|Public|HasDefaults) // @ game+0x114cbd0
	void MulticastClapperBoard(float AtServerTime); // Function Mist.MistOasisGameState.MulticastClapperBoard // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x114cb50
	bool GetLastUsedCheat(struct FName CheatName, struct FCheatLog& OutCheatLogRef); // Function Mist.MistOasisGameState.GetLastUsedCheat // (Final|Native|Public|HasOutParms) // @ game+0x114c8e0
	void BroadcastSunRotation(struct FRotator Rotator); // Function Mist.MistOasisGameState.BroadcastSunRotation // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0x114bb20
	void BroadcastIgnoreSpectatorOverriders(); // Function Mist.MistOasisGameState.BroadcastIgnoreSpectatorOverriders // (Net|NetReliableNative|Event|Public) // @ game+0x10c4910
	void BroadcastFogDensity(float Density); // Function Mist.MistOasisGameState.BroadcastFogDensity // (Net|NetReliableNative|Event|Public) // @ game+0x10c3240
	void AddUsedCheat(struct FName CheatName, struct FString PlayerName, struct FDateTime DateTime, struct FString CheatValue); // Function Mist.MistOasisGameState.AddUsedCheat // (Final|Native|Public|HasDefaults) // @ game+0x114b790
};

// Class Mist.MistPlayerController
// Size: 0x720 (Inherited: 0x708)
struct AMistPlayerController : APlayerController {
	struct UMistUIManager* UIManager; // 0x708(0x08)
	struct UMistCheatingComponent* CheatingComponent; // 0x710(0x08)
	char pad_718[0x8]; // 0x718(0x08)
};

// Class Mist.MistOasisPlayerController
// Size: 0x928 (Inherited: 0x720)
struct AMistOasisPlayerController : AMistPlayerController {
	char pad_720[0xa8]; // 0x720(0xa8)
	struct UMistHUDManager* HUDManager; // 0x7c8(0x08)
	struct AMistPlayer* PlayerCharacter; // 0x7d0(0x08)
	struct UMistGameMenuScreen* GameMenuScreen; // 0x7d8(0x08)
	struct UMistEquipmentScreen* EquipmentScreen; // 0x7e0(0x08)
	struct UMistMapScreen* MapScreen; // 0x7e8(0x08)
	struct UMistBuildingScreen* BuildingScreen; // 0x7f0(0x08)
	struct UMistClanScreen* ClanScreen; // 0x7f8(0x08)
	struct UMistPlayerStatsScreen* StatsScreen; // 0x800(0x08)
	struct UMistUnlockableTreeScreen* TechTreeScreen; // 0x808(0x08)
	struct UMistWorldMap2Screen* WorldMap2Screen; // 0x810(0x08)
	struct UMistInGameLoadingScreen* LoadingScreen; // 0x818(0x08)
	struct UMistCombatDebuggingComponent* CombatDebuggingComponent; // 0x820(0x08)
	struct UMistPlayerMapIconManagerComponent* MapIconManagerComponent; // 0x828(0x08)
	struct UMistPlayerMessengerComponent* MessengerComponent; // 0x830(0x08)
	struct UMistSyncMusicControlComponent* SyncMusicControlComponent; // 0x838(0x08)
	struct UMistFoliageRustleManager* FoliageRustleEffectManager; // 0x840(0x08)
	struct UMistAttackArrowsControlComponent* AttackArrowsControlComponent; // 0x848(0x08)
	struct UMistAchievementComponent* AchievementComponent; // 0x850(0x08)
	struct UMistAuthComponent* AuthComponent; // 0x858(0x08)
	struct UMistCharacterMovementBudgeterComponent* CharacterMovementBudgeterComponent; // 0x860(0x08)
	struct UMistCombatAnimationBudgetingManager* CombatAnimationBudgeterComponent; // 0x868(0x08)
	struct FMistControlScheme ControlScheme; // 0x870(0x10)
	struct TArray<struct FMistEquipmentItem> PreferredGear; // 0x880(0x10)
	char pad_890[0x8]; // 0x890(0x08)
	int32_t FoliageSyncMaxInstances; // 0x898(0x04)
	char pad_89C[0x4]; // 0x89c(0x04)
	struct APlayerStart* UsedPlayerStart; // 0x8a0(0x08)
	struct TArray<struct FFoliageSyncQueueEntry> FoliageSyncQueue; // 0x8a8(0x10)
	char pad_8B8[0x18]; // 0x8b8(0x18)
	bool bIsPlayingIntroScene; // 0x8d0(0x01)
	char pad_8D1[0x3]; // 0x8d1(0x03)
	float RespawnDelay; // 0x8d4(0x04)
	char pad_8D8[0x30]; // 0x8d8(0x30)
	struct FString SessionIDString; // 0x908(0x10)
	char pad_918[0x10]; // 0x918(0x10)

	void SkipIntroScene(); // Function Mist.MistOasisPlayerController.SkipIntroScene // (Final|Exec|Native|Public) // @ game+0x1150070
	void ServerTransferOwnershipToClan(struct UMistClanOwnershipComponent* OwnershipComponent, uint64_t ClanId); // Function Mist.MistOasisPlayerController.ServerTransferOwnershipToClan // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114ffa0
	void ServerSpectatePlayer(struct FString PlayerName); // Function Mist.MistOasisPlayerController.ServerSpectatePlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114ff00
	void ServerSetWeatherPaused(bool bPaused); // Function Mist.MistOasisPlayerController.ServerSetWeatherPaused // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114fe70
	void ServerSetWalkerCustomName(struct AMistWalker* Walker, struct FString CustomName); // Function Mist.MistOasisPlayerController.ServerSetWalkerCustomName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114fd90
	void ServerSetSunRotation(struct FRotator Rotator); // Function Mist.MistOasisPlayerController.ServerSetSunRotation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x114fd10
	void ServerSetPreferredGear(struct TArray<struct FMistEquipmentItem> GearSet); // Function Mist.MistOasisPlayerController.ServerSetPreferredGear // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114fc70
	void ServerSetOwnershipSharing(struct UMistClanOwnershipComponent* OwnershipComponent, bool bShared); // Function Mist.MistOasisPlayerController.ServerSetOwnershipSharing // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114fba0
	void ServerSetInheritPermission(struct UMistClanPermissionComponent* PermissionComponent, bool bValue); // Function Mist.MistOasisPlayerController.ServerSetInheritPermission // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114fad0
	void ServerSetFogDensity(float FogDensity); // Function Mist.MistOasisPlayerController.ServerSetFogDensity // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114fa50
	void ServerSetClanPermission(struct UMistClanPermissionComponent* PermissionComponent, enum class EMistClanPermission Permission); // Function Mist.MistOasisPlayerController.ServerSetClanPermission // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f980
	void ServerRespawn(uint64_t SpawnIconId, bool bSpawnWithEquipment, bool bSpawnOnTheGround); // Function Mist.MistOasisPlayerController.ServerRespawn // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f870
	void ServerRequestWalkerGear(uint64_t SpawnIconId); // Function Mist.MistOasisPlayerController.ServerRequestWalkerGear // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f7e0
	void ServerRequestInstanceRespawnTime(struct UMistFoliageComponent* Foliage, uint32_t InstanceId); // Function Mist.MistOasisPlayerController.ServerRequestInstanceRespawnTime // (Net|Native|Event|Public|NetServer) // @ game+0x114f710
	void ServerReportPlayer(struct FUniqueNetIdRepl ReportedUniqueId, int32_t Reason, struct FString Message); // Function Mist.MistOasisPlayerController.ServerReportPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f590
	void ServerReloadPersistence(); // Function Mist.MistOasisPlayerController.ServerReloadPersistence // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f570
	void ServerNetworkProfilerEnable(); // Function Mist.MistOasisPlayerController.ServerNetworkProfilerEnable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f550
	void ServerNetworkProfilerDisable(); // Function Mist.MistOasisPlayerController.ServerNetworkProfilerDisable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f530
	void ServerMoveSandstorm(struct FVector NewLocation, struct FRotator NewRotation, float Speed, float RotationSpeed); // Function Mist.MistOasisPlayerController.ServerMoveSandstorm // (Net|Native|Event|Public|NetServer|HasDefaults) // @ game+0x114f3a0
	void ServerKickPlayer(int64_t CharacterId); // Function Mist.MistOasisPlayerController.ServerKickPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f310
	void ServerJoinVoiceChat(); // Function Mist.MistOasisPlayerController.ServerJoinVoiceChat // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x114f2f0
	void ServerIgnoreSpectatorOverriders(); // Function Mist.MistOasisPlayerController.ServerIgnoreSpectatorOverriders // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f2d0
	void ServerForcePersistence(); // Function Mist.MistOasisPlayerController.ServerForcePersistence // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f2b0
	void ServerFinishTransitionFromCinematicToGameplay(); // Function Mist.MistOasisPlayerController.ServerFinishTransitionFromCinematicToGameplay // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f290
	void ServerEnableCinematicMode(); // Function Mist.MistOasisPlayerController.ServerEnableCinematicMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f270
	void ServerDisableCinematicMode(bool bRaiseEvent); // Function Mist.MistOasisPlayerController.ServerDisableCinematicMode // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f1e0
	void ServerCustomizeActor(struct AActor* InActor, struct FMistStructureCustomization InCustomization); // Function Mist.MistOasisPlayerController.ServerCustomizeActor // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f100
	void ServerContinueFoliageSync(); // Function Mist.MistOasisPlayerController.ServerContinueFoliageSync // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f0e0
	void ServerConnectTrap(struct UMistTrapDamageComponent* TrapComponent, struct UActorComponent* TriggerComponent); // Function Mist.MistOasisPlayerController.ServerConnectTrap // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114f010
	void ServerCancelFoliageSync(struct AMistFoliageActor* FoliageActor); // Function Mist.MistOasisPlayerController.ServerCancelFoliageSync // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114ef80
	void ServerBeginFoliageSync(struct AMistFoliageActor* FoliageActor); // Function Mist.MistOasisPlayerController.ServerBeginFoliageSync // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114eef0
	void ServerBanPlayer(struct FUniqueNetIdRepl UniqueNetId, int64_t CharacterId); // Function Mist.MistOasisPlayerController.ServerBanPlayer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x114edc0
	void ReloadPersistence(); // Function Mist.MistOasisPlayerController.ReloadPersistence // (Final|Exec|Native|Public) // @ game+0x114eda0
	void PlayIntroScene(bool bForcePlaying); // Function Mist.MistOasisPlayerController.PlayIntroScene // (Final|Exec|Native|Public) // @ game+0x114ed10
	void OnRep_SessionIDString(); // Function Mist.MistOasisPlayerController.OnRep_SessionIDString // (Native|Public) // @ game+0x114ecf0
	void NetworkProfilerEnableServer(); // Function Mist.MistOasisPlayerController.NetworkProfilerEnableServer // (Final|Exec|Native|Public) // @ game+0x114ebb0
	void NetworkProfilerDisableServer(); // Function Mist.MistOasisPlayerController.NetworkProfilerDisableServer // (Final|Exec|Native|Public) // @ game+0x114eb90
	bool IsPlayingIntroScene(); // Function Mist.MistOasisPlayerController.IsPlayingIntroScene // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x114cb30
	void HandleCharacterStateChanged(struct AMistCharacter* ChangedCharacter, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistOasisPlayerController.HandleCharacterStateChanged // (Native|Protected) // @ game+0x114ca30
	void HACK_ServerRefreshPlayerStateReplication(); // Function Mist.MistOasisPlayerController.HACK_ServerRefreshPlayerStateReplication // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x114ca10
	void ForcePersistence(); // Function Mist.MistOasisPlayerController.ForcePersistence // (Final|Exec|Native|Public) // @ game+0x114c8c0
	void DebugPhysics(float CollisionsCulling); // Function Mist.MistOasisPlayerController.DebugPhysics // (Final|Exec|Native|Public) // @ game+0x114c840
	void ClientUpdateTradeProtectionInfo(char ProtectionState, struct FMistHudCountdownOptions Options, float MaxTimerValue); // Function Mist.MistOasisPlayerController.ClientUpdateTradeProtectionInfo // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c6b0
	void ClientSyncFoliage(struct TArray<struct FFoliageSyncMessage> Messages, bool bAnyLeft); // Function Mist.MistOasisPlayerController.ClientSyncFoliage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c5a0
	void ClientSpectatePlayer(struct AMistPlayer* InPlayer); // Function Mist.MistOasisPlayerController.ClientSpectatePlayer // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c510
	void ClientSetWalkerCustomNameValidationFailed(struct FMistInvalidNameData Data); // Function Mist.MistOasisPlayerController.ClientSetWalkerCustomNameValidationFailed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c470
	void ClientSendTrackingPoachingHuts(int64_t CharacterId, int64_t ClanId, struct TArray<struct FMistTrackingHutData> InHutsData); // Function Mist.MistOasisPlayerController.ClientSendTrackingPoachingHuts // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c310
	void ClientReturnToMainMenuForPlay(); // Function Mist.MistOasisPlayerController.ClientReturnToMainMenuForPlay // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c2f0
	void ClientReturnToMainMenuForOffMapLobby(); // Function Mist.MistOasisPlayerController.ClientReturnToMainMenuForOffMapLobby // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c2d0
	void ClientReturnToMainMenuForDelayedPlay(); // Function Mist.MistOasisPlayerController.ClientReturnToMainMenuForDelayedPlay // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c2b0
	void ClientRemoveTradeProtection(); // Function Mist.MistOasisPlayerController.ClientRemoveTradeProtection // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c290
	void ClientRemoveHudCountdown(struct FString Identifier); // Function Mist.MistOasisPlayerController.ClientRemoveHudCountdown // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c1f0
	void ClientReceiveWalkerGear(struct TArray<struct FWalkerGearItemInfo> Gear); // Function Mist.MistOasisPlayerController.ClientReceiveWalkerGear // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114c150
	void ClientMoveSpectatorToLocation(struct FVector Location); // Function Mist.MistOasisPlayerController.ClientMoveSpectatorToLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x114c0c0
	void ClientJoinVoiceChat(struct FString Channel, struct FString Token); // Function Mist.MistOasisPlayerController.ClientJoinVoiceChat // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x114bfd0
	void ClientInstanceRespawnTime(struct UMistFoliageComponent* Foliage, uint32_t InstanceId, float RespawnTimeServer); // Function Mist.MistOasisPlayerController.ClientInstanceRespawnTime // (Net|Native|Event|Public|NetClient) // @ game+0x114bed0
	void ClientAddHudMessage(struct FMistHudMessageOptions Options); // Function Mist.MistOasisPlayerController.ClientAddHudMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114be00
	void ClientAddHudLog(struct FName Type, struct FText TextOverride); // Function Mist.MistOasisPlayerController.ClientAddHudLog // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114bd00
	void ClientAddHudCountdown(struct FString Identifier, struct FMistHudCountdownOptions Options); // Function Mist.MistOasisPlayerController.ClientAddHudCountdown // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x114bba0
	void BroadcastSetWeatherPaused(bool bPaused); // Function Mist.MistOasisPlayerController.BroadcastSetWeatherPaused // (Net|NetReliableNative|Event|Public) // @ game+0x114ba90
	void AwardMoney(int32_t Amount); // Function Mist.MistOasisPlayerController.AwardMoney // (Native|Public|BlueprintCallable) // @ game+0x114ba00
	void AwardExperience(int32_t Amount); // Function Mist.MistOasisPlayerController.AwardExperience // (Native|Public|BlueprintCallable) // @ game+0x114b970
};

// Class Mist.MistOasisPlayerState
// Size: 0xbd0 (Inherited: 0x4c0)
struct AMistOasisPlayerState : APlayerState {
	char pad_4C0[0x28]; // 0x4c0(0x28)
	struct FMulticastInlineDelegate OnPawnChanged; // 0x4e8(0x10)
	char pad_4F8[0x120]; // 0x4f8(0x120)
	struct FMulticastInlineDelegate OnTechUnlocked; // 0x618(0x10)
	struct FMulticastInlineDelegate OnPerkUnlocked; // 0x628(0x10)
	char pad_638[0xa8]; // 0x638(0xa8)
	struct UMistSafeLogOutComponent* SafeLogOutComponent; // 0x6e0(0x08)
	struct UMistPlayerWorldTravelComponent* WorldTravelComponent; // 0x6e8(0x08)
	struct UMistTutorialComponent* TutorialComponent; // 0x6f0(0x08)
	struct UMistPlayerFlotillaQuestsComponent* FlotillaQuestsComponent; // 0x6f8(0x08)
	struct UMistPlayerKnowledgeGatheringComponent* KnowledgeGatheringComponent; // 0x700(0x08)
	int64_t CharacterId; // 0x708(0x08)
	enum class EMistClanPermissionFlags ClanPermissions; // 0x710(0x08)
	struct FMistClanInfo Clan; // 0x718(0x20)
	int32_t StatLevels[0x6]; // 0x738(0x18)
	int32_t Level; // 0x750(0x04)
	char pad_754[0x4]; // 0x754(0x04)
	uint64_t Experience; // 0x758(0x08)
	uint64_t Money; // 0x760(0x08)
	uint64_t VaultMoney; // 0x768(0x08)
	uint64_t IntermediateCurrency; // 0x770(0x08)
	int32_t QuestsIcEarnedToday; // 0x778(0x04)
	char pad_77C[0x4]; // 0x77c(0x04)
	struct FDateTime LastDayQuestsIcEarned; // 0x780(0x08)
	bool bFlotillaCitizen; // 0x788(0x01)
	char pad_789[0x3]; // 0x789(0x03)
	int32_t StatPoints; // 0x78c(0x04)
	int32_t AdditionalStatPoints; // 0x790(0x04)
	int32_t TechTreePoints; // 0x794(0x04)
	int32_t PerkTreePoints; // 0x798(0x04)
	int32_t FlotillaRank; // 0x79c(0x04)
	int32_t FlotillaReputation; // 0x7a0(0x04)
	int32_t HACK_ReplicationRefresher; // 0x7a4(0x04)
	enum class EMistAccountTier Tier; // 0x7a8(0x01)
	char pad_7A9[0x7]; // 0x7a9(0x07)
	struct FString AccountName; // 0x7b0(0x10)
	enum class EMistGamePlatform AccountPlatform; // 0x7c0(0x01)
	char pad_7C1[0x7]; // 0x7c1(0x07)
	struct TArray<struct UMistTechTreeItem*> UnlockedTechs; // 0x7c8(0x10)
	struct TArray<struct UMistPerkTreeItem*> UnlockedPerks; // 0x7d8(0x10)
	struct TArray<int32_t> WalkerCraftingSkillsLevels; // 0x7e8(0x10)
	struct FMistCharacterCustomizationValues CharacterCustomization; // 0x7f8(0x24)
	struct FVector LastDeathLocation; // 0x81c(0x0c)
	bool bOnline; // 0x828(0x01)
	bool bBanned; // 0x829(0x01)
	char pad_82A[0x6]; // 0x82a(0x06)
	struct FDateTime BanEndDate; // 0x830(0x08)
	struct FString BanMessage; // 0x838(0x10)
	bool bInvulnerable; // 0x848(0x01)
	char pad_849[0x3]; // 0x849(0x03)
	int32_t TradeProtectionLevel; // 0x84c(0x04)
	bool bIsProtected; // 0x850(0x01)
	char pad_851[0x7]; // 0x851(0x07)
	struct FMistItem QuickSlotItems[0x7]; // 0x858(0xa8)
	struct FString SelectedSpawnWalkerGuid; // 0x900(0x10)
	float SpawnWalkerSwitchingCooldownEndTime; // 0x910(0x04)
	char pad_914[0x4]; // 0x914(0x04)
	struct TArray<struct FMistItemWithQuantity> ProtectedContainerItems; // 0x918(0x10)
	struct TMap<enum class EEquipmentSlot, struct FMistEquipmentItem> ProtectedEquipmentItems; // 0x928(0x50)
	char pad_978[0x6]; // 0x978(0x06)
	bool bHasIntroSceneBeenPlayed; // 0x97e(0x01)
	char pad_97F[0x1]; // 0x97f(0x01)
	float LastTransferTime; // 0x980(0x04)
	char pad_984[0x24]; // 0x984(0x24)
	struct TArray<struct FMistOwnedShopItem> OwnedShopItemList; // 0x9a8(0x10)
	struct TArray<struct FMistOwnedShopItem> LocallyOwnedShopItemList; // 0x9b8(0x10)
	char pad_9C8[0x50]; // 0x9c8(0x50)
	bool bLocalFreeBuilding; // 0xa18(0x01)
	bool bFreeShopItems; // 0xa19(0x01)
	char pad_A1A[0xb6]; // 0xa1a(0xb6)
	struct UMistMarkerControlComponent* MarkersControlComponent; // 0xad0(0x08)
	char pad_AD8[0x30]; // 0xad8(0x30)
	float NextRespawnTime; // 0xb08(0x04)
	char pad_B0C[0x4]; // 0xb0c(0x04)
	struct FMistItem PrevQuickSlotItems[0x7]; // 0xb10(0xa8)
	struct AMistPlayerTombstone* LatestTombstone; // 0xbb8(0x08)
	char pad_BC0[0x10]; // 0xbc0(0x10)

	void TechUnlockedEvent__DelegateSignature(struct AMistOasisPlayerState* Sender); // DelegateFunction Mist.MistOasisPlayerState.TechUnlockedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ServerUseIcVoucherShopItem(struct FName InShopItemId, int32_t Amount); // Function Mist.MistOasisPlayerState.ServerUseIcVoucherShopItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153df0
	void ServerUpgradeWalkerStageToCurrentSkillLevel(struct AMistWalker* Walker); // Function Mist.MistOasisPlayerState.ServerUpgradeWalkerStageToCurrentSkillLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153d60
	void ServerUpdateOwnedShopItems(); // Function Mist.MistOasisPlayerState.ServerUpdateOwnedShopItems // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153d40
	void ServerUnlockTech(struct UMistTechTreeItem* Tech); // Function Mist.MistOasisPlayerState.ServerUnlockTech // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153cb0
	void ServerUnlockPerk(struct UMistPerkTreeItem* Perk); // Function Mist.MistOasisPlayerState.ServerUnlockPerk // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153c20
	void ServerPurchaseLocalShopItem(struct UMistIntermediateCurrencyTraderComponent* Trader, int32_t ItemIndex); // Function Mist.MistOasisPlayerState.ServerPurchaseLocalShopItem // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153b50
	void ServerIncreaseWalkerCraftingSkillLevel(enum class EMistWalkerType WalkerType); // Function Mist.MistOasisPlayerState.ServerIncreaseWalkerCraftingSkillLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153ad0
	void ServerIncreaseStat(enum class EMistPlayerStat Stat, int32_t PrevValue); // Function Mist.MistOasisPlayerState.ServerIncreaseStat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153a00
	void ServerDepositClanBankMoney(int32_t Amount); // Function Mist.MistOasisPlayerState.ServerDepositClanBankMoney // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1153970
	void ServerClaimNextFlotillaRank(); // Function Mist.MistOasisPlayerState.ServerClaimNextFlotillaRank // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1153950
	void PerkUnlockedEvent__DelegateSignature(struct AMistOasisPlayerState* Sender); // DelegateFunction Mist.MistOasisPlayerState.PerkUnlockedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_WalkerCraftingSkills(); // Function Mist.MistOasisPlayerState.OnRep_WalkerCraftingSkills // (Final|Native|Private) // @ game+0x1153910
	void OnRep_VaultMoney(); // Function Mist.MistOasisPlayerState.OnRep_VaultMoney // (Final|Native|Private) // @ game+0x11538f0
	void OnRep_UnlockedTechs(); // Function Mist.MistOasisPlayerState.OnRep_UnlockedTechs // (Final|Native|Private) // @ game+0x11538d0
	void OnRep_UnlockedPerks(); // Function Mist.MistOasisPlayerState.OnRep_UnlockedPerks // (Final|Native|Private) // @ game+0x11538b0
	void OnRep_TechTreePoints(); // Function Mist.MistOasisPlayerState.OnRep_TechTreePoints // (Final|Native|Private) // @ game+0x1153890
	void OnRep_StatPoints(); // Function Mist.MistOasisPlayerState.OnRep_StatPoints // (Final|Native|Private) // @ game+0x1153870
	void OnRep_StatLevels(); // Function Mist.MistOasisPlayerState.OnRep_StatLevels // (Final|Native|Private) // @ game+0x1153850
	void OnRep_SelectedSpawnWalkerGuid(); // Function Mist.MistOasisPlayerState.OnRep_SelectedSpawnWalkerGuid // (Final|Native|Private) // @ game+0x1153830
	void OnRep_QuickSlotItems(); // Function Mist.MistOasisPlayerState.OnRep_QuickSlotItems // (Final|Native|Private) // @ game+0x1153810
	void OnRep_PerkTreePoints(); // Function Mist.MistOasisPlayerState.OnRep_PerkTreePoints // (Final|Native|Private) // @ game+0x11537f0
	void OnRep_OwnedShopItemList(); // Function Mist.MistOasisPlayerState.OnRep_OwnedShopItemList // (Final|Native|Private) // @ game+0x11537d0
	void OnRep_NextRespawnTime(); // Function Mist.MistOasisPlayerState.OnRep_NextRespawnTime // (Final|Native|Private) // @ game+0x11537b0
	void OnRep_Money(); // Function Mist.MistOasisPlayerState.OnRep_Money // (Final|Native|Private) // @ game+0x1153790
	void OnRep_LocallyOwnedShopItemList(); // Function Mist.MistOasisPlayerState.OnRep_LocallyOwnedShopItemList // (Final|Native|Private) // @ game+0x1153770
	void OnRep_Level(); // Function Mist.MistOasisPlayerState.OnRep_Level // (Final|Native|Private) // @ game+0x1153750
	void OnRep_IntermediateCurrency(); // Function Mist.MistOasisPlayerState.OnRep_IntermediateCurrency // (Final|Native|Private) // @ game+0x1153730
	void OnRep_FlotillaReputation(); // Function Mist.MistOasisPlayerState.OnRep_FlotillaReputation // (Final|Native|Private) // @ game+0x1153710
	void OnRep_FlotillaRank(); // Function Mist.MistOasisPlayerState.OnRep_FlotillaRank // (Final|Native|Private) // @ game+0x11536f0
	void OnRep_FlotillaCitizen(); // Function Mist.MistOasisPlayerState.OnRep_FlotillaCitizen // (Final|Native|Private) // @ game+0x10968b0
	void OnRep_Experience(); // Function Mist.MistOasisPlayerState.OnRep_Experience // (Final|Native|Private) // @ game+0x11536d0
	void OnRep_EarnedIntermediateCurrency(); // Function Mist.MistOasisPlayerState.OnRep_EarnedIntermediateCurrency // (Final|Native|Private) // @ game+0x11536b0
	void OnRep_Clan(struct FMistClanInfo& PreviousClan); // Function Mist.MistOasisPlayerState.OnRep_Clan // (Final|Native|Private|HasOutParms) // @ game+0x1153600
	void OnRep_CharacterId(); // Function Mist.MistOasisPlayerState.OnRep_CharacterId // (Final|Native|Private) // @ game+0x11535e0
	void OnRep_CharacterCustomization(); // Function Mist.MistOasisPlayerState.OnRep_CharacterCustomization // (Final|Native|Private) // @ game+0x11535c0
	void OnRep_bOnline(); // Function Mist.MistOasisPlayerState.OnRep_bOnline // (Final|Native|Private) // @ game+0x1153930
	void MistPawnChangedEvent__DelegateSignature(); // DelegateFunction Mist.MistOasisPlayerState.MistPawnChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	bool IsTechUnlocked(struct UMistTechTreeItem* Item); // Function Mist.MistOasisPlayerState.IsTechUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1153530
	void InitialDiscoveredResources(); // Function Mist.MistOasisPlayerState.InitialDiscoveredResources // (Final|Native|Public) // @ game+0x1153510
	void ClientSetLocalFreeBuilding(bool bValue); // Function Mist.MistOasisPlayerState.ClientSetLocalFreeBuilding // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1153460
	void ClientSetFreeShopItems(bool bValue); // Function Mist.MistOasisPlayerState.ClientSetFreeShopItems // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x11533d0
	void ClientSetAdminOpenEverythingEnabled(bool bValue); // Function Mist.MistOasisPlayerState.ClientSetAdminOpenEverythingEnabled // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1153340
	void ClientInitialDiscoveredResources(struct TArray<char> ResourceIds); // Function Mist.MistOasisPlayerState.ClientInitialDiscoveredResources // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11532a0
	void ClientDiscoverResource(char ResourceId); // Function Mist.MistOasisPlayerState.ClientDiscoverResource // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1153220
};

// Class Mist.MistObsidianActor
// Size: 0x418 (Inherited: 0x3f0)
struct AMistObsidianActor : AMistHarvestableStaticActor {
	float HeatingDelay; // 0x3f0(0x04)
	float HeatingLavaTime; // 0x3f4(0x04)
	float StoneCoolingTime; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct AActor* StoneActorClass; // 0x400(0x08)
	char pad_408[0x10]; // 0x408(0x10)

	void ReceiveHeatingStopped(); // Function Mist.MistObsidianActor.ReceiveHeatingStopped // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveHeatingStarted(); // Function Mist.MistObsidianActor.ReceiveHeatingStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveCoolingStopped(); // Function Mist.MistObsidianActor.ReceiveCoolingStopped // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveCoolingStarted(); // Function Mist.MistObsidianActor.ReceiveCoolingStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastStopHeating(); // Function Mist.MistObsidianActor.MulticastStopHeating // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x109cf70
	void MulticastStopCooling(); // Function Mist.MistObsidianActor.MulticastStopCooling // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1096770
	void MulticastStartHeating(); // Function Mist.MistObsidianActor.MulticastStartHeating // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x109ceb0
	void MulticastStartCooling(); // Function Mist.MistObsidianActor.MulticastStartCooling // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10966d0
};

// Class Mist.MistOffMapLobby2EmbarkedWalkerWidget
// Size: 0x348 (Inherited: 0x2c0)
struct UMistOffMapLobby2EmbarkedWalkerWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UWidget* NoWalkerWidget; // 0x2c8(0x08)
	struct UWidget* WalkerPresentWidget; // 0x2d0(0x08)
	struct UTextBlock* WalkerNameWidget; // 0x2d8(0x08)
	struct UTextBlock* WalkerTypeNameWidget; // 0x2e0(0x08)
	struct UImage* WalkerIconWidget; // 0x2e8(0x08)
	struct UWidget* WalkerEmbarkedByPlayerWidget; // 0x2f0(0x08)
	struct UMistHexagonWithBorderWidget* WalkerDirectionWidget; // 0x2f8(0x08)
	struct UPanelWidget* WalkerWaterPanelWidget; // 0x300(0x08)
	struct UTextBlock* WalkerWaterUnitsTextWidget; // 0x308(0x08)
	struct UTextBlock* WalkerWaterCostTextWidget; // 0x310(0x08)
	struct UMistWalkerMigrationPreferenceIndicatorButtonWidget* WalkerMigrationPreferenceButtonWidget; // 0x318(0x08)
	struct FText WaterCostFormatText; // 0x320(0x18)
	struct UMistOffMapLobby2WalkerData* Data; // 0x338(0x08)
	struct UMistWalkerMigrationPreferencesData* WalkerMigrationPreferencesData; // 0x340(0x08)
};

// Class Mist.MistOffMapLobby2FlotillaOverlay
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistOffMapLobby2FlotillaOverlay : UMistUIWidget {
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x2c0(0x08)
	struct UMistOffMapLobbyData* Data; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
};

// Class Mist.MistOffMapLobby2PassengerOverlay
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistOffMapLobby2PassengerOverlay : UMistUIWidget {
	struct UPanelWidget* MemberListWidget; // 0x2c0(0x08)
	struct UMistOffMapLobby2WalkerCrewMemberWidget* CaptainWidget; // 0x2c8(0x08)
	struct UMistBaseButtonWidget* LeaveButtonWidget; // 0x2d0(0x08)
	struct UMistOffMapLobbyData* Data; // 0x2d8(0x08)
};

// Class Mist.MistOffMapLobby2Screen
// Size: 0x6c0 (Inherited: 0x418)
struct UMistOffMapLobby2Screen : UMistMap2Screen {
	struct UMistOffMapLobby2PassengerOverlay* CrewPassengerWidget; // 0x418(0x08)
	struct UMistOffMapLobby2FlotillaOverlay* FlotillaOverlayWidget; // 0x420(0x08)
	struct UMistBaseButtonWidget* ShowPlayerTileButtonWidget; // 0x428(0x08)
	struct UMistBaseButtonWidget* ShowMapMigrationButtonWidget; // 0x430(0x08)
	struct UMistBaseButtonWidget* RespawnWhenAliveButtonWidget; // 0x438(0x08)
	struct UMistBaseButtonWidget* RespawnWhenDeadButtonWidget; // 0x440(0x08)
	struct UCanvasPanel* ActionWarningExtensionPanelWidget; // 0x448(0x08)
	struct UTextBlock* ActionWarningTextExtensionWidget; // 0x450(0x08)
	struct UMistRealmMapTileData* LastHovered; // 0x458(0x08)
	struct FText LoadingText; // 0x460(0x18)
	struct FText TravelRequestedText; // 0x478(0x18)
	struct FText TravelActionDifferentTileHintText; // 0x490(0x18)
	struct FText TravelActionSameTileHintText; // 0x4a8(0x18)
	struct FText TravelActionConfirmText; // 0x4c0(0x18)
	struct FText TravelActionTileOfflineErrorText; // 0x4d8(0x18)
	struct FText TravelActionTileNotOasisErrorText; // 0x4f0(0x18)
	struct FText TravelActionTileTooDifficultErrorText; // 0x508(0x18)
	struct FText TravelActionTileTooEasyErrorText; // 0x520(0x18)
	struct FText TravelActionCannotSwitchEasyErrorText; // 0x538(0x18)
	struct FText TravelActionNoReturnWarningText; // 0x550(0x18)
	struct FText TravelActionDifferentRegionWarningText; // 0x568(0x18)
	struct FText TravelActionNotCaptainErrorText; // 0x580(0x18)
	struct FText TravelActionNotEnoughWaterErrorText; // 0x598(0x18)
	struct FText TravelActionTooMuchSandinessErrorText; // 0x5b0(0x18)
	struct FText RespawnWhenAliveConfirmationText; // 0x5c8(0x18)
	struct FSlateSound SetTargetCoordSound; // 0x5e0(0x18)
	struct FSlateSound EmbarkWalkerSound; // 0x5f8(0x18)
	struct FSlateSound DisembarkWalkerSound; // 0x610(0x18)
	struct FSlateSound RecruitCrewMemberSound; // 0x628(0x18)
	struct FSlateSound DismissCrewMemberSound; // 0x640(0x18)
	struct TSoftObjectPtr<USoundBase> ConfirmedTravelActionSound; // 0x658(0x28)
	float ConfirmedTravelActionSoundFadeOut; // 0x680(0x04)
	float ActionMaxTime; // 0x684(0x04)
	char pad_688[0x18]; // 0x688(0x18)
	struct UMistOffMapLobbyData* LobbyData; // 0x6a0(0x08)
	struct UMistWalkerMigrationPreferencesData* WalkerMigrationPreferencesData; // 0x6a8(0x08)
	char pad_6B0[0x8]; // 0x6b0(0x08)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x6b8(0x08)

	void OnSandinessErrorAppeared(); // Function Mist.MistOffMapLobby2Screen.OnSandinessErrorAppeared // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleMapActionTimerUpdate(); // Function Mist.MistOffMapLobby2Screen.HandleMapActionTimerUpdate // (Final|Native|Private) // @ game+0x11534f0
};

// Class Mist.MistOffMapLobby2UnassignedItemWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistOffMapLobby2UnassignedItemWidget : UMistUIWidget {
	struct UMistItemHoverActionButtonWidget* ButtonWidget; // 0x2c0(0x08)
	struct UMistPlayerConnectionStatusWidget* PlayerStateWidget; // 0x2c8(0x08)
	struct URichTextBlock* CharacterNameWidget; // 0x2d0(0x08)
	struct FText PlayerIsCharacterFormatText; // 0x2d8(0x18)
	struct UMistOffMapLobby2CharacterData* Data; // 0x2f0(0x08)
};

// Class Mist.MistOffMapLobby2UnassignedWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistOffMapLobby2UnassignedWidget : UMistUIWidget {
	struct UPanelWidget* ListWidget; // 0x2c0(0x08)
	struct UMistOffMapLobbyData* Data; // 0x2c8(0x08)
};

// Class Mist.MistOffMapLobby2WalkerCrewMemberWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistOffMapLobby2WalkerCrewMemberWidget : UMistUIWidget {
	struct UWidget* PlayerIndicatorWidget; // 0x2c0(0x08)
	struct UMistItemHoverActionButtonWidget* ButtonWidget; // 0x2c8(0x08)
	struct UMistPlayerConnectionStatusWidget* PlayerStateWidget; // 0x2d0(0x08)
	struct URichTextBlock* CharacterNameWidget; // 0x2d8(0x08)
	struct FText PlayerIsCharacterFormatText; // 0x2e0(0x18)
	bool bRemoveFromParent; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
	struct UMistOffMapLobby2CharacterData* Data; // 0x300(0x08)
};

// Class Mist.MistOffMapLobby2WalkerCrewWidget
// Size: 0x3c8 (Inherited: 0x2c0)
struct UMistOffMapLobby2WalkerCrewWidget : UMistUIWidget {
	struct UPanelWidget* CrewPanelWidget; // 0x2c0(0x08)
	struct UMistBaseButtonWidget* LeaveCrewButtonWidget; // 0x2c8(0x08)
	struct UTextBlock* LeaveCrewButtonLabelWidget; // 0x2d0(0x08)
	struct UMistOffMapLobby2WalkerCrewMemberWidget* CaptainWidget; // 0x2d8(0x08)
	struct UPanelWidget* MemberListWidget; // 0x2e0(0x08)
	struct UMistOffMapLobby2UnassignedWidget* UnassignedWidget; // 0x2e8(0x08)
	struct UPanelWidget* ActionPanelWidget; // 0x2f0(0x08)
	struct UPanelWidget* ActionHintPanelWidget; // 0x2f8(0x08)
	struct UTextBlock* ActionHintTextWidget; // 0x300(0x08)
	struct UPanelWidget* ActionErrorPanelWidget; // 0x308(0x08)
	struct UTextBlock* ActionErrorTextWidget; // 0x310(0x08)
	struct FText LeavePlayerCrewButtonLabelText; // 0x318(0x18)
	struct FText LeaveOtherCrewButtonLabelText; // 0x330(0x18)
	struct FText EmbarkActionHintText; // 0x348(0x18)
	struct FText DisembarkActionHintText; // 0x360(0x18)
	struct FText AlreadyEmbarkedActionErrorText; // 0x378(0x18)
	struct FText CanNotEmbarkActionErrorText; // 0x390(0x18)
	struct FText CanNotDisembarkActionErrorText; // 0x3a8(0x18)
	struct UMistOffMapLobby2WalkerData* Data; // 0x3c0(0x08)
};

// Class Mist.MistOffMapLobby2WalkersItemWidget
// Size: 0x398 (Inherited: 0x2c0)
struct UMistOffMapLobby2WalkersItemWidget : UMistUIWidget {
	struct UTextBlock* WalkerNameWidget; // 0x2c0(0x08)
	struct UTextBlock* WalkerTypeNameWidget; // 0x2c8(0x08)
	struct UImage* WalkerIconWidget; // 0x2d0(0x08)
	struct UPanelWidget* EmbarkedPanelWidget; // 0x2d8(0x08)
	struct UPanelWidget* CanNotEmbarkPanelWidget; // 0x2e0(0x08)
	struct UPanelWidget* PlayerEmbarkedPanelWidget; // 0x2e8(0x08)
	struct UTextBlock* WaterUnitsTextWidget; // 0x2f0(0x08)
	struct UMistWalkerMigrationPreferenceIndicatorButtonWidget* WalkerMigrationPreferenceButtonWidget; // 0x2f8(0x08)
	struct UMistBaseButtonWidget* ButtonWidget; // 0x300(0x08)
	struct UButton* WalkerButton; // 0x308(0x08)
	struct UWidget* HintEmbark; // 0x310(0x08)
	struct UWidget* HintDisembark; // 0x318(0x08)
	struct UWidget* HintRestricted; // 0x320(0x08)
	struct UTextBlock* HintRestrictedTextWidget; // 0x328(0x08)
	struct UPanelWidget* RestrictedAlphaPanel; // 0x330(0x08)
	float RestrictedDrawAlpha; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
	struct FText CanNotEmbarkBecauseHasCrewText; // 0x340(0x18)
	struct FText CanNotEmbarkBecauseNoPermissionText; // 0x358(0x18)
	struct FText CanNotEmbarkBecauseRankTooLowText; // 0x370(0x18)
	struct UMistOffMapLobby2WalkerData* Data; // 0x388(0x08)
	struct UMistWalkerMigrationPreferencesData* WalkerMigrationPreferencesData; // 0x390(0x08)

	void HandleButtonClicked(); // Function Mist.MistOffMapLobby2WalkersItemWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x1158fc0
};

// Class Mist.MistOffMapLobby2WalkersWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistOffMapLobby2WalkersWidget : UMistUIWidget {
	struct UMistRealmMapTileDetailsHexWidget* HexWidget; // 0x2c0(0x08)
	struct UPanelWidget* ListWidget; // 0x2c8(0x08)
	struct UWidget* NoWalkersParkedWidget; // 0x2d0(0x08)
	struct UWidget* SelectEdgeWidget; // 0x2d8(0x08)
	struct FSlateSound HexDirectionSelected; // 0x2e0(0x18)
	struct UMistEditableTextBox* WalkerNameFilterTextBox; // 0x2f8(0x08)
	struct FString WalkerFilter; // 0x300(0x10)
	struct UMistOffMapLobbyData* Data; // 0x310(0x08)
	int32_t Direction; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)

	void TextUpdated(struct FText& Text); // Function Mist.MistOffMapLobby2WalkersWidget.TextUpdated // (Final|Native|Public|HasOutParms) // @ game+0x1159660
};

// Class Mist.MistOffMapLobby2WalkerData
// Size: 0xe0 (Inherited: 0x28)
struct UMistOffMapLobby2WalkerData : UObject {
	char pad_28[0x50]; // 0x28(0x50)
	struct UTexture2D* Icon; // 0x78(0x08)
	char pad_80[0x60]; // 0x80(0x60)
};

// Class Mist.MistOffMapLobby2CharacterData
// Size: 0xb8 (Inherited: 0x28)
struct UMistOffMapLobby2CharacterData : UObject {
	char pad_28[0x90]; // 0x28(0x90)
};

// Class Mist.MistOffMapLobby2CrewData
// Size: 0x50 (Inherited: 0x28)
struct UMistOffMapLobby2CrewData : UObject {
	char pad_28[0x28]; // 0x28(0x28)
};

// Class Mist.MistOffMapLobby2PlayerData
// Size: 0x58 (Inherited: 0x28)
struct UMistOffMapLobby2PlayerData : UObject {
	char pad_28[0x30]; // 0x28(0x30)
};

// Class Mist.MistOffMapLobbyData
// Size: 0x618 (Inherited: 0x28)
struct UMistOffMapLobbyData : UObject {
	char pad_28[0x298]; // 0x28(0x298)
	struct TArray<struct UMistOffMapLobby2WalkerData*> Walkers; // 0x2c0(0x10)
	struct TArray<struct UMistOffMapLobby2CharacterData*> Characters; // 0x2d0(0x10)
	struct TArray<struct UMistOffMapLobby2CrewData*> Crews; // 0x2e0(0x10)
	struct TMap<int64_t, struct UMistOffMapLobby2WalkerData*> WalkersLookup; // 0x2f0(0x50)
	struct TMap<int64_t, struct UMistOffMapLobby2CharacterData*> CharactersLookup; // 0x340(0x50)
	struct TMap<int64_t, struct UMistOffMapLobby2CrewData*> CrewsLookup; // 0x390(0x50)
	struct UMistOffMapLobby2PlayerData* Player; // 0x3e0(0x08)
	struct UMistRealmMapData* RealmMapData; // 0x3e8(0x08)
	struct UMistBackendHttpClient* BackendClient; // 0x3f0(0x08)
	char pad_3F8[0x220]; // 0x3f8(0x220)
};

// Class Mist.MistOffMapLobbyDataManager
// Size: 0x88 (Inherited: 0x28)
struct UMistOffMapLobbyDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistDataManager* DataManager; // 0x30(0x08)
	struct TMap<struct FMistApiRealmCharacterIdentifier, struct UMistOffMapLobbyData*> DataItems; // 0x38(0x50)
};

// Class Mist.MistOuterTextToolTipWidget
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMistOuterTextToolTipWidget : UMistBaseToolTipWidget {
	struct UTextBlock* ToolTipTextWidget; // 0x2e0(0x08)
};

// Class Mist.MistDefaultToolTipWidget
// Size: 0x2e8 (Inherited: 0x2e8)
struct UMistDefaultToolTipWidget : UMistOuterTextToolTipWidget {
};

// Class Mist.MistPackableInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistPackableInterface : UInterface {
};

// Class Mist.MistPackingComponent
// Size: 0x320 (Inherited: 0xf0)
struct UMistPackingComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	struct FText Name; // 0x110(0x18)
	struct FDataTableRowHandle RestrictionsRow; // 0x128(0x10)
	struct FName PingPongPackingTag; // 0x138(0x08)
	struct UMistPlaceableTemplate* StartingPackedPart; // 0x140(0x08)
	struct FMistPackingRestrictionsTableRow Restrictions; // 0x148(0x140)
	enum class EMistPackingState PackingState; // 0x288(0x01)
	enum class EMistPackingProcess PackingProcess; // 0x289(0x01)
	char pad_28A[0x6]; // 0x28a(0x06)
	struct AMistPackingProcessActor* PackingProcessActor; // 0x290(0x08)
	float weight; // 0x298(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
	struct TArray<struct FMistPackedPart> PackedParts; // 0x2a0(0x10)
	char pad_2B0[0x18]; // 0x2b0(0x18)
	struct FMulticastInlineDelegate OnPackedChanged; // 0x2c8(0x10)
	char pad_2D8[0x48]; // 0x2d8(0x48)

	void PackingStateChangedEvent__DelegateSignature(struct UMistPackingComponent* PackingComponent); // DelegateFunction Mist.MistPackingComponent.PackingStateChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_Weight(); // Function Mist.MistPackingComponent.OnRep_Weight // (Final|Native|Private) // @ game+0x1159640
	void OnRep_PackingState(); // Function Mist.MistPackingComponent.OnRep_PackingState // (Final|Native|Private) // @ game+0x1159600
	void OnRep_PackingProcess(); // Function Mist.MistPackingComponent.OnRep_PackingProcess // (Final|Native|Private) // @ game+0x1159600
	void MulticastStartUnpacking(); // Function Mist.MistPackingComponent.MulticastStartUnpacking // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d4dd0
	void MulticastStartPacking(); // Function Mist.MistPackingComponent.MulticastStartPacking // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10b5db0
	void MulticastFinishUnpacking(struct AActor* InUnpackTo); // Function Mist.MistPackingComponent.MulticastFinishUnpacking // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11593e0
	void MulticastFinishPacking(enum class EMistPackingState InPackingState, struct TArray<struct FMistPackedPart> InParts, float InWeight); // Function Mist.MistPackingComponent.MulticastFinishPacking // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11592c0
	void MulticastAbort(); // Function Mist.MistPackingComponent.MulticastAbort // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x108bfd0
	void HandlePlaceableConstructed(struct FTransform& Transform, int32_t ItemIndex, struct AMistPlayer* Player); // Function Mist.MistPackingComponent.HandlePlaceableConstructed // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x11590e0
};

// Class Mist.MistPackingComponentWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistPackingComponentWidget : UMistUIWidget {
	bool bIsSelected; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct UMistPackingComponent* PackingComponent; // 0x2c8(0x08)
	struct UMistPlayerPackingComponent* PlayerPackingComponent; // 0x2d0(0x08)

	void HandlePackingStateChanged(struct UMistPackingComponent* InPackingComponent); // Function Mist.MistPackingComponentWidget.HandlePackingStateChanged // (Final|Native|Private) // @ game+0x1159060
};

// Class Mist.MistPackingInteractableComponent
// Size: 0x200 (Inherited: 0x1f0)
struct UMistPackingInteractableComponent : UMistInteractableComponent {
	struct TArray<struct UMistPackingComponent*> PackingComponents; // 0x1f0(0x10)
};

// Class Mist.MistPackingMeshComponent
// Size: 0x880 (Inherited: 0x850)
struct UMistPackingMeshComponent : UStaticMeshComponent {
	struct FMistComponentReference PackingComponentRef; // 0x848(0x28)
	struct UStaticMesh* FullStaticMesh; // 0x870(0x08)
	struct UStaticMesh* EmptyStaticMesh; // 0x878(0x08)

	void HandlePackedChanged(struct UMistPackingComponent* InPackingComponent); // Function Mist.MistPackingMeshComponent.HandlePackedChanged // (Final|Native|Private) // @ game+0x1158fe0
};

// Class Mist.MistPlacementPreviewActor
// Size: 0x458 (Inherited: 0x3c0)
struct AMistPlacementPreviewActor : AActor {
	struct USceneComponent* SceneComponent; // 0x3c0(0x08)
	struct TArray<struct FMistPreviewActorInstance> ActorInstances; // 0x3c8(0x10)
	struct AMistPlayer* BorrowingPlayer; // 0x3d8(0x08)
	char pad_3E0[0x78]; // 0x3e0(0x78)
};

// Class Mist.MistPackingProcessActor
// Size: 0x550 (Inherited: 0x458)
struct AMistPackingProcessActor : AMistPlacementPreviewActor {
	char pad_458[0x18]; // 0x458(0x18)
	struct UMistClanOwnershipComponent* ClanOwnershipComponent; // 0x470(0x08)
	struct UMistClanColorComponent* ClanColorComponent; // 0x478(0x08)
	float MaxInterruptionTimeForAbort; // 0x480(0x04)
	float MinInterruptionTimeForResume; // 0x484(0x04)
	float EndLingerTime; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct TArray<struct FMistPackingProcessStep> Steps; // 0x490(0x10)
	struct UPrimitiveComponent* PlacementParentComponent; // 0x4a0(0x08)
	int32_t Progress; // 0x4a8(0x04)
	char pad_4AC[0x4]; // 0x4ac(0x04)
	struct AActor* PackedActor; // 0x4b0(0x08)
	struct UMistPackingComponent* PackingComponent; // 0x4b8(0x08)
	enum class EMistPackingProcess PackingProcess; // 0x4c0(0x01)
	enum class EMistPackingState PackingState; // 0x4c1(0x01)
	char pad_4C2[0x6]; // 0x4c2(0x06)
	struct FText InterruptReason; // 0x4c8(0x18)
	char pad_4E0[0x8]; // 0x4e0(0x08)
	struct AActor* UnpackedActor; // 0x4e8(0x08)
	char pad_4F0[0x10]; // 0x4f0(0x10)
	float LastInterruptTime; // 0x500(0x04)
	float StartInterruptTime; // 0x504(0x04)
	struct UMaterialInterface* ActiveMaterial; // 0x508(0x08)
	struct UMaterialInterface* InactiveMaterial; // 0x510(0x08)
	struct UMaterialInterface* InterruptedMaterial; // 0x518(0x08)
	struct USoundBase* Sounds[0x6]; // 0x520(0x30)

	void OnRep_Steps(); // Function Mist.MistPackingProcessActor.OnRep_Steps // (Final|Native|Private) // @ game+0x1159620
	void OnRep_Progress(); // Function Mist.MistPackingProcessActor.OnRep_Progress // (Final|Native|Private) // @ game+0x11595c0
	void OnRep_PackedActor(); // Function Mist.MistPackingProcessActor.OnRep_PackedActor // (Final|Native|Private) // @ game+0x11595e0
	void OnRep_InterruptReason(); // Function Mist.MistPackingProcessActor.OnRep_InterruptReason // (Final|Native|Private) // @ game+0x11595c0
	void MulticastSetProgress(int32_t NewProgress); // Function Mist.MistPackingProcessActor.MulticastSetProgress // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1159530
	void MulticastInterrupt(struct FText Reason); // Function Mist.MistPackingProcessActor.MulticastInterrupt // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1159470
	void MulticastEndProcess(struct AActor* ActorToDelayRPC); // Function Mist.MistPackingProcessActor.MulticastEndProcess // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1159230
};

// Class Mist.MistPackingScreen
// Size: 0x468 (Inherited: 0x3a0)
struct UMistPackingScreen : UMistUIScreen {
	struct UHorizontalBox* PackingComponentListWidget; // 0x3a0(0x08)
	struct UTextBlock* MessageWidget; // 0x3a8(0x08)
	struct UMistInputBindingHintWidget* SelectPreviousHintWidget; // 0x3b0(0x08)
	struct UMistInputBindingHintWidget* SelectNextHintWidget; // 0x3b8(0x08)
	struct UTextBlock* HeaderWidget; // 0x3c0(0x08)
	struct UTextBlock* SummaryWidget; // 0x3c8(0x08)
	struct UTextBlock* WarningWidget; // 0x3d0(0x08)
	struct UPanelWidget* PropertiesContainerWidget; // 0x3d8(0x08)
	struct UTextBlock* PackedNameWidget; // 0x3e0(0x08)
	struct UPanelWidget* WeightContainerWidget; // 0x3e8(0x08)
	struct UTextBlock* WeightTextWidget; // 0x3f0(0x08)
	struct UWidget* InfoWidget; // 0x3f8(0x08)
	struct UMistBuildingHintsWidget* HintsWidget; // 0x400(0x08)
	struct UMistPlayerPackingComponent* PlayerPackingComponent; // 0x408(0x08)
	struct UMistBuildingComponent* PlayerBuildingComponent; // 0x410(0x08)
	char pad_418[0x50]; // 0x418(0x50)
};

// Class Mist.MistPanelWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistPanelWidget : UMistUIWidget {
	struct UCanvasPanel* WrapperWidget; // 0x2c0(0x08)
	struct UNamedSlot* ContentSlotWidget; // 0x2c8(0x08)
	struct FMistPanelStyle ContainerStyle; // 0x2d0(0x08)
	struct UImage* BackgroundWidget; // 0x2d8(0x08)
	struct UImage* BorderWidget; // 0x2e0(0x08)
};

// Class Mist.MIstParentFoliageComponent
// Size: 0xcc0 (Inherited: 0xca0)
struct UMIstParentFoliageComponent : UMistFoliageComponent {
	struct TArray<struct FMistChildFoliageEntry> Entries; // 0xca0(0x10)
	struct TArray<struct FMistChildFoliageSpawnedInstances> SpawnedInstances; // 0xcb0(0x10)
};

// Class Mist.MistParentQuestGenerator
// Size: 0x70 (Inherited: 0x30)
struct UMistParentQuestGenerator : UMistBaseQuestGenerator {
	struct UDataTable* ParentQuestTable; // 0x30(0x08)
	bool bLimitQuestsByFlotillaRank; // 0x38(0x01)
	char pad_39[0x37]; // 0x39(0x37)
};

// Class Mist.MistParkingQuest
// Size: 0x1a8 (Inherited: 0x110)
struct UMistParkingQuest : UMistTutorialQuest {
	struct TMap<struct UMistItemTemplate*, struct FName> ItemsToStore; // 0x110(0x50)
	struct UMistContainerComponent* Hatch; // 0x160(0x08)
	struct UMistContainerComponent* WaterStorage; // 0x168(0x08)
	struct UMistItemTemplate* WaterToStore; // 0x170(0x08)
	struct FName WaterToStoreTaskName; // 0x178(0x08)
	struct FName InitializeSafeLogOutTaskName; // 0x180(0x08)
	struct FName UnmanWalkerTaskName; // 0x188(0x08)
	struct FName LogOutWalkerTaskName; // 0x190(0x08)
	struct AMistWalker* FireflyWalker; // 0x198(0x08)
	char pad_1A0[0x8]; // 0x1a0(0x08)

	void Logout(struct FMistTravelParty& TravelParty); // Function Mist.MistParkingQuest.Logout // (Final|Native|Private|HasOutParms|Const) // @ game+0x115e570
	void IsOnWalker(); // Function Mist.MistParkingQuest.IsOnWalker // (Final|Native|Private) // @ game+0x115e550
	void ContainerUpdate(struct UMistContainerComponent* OpenedContainer, int32_t Count, struct UMistItemTemplate* ItemTemplate); // Function Mist.MistParkingQuest.ContainerUpdate // (Final|Native|Private) // @ game+0x115df60
	void ContainerOpened(); // Function Mist.MistParkingQuest.ContainerOpened // (Final|Native|Private) // @ game+0x115df40
	void ContainerClosed(); // Function Mist.MistParkingQuest.ContainerClosed // (Final|Native|Private|Const) // @ game+0x115df20
	void CheckingStarted(struct UMistSafeLogOutComponent* SafeLogOutComponent); // Function Mist.MistParkingQuest.CheckingStarted // (Final|Native|Private|Const) // @ game+0x115dea0
};

// Class Mist.MistParticleAsset
// Size: 0xc0 (Inherited: 0x30)
struct UMistParticleAsset : UDataAsset {
	struct FMistParticleData WeatherParticleData; // 0x30(0x80)
	struct TArray<struct UMistWeatherEffect*> WeatherEffects; // 0xb0(0x10)
};

// Class Mist.MistParticleOnItemComponent
// Size: 0x128 (Inherited: 0x128)
struct UMistParticleOnItemComponent : UMistPlayerEquipmentItemComponent {
};

// Class Mist.MistPatrollingBehavior
// Size: 0x30 (Inherited: 0x30)
struct UMistPatrollingBehavior : UMistAiBehaviorHandler {
};

// Class Mist.MistPawnDamageOnContactInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistPawnDamageOnContactInterface : UInterface {
};

// Class Mist.MistPeriodicDamageComponent
// Size: 0x1b0 (Inherited: 0xf0)
struct UMistPeriodicDamageComponent : UActorComponent {
	struct FMulticastInlineDelegate OnPointDamage; // 0xf0(0x10)
	bool bDebugDraw; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct TMap<enum class EInteractionType, struct FTargetInteraction> InteractionProperties; // 0x108(0x50)
	struct TArray<struct AActor*> ActorClassWhitelist; // 0x158(0x10)
	struct TArray<struct AActor*> ActorClassBlacklist; // 0x168(0x10)
	char pad_178[0x38]; // 0x178(0x38)

	void PointDamageDelegate__DelegateSignature(struct FHitResult HitResult, float Damage); // DelegateFunction Mist.MistPeriodicDamageComponent.PointDamageDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnActorEndTrigger(struct AActor* SelfActor, struct AActor* OtherActor); // Function Mist.MistPeriodicDamageComponent.OnActorEndTrigger // (Final|Native|Private) // @ game+0x115e8e0
	void OnActorBeginTrigger(struct AActor* SelfActor, struct AActor* OtherActor); // Function Mist.MistPeriodicDamageComponent.OnActorBeginTrigger // (Final|Native|Private) // @ game+0x115e820
};

// Class Mist.MistPerkAbilityStatusEffect
// Size: 0xe8 (Inherited: 0xe0)
struct UMistPerkAbilityStatusEffect : UMistStatusEffect {
	enum class EMistPerkAbility PerkAbility; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t PerkLevelTier; // 0xe4(0x04)
};

// Class Mist.MistPerkSettings
// Size: 0x5f0 (Inherited: 0x38)
struct UMistPerkSettings : UMistSettingsObject {
	float MonkeyHunterExpAwardMultiplier; // 0x38(0x04)
	float MonkeyHunterMoneyAwardMultiplier; // 0x3c(0x04)
	float MonkeyHaterDamageMultiplier; // 0x40(0x04)
	float LumberjackAxeDamageMultiplier; // 0x44(0x04)
	float LumberjackTreesDamageMultiplier; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TMap<int32_t, float> MaximumLoadWeights; // 0x50(0x50)
	struct TMap<int32_t, float> MaximumLoadDrugWeights; // 0xa0(0x50)
	struct TMap<int32_t, int32_t> HarvestHand; // 0xf0(0x50)
	struct TMap<int32_t, int32_t> HarvestAxe; // 0x140(0x50)
	struct TMap<int32_t, int32_t> HarvestPickaxe; // 0x190(0x50)
	struct TMap<int32_t, int32_t> HarvestTether; // 0x1e0(0x50)
	struct TMap<int32_t, int32_t> HarvestCatapult; // 0x230(0x50)
	struct TMap<int32_t, int32_t> HarvestWaterhose; // 0x280(0x50)
	struct TMap<int32_t, int32_t> ActiveHarvestHand; // 0x2d0(0x50)
	struct TMap<int32_t, int32_t> ActiveHarvestAxe; // 0x320(0x50)
	struct TMap<int32_t, int32_t> ActiveHarvestPickaxe; // 0x370(0x50)
	struct TMap<int32_t, int32_t> ActiveHarvestTether; // 0x3c0(0x50)
	struct TMap<int32_t, int32_t> ActiveHarvestCatapult; // 0x410(0x50)
	struct TMap<int32_t, int32_t> ActiveHarvestWaterhose; // 0x460(0x50)
	struct TMap<enum class EEquipmentTool, enum class EMistPerkAbility> EquipmentPerkAbilityMapPassive; // 0x4b0(0x50)
	struct TMap<enum class EEquipmentTool, enum class EMistPerkAbility> EquipmentPerkAbilityMapActive; // 0x500(0x50)
	char pad_550[0xa0]; // 0x550(0xa0)
};

// Class Mist.MistUnlockableTreeItem
// Size: 0xd0 (Inherited: 0x30)
struct UMistUnlockableTreeItem : UPrimaryDataAsset {
	bool bShowTechTreeDescription; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FText Name; // 0x38(0x18)
	struct FText Description; // 0x50(0x18)
	int32_t Level; // 0x68(0x04)
	int32_t Cost; // 0x6c(0x04)
	struct TArray<struct UMistVitaminItemTemplate*> RequiredVitamins; // 0x70(0x10)
	bool bFlotillaRequired; // 0x80(0x01)
	bool bOffsetInTechTree; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
	struct UTexture2D* Icon; // 0x88(0x08)
	bool bHidden; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UPrimaryDataAsset* PrimaryUnlockedTemplate; // 0x98(0x08)
	char pad_A0[0x8]; // 0xa0(0x08)
	struct TArray<struct UMistUnlockableTreeItem*> CachedDependencies; // 0xa8(0x10)
	struct TArray<struct UMistVitaminItemTemplate*> CachedVitaminRequirements; // 0xb8(0x10)
	enum class EMistTechTreeTier TechTreeTier; // 0xc8(0x04)
	char pad_CC[0x4]; // 0xcc(0x04)

	bool IsUnlockedForPlayer(struct AMistOasisPlayerState* PlayerState, bool bEvenIfDisabled); // Function Mist.MistUnlockableTreeItem.IsUnlockedForPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11cdde0
	bool IsRootEntry(); // Function Mist.MistUnlockableTreeItem.IsRootEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11cddb0
	bool IsActiveForPlayer(struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTreeItem.IsActiveForPlayer // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x11cdd10
	enum class EMistTechTreeTier GetTechTreeTier(); // Function Mist.MistUnlockableTreeItem.GetTechTreeTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11cd2e0
	bool CanBeUnlockedByPlayer(struct AMistOasisPlayerState* PlayerState, bool bIgnoreMissingPoints); // Function Mist.MistUnlockableTreeItem.CanBeUnlockedByPlayer // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11cd210
};

// Class Mist.MistPerkTreeItem
// Size: 0xf8 (Inherited: 0xd0)
struct UMistPerkTreeItem : UMistUnlockableTreeItem {
	struct FMistPerkInfo Perk; // 0xd0(0x08)
	struct TArray<struct UMistStatusEffect*> StatusEffects; // 0xd8(0x10)
	struct TArray<struct UMistPerkTreeItem*> Requirements; // 0xe8(0x10)
};

// Class Mist.MistPersistenceComponent
// Size: 0x5d8 (Inherited: 0xf0)
struct UMistPersistenceComponent : UActorComponent {
	struct TMap<struct FString, struct AActor*> NamedActorsByPath; // 0xf0(0x50)
	struct TMap<struct AActor*, struct FString> NamedActorsByActor; // 0x140(0x50)
	struct TSet<struct AActor*> DirtyActors; // 0x190(0x50)
	struct TSet<struct UActorComponent*> DirtyComponents; // 0x1e0(0x50)
	char pad_230[0x188]; // 0x230(0x188)
	struct TMap<struct FString, struct AActor*> ActorMap; // 0x3b8(0x50)
	struct TMap<struct FString, struct UActorComponent*> ComponentMap; // 0x408(0x50)
	char pad_458[0x180]; // 0x458(0x180)

	void HandleComponentSpawned(struct UActorComponent* Component); // Function Mist.MistPersistenceComponent.HandleComponentSpawned // (Final|Native|Private) // @ game+0x115e430
	void HandleActorSpawned(struct AActor* Actor); // Function Mist.MistPersistenceComponent.HandleActorSpawned // (Final|Native|Private) // @ game+0x115e2f0
	void HandleActorFinishedSpawning(struct AActor* Actor); // Function Mist.MistPersistenceComponent.HandleActorFinishedSpawning // (Final|Native|Private) // @ game+0x115e0e0
	void HandleActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistPersistenceComponent.HandleActorDestroyed // (Final|Native|Private) // @ game+0x115e060
};

// Class Mist.MistPersistentActor
// Size: 0x28 (Inherited: 0x28)
struct UMistPersistentActor : UInterface {
};

// Class Mist.MistPersistentComponent
// Size: 0x28 (Inherited: 0x28)
struct UMistPersistentComponent : UInterface {
};

// Class Mist.MistPhotoStage
// Size: 0x480 (Inherited: 0x3c0)
struct AMistPhotoStage : AActor {
	struct USceneComponent* SceneComponent; // 0x3c0(0x08)
	struct UMistPhotoStageCaptureComponent* CaptureComponent; // 0x3c8(0x08)
	struct USceneComponent* CenterComponent; // 0x3d0(0x08)
	struct USceneComponent* FlarePreviewCameraTransformComponent; // 0x3d8(0x08)
	struct UBoxComponent* FrameComponent; // 0x3e0(0x08)
	struct UTextureRenderTarget2D* RenderTarget; // 0x3e8(0x08)
	int32_t RenderTargetWidth; // 0x3f0(0x04)
	int32_t RenderTargetHeight; // 0x3f4(0x04)
	int32_t MinFOV; // 0x3f8(0x04)
	int32_t MaxFOV; // 0x3fc(0x04)
	enum class EMistPhotoStageScalingMode ScalingMode; // 0x400(0x04)
	float FlareInitialSpeed; // 0x404(0x04)
	char pad_408[0x8]; // 0x408(0x08)
	struct AActor* CurrentActor; // 0x410(0x08)
	struct AMistFlareProjectile* FlareProjectile; // 0x418(0x08)
	struct AMistFlareProjectile* PrevFlareProjectile; // 0x420(0x08)
	char pad_428[0x58]; // 0x428(0x58)

	void HandleFlareTimedPreviewEvent(); // Function Mist.MistPhotoStage.HandleFlareTimedPreviewEvent // (Final|Native|Private) // @ game+0x115e530
	void HandleFlareExplosionVFXSpawned(struct UNiagaraComponent* ParticleSystem); // Function Mist.MistPhotoStage.HandleFlareExplosionVFXSpawned // (Final|Native|Private) // @ game+0x115e4b0
};

// Class Mist.MistPhotoStageCaptureComponent
// Size: 0x920 (Inherited: 0x920)
struct UMistPhotoStageCaptureComponent : USceneCaptureComponent2D {
};

// Class Mist.MistPhotoStageWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistPhotoStageWidget : UMistUIWidget {
	struct UImage* ImageWidget; // 0x2c0(0x08)
	bool bAutoSizeRenderTarget; // 0x2c8(0x01)
	bool bAutoRotate; // 0x2c9(0x01)
	bool bMouseRotate; // 0x2ca(0x01)
	bool bMouseZoom; // 0x2cb(0x01)
	float RenderTargetScale; // 0x2cc(0x04)
	int32_t RenderTargetWidth; // 0x2d0(0x04)
	int32_t RenderTargetHeight; // 0x2d4(0x04)
	struct AMistPhotoStage* StageClass; // 0x2d8(0x08)
	enum class EMistPhotoStageScalingMode ScalingMode; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct AMistPhotoStage* Stage; // 0x2e8(0x08)
	struct AActor* Model; // 0x2f0(0x08)
	char pad_2F8[0x28]; // 0x2f8(0x28)
};

// Class Mist.MistPhysicalMob
// Size: 0x6e8 (Inherited: 0x420)
struct AMistPhysicalMob : APawn {
	char pad_420[0xa0]; // 0x420(0xa0)
	enum class EMistCharacterState MobState; // 0x4c0(0x01)
	char pad_4C1[0x7]; // 0x4c1(0x07)
	struct UMistPhysicalMobMovement* CachedMovementComponent; // 0x4c8(0x08)
	float Mass; // 0x4d0(0x04)
	struct FVector CenterOfMass; // 0x4d4(0x0c)
	struct FVector MobInertiaTensor; // 0x4e0(0x0c)
	struct FVector MobInertiaTensorScale; // 0x4ec(0x0c)
	struct FVector SuspensionForceOffset; // 0x4f8(0x0c)
	float TopSpeedKmH; // 0x504(0x04)
	struct FMobInput ForceWalkForward; // 0x508(0x10)
	struct FMobInput ForceRunForward; // 0x518(0x10)
	struct FMobInput ForceWalkForwardTurn; // 0x528(0x10)
	struct FMobInput ForceRunForwardTurn; // 0x538(0x10)
	struct FMobInput ForceStrafe; // 0x548(0x10)
	struct FMobInput ForceTurnInPlace; // 0x558(0x10)
	struct FMobInput ForceWalkBackward; // 0x568(0x10)
	struct FMobInput ForceWalkBackwardTurn; // 0x578(0x10)
	bool bShowPhysxError; // 0x588(0x01)
	char pad_589[0x7]; // 0x589(0x07)
	struct UDamageType* CollisionDamageType; // 0x590(0x08)
	struct UShapeComponent* MovedComponent; // 0x598(0x08)
	struct UMistPhysicalMobMovement* MobMovement; // 0x5a0(0x08)
	enum class EMobMovementState MovementState; // 0x5a8(0x01)
	char pad_5A9[0x3]; // 0x5a9(0x03)
	struct FVector MovementDirection; // 0x5ac(0x0c)
	struct FVector FocalPoint; // 0x5b8(0x0c)
	struct FMobMovementInput MovementInput; // 0x5c4(0x05)
	char pad_5C9[0x3]; // 0x5c9(0x03)
	float WalkerImpactDamageMultiplier; // 0x5cc(0x04)
	float WalkerImpactDamageBase; // 0x5d0(0x04)
	bool WalkerBaseDamage; // 0x5d4(0x01)
	char pad_5D5[0x3]; // 0x5d5(0x03)
	struct FName RagdollCollisionProfileName; // 0x5d8(0x08)
	struct UPhysicalMaterial* MaterialOnDeath; // 0x5e0(0x08)
	bool DestroyOnContact; // 0x5e8(0x01)
	char pad_5E9[0x3]; // 0x5e9(0x03)
	struct FVector PrevVelocity; // 0x5ec(0x0c)
	struct FVector AvgVelocity; // 0x5f8(0x0c)
	char pad_604[0x8]; // 0x604(0x08)
	float DestroyObstaclesAfterContactSeconds; // 0x60c(0x04)
	float CollisionForceScale; // 0x610(0x04)
	float MaxHealth; // 0x614(0x04)
	float Health; // 0x618(0x04)
	float ExperienceAward; // 0x61c(0x04)
	char pad_620[0x8]; // 0x620(0x08)
	struct FText MobName; // 0x628(0x18)
	struct UTexture2D* MobIcon; // 0x640(0x08)
	struct UMistDamageOverrideTable* DamageOverride; // 0x648(0x08)
	bool bUseDormancyGrid; // 0x650(0x01)
	char pad_651[0x7]; // 0x651(0x07)
	struct UMistFoliageComponent* HarvestableFoliageType; // 0x658(0x08)
	struct UMistHarvestableMeshComponent* DefaultHarvestableMob; // 0x660(0x08)
	struct UPhysicsConstraintComponent* SkeletalDeathConstraint; // 0x668(0x08)
	bool bIsSprinting; // 0x670(0x01)
	bool bIsInAir; // 0x671(0x01)
	char pad_672[0x6]; // 0x672(0x06)
	struct AActor* TargetActor; // 0x678(0x08)
	char pad_680[0x68]; // 0x680(0x68)

	void ReceiveStateChanged(enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistPhysicalMob.ReceiveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveDamageDealt(struct AActor* ActorHit, float Damage, struct UDamageType* DamageType, struct FName AttackAreaName); // Function Mist.MistPhysicalMob.ReceiveDamageDealt // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void PhysicalMobHealthChangedEvent__DelegateSignature(struct AMistPhysicalMob* Sender, float PrevHealth, float NewHealth); // DelegateFunction Mist.MistPhysicalMob.PhysicalMobHealthChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_Health(float PrevHealth); // Function Mist.MistPhysicalMob.OnRep_Health // (Native|Protected) // @ game+0x115e9a0
	void MulticastSetTarget(struct AMistCharacter* Target); // Function Mist.MistPhysicalMob.MulticastSetTarget // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x115e790
	void MulticastSetIsAttacking(bool bIsAttacking); // Function Mist.MistPhysicalMob.MulticastSetIsAttacking // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x115e700
	void HandleComponentWake(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function Mist.MistPhysicalMob.HandleComponentWake // (Final|Native|Protected) // @ game+0x115e370
	void HandleComponentSleep(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function Mist.MistPhysicalMob.HandleComponentSleep // (Final|Native|Protected) // @ game+0x115e370
	void HandleActorHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Mist.MistPhysicalMob.HandleActorHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x115e160
	void BroadcastStopMontage(struct UAnimMontage* Montage); // Function Mist.MistPhysicalMob.BroadcastStopMontage // (Net|NetReliableNative|Event|Public) // @ game+0x115de10
	void BroadcastPlayMontage(struct UAnimMontage* Montage, bool bDisableMovement); // Function Mist.MistPhysicalMob.BroadcastPlayMontage // (Net|NetReliableNative|Event|Public) // @ game+0x115dd40
};

// Class Mist.MistPhysicalCapsuleMob
// Size: 0x6e8 (Inherited: 0x6e8)
struct AMistPhysicalCapsuleMob : AMistPhysicalMob {
};

// Class Mist.MobLimb
// Size: 0x8a0 (Inherited: 0x7e0)
struct UMobLimb : UCapsuleComponent {
	struct FTransform OriginalRelativeTransform; // 0x7e0(0x30)
	struct UPhysicsConstraintComponent* LimbConstraint; // 0x810(0x08)
	bool bHasGroundContact; // 0x818(0x01)
	char pad_819[0x3]; // 0x819(0x03)
	int32_t LimbIndex; // 0x81c(0x04)
	float Jounce; // 0x820(0x04)
	float PrevJounce; // 0x824(0x04)
	float GroundDistance; // 0x828(0x04)
	float TemporaryGroundDistance; // 0x82c(0x04)
	int8_t TemporaryHitsGround; // 0x830(0x01)
	int8_t TemporaryHitsSide; // 0x831(0x01)
	int8_t TemporaryHitsTop; // 0x832(0x01)
	char pad_833[0x1]; // 0x833(0x01)
	float CylinderLength; // 0x834(0x04)
	float CylinderRadius; // 0x838(0x04)
	struct FVector ActorJointPosition; // 0x83c(0x0c)
	struct FVector SuspensionPosition; // 0x848(0x0c)
	struct FVector GroundPosition; // 0x854(0x0c)
	bool bFrontLeg; // 0x860(0x01)
	bool bBackLeg; // 0x861(0x01)
	char pad_862[0x2]; // 0x862(0x02)
	float MaxSteppingPercentage; // 0x864(0x04)
	float MaxDroop; // 0x868(0x04)
	float MaxCompression; // 0x86c(0x04)
	float MaxCompressionMulti; // 0x870(0x04)
	float MaxDroopMulti; // 0x874(0x04)
	float SuspensionNaturalFrequency; // 0x878(0x04)
	float SuspensionDampingRatio; // 0x87c(0x04)
	float SuspensionConstMult; // 0x880(0x04)
	float JounceNegativeThreshold; // 0x884(0x04)
	float JounceTouchMargin; // 0x888(0x04)
	float SpringStrength; // 0x88c(0x04)
	float SpringDamperRate; // 0x890(0x04)
	char pad_894[0xc]; // 0x894(0x0c)
};

// Class Mist.MobGroundCapsule
// Size: 0x8a0 (Inherited: 0x8a0)
struct UMobGroundCapsule : UMobLimb {
};

// Class Mist.MistPhysicalLeggedMob
// Size: 0x6e8 (Inherited: 0x6e8)
struct AMistPhysicalLeggedMob : AMistPhysicalMob {
};

// Class Mist.MistPhysicalMobLegIKNotify
// Size: 0x40 (Inherited: 0x38)
struct UMistPhysicalMobLegIKNotify : UAnimNotify {
	enum class EPhysicalMobLimb LimbType; // 0x38(0x01)
	enum class EPhysicalMobLimbState LimbState; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
};

// Class Mist.MistOkkamAnimInstance
// Size: 0x3a0 (Inherited: 0x330)
struct UMistOkkamAnimInstance : UMistPhysicalMobAnimInstance {
	float IKLerpDuration; // 0x330(0x04)
	float IKLerpInDuration; // 0x334(0x04)
	float IKLerpOutDuration; // 0x338(0x04)
	struct FName RightFrontLegIKEffector; // 0x33c(0x08)
	struct FName LeftFrontLegIKEffector; // 0x344(0x08)
	struct FName RightBackLegIKEffector; // 0x34c(0x08)
	struct FName LeftBackLegIKEffector; // 0x354(0x08)
	struct FVector RightFrontLegIKTarget; // 0x35c(0x0c)
	struct FVector LeftFrontLegIKTarget; // 0x368(0x0c)
	struct FVector RightBackLegIKTarget; // 0x374(0x0c)
	struct FVector LeftBackLegIKTarget; // 0x380(0x0c)
	char pad_38C[0x14]; // 0x38c(0x14)

	struct FMistPhyicalMobLegIKState GetLimbIKState(enum class EPhysicalMobLimb MobLimb); // Function Mist.MistOkkamAnimInstance.GetLimbIKState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11616b0
};

// Class Mist.MistPhysicalMobAttackArea
// Size: 0x8c0 (Inherited: 0x7e0)
struct UMistPhysicalMobAttackArea : UCapsuleComponent {
	struct FName AttackAreaName; // 0x7d8(0x08)
	struct UAnimMontage* AttackMontage; // 0x7e0(0x08)
	struct FVector AttackDirection; // 0x7e8(0x0c)
	float Damage; // 0x7f4(0x04)
	float PushScale; // 0x7f8(0x04)
	struct UDamageType* DamageType; // 0x800(0x08)
	uint32_t TargetTypes; // 0x808(0x04)
	struct UCurveFloat* FwdForce; // 0x810(0x08)
	struct UCurveFloat* UpForce; // 0x818(0x08)
	float ForceScale; // 0x820(0x04)
	bool CausesUnman; // 0x824(0x01)
	char pad_825[0x3]; // 0x825(0x03)
	struct FMistComponentReference DamageArea; // 0x828(0x28)
	bool bUseSweepHitDirection; // 0x850(0x01)
	char pad_851[0x17]; // 0x851(0x17)
	struct UCapsuleComponent* CachedDamageArea; // 0x868(0x08)
	struct TSet<struct AActor*> ActorsInTriggerArea; // 0x870(0x50)

	void PhysicalMobAttackAreaContactEvent__DelegateSignature(struct UMistPhysicalMobAttackArea* Sender, struct AActor* Target, bool bEntered); // DelegateFunction Mist.MistPhysicalMobAttackArea.PhysicalMobAttackAreaContactEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnAttackAreaLeft(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistPhysicalMobAttackArea.OnAttackAreaLeft // (Final|Native|Private) // @ game+0x1161900
	void OnAttackAreaEntered(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistPhysicalMobAttackArea.OnAttackAreaEntered // (Final|Native|Private) // @ game+0x1161840
};

// Class Mist.MobBody
// Size: 0x7e0 (Inherited: 0x7e0)
struct UMobBody : UCapsuleComponent {
};

// Class Mist.MistPhysicalMobMovement
// Size: 0x4a0 (Inherited: 0x190)
struct UMistPhysicalMobMovement : UPawnMovementComponent {
	int32_t MaxSimulationIterations; // 0x190(0x04)
	float MaxSimulationTimeStep; // 0x194(0x04)
	bool bUsePrevPositions; // 0x198(0x01)
	bool bShowForceDebug; // 0x199(0x01)
	bool bShowDebug; // 0x19a(0x01)
	char pad_19B[0x5]; // 0x19b(0x05)
	struct TArray<struct FMobMovementPreset> MovementPresets; // 0x1a0(0x10)
	bool bUseFakePhysics; // 0x1b0(0x01)
	char pad_1B1[0x3]; // 0x1b1(0x03)
	float MaxSpeed; // 0x1b4(0x04)
	float Acceleration; // 0x1b8(0x04)
	float MaxTurnRate; // 0x1bc(0x04)
	float TurnAcceleration; // 0x1c0(0x04)
	float TurnDecceleration; // 0x1c4(0x04)
	char pad_1C8[0x18]; // 0x1c8(0x18)
	struct AMistPhysicalMob* Mob; // 0x1e0(0x08)
	bool bMovementEnabled; // 0x1e8(0x01)
	char pad_1E9[0x7]; // 0x1e9(0x07)
	struct TArray<struct UMobLimb*> Limbs; // 0x1f0(0x10)
	struct TArray<struct FMobForcePoint> TractionPoints; // 0x200(0x10)
	struct TArray<float> SprungMasses; // 0x210(0x10)
	char pad_220[0x20]; // 0x220(0x20)
	struct FVector FlightTarget; // 0x240(0x0c)
	enum class EMobMovementMode MovementMode; // 0x24c(0x01)
	char pad_24D[0x3]; // 0x24d(0x03)
	int32_t MovementPreset; // 0x250(0x04)
	char pad_254[0x24c]; // 0x254(0x24c)

	void SetMovementMode(enum class EMobMovementMode InMode, int32_t InPreset); // Function Mist.MistPhysicalMobMovement.SetMovementMode // (Final|Native|Public|BlueprintCallable) // @ game+0x1161a60
	void SetFlightDestination(struct FVector InTargetPosition); // Function Mist.MistPhysicalMobMovement.SetFlightDestination // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11619e0
	void MulticastStartPhysicalRootMotion(float InDuration); // Function Mist.MistPhysicalMobMovement.MulticastStartPhysicalRootMotion // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x11617c0
};

// Class Mist.MistPhysicalMobSkeletalMesh
// Size: 0xeb0 (Inherited: 0xea0)
struct UMistPhysicalMobSkeletalMesh : USkeletalMeshComponentBudgeted {
	char pad_EA0[0x8]; // 0xea0(0x08)
	enum class EComponentApplicability ShouldCreatePhysics; // 0xea8(0x01)
	char pad_EA9[0x7]; // 0xea9(0x07)
};

// Class Mist.MistPlaceableCategoryWidget
// Size: 0x5d8 (Inherited: 0x2c0)
struct UMistPlaceableCategoryWidget : UMistUIWidget {
	enum class EPlaceableCategoryStyle CurrentStyle; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct FSlateFontInfo DefaultTextFont; // 0x2c8(0x50)
	struct FSlateColor DefaultTextColor; // 0x318(0x28)
	struct FWidgetTransform DefaultTextTransform; // 0x340(0x1c)
	char pad_35C[0x4]; // 0x35c(0x04)
	struct UTexture2D* DefaultBackgroundImage; // 0x360(0x08)
	struct FSlateColor DefaultBackgroundColor; // 0x368(0x28)
	struct FWidgetTransform DefaultBackgroundTransform; // 0x390(0x1c)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct FSlateFontInfo SelectedTextFont; // 0x3b0(0x50)
	struct FSlateColor SelectedTextColor; // 0x400(0x28)
	struct FWidgetTransform SelectedTextTransform; // 0x428(0x1c)
	char pad_444[0x4]; // 0x444(0x04)
	struct UTexture2D* SelectedBackgroundImage; // 0x448(0x08)
	struct FSlateColor SelectedBackgroundColor; // 0x450(0x28)
	struct FWidgetTransform SelectedBackgroundTransform; // 0x478(0x1c)
	char pad_494[0x4]; // 0x494(0x04)
	struct FSlateFontInfo DisabledTextFont; // 0x498(0x50)
	struct FSlateColor DisabledTextColor; // 0x4e8(0x28)
	struct FWidgetTransform DisabledTextTransform; // 0x510(0x1c)
	char pad_52C[0x4]; // 0x52c(0x04)
	struct UTexture2D* DisabledBackgroundImage; // 0x530(0x08)
	struct FSlateColor DisabledBackgroundColor; // 0x538(0x28)
	struct FWidgetTransform DisabledBackgroundTransform; // 0x560(0x1c)
	char pad_57C[0x4]; // 0x57c(0x04)
	struct UImage* BackgroundWidget; // 0x580(0x08)
	struct UTextBlock* TextWidget; // 0x588(0x08)
	struct UWidget* BorderWidget; // 0x590(0x08)
	struct UButton* ButtonWidget; // 0x598(0x08)
	char pad_5A0[0x30]; // 0x5a0(0x30)
	struct UMistItemCategory* PlaceableCategory; // 0x5d0(0x08)

	void HandleButtonPressed(); // Function Mist.MistPlaceableCategoryWidget.HandleButtonPressed // (Final|Native|Protected) // @ game+0x1161750
};

// Class Mist.MistPlaceableFlagTemplate
// Size: 0x1c8 (Inherited: 0x1c8)
struct UMistPlaceableFlagTemplate : UMistPlaceableTemplate {
};

// Class Mist.MistPlaceableInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistPlaceableInterface : UInterface {
};

// Class Mist.MistPlaceablePreviewWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistPlaceablePreviewWidget : UMistUIWidget {
	struct UImage* ImageWidget; // 0x2c0(0x08)
	struct UMenuAnchor* PopupAnchorWidget; // 0x2c8(0x08)
	struct UTextBlock* QualityWidget; // 0x2d0(0x08)
	struct UButton* ButtonWidget; // 0x2d8(0x08)
	struct FColor CanCraftColor; // 0x2e0(0x04)
	struct FColor CantCraftColor; // 0x2e4(0x04)
	struct FColor CanCraftQualityColor; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
	struct UGridPanel* ParentPopupContainer; // 0x2f0(0x08)
	char pad_2F8[0x18]; // 0x2f8(0x18)
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0x310(0x08)
	int32_t TargetQuality; // 0x318(0x04)
	char pad_31C[0x4]; // 0x31c(0x04)

	struct UWidget* HandleGetMenu(); // Function Mist.MistPlaceablePreviewWidget.HandleGetMenu // (Final|Native|Private) // @ game+0x1161790
	void HandleButtonPressed(); // Function Mist.MistPlaceablePreviewWidget.HandleButtonPressed // (Final|Native|Protected) // @ game+0x1161770
};

// Class Mist.ActorPreviewData
// Size: 0x88 (Inherited: 0x28)
struct UActorPreviewData : UObject {
	char pad_28[0x60]; // 0x28(0x60)
};

// Class Mist.MistPlacementPreviewCacheComponent
// Size: 0x150 (Inherited: 0xf0)
struct UMistPlacementPreviewCacheComponent : UActorComponent {
	struct AMistPlacementPreviewActor* PlacementPreviewActor; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)
	struct TMap<struct AActor*, struct UActorPreviewData*> ActorDataCache; // 0x100(0x50)
};

// Class Mist.MistPlainButtonWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UMistPlainButtonWidget : UMistBaseButtonWidget {
	struct UNamedSlot* ContentSlot; // 0x2e0(0x08)
	struct FMargin ContentPadding; // 0x2e8(0x10)
	enum class EHorizontalAlignment ContentHorizontalAlignment; // 0x2f8(0x01)
	enum class EVerticalAlignment ContentVerticalAlignment; // 0x2f9(0x01)
	char pad_2FA[0x6]; // 0x2fa(0x06)
};

// Class Mist.MistPlainHoverButtonWidget
// Size: 0x338 (Inherited: 0x300)
struct UMistPlainHoverButtonWidget : UMistPlainButtonWidget {
	struct UBorder* BackgroundWidget; // 0x300(0x08)
	struct FLinearColor NormalColor; // 0x308(0x10)
	struct FLinearColor HoveredColor; // 0x318(0x10)
	struct FLinearColor PressedColor; // 0x328(0x10)
};

// Class Mist.MistPlayer
// Size: 0xe00 (Inherited: 0x970)
struct AMistPlayer : AMistCharacter {
	char pad_970[0x168]; // 0x970(0x168)
	struct USpringArmComponent* FollowCameraSpringArmComponent; // 0xad8(0x08)
	struct UCameraComponent* FollowCameraComponent; // 0xae0(0x08)
	struct USpringArmComponent* VanityCameraSpringArmComponent; // 0xae8(0x08)
	struct UCameraComponent* VanityCameraComponent; // 0xaf0(0x08)
	struct USpringArmComponent* FlyingCameraSpringArmComponent; // 0xaf8(0x08)
	struct UCameraComponent* FlyingCameraComponent; // 0xb00(0x08)
	struct USpringArmComponent* FirstPersonCameraSpringArmComponent; // 0xb08(0x08)
	struct UCameraComponent* FirstPersonCameraComponent; // 0xb10(0x08)
	struct UTexture2D* Icon; // 0xb18(0x08)
	float MinZoom; // 0xb20(0x04)
	float MaxZoom; // 0xb24(0x04)
	float ZoomSpeed; // 0xb28(0x04)
	float FPPSwitchOverzoomLevel; // 0xb2c(0x04)
	struct UCurveFloat* ControllerRotationCurve; // 0xb30(0x08)
	struct UCurveFloat* CameraRotationCurve; // 0xb38(0x08)
	struct UCurveFloat* CameraTranslationCurve; // 0xb40(0x08)
	float ScrollSpeed; // 0xb48(0x04)
	char pad_B4C[0x4]; // 0xb4c(0x04)
	struct USpringArmComponent* FrontCameraSpringArmComponent; // 0xb50(0x08)
	struct UCameraComponent* FrontCameraComponent; // 0xb58(0x08)
	struct UMistInventoryComponent* InventoryComponent; // 0xb60(0x08)
	struct UMistEquipmentComponent* EquipmentComponent; // 0xb68(0x08)
	struct UMistCraftingComponent* CraftingComponent; // 0xb70(0x08)
	struct UMistBuildingComponent* BuildingComponent; // 0xb78(0x08)
	struct UMistPlayerPackingComponent* PackingComponent; // 0xb80(0x08)
	struct UMistInteractorComponent* InteractorComponent; // 0xb88(0x08)
	struct UMistPlayerStaminaComponent* StaminaComponent; // 0xb90(0x08)
	struct UMistPlayerThirstComponent* ThirstComponent; // 0xb98(0x08)
	struct UMistInteractableComponent* ReviveInteractableComponent; // 0xba0(0x08)
	struct UMistInteractableComponent* CarryInteractableComponent; // 0xba8(0x08)
	struct UMistDuellingInteractableComponent* DuelInteractableComponent; // 0xbb0(0x08)
	struct UMistInteractableInventoryComponent* LootInteractableComponent; // 0xbb8(0x08)
	struct UMistVitaminUserComponent* VitaminUserComponent; // 0xbc0(0x08)
	struct UMistPlayerTradeStationComponent* TradeStationComponent; // 0xbc8(0x08)
	struct UMistTextWidgetComponent* NameTextComponent; // 0xbd0(0x08)
	struct UMistTextWidgetComponent* ClanTextComponent; // 0xbd8(0x08)
	struct UMistTextWidgetComponent* VoipIconComponent; // 0xbe0(0x08)
	struct UMistSingingComponent* SingingComponent; // 0xbe8(0x08)
	struct UMistAttackDirectionWidgetComponent* AttackDirectionComponent; // 0xbf0(0x08)
	struct USkeletalMeshComponent* UpperClothingMeshComponent; // 0xbf8(0x08)
	struct USkeletalMeshComponent* LowerClothingMeshComponent; // 0xc00(0x08)
	struct UTexture2D* DefaultClothingMaskMaterial; // 0xc08(0x08)
	struct FVector DefaultClothingPrimaryColor; // 0xc10(0x0c)
	struct FVector DefaultClothingSecondaryColor; // 0xc1c(0x0c)
	struct USkeletalMeshComponent* HeadMeshComponent; // 0xc28(0x08)
	struct UStaticMeshComponent* HairMeshComponent; // 0xc30(0x08)
	struct UStaticMeshComponent* FacialHairMeshComponent; // 0xc38(0x08)
	float ThirstToRevive; // 0xc40(0x04)
	float GiveUpHoldTime; // 0xc44(0x04)
	struct FName CableAttachSocketName; // 0xc48(0x08)
	struct FViewTargetTransitionParams VanityCameraTransitionParams; // 0xc50(0x10)
	struct FViewTargetTransitionParams FlyingCameraTransitionParams; // 0xc60(0x10)
	struct FViewTargetTransitionParams FrontCameraTransitionParams; // 0xc70(0x10)
	struct FViewTargetTransitionParams FirstPersonCameraTransitionParams; // 0xc80(0x10)
	float SharedExperienceRange; // 0xc90(0x04)
	float MaxExperiancePercentage; // 0xc94(0x04)
	struct FVector AudioListenerOffset; // 0xc98(0x0c)
	float AudioListenerPerpShift; // 0xca4(0x04)
	struct UCurveFloat* AudioListenerOffsetByDistance; // 0xca8(0x08)
	bool DebugShowAudioListener; // 0xcb0(0x01)
	char pad_CB1[0x3]; // 0xcb1(0x03)
	float UnpossessDormancyDelay; // 0xcb4(0x04)
	struct AMistPlayer* CarriedPlayer; // 0xcb8(0x08)
	struct AMistPlayer* CarriedByPlayer; // 0xcc0(0x08)
	struct AMistPlayer* PlayerLookingAt; // 0xcc8(0x08)
	char pad_CD0[0x8]; // 0xcd0(0x08)
	int32_t StatOffsets[0x6]; // 0xcd8(0x18)
	struct FMistStatValues StatValues; // 0xcf0(0x20)
	bool bIsPossessed; // 0xd10(0x01)
	char pad_D11[0x17]; // 0xd11(0x17)
	struct AMistOasisPlayerController* PossessedByPlayerController; // 0xd28(0x08)
	struct UMistPlayerSFXSet* PlayerSFXSetCached; // 0xd30(0x08)
	char pad_D38[0x38]; // 0xd38(0x38)
	struct UInputComponent* CarryingPlayerInputComponent; // 0xd70(0x08)
	struct USpringArmComponent* ZoomedSpringArmComponent; // 0xd78(0x08)
	char pad_D80[0x28]; // 0xd80(0x28)
	float CombatCooldownEndTime; // 0xda8(0x04)
	char pad_DAC[0x54]; // 0xdac(0x54)

	void SetupNewCharacter(); // Function Mist.MistPlayer.SetupNewCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1168460
	void ServerThrowCarriedPlayer(); // Function Mist.MistPlayer.ServerThrowCarriedPlayer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1168440
	void ServerPickUpDroppedEmptyContainer(struct AMistDropBag* DropBag, struct FMistInventoryOperationTarget OperationTarget); // Function Mist.MistPlayer.ServerPickUpDroppedEmptyContainer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1168360
	void ServerGiveUp(); // Function Mist.MistPlayer.ServerGiveUp // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1168340
	void ServerEquipDroppedContainer(struct AMistDropBag* DropBag); // Function Mist.MistPlayer.ServerEquipDroppedContainer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x11682b0
	void ServerDropCarriedPlayer(); // Function Mist.MistPlayer.ServerDropCarriedPlayer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1168290
	void ReceiveSetupNewCharacter(); // Function Mist.MistPlayer.ReceiveSetupNewCharacter // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveLeveledUp(int32_t Level); // Function Mist.MistPlayer.ReceiveLeveledUp // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_CarriedPlayer(); // Function Mist.MistPlayer.OnRep_CarriedPlayer // (Final|Native|Private) // @ game+0x1168250
	void OnRep_CarriedByPlayer(); // Function Mist.MistPlayer.OnRep_CarriedByPlayer // (Final|Native|Private) // @ game+0x1168230
	void OnRep_bIsPossessed(); // Function Mist.MistPlayer.OnRep_bIsPossessed // (Final|Native|Private) // @ game+0x1168270
	void OnMannedComponentChanged__DelegateSignature(struct UMistMannedControlComponent* NewMannedComponent); // DelegateFunction Mist.MistPlayer.OnMannedComponentChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnCombatActionChanged(enum class ECombatAction PrevAction, enum class ECombatAction NewAction); // Function Mist.MistPlayer.OnCombatActionChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void MulticastAbortClimbing(); // Function Mist.MistPlayer.MulticastAbortClimbing // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x1168090
	bool IsPerkActive(enum class EMistPerkAbility Perk); // Function Mist.MistPlayer.IsPerkActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1168000
	void HandleReviveInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistPlayer.HandleReviveInteractable // (Final|Native|Private|HasOutParms) // @ game+0x1167f20
	void HandleQueryReviveInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& InOutProperties, struct FMistInteractionQuery& InOutQuery); // Function Mist.MistPlayer.HandleQueryReviveInteractable // (Final|Native|Private|HasOutParms) // @ game+0x1167c60
	void HandleQueryLootInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& InOutProperties, struct FMistInteractionQuery& InOutQuery); // Function Mist.MistPlayer.HandleQueryLootInteractable // (Final|Native|Private|HasOutParms) // @ game+0x11679a0
	void HandleQueryCarryInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& InOutProperties, struct FMistInteractionQuery& InOutQuery); // Function Mist.MistPlayer.HandleQueryCarryInteractable // (Final|Native|Private|HasOutParms) // @ game+0x11676e0
	void HandlePerkUnlocked(struct AMistOasisPlayerState* Sender); // Function Mist.MistPlayer.HandlePerkUnlocked // (Final|Native|Private) // @ game+0x1167660
	void HandleEquipmentSlotChnaged(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot Slot); // Function Mist.MistPlayer.HandleEquipmentSlotChnaged // (Final|Native|Private) // @ game+0x1167450
	void HandleDelayedDormancyStopTimer(); // Function Mist.MistPlayer.HandleDelayedDormancyStopTimer // (Final|Native|Private) // @ game+0x1167430
	void HandleCarryInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistPlayer.HandleCarryInteractable // (Final|Native|Private|HasOutParms) // @ game+0x1167350
	struct UMistPlayerSFXSet* GetPlayerSFXSet(); // Function Mist.MistPlayer.GetPlayerSFXSet // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167320
	int32_t GetPerkLevel(enum class EMistPerkAbility Perk); // Function Mist.MistPlayer.GetPerkLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1167290
	void DevSetGender(enum class EMistCharacterGender InGender); // Function Mist.MistPlayer.DevSetGender // (Final|BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x1167210
	void DebugMapScreen(); // Function Mist.MistPlayer.DebugMapScreen // (Final|Exec|Native|Public) // @ game+0x11671f0
	void ClientStopBeingTarget(struct APawn* Agressor); // Function Mist.MistPlayer.ClientStopBeingTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1167160
	void ClientSetCombatCooldownEndTime(float InDamageCooldownEndTime); // Function Mist.MistPlayer.ClientSetCombatCooldownEndTime // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11670e0
	void ClientNotifyHealthDamageDealt(struct AActor* TargetActor, struct UPrimitiveComponent* TargetComponent, int32_t InstanceId, float PreviousHealth, float CurrentHealth, float MaxHealth); // Function Mist.MistPlayer.ClientNotifyHealthDamageDealt // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1166f20
	void ClientDisplayHarvestNotification(struct FMistItem Item, int32_t Count, bool CreatedLeftovers); // Function Mist.MistPlayer.ClientDisplayHarvestNotification // (Net|Native|Event|Public|NetClient) // @ game+0x1166e10
	void ClientBecomeTarget(struct APawn* Aggressor); // Function Mist.MistPlayer.ClientBecomeTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1166d80
	void BroadcastUnpossessed(); // Function Mist.MistPlayer.BroadcastUnpossessed // (Net|NetReliableNative|Event|Public) // @ game+0x1166d60
	void BroadcastPossessed(); // Function Mist.MistPlayer.BroadcastPossessed // (Net|NetReliableNative|Event|Public) // @ game+0x1166d40
};

// Class Mist.MistPlayerAnimInstance
// Size: 0x1680 (Inherited: 0x270)
struct UMistPlayerAnimInstance : UAnimInstance {
	struct UMistLocomotionTypeBase* ActiveLocomotionType; // 0x270(0x08)
	struct TSoftObjectPtr<UGrapplingHookLocomotionType> GrapplingLocomotionType; // 0x278(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> UnarmedLocomotionType; // 0x2a0(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> SaberLocomotionType; // 0x2c8(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> TwoHandedLocomotionType; // 0x2f0(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> HeavyTwoHandedLocomotionType; // 0x318(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> QuarterstaffLocomotionType; // 0x340(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> FemaleUnarmedLocomotionType; // 0x368(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> FemaleSaberLocomotionType; // 0x390(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> FemaleTwoHandedLocomotionType; // 0x3b8(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> FemaleHeavyTwoHandedLocomotionType; // 0x3e0(0x28)
	struct TSoftObjectPtr<UMistLocomotionType> FemaleQuarterstaffLocomotionType; // 0x408(0x28)
	struct TSoftObjectPtr<UMistClimbingLocomotionType> ClimbingLocomotionType; // 0x430(0x28)
	struct TArray<struct FMistAnimCardinalDirectionParams> CardinalDirectionParams; // 0x458(0x10)
	struct UAnimMontage* MeditationEndedMontage; // 0x468(0x08)
	struct UAnimationAsset* ActiveClimbingAnim; // 0x470(0x08)
	struct UAnimMontage* ClimbingMontage; // 0x478(0x08)
	char pad_480[0x4]; // 0x480(0x04)
	float InputDelay; // 0x484(0x04)
	float TurnOffsetThreshold; // 0x488(0x04)
	float StandingSpeedThreshold; // 0x48c(0x04)
	struct UAnimMontage* SlingshotFireAnim; // 0x490(0x08)
	struct UAnimMontage* GrapplingHookGunReloadAnim; // 0x498(0x08)
	float JumpKickAlpha; // 0x4a0(0x04)
	bool bFiredSlingshot; // 0x4a4(0x01)
	char pad_4A5[0x3]; // 0x4a5(0x03)
	float LookAngle; // 0x4a8(0x04)
	bool bIsClimbing; // 0x4ac(0x01)
	bool bIsDodging; // 0x4ad(0x01)
	bool bIsInAir; // 0x4ae(0x01)
	bool bIsControlled; // 0x4af(0x01)
	bool bIsPlayingIntroScene; // 0x4b0(0x01)
	char pad_4B1[0xa7]; // 0x4b1(0xa7)
	struct UMistLocomotionTypeBase* LocomotionType; // 0x558(0x08)
	struct UMistWeaponTypeBase* WeaponType; // 0x560(0x08)
	struct UMistGrapplingHookComponent* GrapplingHookComponent; // 0x568(0x08)
	char pad_570[0x38]; // 0x570(0x38)
	struct AMistCharacter* Character; // 0x5a8(0x08)
	struct UMistCharacterMovementComponent* MovementComponent; // 0x5b0(0x08)
	struct UMistMeleeCombatComponent* CombatComponent; // 0x5b8(0x08)
	struct FMistPlayerAnimInstanceProxy Proxy; // 0x5c0(0x10c0)

	void OnMovementModeChanged(struct ACharacter* InCharacter, enum class EMovementMode PrevMovementMode, char PreviousCustomMode); // Function Mist.MistPlayerAnimInstance.OnMovementModeChanged // (Final|Native|Public) // @ game+0x1168130
	void OnGrapplingHookShot(); // Function Mist.MistPlayerAnimInstance.OnGrapplingHookShot // (Final|Native|Private) // @ game+0x1168110
	void OnGrapplingHookReload(); // Function Mist.MistPlayerAnimInstance.OnGrapplingHookReload // (Final|Native|Private) // @ game+0x11680b0
	void HandleOnSlingshotFire(struct UMistSlingshotControlComponent* Sender); // Function Mist.MistPlayerAnimInstance.HandleOnSlingshotFire // (Final|Native|Private) // @ game+0x11675e0
	void HandleMontageEnded(struct UAnimMontage* Montage, bool bIsInterrupted); // Function Mist.MistPlayerAnimInstance.HandleMontageEnded // (Final|Native|Private) // @ game+0x1167510
};

// Class Mist.MistPlayerCameraManager
// Size: 0x2970 (Inherited: 0x28e0)
struct AMistPlayerCameraManager : APlayerCameraManager {
	float FovOffsetMin; // 0x28d8(0x04)
	float FovOffsetMax; // 0x28dc(0x04)
	struct FRuntimeFloatCurve VerticalFovScalingCurve; // 0x28e0(0x88)
};

// Class Mist.MistPlayerCameraSpringArm
// Size: 0x430 (Inherited: 0x320)
struct UMistPlayerCameraSpringArm : USpringArmComponent {
	struct FName TargetSocketName; // 0x320(0x08)
	bool bOnlyFollowSocket; // 0x328(0x01)
	bool bUseCameraOffset; // 0x329(0x01)
	char pad_32A[0x2]; // 0x32a(0x02)
	struct FVector2D SpringArmLengthOffsetRange; // 0x32c(0x08)
	struct FVector2D FOVRange; // 0x334(0x08)
	char pad_33C[0x4]; // 0x33c(0x04)
	struct UCurveFloat* AdditiveVelocityFOV; // 0x340(0x08)
	struct USceneComponent* LeftOffsetTransform; // 0x348(0x08)
	struct USceneComponent* RightOffsetTransform; // 0x350(0x08)
	char pad_358[0x8]; // 0x358(0x08)
	struct USkeletalMeshComponent* CachedMesh; // 0x360(0x08)
	struct UCameraComponent* Camera; // 0x368(0x08)
	char pad_370[0xc0]; // 0x370(0xc0)
};

// Class Mist.MistPlayerConnectionStatusWidget
// Size: 0x468 (Inherited: 0x2c0)
struct UMistPlayerConnectionStatusWidget : UMistUIWidget {
	struct UImage* StatusIconWidget; // 0x2c0(0x08)
	enum class EMistPlayerConnectionStatus Status; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct FSlateBrush OnlineStatusBrush; // 0x2d0(0x88)
	struct FSlateBrush AwayStatusBrush; // 0x358(0x88)
	struct FSlateBrush OfflineStatusBrush; // 0x3e0(0x88)
};

// Class Mist.MistPlayerCraftingStationComponent
// Size: 0x3b0 (Inherited: 0x3b0)
struct UMistPlayerCraftingStationComponent : UMistCraftingStationComponent {
};

// Class Mist.MistPlayerStateQuestsComponent
// Size: 0x128 (Inherited: 0x108)
struct UMistPlayerStateQuestsComponent : UMistPlayerStateComponent {
	char pad_108[0x18]; // 0x108(0x18)
	struct UMistQuest* CurrentQuest; // 0x120(0x08)
};

// Class Mist.MistPlayerFlotillaQuestsComponent
// Size: 0x1a8 (Inherited: 0x128)
struct UMistPlayerFlotillaQuestsComponent : UMistPlayerStateQuestsComponent {
	char pad_128[0x50]; // 0x128(0x50)
	struct TArray<struct FMistQuestDataHolder> AvailableQuests; // 0x178(0x10)
	char pad_188[0x8]; // 0x188(0x08)
	struct UMistFlotillaQuest* CurrentFlotillaQuest; // 0x190(0x08)
	struct UMistStationFlotillaQuestsComponent* ActiveQuestGiverComponent; // 0x198(0x08)
	char pad_1A0[0x8]; // 0x1a0(0x08)

	void ServerTakeReward(); // Function Mist.MistPlayerFlotillaQuestsComponent.ServerTakeReward // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108c30
	void ServerTakeQuest(int32_t QuestIndex); // Function Mist.MistPlayerFlotillaQuestsComponent.ServerTakeQuest // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x116e340
	void ServerOpenQuestGiver(struct UMistStationFlotillaQuestsComponent* InComponent); // Function Mist.MistPlayerFlotillaQuestsComponent.ServerOpenQuestGiver // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x116e2b0
	void ServerCloseQuestGiver(); // Function Mist.MistPlayerFlotillaQuestsComponent.ServerCloseQuestGiver // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c4c60
	void ClientUpdateQuestStatus(struct FMistQuestDataHolder QuestHolder); // Function Mist.MistPlayerFlotillaQuestsComponent.ClientUpdateQuestStatus // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x116ddc0
	void ClientSetCurrentQuest(struct FMistQuestDataHolder QuestHolder); // Function Mist.MistPlayerFlotillaQuestsComponent.ClientSetCurrentQuest // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x116dc60
	void ClientSetAvailableQuests(struct TArray<struct FMistQuestDataHolder> InQuests, float InSecondsToRegeneration); // Function Mist.MistPlayerFlotillaQuestsComponent.ClientSetAvailableQuests // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x116db80
};

// Class Mist.MistPlayerFollowerSpectatorPawn
// Size: 0x458 (Inherited: 0x448)
struct AMistPlayerFollowerSpectatorPawn : ASpectatorPawn {
	struct UCineCameraComponent* CameraComponent; // 0x448(0x08)
	struct USpringArmComponent* CameraSpringArmComponent; // 0x450(0x08)
};

// Class Mist.MistPlayerGridComponent
// Size: 0x160 (Inherited: 0xf0)
struct UMistPlayerGridComponent : UActorComponent {
	char pad_F0[0x70]; // 0xf0(0x70)

	void HandleGracePeriodTimer(); // Function Mist.MistPlayerGridComponent.HandleGracePeriodTimer // (Final|Native|Private) // @ game+0x116dfa0
};

// Class Mist.MistPlayerInviteWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistPlayerInviteWidget : UMistUIWidget {
	struct URichTextBlock* PlayerNameTextWidget; // 0x2c0(0x08)
	struct UButton* CancelButtonWidget; // 0x2c8(0x08)
	char pad_2D0[0x38]; // 0x2d0(0x38)

	void HandleCancelClicked(); // Function Mist.MistPlayerInviteWidget.HandleCancelClicked // (Final|Native|Private) // @ game+0x116de50
};

// Class Mist.MistPlayerKnowledgeGatheringComponent
// Size: 0x178 (Inherited: 0x108)
struct UMistPlayerKnowledgeGatheringComponent : UMistPlayerStateComponent {
	char pad_108[0x18]; // 0x108(0x18)
	struct TMap<struct UMistKnowledgeType*, int32_t> GatheredKnowledge; // 0x120(0x50)
	char pad_170[0x8]; // 0x170(0x08)

	void SendInitialReplication(); // Function Mist.MistPlayerKnowledgeGatheringComponent.SendInitialReplication // (Final|Native|Private) // @ game+0x116e290
	void ClientSetKnowledgeGathered(struct UMistKnowledgeType* InType, int32_t InKnowledge); // Function Mist.MistPlayerKnowledgeGatheringComponent.ClientSetKnowledgeGathered // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x116dcf0
};

// Class Mist.MistPlayerListEntry
// Size: 0x530 (Inherited: 0x2c0)
struct UMistPlayerListEntry : UMistUIWidget {
	char pad_2C0[0x20]; // 0x2c0(0x20)
	struct URichTextBlock* PlayerName; // 0x2e0(0x08)
	struct UTextBlock* FactionName; // 0x2e8(0x08)
	struct UImage* MicIcon; // 0x2f0(0x08)
	struct UImage* BackgroundImage; // 0x2f8(0x08)
	struct FSlateBrush MutedIconBrush; // 0x300(0x88)
	struct FSlateBrush UnmutedIconBrush; // 0x388(0x88)
	struct FSlateBrush FocusedBrush; // 0x410(0x88)
	struct FSlateBrush UnFocusedBrush; // 0x498(0x88)
	struct AMistOasisPlayerState* PlayerState; // 0x520(0x08)
	struct UMistReportPlayerDialog* ReportDialog; // 0x528(0x08)

	void ShowUserProfile(); // Function Mist.MistPlayerListEntry.ShowUserProfile // (Final|Native|Private) // @ game+0x10a4190
	void ReportPlayer(); // Function Mist.MistPlayerListEntry.ReportPlayer // (Final|Native|Private) // @ game+0x10a4170
	void MutePlayer(); // Function Mist.MistPlayerListEntry.MutePlayer // (Final|Native|Private) // @ game+0x10a41b0
};

// Class Mist.MistPlayerListScreen
// Size: 0x3d8 (Inherited: 0x3a0)
struct UMistPlayerListScreen : UMistUIScreen {
	struct UMistPlayerListEntry* PlayerEntryClass; // 0x3a0(0x08)
	struct UScrollBox* PlayerScrollBox; // 0x3a8(0x08)
	struct TArray<struct UMistPlayerListEntry*> PlayerEntries; // 0x3b0(0x10)
	struct UMistPlayerListEntry* LastSelcted; // 0x3c0(0x08)
	struct UMistPlayerListEntry* FocusedEntry; // 0x3c8(0x08)
	char pad_3D0[0x8]; // 0x3d0(0x08)

	void HandlePlayerStateDestroyed(struct AActor* Actor); // Function Mist.MistPlayerListScreen.HandlePlayerStateDestroyed // (Final|Native|Private) // @ game+0x116e0f0
};

// Class Mist.MistPlayerMapIconManagerComponent
// Size: 0x240 (Inherited: 0xf0)
struct UMistPlayerMapIconManagerComponent : UActorComponent {
	char pad_F0[0x10]; // 0xf0(0x10)
	struct TSet<int64_t> AddedIconIds; // 0x100(0x50)
	struct TArray<struct FMistMapIconUpdateData> PendingUpdatedIcons; // 0x150(0x10)
	struct TArray<struct FMistMapIconLocationUpdateData> PendingUpdatedIconLocations; // 0x160(0x10)
	struct TArray<struct FMistMapIconKeyValueUpdateData> PendingUpdatedIconKeyValues; // 0x170(0x10)
	struct TArray<uint64_t> PendingRemovedIconIds; // 0x180(0x10)
	struct TMap<uint64_t, struct UMistMapIconComponent*> MapIconComponents; // 0x190(0x50)
	struct TMap<uint64_t, struct UMistMapIconComponent*> MapIconClassOverrides; // 0x1e0(0x50)
	char pad_230[0x8]; // 0x230(0x08)
	struct AActor* MapIconContainerActor; // 0x238(0x08)

	void ClientSendIconLocations(struct TArray<struct FMistMapIconLocationUpdateData> UpdatedIconLocations); // Function Mist.MistPlayerMapIconManagerComponent.ClientSendIconLocations // (Final|Net|Native|Event|Private|NetClient) // @ game+0x116dae0
	void ClientSendIconKeyValues(struct TArray<struct FMistMapIconKeyValueUpdateData> UpdatedIconKeyValues); // Function Mist.MistPlayerMapIconManagerComponent.ClientSendIconKeyValues // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x116da10
	void ClientSendIconInfos(struct TArray<struct FMistMapIconUpdateData> UpdatedIcons, struct TArray<uint64_t> RemovedIconIds); // Function Mist.MistPlayerMapIconManagerComponent.ClientSendIconInfos // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x116d920
};

// Class Mist.MistPlayerMapIconProviderComponent
// Size: 0x180 (Inherited: 0x118)
struct UMistPlayerMapIconProviderComponent : UMistPlayerComponent {
	struct UMistMapIconComponent* AliveMapIconClass; // 0x118(0x08)
	struct UMistMapIconComponent* DownedMapIconClass; // 0x120(0x08)
	struct UMistMapIconComponent* DeadMapIconClass; // 0x128(0x08)
	struct UMistMapIconComponent* LocalAliveMapIconClass; // 0x130(0x08)
	struct UMistMapIconComponent* LocalDownedMapIconClass; // 0x138(0x08)
	struct UMistMapIconComponent* LocalDeadMapIconClass; // 0x140(0x08)
	uint64_t IconId; // 0x148(0x08)
	int64_t OwnerId; // 0x150(0x08)
	struct FString IconText; // 0x158(0x10)
	struct UMistMapIconComponent* MapIconClass; // 0x168(0x08)
	struct UMistMapIconManagerComponent* CachedMapIconManagerComponent; // 0x170(0x08)
	struct UMistPlayerMapIconManagerComponent* CachedPlayerMapIconManagerComponent; // 0x178(0x08)

	void OnRep_IconId(); // Function Mist.MistPlayerMapIconProviderComponent.OnRep_IconId // (Final|Native|Private) // @ game+0x116e1f0
};

// Class Mist.MistPlayerMessengerComponent
// Size: 0x170 (Inherited: 0xf0)
struct UMistPlayerMessengerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnMessageReceived; // 0xf0(0x10)
	char pad_100[0x70]; // 0x100(0x70)

	void ServerMapChat(struct FString InText); // Function Mist.MistPlayerMessengerComponent.ServerMapChat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x116dae0
	void ServerClanChat(struct FString InText); // Function Mist.MistPlayerMessengerComponent.ServerClanChat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x71b4e0
	void MessageReceivedEvent__DelegateSignature(struct UMistBaseMessageData* Message); // DelegateFunction Mist.MistPlayerMessengerComponent.MessageReceivedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleMapChatMessageReceived(struct FMistMessageCharacterData& InSenderData, struct FString InMessage); // Function Mist.MistPlayerMessengerComponent.HandleMapChatMessageReceived // (Final|Native|Public|HasOutParms) // @ game+0x116dfc0
	void HandleClanChatMessageReceived(struct FMistMessageCharacterData& InSenderData, struct FString InMessage); // Function Mist.MistPlayerMessengerComponent.HandleClanChatMessageReceived // (Final|Native|Public|HasOutParms) // @ game+0x116de70
	void ClientGotStatPointsMessage(int32_t InAmount); // Function Mist.MistPlayerMessengerComponent.ClientGotStatPointsMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x10ccd10
	void ClientAddReachedLevelMessage(int32_t InLevel); // Function Mist.MistPlayerMessengerComponent.ClientAddReachedLevelMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d890
	void ClientAddNotificationChatMessage(enum class EPlayerCharacterNotificationType InType, struct FText InMessage); // Function Mist.MistPlayerMessengerComponent.ClientAddNotificationChatMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d790
	void ClientAddMoneyChangedMessage(int32_t InAmountChange); // Function Mist.MistPlayerMessengerComponent.ClientAddMoneyChangedMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d700
	void ClientAddMapChatMessage(struct FMistMessageCharacterData InSenderData, struct FString InMessage); // Function Mist.MistPlayerMessengerComponent.ClientAddMapChatMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d5f0
	void ClientAddKillMessage(struct FMistMessageCharacterData InKillerData, struct FMistMessageCharacterData InVictimData, enum class EMistKillReason InReason, bool bInIsKnockout, bool bInIsTeamKill, int32_t InDisposition); // Function Mist.MistPlayerMessengerComponent.ClientAddKillMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d3b0
	void ClientAddKillBossMessage(struct FMistMessageCharacterData InKillerData, struct FMistMessageCharacterData InVictimData, enum class EMistKillReason InReason); // Function Mist.MistPlayerMessengerComponent.ClientAddKillBossMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d230
	void ClientAddIntermediateCurrencyChangedMessage(int32_t InAmountChange); // Function Mist.MistPlayerMessengerComponent.ClientAddIntermediateCurrencyChangedMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d1a0
	void ClientAddInformationMessage(struct FText InMessage); // Function Mist.MistPlayerMessengerComponent.ClientAddInformationMessage // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x116d0e0
	void ClientAddGotItemMessage(struct FMistItem InItem, int32_t InItemCount); // Function Mist.MistPlayerMessengerComponent.ClientAddGotItemMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116d010
	void ClientAddGotExperienceMessage(int32_t InAmount); // Function Mist.MistPlayerMessengerComponent.ClientAddGotExperienceMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x113a3a0
	void ClientAddCombatHitMessage(float Damage, float SpeedBonus, bool ReceivedDamage); // Function Mist.MistPlayerMessengerComponent.ClientAddCombatHitMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116cf10
	void ClientAddClanChatMessage(struct FMistMessageCharacterData InSenderData, struct FString InMessage); // Function Mist.MistPlayerMessengerComponent.ClientAddClanChatMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116ce00
	void ClientAddClaimMurderReportMessage(struct FMistMessageCharacterData VictimData, struct FMistMessageCharacterData KillerData, enum class EMistWorldCardinalDirection Area); // Function Mist.MistPlayerMessengerComponent.ClientAddClaimMurderReportMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x116cc80
	void ClientAddAnnouncementMessage(struct FText InText); // Function Mist.MistPlayerMessengerComponent.ClientAddAnnouncementMessage // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x116cbc0
};

// Class Mist.MistPlayerPackingComponent
// Size: 0x260 (Inherited: 0x118)
struct UMistPlayerPackingComponent : UMistPlayerComponent {
	char pad_118[0x8]; // 0x118(0x08)
	struct UMistPackingComponent* CurrentPackingComponent; // 0x120(0x08)
	struct FText MessageText; // 0x128(0x18)
	struct TArray<struct UMistPackingComponent*> PackingComponents; // 0x140(0x10)
	struct UMaterialInterface* PlacementMaterial; // 0x150(0x08)
	float MaxDistanceForStructurePlacement; // 0x158(0x04)
	char pad_15C[0x84]; // 0x15c(0x84)
	struct UMistPackingScreen* Screen; // 0x1e0(0x08)
	struct AMistPlacementPreviewActor* PlacementActor; // 0x1e8(0x08)
	struct UMaterialInstanceDynamic* PlacementMaterialInstance; // 0x1f0(0x08)
	struct UPrimitiveComponent* PlacementTargetComponent; // 0x1f8(0x08)
	char pad_200[0x60]; // 0x200(0x60)

	void ServerUnpackSimple(struct UMistPackingComponent* InPackingComponent, struct FMistPlacementState InPlacementState, struct FMistPlacementSnapState InSnapState); // Function Mist.MistPlayerPackingComponent.ServerUnpackSimple // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1171840
	void ServerUnpackComplex(struct UMistPackingComponent* InPackingComponent, struct UPrimitiveComponent* InTargetComponent, int32_t TargetItemIndex, struct FTransform InTargetTransform); // Function Mist.MistPlayerPackingComponent.ServerUnpackComplex // (Final|Net|NetReliableNative|Event|Private|NetServer|HasDefaults) // @ game+0x11716a0
	void ServerPack(struct UMistPackingComponent* InPackingComponent, struct AActor* InPackable); // Function Mist.MistPlayerPackingComponent.ServerPack // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11715d0
	void ServerAbort(struct UMistPackingComponent* InPackingComponent); // Function Mist.MistPlayerPackingComponent.ServerAbort // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10dc1e0
	void HandlePackingComponentPackedChanged(struct UMistPackingComponent* InPackingComponent); // Function Mist.MistPlayerPackingComponent.HandlePackingComponentPackedChanged // (Final|Native|Private) // @ game+0x1171490
};

// Class Mist.MistPlayerRespawnComponent
// Size: 0x300 (Inherited: 0xf0)
struct UMistPlayerRespawnComponent : UActorComponent {
	struct FMistComponentReference WaterStorageRef; // 0xf0(0x28)
	struct FMistComponentReference BoostStorageRef; // 0x118(0x28)
	int32_t WaterCost; // 0x140(0x04)
	int32_t MoneyCost; // 0x144(0x04)
	bool bSingleUse; // 0x148(0x01)
	bool bForbidSpawningWithRedeployPenalty; // 0x149(0x01)
	char pad_14A[0x6]; // 0x14a(0x06)
	struct TArray<struct FMistComponentReference> SpawnLocations; // 0x150(0x10)
	struct TArray<struct FMistComponentReference> ComponentsWithRespawnSockets; // 0x160(0x10)
	struct FMistPlayerRespawnTimer DefaultRespawnTimer; // 0x170(0x30)
	float RespawnHealthFactor; // 0x1a0(0x04)
	float RespawnThirstFactor; // 0x1a4(0x04)
	bool bDeletedWhenNewCreated; // 0x1a8(0x01)
	char pad_1A9[0x3]; // 0x1a9(0x03)
	float RespawnWhenObstructedMinRadius; // 0x1ac(0x04)
	float RespawnWhenObstructedMaxRadius; // 0x1b0(0x04)
	float RespawnNextToWalkerMinRadius; // 0x1b4(0x04)
	float RespawnNextToWalkerMaxRadius; // 0x1b8(0x04)
	bool bAllowRespawnWithPenaltyWhenOutOfWater; // 0x1bc(0x01)
	char pad_1BD[0x3]; // 0x1bd(0x03)
	float RespawnWithPenaltyMinRadius; // 0x1c0(0x04)
	float RespawnWithPenaltyMaxRadius; // 0x1c4(0x04)
	float RespawnWithPenaltyHealthFactor; // 0x1c8(0x04)
	float RespawnWithPenaltyThirstFactor; // 0x1cc(0x04)
	struct FMistAttachmentMonitor AttachmentMonitor; // 0x1d0(0x80)
	struct FMistClanOwnershipMonitor OwnershipMonitor; // 0x250(0x60)
	char pad_2B0[0x20]; // 0x2b0(0x20)
	struct FMistPlayerRespawnTimer RespawnTimer; // 0x2d0(0x30)
};

// Class Mist.MistPlayerSettings
// Size: 0x258 (Inherited: 0x38)
struct UMistPlayerSettings : UMistSettingsObject {
	struct TSoftObjectPtr<UDataTable> XPTable; // 0x38(0x28)
	struct TSoftObjectPtr<UDataTable> StatTables[0x6]; // 0x60(0xf0)
	struct FMistPlayerRespawnTimer PlayerRespawnValues; // 0x150(0x30)
	float DefaultSpawnAcceptedTime; // 0x180(0x04)
	float ClosestSpawnAcceptedTime; // 0x184(0x04)
	float IdleVelocityThreshold; // 0x188(0x04)
	float IdleWarnTime; // 0x18c(0x04)
	float IdleKickTime; // 0x190(0x04)
	float CombatCooldownDuration; // 0x194(0x04)
	char pad_198[0x88]; // 0x198(0x88)
	struct UDataTable* CachedLevelTable; // 0x220(0x08)
	struct UDataTable* CachedStatTables[0x6]; // 0x228(0x30)
};

// Class Mist.MistPlayerSFXSet
// Size: 0x150 (Inherited: 0x30)
struct UMistPlayerSFXSet : UDataAsset {
	struct USoundCue* GetHitCollisionCue; // 0x30(0x08)
	struct USoundCue* GetHitHeavyCue; // 0x38(0x08)
	struct USoundCue* GetHitLightCue; // 0x40(0x08)
	struct USoundCue* GetHitMediumCue; // 0x48(0x08)
	struct USoundCue* HeavyAttackCue; // 0x50(0x08)
	struct USoundCue* HeavtAttackShortCue; // 0x58(0x08)
	struct USoundCue* LightAttackCue; // 0x60(0x08)
	struct USoundCue* MediumAttackCue; // 0x68(0x08)
	struct USoundCue* KickAttackCue; // 0x70(0x08)
	struct USoundCue* DownedCue; // 0x78(0x08)
	struct USoundCue* DownedBreatheCue; // 0x80(0x08)
	struct USoundCue* ConsumeCue; // 0x88(0x08)
	struct USoundCue* ConstantEffortLightCue; // 0x90(0x08)
	struct USoundCue* EffortResistedCue; // 0x98(0x08)
	struct USoundCue* EffortResistedSingeCue; // 0xa0(0x08)
	struct USoundCue* JumpUpCue; // 0xa8(0x08)
	struct USoundCue* LandCue; // 0xb0(0x08)
	struct USoundCue* NoStaminaCue; // 0xb8(0x08)
	struct USoundCue* OvercumberedCue; // 0xc0(0x08)
	struct USoundCue* OvercumberedHeavyCue; // 0xc8(0x08)
	struct USoundCue* PullUpCue; // 0xd0(0x08)
	struct USoundCue* PullUpEndCue; // 0xd8(0x08)
	struct USoundCue* ReelingEffortCue; // 0xe0(0x08)
	struct USoundCue* DamageBurnCue; // 0xe8(0x08)
	struct USoundCue* DamageFallCue; // 0xf0(0x08)
	struct USoundCue* DamageGasCue; // 0xf8(0x08)
	struct USoundCue* DamageSelfCue; // 0x100(0x08)
	struct USoundCue* DamageThirstCue; // 0x108(0x08)
	struct USoundCue* DamageThistSingeCue; // 0x110(0x08)
	struct USoundCue* ReviveCue; // 0x118(0x08)
	struct TArray<struct USoundCue*> TutorialCues; // 0x120(0x10)
	struct TArray<struct USoundCue*> IdleCues; // 0x130(0x10)
	struct TArray<struct USoundCue*> SingingCues; // 0x140(0x10)

	struct USoundCue* GetTutorialCue(int32_t Index); // Function Mist.MistPlayerSFXSet.GetTutorialCue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11712e0
	struct USoundCue* GetSingingCue(int32_t Index); // Function Mist.MistPlayerSFXSet.GetSingingCue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1171250
	struct USoundCue* GetIdleCue(int32_t Index); // Function Mist.MistPlayerSFXSet.GetIdleCue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1171160
};


// Class Mist.MistAudioSettings
// Size: 0x680 (Inherited: 0x38)
struct UMistAudioSettings : UMistSettingsObject {
	struct TSoftObjectPtr<USoundBase> NettableComponentAttachSound; // 0x38(0x28)
	struct TSoftObjectPtr<USoundBase> NettableComponentRemoveSound; // 0x60(0x28)
	struct TSoftObjectPtr<USoundClass> MasterSoundClass; // 0x88(0x28)
	float MasterSoundClassMultiplier; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TSoftObjectPtr<USoundClass> MusicSoundClass; // 0xb8(0x28)
	float MusicSoundClassMultiplier; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct TSoftObjectPtr<USoundClass> SFXSoundClass; // 0xe8(0x28)
	float SFXSoundClassMultiplier; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
	struct TSoftObjectPtr<USoundClass> UserInterfaceSFXSoundClass; // 0x118(0x28)
	float UserInterfaceSoundClassMultiplier; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct TSoftObjectPtr<USoundClass> VoiceChatSoundClass; // 0x148(0x28)
	float VoiceChatSoundClassMultiplier; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	struct TSoftObjectPtr<USoundClass> SingingSoundClass; // 0x178(0x28)
	float SingingSoundClassMultiplier; // 0x1a0(0x04)
	char pad_1A4[0x4]; // 0x1a4(0x04)
	struct TSoftObjectPtr<USoundClass> NarratorSoundClass; // 0x1a8(0x28)
	float NarratorSoundClassMultiplier; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)
	struct TSoftObjectPtr<USoundMix> SilenceSoundMixModifier; // 0x1d8(0x28)
	struct TSoftObjectPtr<USoundMix> DownedSoundMixModifier; // 0x200(0x28)
	struct TSoftObjectPtr<USoundMix> UISoundMixModifier; // 0x228(0x28)
	struct TMap<enum class EMistMusicSyncEvent, struct FMistIntensityLevelSettings> IntensityLevelsSettings; // 0x250(0x50)
	struct TSoftObjectPtr<UCurveFloat> IntensityDeacrisingCurve; // 0x2a0(0x28)
	struct TSoftClassPtr<UObject> DynamicMusicManager; // 0x2c8(0x28)
	float HealthEventTriggerThreshold; // 0x2f0(0x04)
	float AlmostHitRadius; // 0x2f4(0x04)
	float AlmostHitOffset; // 0x2f8(0x04)
	float CauserRadiusProximity; // 0x2fc(0x04)
	float CauserStallTime; // 0x300(0x04)
	bool bApplyOnlyToRupu; // 0x304(0x01)
	char pad_305[0x3]; // 0x305(0x03)
	int32_t CheckNumBeforeRemovingStalled; // 0x308(0x04)
	float WormSpottingPlayerDistance; // 0x30c(0x04)
	float WormMaxRangeDistance; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)
	struct TArray<struct TSoftObjectPtr<UMistPlayerSFXSet>> FemalePlayerSFXs; // 0x318(0x10)
	struct TArray<struct TSoftObjectPtr<UMistPlayerSFXSet>> MalePlayerSFXs; // 0x328(0x10)
	struct TSoftObjectPtr<USoundEffectSourcePresetChain> VOIPEffectChain; // 0x338(0x28)
	float MicrophoneMinimumAcceptableLevelDb; // 0x360(0x04)
	float MicrophoneNoSignalTimeThreshold; // 0x364(0x04)
	float MicrophoneSilenceDetectionThreshold; // 0x368(0x04)
	float MicrophoneMinOptimalThreshold; // 0x36c(0x04)
	float MicrophoneMaxOptimalThreshold; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct TSoftObjectPtr<USoundBase> TravelMusicSound; // 0x378(0x28)
	struct TSoftObjectPtr<USoundBase> TravelMusic2Sound; // 0x3a0(0x28)
	struct TSoftObjectPtr<USoundBase> TravelMusic3Sound; // 0x3c8(0x28)
	float TravelMusicDelay; // 0x3f0(0x04)
	float TravelMusic2Delay; // 0x3f4(0x04)
	struct TSoftObjectPtr<USoundBase> MenuMusicSound; // 0x3f8(0x28)
	struct TSoftObjectPtr<USoundBase> MenuThemeMusicSound; // 0x420(0x28)
	float MenuMusicDelay; // 0x448(0x04)
	float MenuMusicThemeDelay; // 0x44c(0x04)
	bool bFedeMenuSounds; // 0x450(0x01)
	char pad_451[0x7]; // 0x451(0x07)
	struct TSoftObjectPtr<USoundBase> PackingBeginSound; // 0x458(0x28)
	struct TSoftObjectPtr<USoundBase> PackingEndSound; // 0x480(0x28)
	struct TSoftObjectPtr<USoundBase> PackingPartSound; // 0x4a8(0x28)
	struct TSoftObjectPtr<USoundBase> PackingInterruptSound; // 0x4d0(0x28)
	struct TSoftObjectPtr<USoundBase> PackingResumeSound; // 0x4f8(0x28)
	struct TSoftObjectPtr<USoundBase> PackingAbortSound; // 0x520(0x28)
	struct TSoftObjectPtr<USoundBase> UnpackingBeginSound; // 0x548(0x28)
	struct TSoftObjectPtr<USoundBase> UnpackingEndSound; // 0x570(0x28)
	struct TSoftObjectPtr<USoundBase> UnpackingPartSound; // 0x598(0x28)
	struct TSoftObjectPtr<USoundBase> UnpackingInterruptSound; // 0x5c0(0x28)
	struct TSoftObjectPtr<USoundBase> UnpackingResumeSound; // 0x5e8(0x28)
	struct TSoftObjectPtr<USoundBase> UnpackingAbortSound; // 0x610(0x28)
	struct FSlateSound TabSelectedSound; // 0x638(0x18)
	struct FSlateSound PlaceableCategorySelectedSound; // 0x650(0x18)
	struct FSlateSound PlaceableItemSelectedSound; // 0x668(0x18)
};


// Class Mist.MistPlayerStaminaComponent
// Size: 0x158 (Inherited: 0xf0)
struct UMistPlayerStaminaComponent : UActorComponent {
	struct FMulticastInlineDelegate OnStaminaChanged; // 0xf0(0x10)
	char pad_100[0x20]; // 0x100(0x20)
	float RecoveryPerSecond; // 0x120(0x04)
	float RecoveryDelay; // 0x124(0x04)
	float MaxStamina; // 0x128(0x04)
	float LowStaminaThreshold; // 0x12c(0x04)
	float ExhaustionThreshold; // 0x130(0x04)
	float Stamina; // 0x134(0x04)
	char pad_138[0x10]; // 0x138(0x10)
	struct AMistPlayer* PlayerOwner; // 0x148(0x08)
	char pad_150[0x8]; // 0x150(0x08)

	void StaminaUsageEvent__DelegateSignature(); // DelegateFunction Mist.MistPlayerStaminaComponent.StaminaUsageEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void StaminaChangedEvent__DelegateSignature(struct UMistPlayerStaminaComponent* Sender, float PrevStamina, float NewStamina); // DelegateFunction Mist.MistPlayerStaminaComponent.StaminaChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	float GetLowStaminaThresholdValue(); // Function Mist.MistPlayerStaminaComponent.GetLowStaminaThresholdValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11711f0
	float GetExhaustionThresholdValue(); // Function Mist.MistPlayerStaminaComponent.GetExhaustionThresholdValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1171130
	void DelayedStaminaStartedEvent(); // Function Mist.MistPlayerStaminaComponent.DelayedStaminaStartedEvent // (Final|Native|Private) // @ game+0x1171110
	void ClientSetStamina(float NewValue, bool bJustWasUsed); // Function Mist.MistPlayerStaminaComponent.ClientSetStamina // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1171040
	void ClientSetMaxStamina(float NewValue); // Function Mist.MistPlayerStaminaComponent.ClientSetMaxStamina // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10d5640
};

// Class Mist.MistPlayerStaminaWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UMistPlayerStaminaWidget : UMistHUDWidget {
	struct UMistUICircularProgressBar* ProgressBarWidget; // 0x2e0(0x08)
	struct UTexture2D* NormalStaminaTexture; // 0x2e8(0x08)
	struct UTexture2D* LowStaminaTexture; // 0x2f0(0x08)
	struct UTexture2D* ExhaustionStaminaTexture; // 0x2f8(0x08)

	void HandleStaminaChanged(struct UMistPlayerStaminaComponent* StaminaComponent, float PrevStamina, float NewStamina); // Function Mist.MistPlayerStaminaWidget.HandleStaminaChanged // (Final|Native|Private) // @ game+0x10b17c0
};

// Class Mist.MistPlayerStatsScreen
// Size: 0x3c0 (Inherited: 0x3a0)
struct UMistPlayerStatsScreen : UMistUIScreen {
	struct UTextBlock* NameTextWidget; // 0x3a0(0x08)
	struct UMistUITabControl* TabControl; // 0x3a8(0x08)
	struct UMistPlayerStatsWidget* PlayerStatsWidget; // 0x3b0(0x08)
	struct UMistWalkerCraftingWidget* WalkerCraftingWidget; // 0x3b8(0x08)

	void ReceiveOpened(); // Function Mist.MistPlayerStatsScreen.ReceiveOpened // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistPlayerStatsWidget
// Size: 0x328 (Inherited: 0x2c0)
struct UMistPlayerStatsWidget : UMistUIWidget {
	struct UPanelWidget* StatsListWidget; // 0x2c0(0x08)
	struct UTextBlock* LevelTextWidget; // 0x2c8(0x08)
	struct UTextBlock* ExperienceTextWidget; // 0x2d0(0x08)
	struct UTextBlock* RequiredExperienceTextWidget; // 0x2d8(0x08)
	struct UTextBlock* AvailableStatPointsTextWidget; // 0x2e0(0x08)
	struct UImage* StatsIcon; // 0x2e8(0x08)
	struct UImage* AvailablePointsBG; // 0x2f0(0x08)
	struct TArray<struct UMistPlayerStatWidget*> StatWidgets; // 0x2f8(0x10)
	struct UTextBlock* CurrentHealth; // 0x308(0x08)
	struct UTextBlock* MaxHealth; // 0x310(0x08)
	char pad_318[0x10]; // 0x318(0x10)

	void HandlePlayerStatOffsetsUpdated(struct AMistPlayer* Sender); // Function Mist.MistPlayerStatsWidget.HandlePlayerStatOffsetsUpdated // (Final|Native|Private) // @ game+0x108b100
	void HandlePlayerStateStatLevelsUpdated(struct AMistOasisPlayerState* Sender); // Function Mist.MistPlayerStatsWidget.HandlePlayerStateStatLevelsUpdated // (Final|Native|Private) // @ game+0x108b100
	void HandlePlayerStateExperienceUpdated(struct AMistOasisPlayerState* Sender, uint64_t NewAmount); // Function Mist.MistPlayerStatsWidget.HandlePlayerStateExperienceUpdated // (Final|Native|Private) // @ game+0x10d1420
	void HandleAddStatClicked(struct UMistPlayerStatWidget* Sender); // Function Mist.MistPlayerStatsWidget.HandleAddStatClicked // (Final|Native|Private) // @ game+0x1171390
};

// Class Mist.MistPlayerStatusEffectsWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistPlayerStatusEffectsWidget : UMistUIWidget {
	struct UPanelWidget* StatusEffectsListWidget; // 0x2c0(0x08)
	struct TMap<int64_t, struct UMistPlayerStatusEffectWidget*> StatusEffectWidgets; // 0x2c8(0x50)
};

// Class Mist.MistPlayerStatusEffectWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistPlayerStatusEffectWidget : UMistUIWidget {
	struct UImage* IconWidget; // 0x2c0(0x08)
	struct UTextBlock* LabelTextWidget; // 0x2c8(0x08)
	struct UTextBlock* ValueTextWidget; // 0x2d0(0x08)
	struct UProgressBar* ProgressBarWidget; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class Mist.MistPlayerStatWidget
// Size: 0x368 (Inherited: 0x2c0)
struct UMistPlayerStatWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct FSlateSound HooverSound; // 0x2d0(0x18)
	struct UImage* IconWidget; // 0x2e8(0x08)
	struct UTextBlock* LabelTextWidget; // 0x2f0(0x08)
	struct UTextBlock* ValueTextWidget; // 0x2f8(0x08)
	struct UTextBlock* BaseTextWidget; // 0x300(0x08)
	struct UTextBlock* RequiredTextWidget; // 0x308(0x08)
	struct UMistHoldButtonWidget* AddButtonWidget; // 0x310(0x08)
	struct UMistUICircularProgressBar* UnlockProgressBar; // 0x318(0x08)
	struct UTexture2D* Icon; // 0x320(0x08)
	struct FText Text; // 0x328(0x18)
	enum class EMistPlayerStat Stat; // 0x340(0x01)
	char pad_341[0x7]; // 0x341(0x07)
	struct UWidgetAnimation* Hover; // 0x348(0x08)
	char pad_350[0x18]; // 0x350(0x18)

	void IncreasePointsSpent(); // Function Mist.MistPlayerStatWidget.IncreasePointsSpent // (Final|Native|Public|BlueprintCallable) // @ game+0x1171530
	void HandleHoldProgress(float Progress); // Function Mist.MistPlayerStatWidget.HandleHoldProgress // (Final|Native|Private) // @ game+0x1171410
	void HandleAddButtonClicked(); // Function Mist.MistPlayerStatWidget.HandleAddButtonClicked // (Final|Native|Private) // @ game+0x1171370
	int32_t GetPointsSpent(); // Function Mist.MistPlayerStatWidget.GetPointsSpent // (Final|Native|Public|BlueprintCallable) // @ game+0x1171220
	void ClickedEvent__DelegateSignature(struct UMistPlayerStatWidget* Sender); // DelegateFunction Mist.MistPlayerStatWidget.ClickedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistPlayerThirstComponent
// Size: 0x1a0 (Inherited: 0x118)
struct UMistPlayerThirstComponent : UMistPlayerComponent {
	char pad_118[0x20]; // 0x118(0x20)
	struct FMulticastInlineDelegate OnThirstChanged; // 0x138(0x10)
	float MaxThirst; // 0x148(0x04)
	float ThirstDisplayThreshold; // 0x14c(0x04)
	float ThirstAutomaticQuenchThreshold; // 0x150(0x04)
	float ThirstIncreasePerSecond; // 0x154(0x04)
	float ThirstIncreasePerSecondDowned; // 0x158(0x04)
	float ThirstVelocityThreshold; // 0x15c(0x04)
	float StaminaDecreasePerSecond; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
	struct UDamageType* DamageType; // 0x168(0x08)
	float DamagePerSecond; // 0x170(0x04)
	float DamagePerSecondDowned; // 0x174(0x04)
	float StaminaThirstThreshold; // 0x178(0x04)
	float StaminaThirstIncrease; // 0x17c(0x04)
	struct TArray<struct FGroundThirstModifier> GroundTypeModifiers; // 0x180(0x10)
	char pad_190[0x10]; // 0x190(0x10)

	void ThirstChangedEvent__DelegateSignature(struct UMistPlayerThirstComponent* Sender, float Thirst, float PrevThirst); // DelegateFunction Mist.MistPlayerThirstComponent.ThirstChangedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void Quench(float Value); // Function Mist.MistPlayerThirstComponent.Quench // (Final|Native|Public|BlueprintCallable) // @ game+0x1171550
	void ClientSetThirst(int32_t Value); // Function Mist.MistPlayerThirstComponent.ClientSetThirst // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x116d1a0
	void CheckThirst(); // Function Mist.MistPlayerThirstComponent.CheckThirst // (Final|Native|Private) // @ game+0x1171020
};

// Class Mist.MistPlayerThrowingComponent
// Size: 0x178 (Inherited: 0x128)
struct UMistPlayerThrowingComponent : UMistPlayerEquipmentItemComponent {
	char pad_128[0x20]; // 0x128(0x20)
	struct FMulticastInlineDelegate TargetChanged; // 0x148(0x10)
	float ProjectileVelocityMod; // 0x158(0x04)
	enum class EMistPlayerThrowingState CurrentPlayerThrowingState; // 0x15c(0x01)
	char pad_15D[0x1b]; // 0x15d(0x1b)

	void ServerUnequipWeapon(); // Function Mist.MistPlayerThrowingComponent.ServerUnequipWeapon // (Final|Native|Public) // @ game+0x11774c0
	void ServerThrow(); // Function Mist.MistPlayerThrowingComponent.ServerThrow // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x1108c30
	void ServerStartThrowing(); // Function Mist.MistPlayerThrowingComponent.ServerStartThrowing // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c1e80
	void MulticastThrow(); // Function Mist.MistPlayerThrowingComponent.MulticastThrow // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10c2f70
	void MulticastStartThrowing(); // Function Mist.MistPlayerThrowingComponent.MulticastStartThrowing // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10cccf0
	void MulticastCancelThrowing(); // Function Mist.MistPlayerThrowingComponent.MulticastCancelThrowing // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10c2490
	enum class EMistPlayerThrowingState GetCurrentState(); // Function Mist.MistPlayerThrowingComponent.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11769f0
	void CancelThrowing(); // Function Mist.MistPlayerThrowingComponent.CancelThrowing // (Final|Native|Private) // @ game+0x1176460
};

// Class Mist.MistPlayerTombstone
// Size: 0x418 (Inherited: 0x3f0)
struct AMistPlayerTombstone : AMistBasePersistentActor {
	struct UMistClanOwnershipComponent* ClanOwnershipComponent; // 0x3f0(0x08)
	struct UMistMapIconProviderComponent* MapIconProviderComponent; // 0x3f8(0x08)
	struct FString DeadPlayerName; // 0x400(0x10)
	struct UMistMapIconComponent* LatestDeathIconClass; // 0x410(0x08)
};

// Class Mist.MistPlayerTradeStationComponent
// Size: 0x410 (Inherited: 0xf0)
struct UMistPlayerTradeStationComponent : UActorComponent {
	char pad_F0[0x168]; // 0xf0(0x168)
	struct TArray<struct UMistTradeStationClientOrder*> Orders; // 0x258(0x10)
	struct TArray<struct UMistTradeStationClientAuction*> Auctions; // 0x268(0x10)
	struct FMistTradeStationVaultContent VaultContent; // 0x278(0x10)
	char pad_288[0x8]; // 0x288(0x08)
	struct TArray<struct UMistTradeHistoryEntryObject*> TradeHistory; // 0x290(0x10)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	struct UMistTradeStationScreen* Screen; // 0x2b0(0x08)
	struct UMistTradeStationComponent* ActiveTradeStation; // 0x2b8(0x08)
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct TMap<struct FString, struct UMistTradeStationClientOrder*> OrdersLookup; // 0x2c8(0x50)
	struct TMap<struct FString, struct UMistTradeStationClientAuction*> AuctionsLookup; // 0x318(0x50)
	char pad_368[0x10]; // 0x368(0x10)
	struct FMistTradeStationSyncData SyncData; // 0x378(0x88)
	char pad_400[0x10]; // 0x400(0x10)

	void ServerWithdrawCurrency(struct UMistInteractableComponent* Atm, int32_t Amount); // Function Mist.MistPlayerTradeStationComponent.ServerWithdrawCurrency // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x116dcf0
	void ServerUpdateOrder(struct FMistTradeStationUpdateOrderActionData OrderAction); // Function Mist.MistPlayerTradeStationComponent.ServerUpdateOrder // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11774e0
	void ServerTakeTaxFromVault(); // Function Mist.MistPlayerTradeStationComponent.ServerTakeTaxFromVault // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c2540
	void ServerTakeMoneyFromVault(); // Function Mist.MistPlayerTradeStationComponent.ServerTakeMoneyFromVault // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c2f70
	void ServerTakeItemFromVault(struct FMistItem Item); // Function Mist.MistPlayerTradeStationComponent.ServerTakeItemFromVault // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1177430
	void ServerTakeFromVault(); // Function Mist.MistPlayerTradeStationComponent.ServerTakeFromVault // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c2490
	void ServerRequestSyncData(); // Function Mist.MistPlayerTradeStationComponent.ServerRequestSyncData // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x113b050
	void ServerPlaceBid(struct FString AuctionGuid, int32_t BidAmount); // Function Mist.MistPlayerTradeStationComponent.ServerPlaceBid // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1177350
	void ServerInitSyncData(); // Function Mist.MistPlayerTradeStationComponent.ServerInitSyncData // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x113ae60
	void ServerExecuteOrder(struct FMistTradeStationExecuteOrderActionData OrderAction); // Function Mist.MistPlayerTradeStationComponent.ServerExecuteOrder // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1177280
	void ServerDepositCurrency(struct UMistInteractableComponent* Atm, int32_t Amount); // Function Mist.MistPlayerTradeStationComponent.ServerDepositCurrency // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11771b0
	void ServerDeleteOrder(struct FMistTradeStationDeleteOrderActionData OrderAction); // Function Mist.MistPlayerTradeStationComponent.ServerDeleteOrder // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11770e0
	void ServerDeactivateTradingMode(); // Function Mist.MistPlayerTradeStationComponent.ServerDeactivateTradingMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11770c0
	void ServerClearHistory(); // Function Mist.MistPlayerTradeStationComponent.ServerClearHistory // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x108bfd0
	void ServerAddOrder(struct FMistTradeStationAddOrderActionData OrderAction); // Function Mist.MistPlayerTradeStationComponent.ServerAddOrder // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1177010
	void ServerActivateTradingMode(struct UMistTradeStationComponent* TradeStation); // Function Mist.MistPlayerTradeStationComponent.ServerActivateTradingMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x116e2b0
	void ClientSetTradeHistory(struct FMistTradePlayerHistory InTradeHistory); // Function Mist.MistPlayerTradeStationComponent.ClientSetTradeHistory // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1176920
	void ClientSendSyncData(struct FMistTradeStationSyncData InData, bool bInDataLeft); // Function Mist.MistPlayerTradeStationComponent.ClientSendSyncData // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11765c0
	void ClientHandleTradeStationActionResponse(struct FMistTradeStationActionResponse Response); // Function Mist.MistPlayerTradeStationComponent.ClientHandleTradeStationActionResponse // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1176520
};

// Class Mist.MistPlayerWorldTravelComponent
// Size: 0x200 (Inherited: 0x108)
struct UMistPlayerWorldTravelComponent : UMistPlayerStateComponent {
	char pad_108[0x48]; // 0x108(0x48)
	struct FMistWorldTravelOperation Operation; // 0x150(0x20)
	char pad_170[0x68]; // 0x170(0x68)
	struct AMistWorldTravelZonesManager* WorldTravelZonesManager; // 0x1d8(0x08)
	struct TArray<struct AMistWorldTravelZone*> Zones; // 0x1e0(0x10)
	char pad_1F0[0x10]; // 0x1f0(0x10)

	void ServerStartSafeLogOut(); // Function Mist.MistPlayerWorldTravelComponent.ServerStartSafeLogOut // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10b5db0
	void ServerPark(); // Function Mist.MistPlayerWorldTravelComponent.ServerPark // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10dc1c0
	void ServerChangeRespawnTile(int64_t TileId, int32_t Direction); // Function Mist.MistPlayerWorldTravelComponent.ServerChangeRespawnTile // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111ceb0
	void OnRep_Operation(); // Function Mist.MistPlayerWorldTravelComponent.OnRep_Operation // (Final|Native|Private) // @ game+0x1176f70
	void ClientSetOperation(struct FMistWorldTravelOperation InOperation); // Function Mist.MistPlayerWorldTravelComponent.ClientSetOperation // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1176870
	void ClientExecuteTravel(struct FString Server); // Function Mist.MistPlayerWorldTravelComponent.ClientExecuteTravel // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1176480
	void ClientClearOperation(); // Function Mist.MistPlayerWorldTravelComponent.ClientClearOperation // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10c2f70
};

// Class Mist.MistPoachingComponent
// Size: 0x150 (Inherited: 0xf0)
struct UMistPoachingComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	float ActivationTime; // 0x110(0x04)
	float PoachingRadius; // 0x114(0x04)
	struct FMistComponentReference TrackInteractionRef; // 0x118(0x28)
	float ActivationStartTime; // 0x140(0x04)
	bool bPoachingActive; // 0x144(0x01)
	char pad_145[0xb]; // 0x145(0x0b)

	void HandleTrackQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // Function Mist.MistPoachingComponent.HandleTrackQuery // (Final|Native|Private|HasOutParms) // @ game+0x1176bf0
	void HandleTrackInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistPoachingComponent.HandleTrackInteract // (Final|Native|Private|HasOutParms) // @ game+0x1176b10
};

// Class Mist.MistPoiSpawnComponent
// Size: 0x2c8 (Inherited: 0xf0)
struct UMistPoiSpawnComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	struct TSoftClassPtr<UObject> PoiSpawnInfoClass; // 0x110(0x28)
	struct TArray<struct FTransform> PotentialSpawnPositions; // 0x138(0x10)
	struct TArray<struct FMistObjectWaitingForRespawn> ObjectsWaitingForRespawn; // 0x148(0x10)
	struct TMap<struct FName, struct FMistSpawnPositionGroupData> SpawnPositionsData; // 0x158(0x50)
	struct TMap<struct AActor*, struct FMistRespawnableObjectEntry> RespawnableObjects; // 0x1a8(0x50)
	struct TMap<struct FName, struct FMistRespawnableGroupData> RespawnableGroups; // 0x1f8(0x50)
	struct UMistPoiSpawnInfo* SpawnInfoInstance; // 0x248(0x08)
	bool bAlreadySpawned; // 0x250(0x01)
	char pad_251[0x7]; // 0x251(0x07)
	struct FName GroupToVisualize; // 0x258(0x08)
	struct AActor* VisualizeActor; // 0x260(0x08)
	struct FLinearColor VisualizeColor; // 0x268(0x10)
	struct TMap<struct FName, struct FLinearColor> VisualizedActorsTinting; // 0x278(0x50)

	void HandleRespawnableObjectDestroyed(struct AActor* DestroyedObject); // Function Mist.MistPoiSpawnComponent.HandleRespawnableObjectDestroyed // (Final|Native|Private) // @ game+0x1176a90
	void HandleMigratingRespawnableObjectDestroyed(struct AActor* DestroyedObject); // Function Mist.MistPoiSpawnComponent.HandleMigratingRespawnableObjectDestroyed // (Final|Native|Private) // @ game+0x1176a10
};

// Class Mist.MistPoiSpawnInfo
// Size: 0x250 (Inherited: 0x30)
struct UMistPoiSpawnInfo : UPrimaryDataAsset {
	float ChanceToSpawnTradeStation; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct AActor* TradeStationClass; // 0x38(0x08)
	float ChanceToSpawnAncientCraftingSite; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct AActor* AncientCraftingSiteClass; // 0x48(0x08)
	float ChanceToSpawnPyramid; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct AActor* PyramidClass; // 0x58(0x08)
	struct TMap<struct AActor*, float> ArrayOfPoiToSpawn; // 0x60(0x50)
	struct TSoftObjectPtr<UProceduralFoliageSpawner> RespawnableObjectsFoliageSpawner; // 0xb0(0x28)
	struct TMap<struct AActor*, struct FRespawnableObjectSpawnInfo> RespawnableObjects; // 0xd8(0x50)
	struct TMap<struct FName, int32_t> RespawnableObjectsToSpawnPerGroup; // 0x128(0x50)
	struct TArray<struct FSpawnPositionGroupData> SpawnPositionGroupsData; // 0x178(0x10)
	struct TMap<struct FName, struct FMigratingRespawnGroupData> RespawnGroupsData; // 0x188(0x50)
	struct TArray<struct FAlwaysSpawningActorsData> AlwaysSpawningActors; // 0x1d8(0x10)
	struct TMap<struct AActor*, struct FName> SpawnPositionGroupForActor; // 0x1e8(0x50)
	struct AActor* TempSpawningActor; // 0x238(0x08)
	struct UFoliageInstancedStaticMeshComponent* TempFoliageComponent; // 0x240(0x08)
	float RespawnCheckInterval; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
};

// Class Mist.MistPoiSpawnPosition
// Size: 0x3c8 (Inherited: 0x3c0)
struct AMistPoiSpawnPosition : AActor {
	struct FName PositionGroup; // 0x3c0(0x08)
};

// Class Mist.MistPractise2Quest
// Size: 0x120 (Inherited: 0x110)
struct UMistPractise2Quest : UMistTutorialQuest {
	struct TArray<struct FBlockPractiseContunue> CombatPractise; // 0x110(0x10)

	void OnFirstBlock(); // Function Mist.MistPractise2Quest.OnFirstBlock // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void AnimTrackChange(struct FCombatAnimTrack AnimTack); // Function Mist.MistPractise2Quest.AnimTrackChange // (Final|Native|Private) // @ game+0x11762e0
};

// Class Mist.MistPractiseQuest
// Size: 0x120 (Inherited: 0x110)
struct UMistPractiseQuest : UMistTutorialQuest {
	struct TArray<struct FBlockPractise> CombatPractise; // 0x110(0x10)

	void AnimTrackChange(struct FCombatAnimTrack AnimTack); // Function Mist.MistPractiseQuest.AnimTrackChange // (Final|Native|Private) // @ game+0x11763a0
};

// Class Mist.MistPreparationQuest
// Size: 0x128 (Inherited: 0x110)
struct UMistPreparationQuest : UMistTutorialQuest {
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0x110(0x08)
	struct FName PackTaskName; // 0x118(0x08)
	struct FName UnpackTaskName; // 0x120(0x08)

	void UnpackBase(struct UMistPackingComponent* PackingComponent, struct AActor* PackedActor); // Function Mist.MistPreparationQuest.UnpackBase // (Final|Native|Protected|Const) // @ game+0x11775c0
	void PackBase(struct UMistPackingComponent* PackingComponent); // Function Mist.MistPreparationQuest.PackBase // (Final|Native|Protected|Const) // @ game+0x1176f90
	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistPreparationQuest.ItemBuilt // (Final|Native|Protected) // @ game+0x1176eb0
};

// Class Mist.MistRearmableTrapTriggerComponent
// Size: 0x258 (Inherited: 0x1f0)
struct UMistRearmableTrapTriggerComponent : UMistInteractableComponent {
	char pad_1F0[0x28]; // 0x1f0(0x28)
	struct FMulticastInlineDelegate OnTriggered; // 0x218(0x10)
	struct FMulticastInlineDelegate OnRearmed; // 0x228(0x10)
	struct FMulticastInlineDelegate OnDisarmed; // 0x238(0x10)
	bool bStartArmed; // 0x248(0x01)
	bool bCanBeRearmed; // 0x249(0x01)
	bool bCanBeDisarmed; // 0x24a(0x01)
	bool bArmed; // 0x24b(0x01)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct AMistPlayer* ArmedByPlayer; // 0x250(0x08)

	void OnRep_bArmed(); // Function Mist.MistRearmableTrapTriggerComponent.OnRep_bArmed // (Native|Protected) // @ game+0x10c2f70
	void MulticastTrigger(struct AActor* InActor, struct AMistCharacter* InInstigator); // Function Mist.MistRearmableTrapTriggerComponent.MulticastTrigger // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x1187260
	void MulticastRearm(struct AMistCharacter* InInstigator); // Function Mist.MistRearmableTrapTriggerComponent.MulticastRearm // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10aba30
	void MulticastDisarm(struct AMistCharacter* InInstigator); // Function Mist.MistRearmableTrapTriggerComponent.MulticastDisarm // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11593e0
	void HandlePlaceableConstructed(struct FTransform& Transform, int32_t ItemIndex, struct AMistPlayer* Player); // Function Mist.MistRearmableTrapTriggerComponent.HandlePlaceableConstructed // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x1186f80
};

// Class Mist.MistPressurePlateComponent
// Size: 0x300 (Inherited: 0x258)
struct UMistPressurePlateComponent : UMistRearmableTrapTriggerComponent {
	struct FMulticastInlineDelegate OnPressed; // 0x258(0x10)
	struct FMulticastInlineDelegate OnDepressed; // 0x268(0x10)
	struct FMistComponentReference TriggerComponentRef; // 0x278(0x28)
	struct TSet<struct AActor*> CanBeTriggeredByClasses; // 0x2a0(0x50)
	int32_t PressedCount; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct UPrimitiveComponent* CachedTriggerComponent; // 0x2f8(0x08)

	void MistPressurePlateEvent__DelegateSignature(); // DelegateFunction Mist.MistPressurePlateComponent.MistPressurePlateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistPressurePlateComponent.HandleEndTrigger // (Final|Native|Private) // @ game+0x117ae70
	void HandleBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistPressurePlateComponent.HandleBeginTrigger // (Final|Native|Private) // @ game+0x117a930
};

// Class Mist.MistPriceDetailsWidget
// Size: 0x340 (Inherited: 0x2c0)
struct UMistPriceDetailsWidget : UMistUIWidget {
	struct UTextBlock* TextWidget; // 0x2c0(0x08)
	struct UTextBlock* ValueWidget; // 0x2c8(0x08)
	struct FSlateColor EnoughMoneyColor; // 0x2d0(0x28)
	struct FSlateColor NotEnoughMoneyColor; // 0x2f8(0x28)
	struct FText DisplayedText; // 0x320(0x18)
	int32_t DisplayedValue; // 0x338(0x04)
	char pad_33C[0x4]; // 0x33c(0x04)
};

// Class Mist.MistProgressBar
// Size: 0x320 (Inherited: 0x318)
struct UMistProgressBar : UProgressBar {
	struct FMistProgressBarStyle ProgressBarStyle; // 0x318(0x08)
};

// Class Mist.MistProjectileBurningItem
// Size: 0x268 (Inherited: 0x250)
struct UMistProjectileBurningItem : UMistProjectileItemTemplate {
	struct FMistWeaponDamage BurningDamage; // 0x250(0x10)
	float DamageDuration; // 0x260(0x04)
	int32_t DamageIterations; // 0x264(0x04)
};

// Class Mist.MistProjectileBurningComponent
// Size: 0x1c0 (Inherited: 0xf0)
struct UMistProjectileBurningComponent : UActorComponent {
	bool bIsBurning; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct UDamageType* AreaDamageType; // 0xf8(0x08)
	struct FMistComponentReference FireLocationRef; // 0x100(0x28)
	char pad_128[0x88]; // 0x128(0x88)
	int32_t IterationCount; // 0x1b0(0x04)
	char pad_1B4[0x4]; // 0x1b4(0x04)
	struct FTimerHandle BurnTimerHandle; // 0x1b8(0x08)

	void HandleProjectileImpact(struct AMistProjectile* Projectile, struct FHitResult& ImpactResult, struct FVector& ImpactVelocity); // Function Mist.MistProjectileBurningComponent.HandleProjectileImpact // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x117b830
};

// Class Mist.MistProjectileItemDetailsWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UMistProjectileItemDetailsWidget : UMistItemDetailsWidget {
	struct UWidget* DamageBoxWidget; // 0x2e0(0x08)
	struct UTextBlock* DamageWidget; // 0x2e8(0x08)
	struct UMistDamageTypeWidget* DamageTypeWidget; // 0x2f0(0x08)
	struct UMistMaterialProtectionWidget* MaterialProtectionWidget; // 0x2f8(0x08)
};

// Class Mist.MistProjectileItemInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistProjectileItemInterface : UInterface {
};

// Class Mist.MistProjectorComponent
// Size: 0x330 (Inherited: 0x1f0)
struct UMistProjectorComponent : UMistInteractableComponent {
	struct TArray<struct FMistComponentReference> SlideSlotComponents; // 0x1f0(0x10)
	struct TArray<struct FMistComponentReference> SlideInteractionComponents; // 0x200(0x10)
	struct FMistComponentReference BrazierFuelCraftingComponent; // 0x210(0x28)
	float SecondsToWork; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct FMistComponentReference DisplayEntries[0x2]; // 0x240(0x50)
	struct FProjectorLensState LensStatus[0x2]; // 0x290(0x60)
	struct FMulticastInlineDelegate OnContainerStateChanged; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnProjectorFinished; // 0x300(0x10)
	float WorkStartTime; // 0x310(0x04)
	char pad_314[0x14]; // 0x314(0x14)
	struct AMistPlayer* OperatingPlayer; // 0x328(0x08)

	void SetUnchargingStatus(bool Uncharging); // Function Mist.MistProjectorComponent.SetUnchargingStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x117c260
	void MistProjectorFinishedEvent__DelegateSignature(); // DelegateFunction Mist.MistProjectorComponent.MistProjectorFinishedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MistProjectorContainerEvent__DelegateSignature(struct UMistContainerComponent* UpdatedContainer, bool IsFull); // DelegateFunction Mist.MistProjectorComponent.MistProjectorContainerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleSlideFinished(); // Function Mist.MistProjectorComponent.HandleSlideFinished // (Final|Native|Private) // @ game+0x117bc70
	void HandleQueryPartsInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& InOutProperties, struct FMistInteractionQuery& InOutQuery); // Function Mist.MistProjectorComponent.HandleQueryPartsInteraction // (Final|Native|Private|HasOutParms) // @ game+0x117b9b0
	void HandleLensInteracted(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistProjectorComponent.HandleLensInteracted // (Final|Native|Private|HasOutParms) // @ game+0x117b120
	void HandleContainerSlotUpdate(struct UMistContainerComponent* UpdatedContainer, int32_t SlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistProjectorComponent.HandleContainerSlotUpdate // (Final|Native|Private) // @ game+0x117ad70
	float GetTimePlaying(); // Function Mist.MistProjectorComponent.GetTimePlaying // (Final|Native|Public|BlueprintCallable) // @ game+0x117a880
	enum class EMistProjectorLensPosition GetLensStatus(enum class EMistProjectorLensId LensId); // Function Mist.MistProjectorComponent.GetLensStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x117a7d0
	void FinishPlaying(); // Function Mist.MistProjectorComponent.FinishPlaying // (Final|Native|Private) // @ game+0x117a7b0
};

// Class Mist.MistProjectorScreenComponent
// Size: 0x860 (Inherited: 0x850)
struct UMistProjectorScreenComponent : UStaticMeshComponent {
	char pad_850[0x8]; // 0x850(0x08)
	struct UMediaPlayer* MediaPlayer; // 0x858(0x08)

	void HandleOnEndReached(); // Function Mist.MistProjectorScreenComponent.HandleOnEndReached // (Final|Native|Private) // @ game+0x117b5b0
};

// Class Mist.MistProjectorSlideItemTemplate
// Size: 0x200 (Inherited: 0x1e0)
struct UMistProjectorSlideItemTemplate : UMistKnowledgeItemTemplate {
	struct UMistItemTemplate* GrantedLoreItem; // 0x1e0(0x08)
	int32_t GrantedExp; // 0x1e8(0x04)
	enum class EMistProjectorType ProjectorType; // 0x1ec(0x01)
	char pad_1ED[0x3]; // 0x1ed(0x03)
	struct FName SlideType; // 0x1f0(0x08)
	struct UFileMediaSource* MovieSource; // 0x1f8(0x08)
};

// Class Mist.MistPropHealthComponent
// Size: 0x150 (Inherited: 0x138)
struct UMistPropHealthComponent : UMistHealthComponent {
	struct FMulticastInlineDelegate OnDestroy; // 0x138(0x10)
	bool bCanBeDestroyed; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
};

// Class Mist.MistProtectionQuest
// Size: 0x160 (Inherited: 0x110)
struct UMistProtectionQuest : UMistTutorialQuest {
	struct TMap<struct UMistPlaceableTemplate*, struct FName> Placeable; // 0x110(0x50)

	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistProtectionQuest.ItemBuilt // (Final|Native|Private) // @ game+0x117c070
};

// Class Mist.MistPumpWalkerComponent
// Size: 0x388 (Inherited: 0xf0)
struct UMistPumpWalkerComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	enum class EPumpWalkerState PumpWalkerState; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct FMulticastInlineDelegate OnPumpWalkerStateChanged; // 0x118(0x10)
	float ExtendingPumpTime; // 0x128(0x04)
	float RetractingPumpTime; // 0x12c(0x04)
	float RetractedPumpHeight; // 0x130(0x04)
	float ExtendedPumpHeight; // 0x134(0x04)
	float PumpLocationX; // 0x138(0x04)
	float PumpLocationY; // 0x13c(0x04)
	float RotationSpeed; // 0x140(0x04)
	float ExtendPumpMovementTolerance; // 0x144(0x04)
	struct FText InteractionTextExtendPump; // 0x148(0x18)
	struct FText InteractionTextRetractPump; // 0x160(0x18)
	struct FText InteractionTextWalkerIsMoving; // 0x178(0x18)
	struct TMap<struct UMistItemTemplate*, struct FPumpingData> PumpSourceData; // 0x190(0x50)
	float TorquePumpingCost; // 0x1e0(0x04)
	char pad_1E4[0x4]; // 0x1e4(0x04)
	struct FMistComponentReference ModeSwitchInteractable; // 0x1e8(0x28)
	struct FMistComponentReference DriveInteractable; // 0x210(0x28)
	struct FMistComponentReference MannedWalkerControl; // 0x238(0x28)
	struct FMistComponentReference PumpComponent; // 0x260(0x28)
	struct FMistComponentReference FirstRotatingComponent; // 0x288(0x28)
	struct FMistComponentReference SecondRotatingComponent; // 0x2b0(0x28)
	struct FMistComponentReference LiquidsContainerComponent; // 0x2d8(0x28)
	struct FMistComponentReference TorqueContainerComponent; // 0x300(0x28)
	char pad_328[0x8]; // 0x328(0x08)
	struct UMistWalkerWaterContainerComponent* LiquidsContainer; // 0x330(0x08)
	struct UMistTorqueContainerComponent* TorqueContainer; // 0x338(0x08)
	float InterProgress; // 0x340(0x04)
	char pad_344[0x14]; // 0x344(0x14)
	struct FPumpingData CurrentPumpingData; // 0x358(0x0c)
	char pad_364[0x4]; // 0x364(0x04)
	struct UPrimitiveComponent* Pump; // 0x368(0x08)
	struct TArray<struct UPrimitiveComponent*> RotatingComponents; // 0x370(0x10)
	char pad_380[0x8]; // 0x380(0x08)

	void PumpWalkerStateChanged__DelegateSignature(enum class EPumpWalkerState NewState); // DelegateFunction Mist.MistPumpWalkerComponent.PumpWalkerStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_PumpWalkerState(); // Function Mist.MistPumpWalkerComponent.OnRep_PumpWalkerState // (Final|Native|Private) // @ game+0x117c240
	void MulticastPumpWalkerStateChanged(enum class EPumpWalkerState NewState); // Function Mist.MistPumpWalkerComponent.MulticastPumpWalkerStateChanged // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d17f0
	void HandleWalkerLegTookDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistPumpWalkerComponent.HandleWalkerLegTookDamage // (Final|Native|Private|HasOutParms) // @ game+0x117bef0
	void HandleModeSwitchQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // Function Mist.MistPumpWalkerComponent.HandleModeSwitchQuery // (Native|Protected|HasOutParms) // @ game+0x117b2e0
	void HandleModeSwitchInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistPumpWalkerComponent.HandleModeSwitchInteract // (Final|Native|Private|HasOutParms) // @ game+0x117b200
	void HandleComponentEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistPumpWalkerComponent.HandleComponentEndTrigger // (Final|Native|Private) // @ game+0x117acb0
	void HandleComponentEndComponentTrigger(struct UPrimitiveComponent* TriggerComponent, struct UPrimitiveComponent* OtherComponent, int32_t BodyIndex); // Function Mist.MistPumpWalkerComponent.HandleComponentEndComponentTrigger // (Final|Native|Private) // @ game+0x117abb0
	void HandleComponentDestroyed(struct UActorComponent* DestroyedComponent); // Function Mist.MistPumpWalkerComponent.HandleComponentDestroyed // (Final|Native|Private) // @ game+0x117a8b0
	void HandleComponentBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistPumpWalkerComponent.HandleComponentBeginTrigger // (Final|Native|Private) // @ game+0x117aaf0
	void HandleComponentBeginComponentTrigger(struct UPrimitiveComponent* TriggerComponent, struct UPrimitiveComponent* OtherComponent, int32_t BodyIndex); // Function Mist.MistPumpWalkerComponent.HandleComponentBeginComponentTrigger // (Final|Native|Private) // @ game+0x117a9f0
	void HandleActorDestroyed(struct AActor* DestroyedActor); // Function Mist.MistPumpWalkerComponent.HandleActorDestroyed // (Final|Native|Private) // @ game+0x117a8b0
	enum class EPumpWalkerState GetPumpWalkerState(); // Function Mist.MistPumpWalkerComponent.GetPumpWalkerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x117a860
};

// Class Mist.MistQualityTrackingComponent
// Size: 0x180 (Inherited: 0xf0)
struct UMistQualityTrackingComponent : UActorComponent {
	struct FMistComponentReference CraftingStationRef; // 0xf0(0x28)
	struct TArray<struct FQualityTrackingRecipe> QualityTrackingRecipes; // 0x118(0x10)
	struct TMap<struct UMistItemTemplate*, struct FName> FuelTypeToFoliageGroup; // 0x128(0x50)
	struct UParticleSystem* TrackingFailureParticle; // 0x178(0x08)

	void OnItemCrafted(struct UMistCraftingStationComponent* CraftingStation, struct FMistCraftingQueueItem& CraftingItem); // Function Mist.MistQualityTrackingComponent.OnItemCrafted // (Final|Native|Public|HasOutParms) // @ game+0x1180d80
	void MulticastTrackingSuccess(struct FVector DirectionVector, char TrackingId); // Function Mist.MistQualityTrackingComponent.MulticastTrackingSuccess // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x1180cc0
	void MulticastTrackingFailure(); // Function Mist.MistQualityTrackingComponent.MulticastTrackingFailure // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x108bfd0
};

// Class Mist.MistQuarryComponent
// Size: 0x290 (Inherited: 0x1f0)
struct UMistQuarryComponent : UMistInteractableComponent {
	char pad_1F0[0x40]; // 0x1f0(0x40)
	float InfluanceRadius; // 0x230(0x04)
	float TimeStep; // 0x234(0x04)
	int32_t TorqueItemCost; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct UDamageType* DamageType; // 0x240(0x08)
	struct TArray<struct FMistToolTier> ToolTiers; // 0x248(0x10)
	bool bIsQuarring; // 0x258(0x01)
	char pad_259[0x7]; // 0x259(0x07)
	struct TArray<struct UMistContainerComponent*> OutputContainers; // 0x260(0x10)
	struct UMistTorqueContainerComponent* TorqueContainer; // 0x270(0x08)
	char pad_278[0x18]; // 0x278(0x18)

	void OnRep_IsQuarring(); // Function Mist.MistQuarryComponent.OnRep_IsQuarring // (Final|Native|Private) // @ game+0x1180fb0
};

// Class Mist.MistQuestEntryWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistQuestEntryWidget : UMistBaseQuestEntryWidget {
	struct UTextBlock* ActionWidget; // 0x2e0(0x08)
	struct UTextBlock* TargetWidget; // 0x2e8(0x08)
};

// Class Mist.MistQuestsSelectionItemWidget
// Size: 0x370 (Inherited: 0x2c0)
struct UMistQuestsSelectionItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct TMap<enum class EFlotillaQuestDifficulty, struct FSlateBrush> DifficultyIcons; // 0x2c8(0x50)
	struct UImage* DifficultyIconWidget; // 0x318(0x08)
	struct UTextBlock* QuestTitleWidget; // 0x320(0x08)
	struct UTextBlock* RewardTextWidget; // 0x328(0x08)
	struct UTextBlock* IcRewardTextWidget; // 0x330(0x08)
	struct UButton* TakeQuestButtonWidget; // 0x338(0x08)
	struct UTextBlock* TakeQuestTextWidget; // 0x340(0x08)
	struct UTextBlock* DifficultyTextWidget; // 0x348(0x08)
	struct UVerticalBox* SubtaskEntriesWidget; // 0x350(0x08)
	struct UBorder* BorderWidget; // 0x358(0x08)
	struct UMistFlotillaQuest* FlotillaQuest; // 0x360(0x08)
	bool bCurrentQuest; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)

	void HandleTakeQuestButtonClicked(); // Function Mist.MistQuestsSelectionItemWidget.HandleTakeQuestButtonClicked // (Final|Native|Private) // @ game+0x1180ca0
};

// Class Mist.MistQuestsSelectionWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistQuestsSelectionWidget : UMistUIWidget {
	struct UListView* ListWidget; // 0x2c0(0x08)
	struct UMistTradeStationQuestsWidget* ParentWidget; // 0x2c8(0x08)
};

// Class Mist.MistQuickSlotBarWidget
// Size: 0x408 (Inherited: 0x2e0)
struct UMistQuickSlotBarWidget : UMistHUDWidget {
	struct FSlateSound QuicSlotUpdateSound; // 0x2e0(0x18)
	struct UMistQuickSlotWidget* WeaponLeftWidget; // 0x2f8(0x08)
	struct UMistQuickSlotWidget* WeaponRightWidget; // 0x300(0x08)
	struct UMistQuickSlotWidget* Slot0Widget; // 0x308(0x08)
	struct UMistQuickSlotWidget* Slot1Widget; // 0x310(0x08)
	struct UMistQuickSlotWidget* Slot2Widget; // 0x318(0x08)
	struct UMistQuickSlotWidget* Slot3Widget; // 0x320(0x08)
	struct UMistQuickSlotWidget* Slot4Widget; // 0x328(0x08)
	struct UMistQuickSlotWidget* Slot5Widget; // 0x330(0x08)
	struct UMistQuickSlotWidget* Slot6Widget; // 0x338(0x08)
	struct UVerticalBox* GamepadNextItemBindingHintWidgetContainer; // 0x340(0x08)
	struct UVerticalBox* GamepadPreviousItemBindingHintWidgetContainer; // 0x348(0x08)
	struct UHorizontalBox* NextItemInputModifierWidget; // 0x350(0x08)
	struct UHorizontalBox* PreviousItemInputModifierWidget; // 0x358(0x08)
	float EquipSlotDelay; // 0x360(0x04)
	char pad_364[0xc]; // 0x364(0x0c)
	struct TMap<enum class EEquipmentSlot, struct UMistQuickSlotWidget*> EquipmentSlotWidgets; // 0x370(0x50)
	struct UMistQuickSlotWidget* QuickSlotWidgets[0x7]; // 0x3c0(0x38)
	char pad_3F8[0x10]; // 0x3f8(0x10)

	void OnWieldingStatusChanged(enum class EEquipmentSlot Status); // Function Mist.MistQuickSlotBarWidget.OnWieldingStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnPlayerMannedComponentChanged(struct UMistMannedControlComponent* NewMannedComponent); // Function Mist.MistQuickSlotBarWidget.OnPlayerMannedComponentChanged // (Final|Native|Private) // @ game+0x1180eb0
	void HandleEquipmentSlotUpdate(struct UMistEquipmentComponent* Sender, enum class EEquipmentSlot InSlot); // Function Mist.MistQuickSlotBarWidget.HandleEquipmentSlotUpdate // (Final|Native|Private) // @ game+0x1180a80
};

// Class Mist.MistQuickSlotWidget
// Size: 0x4e8 (Inherited: 0x4d8)
struct UMistQuickSlotWidget : UMistItemSlotWidget {
	struct UMistInputBindingHintWidget* BindingHintWidget; // 0x4d8(0x08)
	char pad_4E0[0x8]; // 0x4e0(0x08)

	void OnSelected(); // Function Mist.MistQuickSlotWidget.OnSelected // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnDeSelected(); // Function Mist.MistQuickSlotWidget.OnDeSelected // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistRandomizedItem
// Size: 0x1e8 (Inherited: 0x1d8)
struct UMistRandomizedItem : UMistItemTemplate {
	struct TArray<struct FMistRandomizedItemEntry> Data; // 0x1d8(0x10)
};

// Class Mist.MistRangedBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistRangedBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistRoamingMobController
// Size: 0x638 (Inherited: 0x600)
struct AMistRoamingMobController : AMistHumanoidMobController {
	float StrengthRatioToAttackAlone; // 0x600(0x04)
	float GroupStrengthMultiplier; // 0x604(0x04)
	float StrengthRatioToRunAway; // 0x608(0x04)
	float ShortDistanceStrengthMultiplier; // 0x60c(0x04)
	float MediumDistance; // 0x610(0x04)
	float LongDistanceStrengthMultiplier; // 0x614(0x04)
	float FightTimeoutWithoutHits; // 0x618(0x04)
	float TimeToIgnoreTargetAfterGivingUp; // 0x61c(0x04)
	float DistanceToGiveUpFight; // 0x620(0x04)
	float RoamingRadius; // 0x624(0x04)
	char pad_628[0x10]; // 0x628(0x10)
};

// Class Mist.MistRangedRupuController
// Size: 0x648 (Inherited: 0x638)
struct AMistRangedRupuController : AMistRoamingMobController {
	float RangedAttackStartDistance; // 0x638(0x04)
	float MeleeToRangedSwitchDistance; // 0x63c(0x04)
	char pad_640[0x8]; // 0x640(0x08)
};

// Class Mist.MistRangedWeaponCrosshairWidget
// Size: 0x308 (Inherited: 0x2e0)
struct UMistRangedWeaponCrosshairWidget : UMistHUDWidget {
	struct UImage* HitMarkerWidget; // 0x2e0(0x08)
	struct UWidgetAnimation* HitMarkerAnim; // 0x2e8(0x08)
	char pad_2F0[0x10]; // 0x2f0(0x10)
	struct UMistMannedGimbalControlComponent* CachedGimbalControlComponent; // 0x300(0x08)

	void HandleProjectileImpact(struct FHitResult& HitResult); // Function Mist.MistRangedWeaponCrosshairWidget.HandleProjectileImpact // (Final|Native|Private|HasOutParms) // @ game+0x1180bc0
	void HandleMannedComponentChanged(struct UMistMannedControlComponent* NewControlComponent); // Function Mist.MistRangedWeaponCrosshairWidget.HandleMannedComponentChanged // (Final|Native|Private) // @ game+0x1180b40
	void HandleBallistaStateChanged(struct UMistMannedBallistaControlComponent* BallistaControlComponent, enum class EMistBallistaState PrevState, enum class EMistBallistaState NewState); // Function Mist.MistRangedWeaponCrosshairWidget.HandleBallistaStateChanged // (Final|Native|Private) // @ game+0x1180920
};

// Class Mist.MistRangefinderAnimInstance
// Size: 0x290 (Inherited: 0x280)
struct UMistRangefinderAnimInstance : UMistMannedControlAnimInstance {
	float YawRotationSpeed; // 0x278(0x04)
	float ZoomLevel; // 0x27c(0x04)
	float PitchRotation; // 0x280(0x04)
	float ZoomSpeed; // 0x284(0x04)
};

// Class Mist.MistRangefinderControlComponent
// Size: 0x608 (Inherited: 0x598)
struct UMistRangefinderControlComponent : UMistMannedGimbalControlComponent {
	float MinimumFOV; // 0x598(0x04)
	float MaximumFOV; // 0x59c(0x04)
	float FOVChangeSpeed; // 0x5a0(0x04)
	float MaximumWaypointPlacementRange; // 0x5a4(0x04)
	struct FMistComponentReference CameraCompRef; // 0x5a8(0x28)
	char pad_5D0[0x8]; // 0x5d0(0x08)
	struct FMulticastInlineDelegate OnZoomIn; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnZoomOut; // 0x5e8(0x10)
	float CurrentFOV; // 0x5f8(0x04)
	float TargetFOV; // 0x5fc(0x04)
	float ZoomDirection; // 0x600(0x04)
	char pad_604[0x4]; // 0x604(0x04)

	void ServerSetTargetFOV(float InValue); // Function Mist.MistRangefinderControlComponent.ServerSetTargetFOV // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10c1e00
	void OnRep_CurrentFOV(float PrevFOV); // Function Mist.MistRangefinderControlComponent.OnRep_CurrentFOV // (Final|Native|Private) // @ game+0x1180f30
	void MistRangefinderZoomEvent__DelegateSignature(); // DelegateFunction Mist.MistRangefinderControlComponent.MistRangefinderZoomEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistRateLimitedQueue
// Size: 0x50 (Inherited: 0x28)
struct UMistRateLimitedQueue : UObject {
	float DrainInterval; // 0x28(0x04)
	char pad_2C[0x24]; // 0x2c(0x24)

	void DrainQueue(); // Function Mist.MistRateLimitedQueue.DrainQueue // (Final|Native|Private) // @ game+0x11808c0
};

// Class Mist.MistReachedLevelMessageLogContentWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistReachedLevelMessageLogContentWidget : UMistMessageLogContentWidget {
	struct URichTextBlock* TextWidget; // 0x2c0(0x08)
	struct UMistIntMessageData* Data; // 0x2c8(0x08)
};

// Class Mist.MistRealmMapClaimHoverButton
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistRealmMapClaimHoverButton : UMistUIWidget {
	struct UPanelWidget* UnclaimedPanel; // 0x2c0(0x08)
	struct UPanelWidget* ClaimedPanel; // 0x2c8(0x08)
	struct UImage* ColoredWidget; // 0x2d0(0x08)
	struct UMistRealmMapTileClaimWidget* ClaimTooltipWidget; // 0x2d8(0x08)
	struct UMistRealmMapTileData* Data; // 0x2e0(0x08)

	void HandleDataTileClaimUpdated(); // Function Mist.MistRealmMapClaimHoverButton.HandleDataTileClaimUpdated // (Final|Native|Private) // @ game+0x1180a60
};

// Class Mist.MistRealmMapTileClaimData
// Size: 0x80 (Inherited: 0x28)
struct UMistRealmMapTileClaimData : UObject {
	char pad_28[0x58]; // 0x28(0x58)
};

// Class Mist.MistRealmMapTileParkedWalkerData
// Size: 0xd0 (Inherited: 0x28)
struct UMistRealmMapTileParkedWalkerData : UObject {
	char pad_28[0x30]; // 0x28(0x30)
	struct UTexture2D* Icon; // 0x58(0x08)
	char pad_60[0x70]; // 0x60(0x70)
};

// Class Mist.MistRealmMapTileTradeStationOrderData
// Size: 0x60 (Inherited: 0x28)
struct UMistRealmMapTileTradeStationOrderData : UObject {
	struct UMistItemTemplate* ItemTemplate; // 0x28(0x08)
	char pad_30[0x30]; // 0x30(0x30)
};

// Class Mist.MistRealmMapTileTradeStationsData
// Size: 0xe0 (Inherited: 0x28)
struct UMistRealmMapTileTradeStationsData : UObject {
	char pad_28[0xa8]; // 0x28(0xa8)
	struct TArray<struct UMistRealmMapTileTradeStationOrderData*> Orders; // 0xd0(0x10)
};

// Class Mist.MistRealmMapTileData
// Size: 0x128 (Inherited: 0x28)
struct UMistRealmMapTileData : UObject {
	char pad_28[0x80]; // 0x28(0x80)
	struct UMistRealmMapTileTradeStationsData* TradeStations; // 0xa8(0x08)
	struct TArray<struct UMistRealmMapTileParkedWalkerData*> ParkedWalkers; // 0xb0(0x10)
	struct UMistRealmMapTileClaimData* Claim; // 0xc0(0x08)
	char pad_C8[0x60]; // 0xc8(0x60)
};

// Class Mist.MistRealmMapData
// Size: 0x8c0 (Inherited: 0x28)
struct UMistRealmMapData : UObject {
	char pad_28[0xa8]; // 0x28(0xa8)
	struct TArray<struct UMistRealmMapTileData*> Tiles; // 0xd0(0x10)
	struct TMap<struct FIntPoint, struct UMistRealmMapTileData*> ClaimedTiles; // 0xe0(0x50)
	struct TArray<struct UMistRealmMapTileData*> TilesByClaimAge; // 0x130(0x10)
	struct TArray<struct UMistRealmMapTileParkedWalkerData*> ParkedWalkers; // 0x140(0x10)
	char pad_150[0xf0]; // 0x150(0xf0)
	struct TMap<int64_t, struct UMistRealmMapTileData*> TilesLookupById; // 0x240(0x50)
	struct TMap<struct FIntPoint, struct UMistRealmMapTileData*> TilesLookupByOffsetCoord; // 0x290(0x50)
	struct TMap<struct FIntVector, struct UMistRealmMapTileData*> TilesLookupByCubeCoord; // 0x2e0(0x50)
	struct TMap<int64_t, struct UMistRealmMapTileParkedWalkerData*> ParkedWalkersLookupById; // 0x330(0x50)
	char pad_380[0x540]; // 0x380(0x540)
};

// Class Mist.MistRealmMapDataManager
// Size: 0xd8 (Inherited: 0x28)
struct UMistRealmMapDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct TMap<int64_t, struct UMistRealmMapData*> DataItems; // 0x30(0x50)
	char pad_80[0x58]; // 0x80(0x58)
};

// Class Mist.MistRealmMapLayersEmptyWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistRealmMapLayersEmptyWidget : UMistUIWidget {
	struct UMaterialInterface* MapRenderMaterial; // 0x2c0(0x08)
	struct UImage* MapImageWidget; // 0x2c8(0x08)
	struct AMistInGameRenderActor* InGameRenderClass; // 0x2d0(0x08)
	struct AMistInGameRenderActor* InGameRender; // 0x2d8(0x08)
	struct UMistRealmMapWidget* Parent; // 0x2e0(0x08)
	struct UMistDraggableContentWidget* Draggable; // 0x2e8(0x08)
	struct UMaterialInstanceDynamic* MapMaterialInstance; // 0x2f0(0x08)
	struct FMistRealmMapPath Path; // 0x2f8(0x20)
};

// Class Mist.MistRealmMapLayersPathCostWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistRealmMapLayersPathCostWidget : UMistUIWidget {
	struct UTextBlock* CostTextWidget; // 0x2c0(0x08)
	struct FSlateColor ValidColor; // 0x2c8(0x28)
	struct FSlateColor InvalidColor; // 0x2f0(0x28)
	char pad_318[0x8]; // 0x318(0x08)
};

// Class Mist.MistRealmMapLayersTilePlayerOverlayWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistRealmMapLayersTilePlayerOverlayWidget : UMistUIWidget {
	struct UImage* BorderImageWidget; // 0x2c0(0x08)
	struct UWidgetAnimation* BorderAnimation; // 0x2c8(0x08)
	struct UWidgetAnimation* HighlightAnimation; // 0x2d0(0x08)
	struct UMaterialInterface* HexagonTriangleMaterialType; // 0x2d8(0x08)
	struct UMistRealmMapWidget* Parent; // 0x2e0(0x08)
	struct TWeakObjectPtr<struct UMaterialInstanceDynamic> BorderMaterialInstance; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	void HandleBorderAnimationFinished(); // Function Mist.MistRealmMapLayersTilePlayerOverlayWidget.HandleBorderAnimationFinished // (Final|Native|Private) // @ game+0x1180a20
};

// Class Mist.MistRealmMapLayersTileWidget
// Size: 0x4d0 (Inherited: 0x2c0)
struct UMistRealmMapLayersTileWidget : UMistUIWidget {
	struct UCanvasPanel* ContainerWidget; // 0x2c0(0x08)
	struct UImage* TileImageWidget; // 0x2c8(0x08)
	struct UImage* TileBorderImageWidget; // 0x2d0(0x08)
	struct UImage* TileSelectedBorderImageWidget; // 0x2d8(0x08)
	struct UPanelWidget* HasWalkerOverlayWidget; // 0x2e0(0x08)
	struct UPanelWidget* HasRestrictionsOverlayWidget; // 0x2e8(0x08)
	struct UWidgetAnimation* BorderAnimation; // 0x2f0(0x08)
	struct UMaterialInterface* HexagonTriangleMaterialType; // 0x2f8(0x08)
	struct FSlateBrush TileBorderStyleStateNone; // 0x300(0x88)
	struct FSlateBrush TileBorderStyleStateValid; // 0x388(0x88)
	struct FSlateBrush TileBorderStyleStateInvalid; // 0x410(0x88)
	struct UMistRealmMapWidget* Parent; // 0x498(0x08)
	struct UMistRealmMapTileData* Data; // 0x4a0(0x08)
	struct UMistRealmMapTileData* PlayerTileData; // 0x4a8(0x08)
	struct UMistRealmMapLayersTilePlayerOverlayWidget* HasPlayerOverlayWidget; // 0x4b0(0x08)
	struct TWeakObjectPtr<struct UMaterialInstanceDynamic> SelectedBorderMaterialInstance; // 0x4b8(0x08)
	char pad_4C0[0x10]; // 0x4c0(0x10)

	void HandleBorderAnimationFinished(); // Function Mist.MistRealmMapLayersTileWidget.HandleBorderAnimationFinished // (Final|Native|Private) // @ game+0x1180a40
};

// Class Mist.MistRealmMapLayersWidget
// Size: 0x370 (Inherited: 0x2c0)
struct UMistRealmMapLayersWidget : UMistUIWidget {
	struct UMistDraggableContentWidget* DraggableLayersWidget; // 0x2c0(0x08)
	struct UCanvasPanel* LayersWidget; // 0x2c8(0x08)
	struct UMistRealmMapLayersEmptyWidget* EmptyLayerWidget; // 0x2d0(0x08)
	struct UCanvasPanel* TilesLayerWidget; // 0x2d8(0x08)
	struct UCanvasPanel* OverlaysLayerWidget; // 0x2e0(0x08)
	float TileEdgeSelectTime; // 0x2e8(0x04)
	char pad_2EC[0xc]; // 0x2ec(0x0c)
	struct UMistRealmMapData* Data; // 0x2f8(0x08)
	struct UMistRealmMapWidget* Parent; // 0x300(0x08)
	struct TMap<struct FIntPoint, struct UMistRealmMapLayersTileWidget*> TileWidgetsLookup; // 0x308(0x50)
	struct UMistRealmMapLayersTileWidget* PlayerTileWidget; // 0x358(0x08)
	struct UMistRealmMapLayersPathCostWidget* PathCostWidget; // 0x360(0x08)
	struct UCanvasPanelSlot* PathCostWidgetSlot; // 0x368(0x08)
};

// Class Mist.MistWalkerMigrationPreferenceData
// Size: 0x108 (Inherited: 0x28)
struct UMistWalkerMigrationPreferenceData : UObject {
	char pad_28[0x60]; // 0x28(0x60)
	struct UMistRealmMapTileParkedWalkerData* OffMapWalker; // 0x88(0x08)
	struct UMistRealmMapTileData* RealmTile; // 0x90(0x08)
	char pad_98[0x70]; // 0x98(0x70)
};

// Class Mist.MistWalkerMigrationPreferencesData
// Size: 0x268 (Inherited: 0x28)
struct UMistWalkerMigrationPreferencesData : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TArray<struct UMistWalkerMigrationPreferenceData*> Items; // 0x98(0x10)
	char pad_A8[0x90]; // 0xa8(0x90)
	struct UMistBackendHttpClient* BackendClient; // 0x138(0x08)
	struct UMistDataManager* DataManager; // 0x140(0x08)
	struct UMistRealmMapData* RealmMapData; // 0x148(0x08)
	char pad_150[0x100]; // 0x150(0x100)
	struct TArray<struct UMistWalkerMigrationPreferenceData*> ActionQueue; // 0x250(0x10)
	char pad_260[0x8]; // 0x260(0x08)
};

// Class Mist.MistRealmMapMigrationDataManager
// Size: 0x88 (Inherited: 0x28)
struct UMistRealmMapMigrationDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistDataManager* DataManager; // 0x30(0x08)
	struct TMap<struct FMistApiRealmCharacterIdentifier, struct UMistWalkerMigrationPreferencesData*> WalkerPreferencesDataItems; // 0x38(0x50)
};

// Class Mist.MistRealmMapMigrationWidget
// Size: 0x3b0 (Inherited: 0x2c0)
struct UMistRealmMapMigrationWidget : UMistUIWidget {
	struct UBorder* OverlayWidget; // 0x2c0(0x08)
	struct UPanelWidget* ContentPanelWidget; // 0x2c8(0x08)
	struct UMistDataLoadingIndicatorWidget* LoadingIndicatorWidget; // 0x2d0(0x08)
	struct UCheckBox* PersonalFilterCheckBoxWidget; // 0x2d8(0x08)
	struct UCheckBox* ClanFilterCheckBoxWidget; // 0x2e0(0x08)
	struct UTextBlock* PersonalFilterTextWidget; // 0x2e8(0x08)
	struct UTextBlock* ClanFilterTextWidget; // 0x2f0(0x08)
	struct UPanelWidget* NoPermissionPanelWidget; // 0x2f8(0x08)
	struct UMistWalkerMigrationPreferencesPreferredWalkersWidget* PreferredWidget; // 0x300(0x08)
	struct UMistWalkerMigrationPreferencesNotPreferredWalkersWidget* NotPreferredWidget; // 0x308(0x08)
	struct FText PersonalFilterText; // 0x310(0x18)
	struct FText ClanFilterText; // 0x328(0x18)
	struct FSlateColor FilterTextColorUnchecked; // 0x340(0x28)
	struct FSlateColor FilterTextColorChecked; // 0x368(0x28)
	char pad_390[0x18]; // 0x390(0x18)
	struct UMistWalkerMigrationPreferencesData* Data; // 0x3a8(0x08)

	void HandlePersonalFilterCheckBoxChanged(bool bIsChecked); // Function Mist.MistRealmMapMigrationWidget.HandlePersonalFilterCheckBoxChanged // (Final|Native|Private) // @ game+0x11846d0
	struct FEventReply HandleOverlayClicked(struct FGeometry MyGeometry, struct FPointerEvent& MouseEvent); // Function Mist.MistRealmMapMigrationWidget.HandleOverlayClicked // (Final|Native|Private|HasOutParms) // @ game+0x1184500
	struct UWidget* HandleNavToPreferred(enum class EUINavigation Nav); // Function Mist.MistRealmMapMigrationWidget.HandleNavToPreferred // (Final|Native|Public|BlueprintCallable) // @ game+0x1184470
	struct UWidget* HandleNavToNotPreferred(enum class EUINavigation Nav); // Function Mist.MistRealmMapMigrationWidget.HandleNavToNotPreferred // (Final|Native|Public|BlueprintCallable) // @ game+0x11843e0
	void HandleClanFilterCheckBoxChanged(bool bIsChecked); // Function Mist.MistRealmMapMigrationWidget.HandleClanFilterCheckBoxChanged // (Final|Native|Private) // @ game+0x1184330
};

// Class Mist.MistRealmMapSlotLeaseAuctionDetailsWidget
// Size: 0x378 (Inherited: 0x2c0)
struct UMistRealmMapSlotLeaseAuctionDetailsWidget : UMistUIWidget {
	struct UMistMoneyWidget* BalanceWidget; // 0x2c0(0x08)
	struct UTextBlock* DateTextWidget; // 0x2c8(0x08)
	struct UMistLabelButtonWidget* PeriodButtonWidget; // 0x2d0(0x08)
	struct UTextBlock* SlotsTotalTextWidget; // 0x2d8(0x08)
	struct UTextBlock* SlotsPlayerTextWidget; // 0x2e0(0x08)
	struct UTextBlock* BidsTotalTextWidget; // 0x2e8(0x08)
	struct UTextBlock* BidsPlayerTextWidget; // 0x2f0(0x08)
	struct UPanelWidget* InsufficientRankPanelWidget; // 0x2f8(0x08)
	struct UPanelWidget* ErrorPanelWidget; // 0x300(0x08)
	struct UTextBlock* ErrorTextWidget; // 0x308(0x08)
	struct UPanelWidget* OpenPanelWidget; // 0x310(0x08)
	struct UPanelWidget* ClosedPanelWidget; // 0x318(0x08)
	struct UTextBlock* BiddingTimeLeftTextWidget; // 0x320(0x08)
	struct UPanelWidget* SetBidPanelWidget; // 0x328(0x08)
	struct UMistNumberInputWidget* BidAmountInputWidget; // 0x330(0x08)
	struct UMistBaseButtonWidget* SetBidButtonWidget; // 0x338(0x08)
	struct UMistDataLoadingIndicatorWidget* SetBidProgressWidget; // 0x340(0x08)
	char pad_348[0x18]; // 0x348(0x18)
	struct UMistSlotLeaseAuctionWindowData* WindowData; // 0x360(0x08)
	struct UMistClanBankBalanceData* BalanceData; // 0x368(0x08)
	char pad_370[0x8]; // 0x370(0x08)
};

// Class Mist.MistRealmMapSlotLeaseAuctionListItemWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistRealmMapSlotLeaseAuctionListItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UPanelWidget* DatePanelWidget; // 0x2c8(0x08)
	struct UTextBlock* DateTextWidget; // 0x2d0(0x08)
	struct UMistLabelButtonWidget* DetailsButtonWidget; // 0x2d8(0x08)
	struct UPanelWidget* DetailsPanelWidget; // 0x2e0(0x08)
	struct UWidget* HasOtherBidsWidget; // 0x2e8(0x08)
	struct UWidget* HasPlayerBidsWidget; // 0x2f0(0x08)
	struct UTextBlock* MoneyTextWidget; // 0x2f8(0x08)
	struct UTextBlock* SlotsTextWidget; // 0x300(0x08)
	struct UMistSlotLeaseAuctionWindowData* Data; // 0x308(0x08)
};

// Class Mist.MistRealmMapSlotLeaseAuctionListWidget
// Size: 0x300 (Inherited: 0x2c0)
struct UMistRealmMapSlotLeaseAuctionListWidget : UMistUIWidget {
	struct UMistDataLoadingIndicatorWidget* LoadingIndicatorWidget; // 0x2c0(0x08)
	struct UMistMoneyWidget* BalanceWidget; // 0x2c8(0x08)
	struct UListView* ListWidget; // 0x2d0(0x08)
	char pad_2D8[0x18]; // 0x2d8(0x18)
	struct UMistSlotLeaseAuctionRealmTileData* AuctionData; // 0x2f0(0x08)
	struct UMistClanBankBalanceData* BalanceData; // 0x2f8(0x08)
};

// Class Mist.MistRealmMapSlotLeaseAuctionWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistRealmMapSlotLeaseAuctionWidget : UMistUIWidget {
	struct UMistRealmMapSlotLeaseAuctionListWidget* ListWidget; // 0x2c0(0x08)
	struct UMistRealmMapSlotLeaseAuctionDetailsWidget* DetailsWidget; // 0x2c8(0x08)
	struct UMistRealmMapTileData* Data; // 0x2d0(0x08)
	struct UMistSlotLeaseAuctionRealmTileData* AuctionData; // 0x2d8(0x08)
	struct UMistClanBankBalanceData* BalanceData; // 0x2e0(0x08)
};

// Class Mist.MistRealmMapTileActionWidget
// Size: 0x350 (Inherited: 0x2c0)
struct UMistRealmMapTileActionWidget : UMistUIWidget {
	struct UWidget* MainWidget; // 0x2c0(0x08)
	struct UWidget* HintPanelWidget; // 0x2c8(0x08)
	struct UTextBlock* HintTextWidget; // 0x2d0(0x08)
	struct UWidget* HintNoCostWidget; // 0x2d8(0x08)
	struct UWidget* HintCostWidget; // 0x2e0(0x08)
	struct UTextBlock* HintCostTextWidget; // 0x2e8(0x08)
	struct UWidget* ErrorPanelWidget; // 0x2f0(0x08)
	struct UTextBlock* ErrorTextWidget; // 0x2f8(0x08)
	struct UWidget* ErrorCostWidget; // 0x300(0x08)
	struct UTextBlock* ErrorCostTextWidget; // 0x308(0x08)
	struct UWidget* ConfirmPanelWidget; // 0x310(0x08)
	struct UTextBlock* ConfirmTextWidget; // 0x318(0x08)
	struct UProgressBar* ConfirmProgressBarWidget; // 0x320(0x08)
	struct UWidget* WarningPanelWidget; // 0x328(0x08)
	struct UTextBlock* WarningTextWidget; // 0x330(0x08)
	struct UWidget* CoolDownPanelWidget; // 0x338(0x08)
	struct URichTextBlock* CoolDownTextWidget; // 0x340(0x08)
	struct UMistRealmMapWidget* Parent; // 0x348(0x08)
};

// Class Mist.MistRealmMapTileClaimWidget
// Size: 0x548 (Inherited: 0x2c0)
struct UMistRealmMapTileClaimWidget : UMistUIWidget {
	struct UPanelWidget* NotClaimablePanelWidget; // 0x2c0(0x08)
	struct UPanelWidget* ProxyClaimablePanelWidget; // 0x2c8(0x08)
	struct UPanelWidget* ClaimablePanelWidget; // 0x2d0(0x08)
	struct UPanelWidget* ClaimedPanelWidget; // 0x2d8(0x08)
	struct UTextBlock* ClaimOwnerNameTextWidget; // 0x2e0(0x08)
	struct UTextBlock* ClaimProtectionStateTextWidget; // 0x2e8(0x08)
	struct UImage* ClaimProtectionStateImageWidget; // 0x2f0(0x08)
	struct UTextBlock* ClaimProtectionStateChangeInLabelWidget; // 0x2f8(0x08)
	struct UTextBlock* ClaimProtectionStateChangeInTextWidget; // 0x300(0x08)
	struct UTextBlock* ClaimProtectionStateChangeDateLabelWidget; // 0x308(0x08)
	struct UTextBlock* ClaimProtectionStateChangeDateTextWidget; // 0x310(0x08)
	struct UTextBlock* ClaimCreatedDateTextWidget; // 0x318(0x08)
	struct FMistRealmMapTileClaimWidgetClaimConfig ClaimUnprotectedConfig; // 0x320(0xd0)
	struct FMistRealmMapTileClaimWidgetClaimConfig ClaimProtectedConfig; // 0x3f0(0xd0)
	struct FText ClaimTimeLeftFormatText; // 0x4c0(0x18)
	struct FText ClaimTimeLeftLessThan24HoursFormatText; // 0x4d8(0x18)
	struct FText ClaimTimeLeftLessThan1HourFormatText; // 0x4f0(0x18)
	struct FText ClaimTimeLeftLessThan1MinuteFormatText; // 0x508(0x18)
	struct FText ClaimDateTimeFormatText; // 0x520(0x18)
	struct UMistRealmMapWidget* Parent; // 0x538(0x08)
	struct UMistRealmMapTileData* Data; // 0x540(0x08)
};

// Class Mist.MistRealmMapTileDetailsHexWidget
// Size: 0x468 (Inherited: 0x2c0)
struct UMistRealmMapTileDetailsHexWidget : UMistUIWidget {
	struct UImage* AllDirectionsWidget; // 0x2c0(0x08)
	struct UMistHexagonWithBorderWidget* SelectedDirectionWidget; // 0x2c8(0x08)
	struct UTextBlock* Direction0LabelWidget; // 0x2d0(0x08)
	struct UTextBlock* Direction1LabelWidget; // 0x2d8(0x08)
	struct UTextBlock* Direction2LabelWidget; // 0x2e0(0x08)
	struct UTextBlock* Direction3LabelWidget; // 0x2e8(0x08)
	struct UTextBlock* Direction4LabelWidget; // 0x2f0(0x08)
	struct UTextBlock* Direction5LabelWidget; // 0x2f8(0x08)
	float AllDirectionSelectionRadius; // 0x300(0x04)
	char pad_304[0x4]; // 0x304(0x04)
	struct FSlateBrush AllDirectionsBrush; // 0x308(0x88)
	struct FSlateBrush NoDirectionsBrush; // 0x390(0x88)
	char pad_418[0x18]; // 0x418(0x18)
	struct UMistRealmMapWidget* Parent; // 0x430(0x08)
	struct UMistRealmMapTileData* Data; // 0x438(0x08)
	struct TArray<struct UTextBlock*> DirectionLabelWidgets; // 0x440(0x10)
	char pad_450[0x18]; // 0x450(0x18)
};

// Class Mist.MistRealmMapTileDetailsPropertyWidget
// Size: 0x400 (Inherited: 0x2c0)
struct UMistRealmMapTileDetailsPropertyWidget : UMistUIWidget {
	struct UScaleBox* IconScaleWidget; // 0x2c0(0x08)
	struct UImage* IconWidget; // 0x2c8(0x08)
	struct UTextBlock* NameWidget; // 0x2d0(0x08)
	struct UTextBlock* ValueWidget; // 0x2d8(0x08)
	struct FSlateColor GoodValueColor; // 0x2e0(0x28)
	struct FSlateColor BadValueColor; // 0x308(0x28)
	struct FSlateBrush IconBrush; // 0x330(0x88)
	struct FMargin IconPadding; // 0x3b8(0x10)
	struct FText Name; // 0x3c8(0x18)
	struct FText Value; // 0x3e0(0x18)
	bool bIsBadValue; // 0x3f8(0x01)
	char pad_3F9[0x7]; // 0x3f9(0x07)
};

// Class Mist.MistRealmMapTileDetailsWidget
// Size: 0x5e0 (Inherited: 0x2c0)
struct UMistRealmMapTileDetailsWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UImage* TileThumb; // 0x2c8(0x08)
	struct UImage* RegionImageWidget; // 0x2d0(0x08)
	struct UTextBlock* RegionNameWidget; // 0x2d8(0x08)
	struct UPanelWidget* PlayerNumberPanelWidget; // 0x2e0(0x08)
	struct UTextBlock* PlayerNumberWidget; // 0x2e8(0x08)
	struct UBorder* PlayerNumberBackgroundWidget; // 0x2f0(0x08)
	struct UTextBlock* PlayerNumberSlotsWidget; // 0x2f8(0x08)
	struct UImage* DifficultyBackgroundImageWidget; // 0x300(0x08)
	struct UTextBlock* DifficultyLabelTextWidget; // 0x308(0x08)
	struct UPanelWidget* LifetimePanelWidget; // 0x310(0x08)
	struct UTextBlock* LifetimeLabelWidget; // 0x318(0x08)
	struct UBorder* LifetimeBackgroundWidget; // 0x320(0x08)
	struct UTextBlock* LifetimeTextWidget; // 0x328(0x08)
	struct UPanelWidget* HostilityPanelWidget; // 0x330(0x08)
	struct UTextBlock* GoodRankingValue; // 0x338(0x08)
	struct UTextBlock* BadRankingValue; // 0x340(0x08)
	struct USizeBox* GoodRankingSizebox; // 0x348(0x08)
	struct USizeBox* BadRankingSizebox; // 0x350(0x08)
	struct UWidget* ClanCapBorder; // 0x358(0x08)
	struct UTextBlock* ClanCapValue; // 0x360(0x08)
	struct UMistOffMapLobby2EmbarkedWalkerWidget* EmbarkedWalkerWidget; // 0x368(0x08)
	struct UMistUITabControl* TabControl; // 0x370(0x08)
	struct UMistUITabButton* ShowTradeStationDetailsButtonWidget; // 0x378(0x08)
	struct UMistUITabButton* ShowCrewButtonWidget; // 0x380(0x08)
	struct UMistUITabButton* ShowWalkersButtonWidget; // 0x388(0x08)
	struct UMistUITabButton* ShowSlotLeaseAuctionButtonWidget; // 0x390(0x08)
	struct UMistRealmMapTileTradeStationsWidget* TradeStationsWidget; // 0x398(0x08)
	struct UMistOffMapLobby2WalkersWidget* WalkersWidget; // 0x3a0(0x08)
	struct UMistRealmMapTileParkedWalkersWidget* ParkedWalkersWidget; // 0x3a8(0x08)
	struct UMistRealmMapSlotLeaseAuctionWidget* SlotLeaseAuctionWidget; // 0x3b0(0x08)
	struct UMistRealmMapClaimHoverButton* ClaimHoverWidget; // 0x3b8(0x08)
	struct UMistOffMapLobby2WalkerCrewWidget* WalkerCrewWidget; // 0x3c0(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x3c8(0x08)
	struct TMap<enum class EMistRealmMapTileDifficulty, struct FMistRealmMapTileDetailsWidgetDifficultyConfig> DifficultyConfig; // 0x3d0(0x50)
	struct FText PlayersAvailableSlotsText; // 0x420(0x18)
	struct FText LifetimeDecayLabelText; // 0x438(0x18)
	struct FText LifetimeActivateLabelText; // 0x450(0x18)
	struct FSlateBrush LifetimeDecayBackgroundBrush; // 0x468(0x88)
	struct FSlateBrush LifetimeActivateBackgroundBrush; // 0x4f0(0x88)
	struct FText LifetimeFormatText; // 0x578(0x18)
	struct FText LifetimeLessThan24HoursFormatText; // 0x590(0x18)
	struct FLinearColor ActivatedColor; // 0x5a8(0x10)
	struct FLinearColor DeactivatedColor; // 0x5b8(0x10)
	struct UMistRealmMapWidget* Parent; // 0x5c8(0x08)
	struct UMistRealmMapTileData* Data; // 0x5d0(0x08)
	char pad_5D8[0x8]; // 0x5d8(0x08)

	void ToggleTabVisibility(); // Function Mist.MistRealmMapTileDetailsWidget.ToggleTabVisibility // (Final|Native|Private) // @ game+0x11847e0
	void ReceiveChangeContentVisibility(bool IsVisible); // Function Mist.MistRealmMapTileDetailsWidget.ReceiveChangeContentVisibility // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleTabVisibilityChanged(struct UMistUIButton* Sender); // Function Mist.MistRealmMapTileDetailsWidget.HandleTabVisibilityChanged // (Final|Native|Private) // @ game+0x1184760
	void HandleEmbarkedWalkerClicked(); // Function Mist.MistRealmMapTileDetailsWidget.HandleEmbarkedWalkerClicked // (Final|Native|Private) // @ game+0x11843c0
};

// Class Mist.MistRealmMapTileParkedWalkerItemWidget
// Size: 0x300 (Inherited: 0x2c0)
struct UMistRealmMapTileParkedWalkerItemWidget : UMistUIWidget {
	struct UTextBlock* WalkerNameWidget; // 0x2c0(0x08)
	struct UTextBlock* WalkerTypeNameWidget; // 0x2c8(0x08)
	struct UImage* WalkerIconWidget; // 0x2d0(0x08)
	struct UTextBlock* WaterUnitsTextWidget; // 0x2d8(0x08)
	struct UMistWalkerMigrationPreferenceIndicatorButtonWidget* WalkerMigrationPreferenceButtonWidget; // 0x2e0(0x08)
	struct UMistRealmMapWidget* Parent; // 0x2e8(0x08)
	struct UMistRealmMapTileParkedWalkerData* Data; // 0x2f0(0x08)
	struct UMistWalkerMigrationPreferencesData* WalkerMigrationPreferencesData; // 0x2f8(0x08)
};

// Class Mist.MistRealmMapTileParkedWalkersWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistRealmMapTileParkedWalkersWidget : UMistUIWidget {
	struct UMistRealmMapTileDetailsHexWidget* HexWidget; // 0x2c0(0x08)
	struct UPanelWidget* ListWidget; // 0x2c8(0x08)
	struct UWidget* NoWalkersParkedWidget; // 0x2d0(0x08)
	struct UWidget* SelectEdgeWidget; // 0x2d8(0x08)
	struct UMistEditableTextBox* WalkerNameFilterTextBox; // 0x2e0(0x08)
	struct FString WalkerFilter; // 0x2e8(0x10)
	struct UMistRealmMapWidget* Parent; // 0x2f8(0x08)
	struct UMistRealmMapTileData* Data; // 0x300(0x08)
	char pad_308[0x8]; // 0x308(0x08)

	void TextUpdated(struct FText& Text); // Function Mist.MistRealmMapTileParkedWalkersWidget.TextUpdated // (Final|Native|Public|HasOutParms) // @ game+0x1187f00
	struct UWidget* HandleTextWidgetBoundary(enum class EUINavigation Nav); // Function Mist.MistRealmMapTileParkedWalkersWidget.HandleTextWidgetBoundary // (Final|Native|Public|BlueprintCallable) // @ game+0x11871d0
};

// Class Mist.MistRealmMapTileTradeStationsOrderWidget
// Size: 0x330 (Inherited: 0x2c0)
struct UMistRealmMapTileTradeStationsOrderWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UMistBasicItemIconWidget* ItemIconWidget; // 0x2c8(0x08)
	struct UTextBlock* DemandCountText; // 0x2d0(0x08)
	struct UTextBlock* BestUnitSellPriceText; // 0x2d8(0x08)
	struct UTextBlock* AverageUnitSellPriceText; // 0x2e0(0x08)
	struct UTextBlock* SupplyCountText; // 0x2e8(0x08)
	struct UTextBlock* BestUnitBuyPriceText; // 0x2f0(0x08)
	struct UTextBlock* AverageUnitBuyPriceText; // 0x2f8(0x08)
	struct UTextBlock* DemandOrdersCountText; // 0x300(0x08)
	struct UTextBlock* SupplyOrdersCountText; // 0x308(0x08)
	struct FText NoValueText; // 0x310(0x18)
	struct UMistRealmMapTileTradeStationOrderData* Data; // 0x328(0x08)
};

// Class Mist.MistRealmMapTileTradeStationsWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistRealmMapTileTradeStationsWidget : UMistUIWidget {
	struct UPanelWidget* ItemsPanelWidget; // 0x2c0(0x08)
	struct UMistDataLoadingIndicatorWidget* LoadingIndicatorWidget; // 0x2c8(0x08)
	struct UMistItemNameSearchWidget* FilterWidget; // 0x2d0(0x08)
	struct UListView* ListWidget; // 0x2d8(0x08)
	float ApplyFilterDelay; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UMistRealmMapWidget* Parent; // 0x2e8(0x08)
	struct UMistRealmMapTileData* Data; // 0x2f0(0x08)
	struct TArray<struct UMistRealmMapTileTradeStationOrderData*> FilteredItems; // 0x2f8(0x10)
	struct FTimerHandle ApplyFilterDelayedTimerHandle; // 0x308(0x08)
};

// Class Mist.MistRealmMapWidget
// Size: 0x9d0 (Inherited: 0x2c0)
struct UMistRealmMapWidget : UMistUIWidget {
	struct UCanvasPanel* ContainerWidget; // 0x2c0(0x08)
	struct UMistRealmMapTileDetailsWidget* StartTileDetailsWidget; // 0x2c8(0x08)
	struct UMistRealmMapTileDetailsWidget* TargetTileDetailsWidget; // 0x2d0(0x08)
	struct UMistRealmMapLayersWidget* LayersWidget; // 0x2d8(0x08)
	struct UMistRealmMapTileActionWidget* TileActionWidget; // 0x2e0(0x08)
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x2e8(0x08)
	float OuterSideLength; // 0x2f0(0x04)
	float InnerSideLength; // 0x2f4(0x04)
	bool FlipY; // 0x2f8(0x01)
	char pad_2F9[0x3]; // 0x2f9(0x03)
	struct FMargin TilesMargin; // 0x2fc(0x10)
	char pad_30C[0x4]; // 0x30c(0x04)
	struct FSlateBrush EmptyTileBrush; // 0x310(0x88)
	struct FSlateBrush HighlightTileBrush; // 0x398(0x88)
	struct FVector2D TileBackgroundSize; // 0x420(0x08)
	struct UMaterialInterface* TileBackgroundMaterial; // 0x428(0x08)
	struct FName TileBackgroundMaterialTextureParameter; // 0x430(0x08)
	struct TArray<struct UTexture2D*> TileBackgroundTextures; // 0x438(0x10)
	float DirectionSelectionRadiusMin; // 0x448(0x04)
	float DirectionSelectionRadiusMax; // 0x44c(0x04)
	struct FMargin PopupMargin; // 0x450(0x10)
	float ActionDelayDuration; // 0x460(0x04)
	float ActionConfirmDuration; // 0x464(0x04)
	float PathThickness; // 0x468(0x04)
	struct FLinearColor PathStateNoneColor; // 0x46c(0x10)
	struct FLinearColor PathStateValidColor; // 0x47c(0x10)
	struct FLinearColor PathStateInvalidColor; // 0x48c(0x10)
	float CostPathThickness; // 0x49c(0x04)
	struct FLinearColor CostPathColor; // 0x4a0(0x10)
	struct FSlateBrush ClaimAreaTileBrush; // 0x4b0(0x88)
	float ClaimAreaDesaturateColor; // 0x538(0x04)
	float ClaimAreaAlphaColor; // 0x53c(0x04)
	float ClaimAreaHighlightDesaturateColor; // 0x540(0x04)
	float ClaimAreaHighlightAlphaColor; // 0x544(0x04)
	struct FSlateSound HexUnselectedSound; // 0x548(0x18)
	struct FSlateSound ShowPopupSound; // 0x560(0x18)
	struct FSlateSound ShowPopupClaimSound; // 0x578(0x18)
	struct FSlateSound ShowPopupTradeStationsSound; // 0x590(0x18)
	struct FSlateSound SelectPopupDirectionSound; // 0x5a8(0x18)
	struct TSoftObjectPtr<USoundBase> ConfirmingActionSound; // 0x5c0(0x28)
	float ConfirmingActionSoundFadeOut; // 0x5e8(0x04)
	char pad_5EC[0x4]; // 0x5ec(0x04)
	struct FSlateSound ActionNotAllowedSound; // 0x5f0(0x18)
	char pad_608[0x328]; // 0x608(0x328)
	struct UMistOffMapLobbyData* OffMapLobbyData; // 0x930(0x08)
	struct UMistRealmMapData* Data; // 0x938(0x08)
	struct UMistRealmMapTileData* HoveredTileData; // 0x940(0x08)
	struct UMistRealmMapTileData* SelectedTileData; // 0x948(0x08)
	struct UAudioComponent* ConfirmingActionAudio; // 0x950(0x08)
	char pad_958[0x58]; // 0x958(0x58)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x9b0(0x08)
	struct UMistNumberInputWidget* StubTileXInputWidget; // 0x9b8(0x08)
	struct UMistNumberInputWidget* StubTileYInputWidget; // 0x9c0(0x08)
	struct UMistNumberInputWidget* StubTileZInputWidget; // 0x9c8(0x08)
};

// Class Mist.MistRealmTileNeighborsTileData
// Size: 0x90 (Inherited: 0x28)
struct UMistRealmTileNeighborsTileData : UObject {
	char pad_28[0x68]; // 0x28(0x68)
};

// Class Mist.MistRealmTileNeighborsDataManager
// Size: 0x178 (Inherited: 0x28)
struct UMistRealmTileNeighborsDataManager : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TArray<struct UMistRealmTileNeighborsTileData*> Tiles; // 0x98(0x10)
	char pad_A8[0x60]; // 0xa8(0x60)
	struct UMistBackendHttpClient* BackendClient; // 0x108(0x08)
	char pad_110[0x68]; // 0x110(0x68)
};

// Class Mist.MistRecipeEntryButton
// Size: 0x390 (Inherited: 0x350)
struct UMistRecipeEntryButton : UMistHoldButtonWidget {
	struct UTextBlock* QuantityWidget; // 0x350(0x08)
	struct UHorizontalBox* IngredientsPanel; // 0x358(0x08)
	struct UProgressBar* HoldProgressWidget; // 0x360(0x08)
	struct UMistCraftingStationComponent* CraftingStation; // 0x368(0x08)
	struct FMistCraftingRecipes Item; // 0x370(0x18)
	char pad_388[0x8]; // 0x388(0x08)

	void SetRecipe(struct FMistCraftingRecipes& CraftingRecipes, uint32_t InRecipeId); // Function Mist.MistRecipeEntryButton.SetRecipe // (Final|Native|Public|HasOutParms) // @ game+0x1187d90
	void HandleProgressUpdate(float NewProgress); // Function Mist.MistRecipeEntryButton.HandleProgressUpdate // (Final|Native|Private) // @ game+0x11870d0
};

// Class Mist.MistRecipeItemDetailsWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistRecipeItemDetailsWidget : UMistUIWidget {
	struct UTextBlock* HPNameWidget; // 0x2c0(0x08)
	struct UTextBlock* HPValueWidget; // 0x2c8(0x08)
	struct UTextBlock* ArmorNameWidget; // 0x2d0(0x08)
	struct UTextBlock* ArmorValueWidget; // 0x2d8(0x08)
	enum class EMistMaterialProtection Protection; // 0x2e0(0x04)
	float MaxHp; // 0x2e4(0x04)
};

// Class Mist.MistRecipePopupHeaderWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistRecipePopupHeaderWidget : UMistUIWidget {
	struct UImage* IconWidget; // 0x2c0(0x08)
	struct UTextBlock* NameWidget; // 0x2c8(0x08)
	struct UMistItemTemplate* ItemTemplate; // 0x2d0(0x08)
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0x2d8(0x08)

	void SetUnlockedData(struct UPrimaryDataAsset* InUnlockableTemplate); // Function Mist.MistRecipePopupHeaderWidget.SetUnlockedData // (Final|Native|Public) // @ game+0x1187e80
	void SetPlaceableData(struct UMistPlaceableTemplate* InItemTemplate); // Function Mist.MistRecipePopupHeaderWidget.SetPlaceableData // (Final|Native|Public) // @ game+0x1187d10
	void SetItemData(struct UMistItemTemplate* InItemTemplate); // Function Mist.MistRecipePopupHeaderWidget.SetItemData // (Final|Native|Public) // @ game+0x1187b00
};

// Class Mist.MistRecipePopupItemWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistRecipePopupItemWidget : UMistUIWidget {
	struct UImage* IconWidget; // 0x2c0(0x08)
	struct UTextBlock* NameWidget; // 0x2c8(0x08)
	struct UTextBlock* RequiredQuantityWidget; // 0x2d0(0x08)
	struct UTextBlock* AvailableQuantityWidget; // 0x2d8(0x08)
	struct UTextBlock* ProvidedByGroundWidget; // 0x2e0(0x08)
	struct UWidget* ResourceHelpWidget; // 0x2e8(0x08)
	struct UTextBlock* ResourceHelpText; // 0x2f0(0x08)
	bool bIsHelpEntry; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
	struct UMistItemTemplate* ItemTemplate; // 0x300(0x08)
	char pad_308[0x10]; // 0x308(0x10)

	void SetData(struct UMistItemTemplate* InItemTemplate, int32_t InRequiredQuantity, int32_t InAvailableQuantity, bool bInCanUseFreeResource, bool bIgnoreColors); // Function Mist.MistRecipePopupItemWidget.SetData // (Final|Native|Public) // @ game+0x1187330
};

// Class Mist.MistRecipePopupVitaminWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistRecipePopupVitaminWidget : UMistUIWidget {
	struct UImage* IconWidget; // 0x2c0(0x08)
	struct UTextBlock* NameWidget; // 0x2c8(0x08)
	struct UMistVitaminItemTemplate* ItemTemplate; // 0x2d0(0x08)

	void SetData(struct UMistVitaminItemTemplate* InItemTemplate); // Function Mist.MistRecipePopupVitaminWidget.SetData // (Final|Native|Public) // @ game+0x11874c0
};

// Class Mist.MistRecipesListWidget
// Size: 0x328 (Inherited: 0x2c0)
struct UMistRecipesListWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UVerticalBox* RecipesListWidget; // 0x2c8(0x08)
	char pad_2D0[0x38]; // 0x2d0(0x38)
	struct FMistCraftingRecipes Item; // 0x308(0x18)
	struct UMistCraftingStationComponent* CraftingStation; // 0x320(0x08)

	void SetItem(struct FMistCraftingRecipes ItemCrafted); // Function Mist.MistRecipesListWidget.SetItem // (Final|Native|Public) // @ game+0x118bea0
};

// Class Mist.MistRecipeWidget
// Size: 0x468 (Inherited: 0x308)
struct UMistRecipeWidget : UMistUIDragDropWidget {
	struct UMistHoldButtonWidget* ButtonWidget; // 0x308(0x08)
	struct UImage* IconImageWidget; // 0x310(0x08)
	struct UMenuAnchor* PopupAnchorWidget; // 0x318(0x08)
	struct UMenuAnchor* RecipeListAnchorWidget; // 0x320(0x08)
	struct UTextBlock* TextWidget; // 0x328(0x08)
	struct UTextBlock* RecipesNumWidget; // 0x330(0x08)
	struct UWidget* SelectedOverlay; // 0x338(0x08)
	struct UTextBlock* QualityWidget; // 0x340(0x08)
	struct UTextBlock* ItemCountWidget; // 0x348(0x08)
	struct UGridPanel* ParentPopupContainer; // 0x350(0x08)
	struct FColor UnlockedColor; // 0x358(0x04)
	struct FColor QualityColor; // 0x35c(0x04)
	struct FColor LockedColor; // 0x360(0x04)
	char pad_364[0x1c]; // 0x364(0x1c)
	struct FMistCraftingRecipes ItemCrafted; // 0x380(0x18)
	struct UMistItemTemplate* ItemTemplate; // 0x398(0x08)
	struct UMistCraftingStationComponent* CraftingStation; // 0x3a0(0x08)
	struct UMistFurnaceComponent* FurnaceStation; // 0x3a8(0x08)
	struct UMistItemRepairStationComponent* RepairStation; // 0x3b0(0x08)
	char pad_3B8[0x8]; // 0x3b8(0x08)
	struct UMistTraderComponent* Trader; // 0x3c0(0x08)
	char pad_3C8[0xa0]; // 0x3c8(0xa0)

	void OnInvalidRecipeChosen(); // Function Mist.MistRecipeWidget.OnInvalidRecipeChosen // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleRecipeListClose(); // Function Mist.MistRecipeWidget.HandleRecipeListClose // (Final|Native|Protected) // @ game+0x118b6a0
	struct UWidget* HandleRecipeList(); // Function Mist.MistRecipeWidget.HandleRecipeList // (Final|Native|Protected) // @ game+0x118b670
	struct UWidget* HandlePopup(); // Function Mist.MistRecipeWidget.HandlePopup // (Native|Protected) // @ game+0x118b640
	void HandleForcedPopupClose(bool bIsOpen); // Function Mist.MistRecipeWidget.HandleForcedPopupClose // (Final|Native|Protected) // @ game+0x118b210
	void HandleButtonHold(); // Function Mist.MistRecipeWidget.HandleButtonHold // (Final|Native|Protected) // @ game+0x118b1f0
	void HandleButtonClick(); // Function Mist.MistRecipeWidget.HandleButtonClick // (Native|Protected) // @ game+0x118b1d0
};

// Class Mist.MistRecipeWidgetLocked
// Size: 0x468 (Inherited: 0x468)
struct UMistRecipeWidgetLocked : UMistRecipeWidget {
};

// Class Mist.MistRecipePopupWidgetLocked
// Size: 0x4f8 (Inherited: 0x4f8)
struct UMistRecipePopupWidgetLocked : UMistRecipePopupWidget {
};

// Class Mist.MistRemoteBallistaControlComponent
// Size: 0x7d0 (Inherited: 0x7a0)
struct UMistRemoteBallistaControlComponent : UMistMannedBallistaControlComponent {
	struct FMistComponentReference BaseRotationComponentRef; // 0x7a0(0x28)
	float VerticalAimingOffsetDegrees; // 0x7c8(0x04)
	bool bAngleOutsideRange; // 0x7cc(0x01)
	char pad_7CD[0x3]; // 0x7cd(0x03)
};

// Class Mist.MistRepairable
// Size: 0x28 (Inherited: 0x28)
struct UMistRepairable : UInterface {
};

// Class Mist.MistRepairToolItemTemplate
// Size: 0x430 (Inherited: 0x428)
struct UMistRepairToolItemTemplate : UMistWeaponItemTemplate {
	float RepairValue; // 0x428(0x04)
	int32_t DurabilityCost; // 0x42c(0x04)
};

// Class Mist.MistRepeaterAnimInstance
// Size: 0x2a0 (Inherited: 0x280)
struct UMistRepeaterAnimInstance : UMistMannedControlAnimInstance {
	struct UAnimSequence* ShootingAnimRef; // 0x278(0x08)
	float ShootingAnimPlayrate; // 0x280(0x04)
	float Yaw; // 0x284(0x04)
	float GunYaw; // 0x288(0x04)
	float GunPitch; // 0x28c(0x04)
	float PedalsPosition; // 0x290(0x04)
	bool bIsShooting; // 0x294(0x01)
	enum class EMistRepeaterAnimGunState GunState; // 0x295(0x01)
	char pad_29E[0x2]; // 0x29e(0x02)
};

// Class Mist.MistReplicatedConfigComponent
// Size: 0x138 (Inherited: 0xf0)
struct UMistReplicatedConfigComponent : UActorComponent {
	float StructureDailyMaintenanceFactor; // 0xf0(0x04)
	float RedeployPenaltyDuration; // 0xf4(0x04)
	float ClaimActivationDuration; // 0xf8(0x04)
	float ClaimVulnerabilityDuration; // 0xfc(0x04)
	float ClaimProtectionDuration; // 0x100(0x04)
	float ClaimCooldownBeforeDeploy; // 0x104(0x04)
	float RespawnCostMultiplier; // 0x108(0x04)
	float RespawnOnWalkerCostMultiplier; // 0x10c(0x04)
	float ItemWeightMultiplier; // 0x110(0x04)
	bool bDisableGlobalChat; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	int32_t MaxPlayerStat; // 0x118(0x04)
	float FlotillaTaxRate; // 0x11c(0x04)
	struct FString DisabledTechs; // 0x120(0x10)
	float ClaimTaxRate; // 0x130(0x04)
	float SellOrdersUpfrontTax; // 0x134(0x04)

	void OnRep_StructureDailyMaintenanceFactor(); // Function Mist.MistReplicatedConfigComponent.OnRep_StructureDailyMaintenanceFactor // (Final|Native|Private) // @ game+0x118bbd0
	void OnRep_SellOrdersUpfrontTax(); // Function Mist.MistReplicatedConfigComponent.OnRep_SellOrdersUpfrontTax // (Final|Native|Private) // @ game+0x118bbb0
	void OnRep_RespawnOnWalkerCostMultiplier(); // Function Mist.MistReplicatedConfigComponent.OnRep_RespawnOnWalkerCostMultiplier // (Final|Native|Private) // @ game+0x118bb90
	void OnRep_RespawnCostMultiplier(); // Function Mist.MistReplicatedConfigComponent.OnRep_RespawnCostMultiplier // (Final|Native|Private) // @ game+0x118bb70
	void OnRep_RedeployPenaltyDuration(); // Function Mist.MistReplicatedConfigComponent.OnRep_RedeployPenaltyDuration // (Final|Native|Private) // @ game+0x118bb50
	void OnRep_MaxPlayerStat(); // Function Mist.MistReplicatedConfigComponent.OnRep_MaxPlayerStat // (Final|Native|Private) // @ game+0x118bb30
	void OnRep_ItemWeightMultiplier(); // Function Mist.MistReplicatedConfigComponent.OnRep_ItemWeightMultiplier // (Final|Native|Private) // @ game+0x118bb10
	void OnRep_FlotillaTaxRate(); // Function Mist.MistReplicatedConfigComponent.OnRep_FlotillaTaxRate // (Final|Native|Private) // @ game+0x118baf0
	void OnRep_DisableGlobalChat(); // Function Mist.MistReplicatedConfigComponent.OnRep_DisableGlobalChat // (Final|Native|Private) // @ game+0x118bab0
	void OnRep_DisabledTechs(); // Function Mist.MistReplicatedConfigComponent.OnRep_DisabledTechs // (Final|Native|Private) // @ game+0x118bad0
	void OnRep_ClaimVulnerabilityDuration(); // Function Mist.MistReplicatedConfigComponent.OnRep_ClaimVulnerabilityDuration // (Final|Native|Private) // @ game+0x118ba90
	void OnRep_ClaimTaxRate(); // Function Mist.MistReplicatedConfigComponent.OnRep_ClaimTaxRate // (Final|Native|Private) // @ game+0x118ba70
	void OnRep_ClaimProtectionDuration(); // Function Mist.MistReplicatedConfigComponent.OnRep_ClaimProtectionDuration // (Final|Native|Private) // @ game+0x118ba50
	void OnRep_ClaimCooldownBeforeDeploy(); // Function Mist.MistReplicatedConfigComponent.OnRep_ClaimCooldownBeforeDeploy // (Final|Native|Private) // @ game+0x118ba30
	void OnRep_ClaimActivationDuration(); // Function Mist.MistReplicatedConfigComponent.OnRep_ClaimActivationDuration // (Final|Native|Private) // @ game+0x118ba10
};

// Class Mist.MistReplicationGraph
// Size: 0x630 (Inherited: 0x520)
struct UMistReplicationGraph : UReplicationGraph {
	struct UReplicationGraphNode_GridSpatialization2D* GridNode; // 0x518(0x08)
	struct UReplicationGraphNode_ActorList* AlwaysRelevantNode; // 0x520(0x08)
	struct TMap<struct UNetConnection*, struct UReplicationGraphNode_AlwaysRelevant_ForConnection*> AlwaysRelevantForConnectionList; // 0x528(0x50)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct UReplicationGraphNode_AlwaysRelevant_ForConnection*> OnlyRelevantForOwnerActorList; // 0x578(0x50)
	struct TArray<struct AActor*> ActorsWithoutNetConnection; // 0x5c8(0x10)
	struct TMap<struct TWeakObjectPtr<struct AActor>, enum class EMistReplicationGraphNodeType> ActorNodeTypes; // 0x5d8(0x50)
};

// Class Mist.MistReportPlayerDialog
// Size: 0x3f8 (Inherited: 0x3c0)
struct UMistReportPlayerDialog : UMistUIDialog {
	struct UComboBoxString* PlayersComboWidget; // 0x3c0(0x08)
	struct UComboBoxString* ReasonComboWidget; // 0x3c8(0x08)
	struct UMultiLineEditableTextBox* MessageWidget; // 0x3d0(0x08)
	struct UMistBaseButtonWidget* OKButtonWidget; // 0x3d8(0x08)
	struct UMistBaseButtonWidget* CancelButtonWidget; // 0x3e0(0x08)
	char pad_3E8[0x10]; // 0x3e8(0x10)

	void HandlePlayerSelected(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistReportPlayerDialog.HandlePlayerSelected // (Final|Native|Private) // @ game+0x118b2a0
};

// Class Mist.MistResourceDiscoveryEntryWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistResourceDiscoveryEntryWidget : UMistUIWidget {
	struct UVerticalBox* VerticalResourceBox; // 0x2c0(0x08)
	struct UHorizontalBox* HorizontalResourceBox; // 0x2c8(0x08)
	struct UImage* HarvestIconWidget; // 0x2d0(0x08)
	struct TArray<struct FName> DiscoveryIds; // 0x2d8(0x10)
	bool bIsUnlocked; // 0x2e8(0x01)
	enum class EHarvestingIcon HarvestingIcon; // 0x2e9(0x01)
	char pad_2EA[0x6]; // 0x2ea(0x06)
	struct TArray<struct UMistItemTemplate*> ItemTemplates; // 0x2f0(0x10)
	int32_t MinOutput; // 0x300(0x04)
	int32_t MaxOutput; // 0x304(0x04)
	bool bShowName; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)

	void SetDataMultiple(enum class EHarvestingIcon InHarvestingIcon, struct TArray<struct FName> InDiscoveryId, struct TArray<struct UMistItemTemplate*> InItemTemplate, bool bInIsUnlocked, int32_t InMinOutput, int32_t InMaxOutput, bool bInShowName); // Function Mist.MistResourceDiscoveryEntryWidget.SetDataMultiple // (Final|Native|Public) // @ game+0x118bbf0
	void OnDiscoveryAchieved(); // Function Mist.MistResourceDiscoveryEntryWidget.OnDiscoveryAchieved // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistRespawnBoostItemTemplate
// Size: 0x200 (Inherited: 0x1f0)
struct UMistRespawnBoostItemTemplate : UMistBoostItemTemplate {
	struct UMistStatusEffect* StatusEffect; // 0x1f0(0x08)
	float ExtraDurationPerStack; // 0x1f8(0x04)
	float MagnitudePerStack; // 0x1fc(0x04)
};

// Class Mist.MistRespecStatusEffect
// Size: 0xe0 (Inherited: 0xe0)
struct UMistRespecStatusEffect : UMistStatusEffect {
};

// Class Mist.MistRudderAnimInstance
// Size: 0x2c0 (Inherited: 0x280)
struct UMistRudderAnimInstance : UMistMannedControlAnimInstance {
	float RudderChujadder; // 0x278(0x04)
	struct FTransform IKTarget; // 0x280(0x30)
	struct USkeletalMeshComponent* RudderMesh; // 0x2b0(0x08)
	char pad_2BC[0x4]; // 0x2bc(0x04)
};

// Class Mist.MistRunAwayBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistRunAwayBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistRunnerController
// Size: 0x638 (Inherited: 0x600)
struct AMistRunnerController : AMistHumanoidMobController {
	float AwarnessRangeRadius; // 0x600(0x04)
	float RunRangeRadius; // 0x604(0x04)
	float SprintRangeRadius; // 0x608(0x04)
	bool bIsAgressive; // 0x60c(0x01)
	char pad_60D[0x3]; // 0x60d(0x03)
	float SprintDistance; // 0x610(0x04)
	float Exhaustion; // 0x614(0x04)
	struct FVector LastPosition; // 0x618(0x0c)
	float RoamingRadius; // 0x624(0x04)
	char pad_628[0x10]; // 0x628(0x10)
};

// Class Mist.MistRupuAnimInstance
// Size: 0x380 (Inherited: 0x270)
struct UMistRupuAnimInstance : UAnimInstance {
	char bIsInAir : 1; // 0x268(0x01)
	char bIsCrouching : 1; // 0x268(0x01)
	char bIsSprinting : 1; // 0x268(0x01)
	char bFightIsActive : 1; // 0x268(0x01)
	char bReinitStateIsNeeded : 1; // 0x268(0x01)
	float MaxSlopeAngle; // 0x26c(0x04)
	float Speed; // 0x270(0x04)
	float Direction; // 0x274(0x04)
	float LookAngle; // 0x278(0x04)
	float CombatActionPlayRate; // 0x27c(0x04)
	float AttackPowerAlpha; // 0x280(0x04)
	float UpperBodyBlendWeight; // 0x284(0x04)
	float AttackBlendTime; // 0x288(0x04)
	float AdditionalCombatAnimAlpha; // 0x28c(0x04)
	bool bIsDowned; // 0x290(0x01)
	bool bIsDead; // 0x291(0x01)
	enum class ECombatAction PreviousCombatAction; // 0x292(0x01)
	enum class ECombatAction CurrentCombatAction; // 0x293(0x01)
	enum class ECombatDirection CurrentCombatDirection; // 0x294(0x01)
	bool bIsInCombatState; // 0x296(0x01)
	bool bLoopCombatAnimation; // 0x297(0x01)
	bool bHACK_AttackBlending; // 0x298(0x01)
	int32_t HACK_CombatPlayIndex; // 0x29c(0x04)
	struct UAnimSequence* HurtAnim; // 0x2a0(0x08)
	struct UMistWeaponTypeBase* WeaponType; // 0x2a8(0x08)
	struct UAnimationAsset* CurrentAnimAsset; // 0x2b0(0x08)
	struct FCombatAnimTrack CurrentAnimTrack; // 0x2b8(0x38)
	float CombatAnimStartTime; // 0x2f0(0x04)
	char pad_2F4_5 : 3; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	struct UAnimSequence* CurrentIdleAnim; // 0x2f8(0x08)
	struct UAnimSequence* DefaultIdleAnim; // 0x300(0x08)
	char pad_308[0x10]; // 0x308(0x10)
	struct AMistCharacter* Character; // 0x318(0x08)
	struct UMistCharacterMovementComponent* MovementComponent; // 0x320(0x08)
	struct UMistMeleeCombatComponent* MeleeCombatComponent; // 0x328(0x08)
	char pad_330[0x20]; // 0x330(0x20)
	bool bWantsJump; // 0x350(0x01)
	bool bWasJump; // 0x351(0x01)
	bool bReachedApex; // 0x352(0x01)
	bool bWantsLand; // 0x353(0x01)
	char pad_354[0x4]; // 0x354(0x04)
	struct UAnimSequence* LowJumpStartAnimSequeence; // 0x358(0x08)
	struct UAnimSequence* HighJumpStartAnimSequence; // 0x360(0x08)
	struct UAnimSequence* LowLandingAnimSequence; // 0x368(0x08)
	struct UAnimSequence* HighLandingAnimSequence; // 0x370(0x08)
	char pad_378[0x8]; // 0x378(0x08)

	void OnHitReveived(struct AActor* Actor, float Damage); // Function Mist.MistRupuAnimInstance.OnHitReveived // (Final|Native|Public) // @ game+0x118b940
	struct UAnimSequence* GetLandingAnimSequence(); // Function Mist.MistRupuAnimInstance.GetLandingAnimSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118b1a0
	struct UAnimSequence* GetJumpStartAnimSequence(); // Function Mist.MistRupuAnimInstance.GetJumpStartAnimSequence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x118b170
};

// Class Mist.MistSafeLogOutComponent
// Size: 0x1f0 (Inherited: 0x108)
struct UMistSafeLogOutComponent : UMistPlayerStateComponent {
	char pad_108[0x40]; // 0x108(0x40)
	struct AMistOasisPlayerState* InitiatorPlayerState; // 0x148(0x08)
	struct FMistTravelParty InitialTravelParty; // 0x150(0x60)
	char pad_1B0[0x40]; // 0x1b0(0x40)

	void ServerStopSafeLogOutAttempt(); // Function Mist.MistSafeLogOutComponent.ServerStopSafeLogOutAttempt // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10dc1c0
	void ServerStartSafeLogOutAttempt(); // Function Mist.MistSafeLogOutComponent.ServerStartSafeLogOutAttempt // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10c2f70
	void HandleWalkerTakeDamage(struct AActor* Sender, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistSafeLogOutComponent.HandleWalkerTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x118b7c0
	void HandleWalkerDeploymentStarted(struct AMistWalker* Walker); // Function Mist.MistSafeLogOutComponent.HandleWalkerDeploymentStarted // (Final|Native|Private) // @ game+0x118b740
	void HandleWalkerClanChanged(struct UMistClanOwnershipComponent* Sender); // Function Mist.MistSafeLogOutComponent.HandleWalkerClanChanged // (Final|Native|Private) // @ game+0x118b6c0
	void HandlePlayerTakeDamage(struct AActor* Sender, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistSafeLogOutComponent.HandlePlayerTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x118b4c0
	void HandlePlayerStateChanged(struct AMistCharacter* Character, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistSafeLogOutComponent.HandlePlayerStateChanged // (Final|Native|Private) // @ game+0x118b3c0
	void ClientStopSafeLogOutAttempt(struct FText Reason); // Function Mist.MistSafeLogOutComponent.ClientStopSafeLogOutAttempt // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x118b0b0
	void ClientStartSafeLogOutAttempt(float Time, struct FString Initiator); // Function Mist.MistSafeLogOutComponent.ClientStartSafeLogOutAttempt // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x118afd0
};

// Class Mist.MistSafeLogOutWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistSafeLogOutWidget : UMistHUDWidget {
	struct UTextBlock* SafeLogOutText; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)
};

// Class Mist.MistSafeLogOutWorldTravelParty
// Size: 0xe0 (Inherited: 0x28)
struct UMistSafeLogOutWorldTravelParty : UObject {
	char pad_28[0xb8]; // 0x28(0xb8)

	void HandleWalkerTakeDamage(struct AActor* Sender, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistSafeLogOutWorldTravelParty.HandleWalkerTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x118dca0
	void HandleWalkerClanChanged(struct UMistClanOwnershipComponent* Sender); // Function Mist.MistSafeLogOutWorldTravelParty.HandleWalkerClanChanged // (Final|Native|Private) // @ game+0x118dc20
	void HandlePlayerTakeDamage(struct AActor* Sender, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistSafeLogOutWorldTravelParty.HandlePlayerTakeDamage // (Final|Native|Private|HasOutParms) // @ game+0x118daa0
	void HandlePlayerStateChanged(struct AMistCharacter* Character, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistSafeLogOutWorldTravelParty.HandlePlayerStateChanged // (Final|Native|Private) // @ game+0x118d9a0
};

// Class Mist.MistSawbladeAnimInstance
// Size: 0x280 (Inherited: 0x280)
struct UMistSawbladeAnimInstance : UMistMannedControlAnimInstance {
	float AnimProgress; // 0x278(0x04)
};

// Class Mist.MistSawbladeControlComponent
// Size: 0x770 (Inherited: 0x598)
struct UMistSawbladeControlComponent : UMistMannedGimbalControlComponent {
	char pad_598[0x8]; // 0x598(0x08)
	struct FMulticastInlineDelegate OnArmExtendingStarted; // 0x5a0(0x10)
	struct FMulticastInlineDelegate OnArmExtendingStopped; // 0x5b0(0x10)
	struct FMulticastInlineDelegate OnArmRetractingStarted; // 0x5c0(0x10)
	struct FMulticastInlineDelegate OnArmRetractingStopped; // 0x5d0(0x10)
	struct FMistComponentReference ArmRef; // 0x5e0(0x28)
	struct FMistComponentReference BladeRef; // 0x608(0x28)
	float ArmExtensionLength; // 0x630(0x04)
	float ArmExtensionSpeed; // 0x634(0x04)
	float ArmExtensionSpeedSawing; // 0x638(0x04)
	float ArmRetractionSpeed; // 0x63c(0x04)
	float ArmRetractionSpeedObstructed; // 0x640(0x04)
	float ArmRadius; // 0x644(0x04)
	float BladeDamageTick; // 0x648(0x04)
	float TorqueSpinningTickCost; // 0x64c(0x04)
	float TorqueDamageTickCost; // 0x650(0x04)
	float BladeDamageTickPeriod; // 0x654(0x04)
	float SpinningTorqueCostTickPeriod; // 0x658(0x04)
	struct FRotator SawingRotationSpeed; // 0x65c(0x0c)
	struct UDamageType* BladeDamageTypeClass; // 0x668(0x08)
	enum class EMistSawbladeState State; // 0x670(0x01)
	char pad_671[0x7]; // 0x671(0x07)
	struct TArray<struct FMistToolTier> ToolTiers; // 0x678(0x10)
	struct FHitResult LastHitResult; // 0x688(0x88)
	float CurrentArmExtensionTime; // 0x710(0x04)
	float ArmExtensionPercent; // 0x714(0x04)
	float TimeToMaxBladeRotation; // 0x718(0x04)
	char pad_71C[0x4]; // 0x71c(0x04)
	struct UCurveFloat* BladeRotationSpeedCurve; // 0x720(0x08)
	char pad_728[0x4]; // 0x728(0x04)
	float CurrentBladeRotationSpeed; // 0x72c(0x04)
	struct UCurveFloat* ArmExtensionCurve; // 0x730(0x08)
	float CurrentArmExtension; // 0x738(0x04)
	char pad_73C[0x4]; // 0x73c(0x04)
	struct UMistSawTorqueContainerComponent* TorqueContainerComponent; // 0x740(0x08)
	bool bWantsSawing; // 0x748(0x01)
	bool bHasTorque; // 0x749(0x01)
	char pad_74A[0x26]; // 0x74a(0x26)

	void ServerStopSawing(); // Function Mist.MistSawbladeControlComponent.ServerStopSawing // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a1a10
	void ServerStartSawing(); // Function Mist.MistSawbladeControlComponent.ServerStartSawing // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a19f0
	void SawbladeArmEvent__DelegateSignature(); // DelegateFunction Mist.MistSawbladeControlComponent.SawbladeArmEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ReceiveStateChanged(enum class EMistSawbladeState PrevState, enum class EMistSawbladeState NewState); // Function Mist.MistSawbladeControlComponent.ReceiveStateChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ClientSideHarvestServer(struct FHitResult HitResult); // Function Mist.MistSawbladeControlComponent.ClientSideHarvestServer // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x118d840
};

// Class Mist.MistTorqueContainerComponent
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistTorqueContainerComponent : UMistContainerComponent {
	int32_t BaseTorqueCapacity; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UMistItemTemplate* TorqueItemTemplate; // 0x2e8(0x08)
};

// Class Mist.MistSawTorqueContainerComponent
// Size: 0x2f8 (Inherited: 0x2f0)
struct UMistSawTorqueContainerComponent : UMistTorqueContainerComponent {
	float InternalTorqueCapacity; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
};

// Class Mist.MistScattershotGunAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UMistScattershotGunAnimInstance : UMistDoubleBarreledGunAnimInstance {
};

// Class Mist.MistScattershotGunOperationAnimInstance
// Size: 0x2c0 (Inherited: 0x2c0)
struct UMistScattershotGunOperationAnimInstance : UMistDoubleBarreledGunAnimInstance {
};

// Class Mist.MistScattershotItemTemplate
// Size: 0x280 (Inherited: 0x250)
struct UMistScattershotItemTemplate : UMistProjectileItemTemplate {
	int32_t NumProjectiles; // 0x250(0x04)
	float HorizontalConeHalfAngle; // 0x254(0x04)
	float VerticalConeHalfAngle; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)
	struct UCurveFloat* LeadingHorizontalConeAffection; // 0x260(0x08)
	float PenetrationPower; // 0x268(0x04)
	float PenetrationDistance; // 0x26c(0x04)
	struct FMistWeaponDamage DividedDamage; // 0x270(0x10)
};

// Class Mist.MistScattershotProjectile
// Size: 0x508 (Inherited: 0x500)
struct AMistScattershotProjectile : AMistProjectile {
	char pad_500[0x8]; // 0x500(0x08)
};

// Class Mist.MistSceneAsset
// Size: 0x380 (Inherited: 0x30)
struct UMistSceneAsset : UDataAsset {
	struct FSceneData SceneData; // 0x30(0x350)
};

// Class Mist.MistSceneManager
// Size: 0x11c0 (Inherited: 0x3c0)
struct AMistSceneManager : AActor {
	bool bUseSceneManager; // 0x3c0(0x01)
	bool bUsingGlobalPresets; // 0x3c1(0x01)
	bool bDebugWeathers; // 0x3c2(0x01)
	char pad_3C3[0x5]; // 0x3c3(0x05)
	struct UMistSceneAsset* DefaultSceneAsset; // 0x3c8(0x08)
	bool bLightActorsSet; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	float OverrideWeight; // 0x3d4(0x04)
	struct UMistSceneAsset* OverrideSceneAsset; // 0x3d8(0x08)
	float OverrideEndWeight; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct UMistSceneAsset* OverrideEndSceneAsset; // 0x3e8(0x08)
	bool bAllowEclipse; // 0x3f0(0x01)
	bool bDebugEclipse; // 0x3f1(0x01)
	char pad_3F2[0x2]; // 0x3f2(0x02)
	float EclipseWeight; // 0x3f4(0x04)
	struct UMistSceneAsset* EclipseSceneAsset; // 0x3f8(0x08)
	struct TMap<struct FName, float> EclipseMap; // 0x400(0x50)
	struct UCurveFloat* EclipseCurve; // 0x450(0x08)
	struct TArray<struct FSceneData> TargetScenesData; // 0x458(0x10)
	struct TArray<struct FSceneData> PreviousScenesData; // 0x468(0x10)
	struct TArray<struct FName> LayerNames; // 0x478(0x10)
	struct TArray<struct FName> LayerNamesToExclude; // 0x488(0x10)
	struct AMistWorldDataHolder* WorldDataHolder; // 0x498(0x08)
	struct ADirectionalLight* DirectionalLight; // 0x4a0(0x08)
	struct UDirectionalLightComponent* DirectionalLightComponent; // 0x4a8(0x08)
	struct ADirectionalLight* PlayerDirectionalLight; // 0x4b0(0x08)
	struct ASkyLight* SkyLight; // 0x4b8(0x08)
	struct AAtmosphericFog* AtmosphericFog; // 0x4c0(0x08)
	struct AExponentialHeightFog* ExponentialHeightFog; // 0x4c8(0x08)
	struct APostProcessVolume* PostProcessVolume; // 0x4d0(0x08)
	struct AMistDynamicSky* DynamicSky; // 0x4d8(0x08)
	float FogZ_Offset; // 0x4e0(0x04)
	float AtmosphericFogZ; // 0x4e4(0x04)
	float BlendTimer; // 0x4e8(0x04)
	float BlendRatio; // 0x4ec(0x04)
	float WeatherTimer; // 0x4f0(0x04)
	float WeatherRatio; // 0x4f4(0x04)
	float TickRate; // 0x4f8(0x04)
	float BlendRate; // 0x4fc(0x04)
	float WeatherBlendRate; // 0x500(0x04)
	char pad_504[0x4]; // 0x504(0x04)
	struct FTimerHandle BlendHandle; // 0x508(0x08)
	struct FTimerHandle TickHandle; // 0x510(0x08)
	struct FTimerHandle CycleWeatherHandle; // 0x518(0x08)
	struct FTimerHandle TickWeatherHandle; // 0x520(0x08)
	struct FTimerHandle EndWeatherHandle; // 0x528(0x08)
	struct TArray<float> WeightsChecked; // 0x530(0x10)
	struct TArray<float> WeightsNormalized; // 0x540(0x10)
	struct TArray<struct FName> UsedLayers; // 0x550(0x10)
	struct FVector SourceLocation; // 0x560(0x0c)
	float SearchRadiusLocal; // 0x56c(0x04)
	struct APawn* PlayerPawn; // 0x570(0x08)
	struct APlayerCameraManager* PlayerCameraManager; // 0x578(0x08)
	int32_t MaxBlenedLayers; // 0x580(0x04)
	char pad_584[0x4]; // 0x584(0x04)
	struct TMap<struct FName, float> NamesWeightsMap; // 0x588(0x50)
	struct FSceneData PreviousSceneData; // 0x5d8(0x350)
	struct FSceneData TargetSceneData; // 0x928(0x350)
	struct FSceneData CurrentSceneData; // 0xc78(0x350)
	struct TMap<enum class EMistClimateType, float> TargetClimateMap; // 0xfc8(0x50)
	struct TMap<enum class EMistClimateType, float> InitialClimateMap; // 0x1018(0x50)
	float RadiusClimatesRadius; // 0x1068(0x04)
	char pad_106C[0x4]; // 0x106c(0x04)
	struct TMap<struct UMaterialInterface*, enum class EMistClimateType> PP_MaterialPerClimateMap; // 0x1070(0x50)
	struct TArray<struct UMaterialInstanceDynamic*> PostProcessMIDs; // 0x10c0(0x10)
	struct TArray<struct UMaterialInterface*> PP_Materials; // 0x10d0(0x10)
	struct TMap<float, int32_t> SearchMap; // 0x10e0(0x50)
	int32_t Index; // 0x1130(0x04)
	float WeatherDurationTimer; // 0x1134(0x04)
	bool bInitialized; // 0x1138(0x01)
	bool bFirstCycle; // 0x1139(0x01)
	bool bIgnoreRotationApplying; // 0x113a(0x01)
	char pad_113B[0x5]; // 0x113b(0x05)
	struct FMistPresetData TargetPreset; // 0x1140(0x30)
	struct FMistPresetData CurrentPreset; // 0x1170(0x30)
	struct UMistSpawnParticleComponent* ParticleComponent; // 0x11a0(0x08)
	char pad_11A8[0x8]; // 0x11a8(0x08)
	struct TArray<struct FMistPresetData> TargetPresets; // 0x11b0(0x10)

	bool StartOverride(struct UMistSceneAsset* SceneAsset, float PresetWeight); // Function Mist.MistSceneManager.StartOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x118e260
	void SetOverrideEclipse(struct UMistSceneAsset* SceneAsset, float PresetWeight); // Function Mist.MistSceneManager.SetOverrideEclipse // (Final|Native|Public|BlueprintCallable) // @ game+0x118e0b0
	void SetOverride(struct UMistSceneAsset* SceneAsset, float PresetWeight); // Function Mist.MistSceneManager.SetOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x118dfe0
	void ReceiveEclipseProgressUpdate(float EclipseProgress); // Function Mist.MistSceneManager.ReceiveEclipseProgressUpdate // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void PreviewDefaultLight(); // Function Mist.MistSceneManager.PreviewDefaultLight // (Final|Native|Public) // @ game+0x118de40
	void EndOverride(struct UMistSceneAsset* SceneAsset); // Function Mist.MistSceneManager.EndOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x118d920
};

// Class Mist.MistScenePreset
// Size: 0xe48 (Inherited: 0x3c0)
struct AMistScenePreset : AActor {
	struct FMulticastInlineDelegate OnSetLight; // 0x3c0(0x10)
	struct UMistSceneAsset* SceneAsset; // 0x3d0(0x08)
	struct UMistSceneAsset* ParentSceneAsset; // 0x3d8(0x08)
	bool PresetActive; // 0x3e0(0x01)
	bool InstantPreview; // 0x3e1(0x01)
	bool HaveParent; // 0x3e2(0x01)
	bool IncludePreset; // 0x3e3(0x01)
	bool BlockPreview; // 0x3e4(0x01)
	char pad_3E5[0x3]; // 0x3e5(0x03)
	struct TMap<struct FName, bool> OverrideSettingsMap; // 0x3e8(0x50)
	struct TMap<struct FName, bool> LayerMap; // 0x438(0x50)
	struct FSceneData SceneData; // 0x488(0x350)
	struct AMistSceneManager* SceneManager; // 0x7d8(0x08)
	struct FRotator Rotation; // 0x7e0(0x0c)
	float Intensity; // 0x7ec(0x04)
	struct FLinearColor LightColor; // 0x7f0(0x10)
	float IndirectLightingIntensity; // 0x800(0x04)
	float FadeDistance; // 0x804(0x04)
	struct FRotator PlayerRotation; // 0x808(0x0c)
	float PlayerIntensity; // 0x814(0x04)
	struct FLinearColor PlayerLightColor; // 0x818(0x10)
	float PlayerIndirectLightingIntensity; // 0x828(0x04)
	float PlayerFadeDistance; // 0x82c(0x04)
	float SkylightBrightness; // 0x830(0x04)
	struct FLinearColor SkylightColor; // 0x834(0x10)
	struct FColor OcclusionTint; // 0x844(0x04)
	float LocationZ; // 0x848(0x04)
	float FogDensity; // 0x84c(0x04)
	float FogHeightFalloff; // 0x850(0x04)
	float StartDistanceHeightFog; // 0x854(0x04)
	struct FLinearColor FogInscatteringColor; // 0x858(0x10)
	float DirectionalInscatteringExponent; // 0x868(0x04)
	float DirectionalInscatteringStartDistance; // 0x86c(0x04)
	struct FLinearColor DirectionalInscatteringColor; // 0x870(0x10)
	float ScatteringDistribution; // 0x880(0x04)
	struct FLinearColor Emissive; // 0x884(0x10)
	float ExtinctionScale; // 0x894(0x04)
	float SunMultiplier; // 0x898(0x04)
	float FogMultiplier; // 0x89c(0x04)
	float DensityMultiplier; // 0x8a0(0x04)
	float DensityOffset; // 0x8a4(0x04)
	float GroundOffset; // 0x8a8(0x04)
	float StartDistanceAtmosphere; // 0x8ac(0x04)
	float DefaultBrightness; // 0x8b0(0x04)
	struct FLinearColor DefaultLightColor; // 0x8b4(0x10)
	struct FExponentialHeightFogData SecondFog; // 0x8c4(0x0c)
	float TimeOfDay; // 0x8d0(0x04)
	float OverallIntensity; // 0x8d4(0x04)
	float CloudSpeed; // 0x8d8(0x04)
	float CloudDensity; // 0x8dc(0x04)
	float CloudWispsOpacity; // 0x8e0(0x04)
	float CloudOpacity; // 0x8e4(0x04)
	float SunLightIntensity; // 0x8e8(0x04)
	float CloudShadowsIntensity; // 0x8ec(0x04)
	float CloudDirection; // 0x8f0(0x04)
	float CloudHeight1; // 0x8f4(0x04)
	float CloudHeight2; // 0x8f8(0x04)
	struct FLinearColor HorizonBaseColor; // 0x8fc(0x10)
	struct FLinearColor ZenithBaseColor; // 0x90c(0x10)
	struct FLinearColor CloudLightColor; // 0x91c(0x10)
	struct FLinearColor CloudDarkColor; // 0x92c(0x10)
	struct FLinearColor SunColor; // 0x93c(0x10)
	float CloudShineIntensity; // 0x94c(0x04)
	float ExposureCompensation; // 0x950(0x04)
	float Temp; // 0x954(0x04)
	float Tint; // 0x958(0x04)
	float VignetteIntensity; // 0x95c(0x04)
	struct FLinearColor SaturationGlobal; // 0x960(0x10)
	struct FLinearColor ContrastGlobal; // 0x970(0x10)
	struct FLinearColor GammaGlobal; // 0x980(0x10)
	struct FLinearColor GainGlobal; // 0x990(0x10)
	struct FLinearColor OffsetGlobal; // 0x9a0(0x10)
	struct FLinearColor SaturationShadows; // 0x9b0(0x10)
	struct FLinearColor ContrastShadows; // 0x9c0(0x10)
	struct FLinearColor GammaShadows; // 0x9d0(0x10)
	struct FLinearColor GainShadows; // 0x9e0(0x10)
	struct FLinearColor OffsetShadows; // 0x9f0(0x10)
	float ShadowsMax; // 0xa00(0x04)
	struct FLinearColor SaturationMidtones; // 0xa04(0x10)
	struct FLinearColor ContrastMidtones; // 0xa14(0x10)
	struct FLinearColor GammaMidtones; // 0xa24(0x10)
	struct FLinearColor GainMidtones; // 0xa34(0x10)
	struct FLinearColor OffsetMidtones; // 0xa44(0x10)
	struct FLinearColor SaturationHighlights; // 0xa54(0x10)
	struct FLinearColor ContrastHighlights; // 0xa64(0x10)
	struct FLinearColor GammaHighlights; // 0xa74(0x10)
	struct FLinearColor GainHighlights; // 0xa84(0x10)
	struct FLinearColor OffsetHighlights; // 0xa94(0x10)
	float HighlightsMin; // 0xaa4(0x04)
	struct FSceneData TempSceneData; // 0xaa8(0x350)
	struct TMap<struct FName, struct FSceneData> BackupPresets; // 0xdf8(0x50)

	void SetStructToLocal(struct FSceneData& SceneData_); // Function Mist.MistScenePreset.SetStructToLocal // (Final|Native|Public|HasOutParms) // @ game+0x118e180
	void SetLocalToStruct(struct FSceneData& _SceneData); // Function Mist.MistScenePreset.SetLocalToStruct // (Final|Native|Public|HasOutParms) // @ game+0x118df00
	void SetLightEvent__DelegateSignature(struct FSceneData SceneData); // DelegateFunction Mist.MistScenePreset.SetLightEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void SelectAllLayers(); // Function Mist.MistScenePreset.SelectAllLayers // (Final|Native|Public) // @ game+0x118dee0
	void SaveToAsset(); // Function Mist.MistScenePreset.SaveToAsset // (Final|Native|Public) // @ game+0x118dec0
	void SaveStructToLocal(); // Function Mist.MistScenePreset.SaveStructToLocal // (Final|Native|Public) // @ game+0x118dea0
	void SaveLocalToStruct(); // Function Mist.MistScenePreset.SaveLocalToStruct // (Final|Native|Public) // @ game+0x118de80
	void PreviewLight(); // Function Mist.MistScenePreset.PreviewLight // (Final|Native|Public) // @ game+0x118de60
	void LoadFromAsset(); // Function Mist.MistScenePreset.LoadFromAsset // (Final|Native|Public) // @ game+0x118de20
	void DeselectAllLayers(); // Function Mist.MistScenePreset.DeselectAllLayers // (Final|Native|Public) // @ game+0x118d900
};

// Class Mist.MistSceneSettings
// Size: 0xa0 (Inherited: 0x38)
struct UMistSceneSettings : UMistSettingsObject {
	struct TSoftObjectPtr<UMistSceneAsset> SandstormAsset; // 0x38(0x28)
	float SandstormMaxWeight; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct TSoftObjectPtr<UParticleSystem> SandstormParticleSystem; // 0x68(0x28)
	struct FVector SandstormParticleSystemOffset; // 0x90(0x0c)
	struct FLightingChannels GlobalLightingChannel; // 0x9c(0x01)
	struct FLightingChannels PlayerLightingChannel; // 0x9d(0x01)
	char pad_9E[0x2]; // 0x9e(0x02)
};

// Class Mist.MistScoutOasisQuest
// Size: 0xa8 (Inherited: 0x48)
struct UMistScoutOasisQuest : UMistFlotillaQuest {
	bool bScoutCurrentOasis; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	int32_t MinOasesToScout; // 0x4c(0x04)
	int32_t MaxOasesToScout; // 0x50(0x04)
	int32_t FlotsPerOasis; // 0x54(0x04)
	int32_t MinDistanceFromOrigin; // 0x58(0x04)
	int32_t MaxDistanceFromOrigin; // 0x5c(0x04)
	float ScoutedDistance; // 0x60(0x04)
	char pad_64[0x44]; // 0x64(0x44)
};

// Class Mist.MistSelectionPanelWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistSelectionPanelWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UMistExpandableSelectionPopupWidget* PanelWidget; // 0x2d8(0x08)
	int32_t GridWidth; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UMistExpandableSelectionItemInnerWidget* ItemWidgetClass; // 0x2e8(0x08)
	bool bUseWrapNavigation; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct UObject* SelectedItem; // 0x2f8(0x08)
	char pad_300[0x18]; // 0x300(0x18)
};

// Class Mist.MistSelfDefenceQuest
// Size: 0x110 (Inherited: 0x110)
struct UMistSelfDefenceQuest : UMistTutorialQuest {
};

// Class Mist.MistSemiHomingProjectile
// Size: 0x550 (Inherited: 0x500)
struct AMistSemiHomingProjectile : AMistProjectile {
	struct AMistCharacter* Target; // 0x500(0x08)
	char pad_508[0xc]; // 0x508(0x0c)
	float Maneuverability; // 0x514(0x04)
	struct FMistComponentReference PullInteractableRef; // 0x518(0x28)
	struct UMistItemTemplate* PullReturnedItem; // 0x540(0x08)
	char pad_548[0x8]; // 0x548(0x08)

	void PullInteractionEnded(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistSemiHomingProjectile.PullInteractionEnded // (Final|Native|Private|HasOutParms) // @ game+0x1192c60
};

// Class Mist.MistSettings
// Size: 0x4c8 (Inherited: 0x38)
struct UMistSettings : UMistSettingsObject {
	int32_t NetworkProtocolVersion; // 0x38(0x04)
	float PersistenceSaveInterval; // 0x3c(0x04)
	float FoliageRespawnCheckInterval; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TArray<struct UGroundLandscapeLayer*> GroundLandscapeLayers; // 0x48(0x10)
	struct TMap<enum class EMistClimateType, struct FMistLandscapeLayersList> ClimateTypes; // 0x58(0x50)
	struct TArray<struct FName> CachedEditorOnlyLayers; // 0xa8(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> CharacterCustomizationSets; // 0xb8(0x10)
	struct TArray<int64_t> SortedDecayNotificationTimes; // 0xc8(0x10)
	struct TMap<struct UObject*, struct FMistQaData> QaData; // 0xd8(0x50)
	float MaximumDistanceToCraftingStations; // 0x128(0x04)
	bool bCheatsEnabled; // 0x12c(0x01)
	char pad_12D[0x3]; // 0x12d(0x03)
	float SafeLogOutTimeout; // 0x130(0x04)
	float QuickSafeLogOutTimeout; // 0x134(0x04)
	float SafeLogOutNoBaseWithinRadius; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
	struct TSoftObjectPtr<UMistCachedPlaceableCostsData> CachedPlaceableCosts; // 0x140(0x28)
	struct TSoftClassPtr<UObject> ClaimIconClass; // 0x168(0x28)
	struct TSoftClassPtr<UObject> MurderIconClass; // 0x190(0x28)
	struct TSoftClassPtr<UObject> TrackingHutIconClass; // 0x1b8(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BuildingMaterialActive; // 0x1e0(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BuildingMaterialInactive; // 0x208(0x28)
	struct TSoftObjectPtr<UMaterialInterface> BuildingMaterialInterrupted; // 0x230(0x28)
	float ClaimChanceForBonus; // 0x258(0x04)
	int32_t InitialSpawnLevelThreshold; // 0x25c(0x04)
	struct FLinearColor ClanlessColor; // 0x260(0x10)
	float HudMessageDisplayDuration; // 0x270(0x04)
	float HudMessageRequiringConfirmationDisplayDuration; // 0x274(0x04)
	struct TSoftObjectPtr<UTexture2D> BaseInfoIcon; // 0x278(0x28)
	struct FText BaseInfoName; // 0x2a0(0x18)
	struct FVector BuildingMinimumDistanceFromOtherBases; // 0x2b8(0x0c)
	struct FVector BuildingMinimumDistanceFromOtherWalkers; // 0x2c4(0x0c)
	struct FVector UnpackingMinimumDistanceFromOtherBases; // 0x2d0(0x0c)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct FString GameServerPartnershipUrl; // 0x2e0(0x10)
	struct TMap<enum class EMistMaterialProtection, struct FLinearColor> MaterialProtectionColor; // 0x2f0(0x50)
	struct TSoftClassPtr<UObject> CurrencyItemTemplate; // 0x340(0x28)
	struct TSoftObjectPtr<UCurveFloat> DefaultImpulseMassScalingCurve; // 0x368(0x28)
	struct TArray<struct UMistDyeTemplate*> IndexedItemDyes; // 0x390(0x10)
	struct TArray<struct UMistDyeTemplate*> BucketHelmetEmoticons; // 0x3a0(0x10)
	float DefaultDyeingTime; // 0x3b0(0x04)
	float DefaultDyeingTimeMultiplier; // 0x3b4(0x04)
	struct TSoftObjectPtr<UMaterial> DyeIconMaterial; // 0x3b8(0x28)
	int32_t DailyIcCapFromQuests; // 0x3e0(0x04)
	float QuestFlotsRewardToIcRatio; // 0x3e4(0x04)
	struct FInt32Interval QuestICRewardRange; // 0x3e8(0x08)
	struct TArray<struct TSoftClassPtr<UObject>> FlagPreviewEdgePatterns; // 0x3f0(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> FlagPreviewEmblems; // 0x400(0x10)
	bool bDisablePvpDamage; // 0x410(0x01)
	bool bDisablePvpDamageForPlayers; // 0x411(0x01)
	bool bDisablePvpDamageForWalkers; // 0x412(0x01)
	bool bDisablePvpDamageForStructures; // 0x413(0x01)
	bool bDisableRangedDamage; // 0x414(0x01)
	char pad_415[0x3]; // 0x415(0x03)
	float RespawnCostMultiplier; // 0x418(0x04)
	float RespawnTimeMultiplier; // 0x41c(0x04)
	float RespawnOnWalkerCostMultiplier; // 0x420(0x04)
	float RespawnOnWalkerTimeMultiplier; // 0x424(0x04)
	float DehydrationRate; // 0x428(0x04)
	float PlayerWeightLimitMultiplier; // 0x42c(0x04)
	float ItemWeightMultiplier; // 0x430(0x04)
	float ExperienceGainMultiplier; // 0x434(0x04)
	float FoliageRespawnRateMultiplier; // 0x438(0x04)
	float HarvestQuantityMultiplier; // 0x43c(0x04)
	bool bDisableGlobalChat; // 0x440(0x01)
	char pad_441[0x3]; // 0x441(0x03)
	int32_t MaxPlayerStat; // 0x444(0x04)
	bool bPublicKillMessages; // 0x448(0x01)
	char pad_449[0x7]; // 0x449(0x07)
	struct FString DisabledTechs; // 0x450(0x10)
	struct FString MobsRespawnTimeMultipliers; // 0x460(0x10)
	struct FString MobsNumbersMultipliers; // 0x470(0x10)
	float JumpingRupuChance; // 0x480(0x04)
	float WalkerSpawnpointSwitchingCooldown; // 0x484(0x04)
	float ClanCapWaterPenaltyPerExcessMember; // 0x488(0x04)
	float ClanCapMaxWaterPenalty; // 0x48c(0x04)
	float PrivateServerTradeStationSpawnChance; // 0x490(0x04)
	float PrivateServerAncientCraftingSiteSpawnChance; // 0x494(0x04)
	struct FText ShopDisclaimer; // 0x498(0x18)
	struct FText ShopPrivateRealmDisclaimer; // 0x4b0(0x18)
};

// Class Mist.MistSettingsScreen
// Size: 0x3d0 (Inherited: 0x3a0)
struct UMistSettingsScreen : UMistUIScreen {
	struct UMistUITabControl* TabControlWidget; // 0x3a0(0x08)
	struct UButton* ResetButtonWidget; // 0x3a8(0x08)
	struct UButton* CancelButtonWidget; // 0x3b0(0x08)
	struct UButton* SaveButtonWidget; // 0x3b8(0x08)
	float ResetAllHoldDuration; // 0x3c0(0x04)
	char pad_3C4[0xc]; // 0x3c4(0x0c)

	void HandleSaveClicked(); // Function Mist.MistSettingsScreen.HandleSaveClicked // (Final|Native|Private) // @ game+0x1192700
	void HandleResetClicked(); // Function Mist.MistSettingsScreen.HandleResetClicked // (Final|Native|Private) // @ game+0x11926e0
	void HandleCancelClicked(); // Function Mist.MistSettingsScreen.HandleCancelClicked // (Final|Native|Private) // @ game+0x11925b0
};

// Class Mist.MistSettingOption
// Size: 0x28 (Inherited: 0x28)
struct UMistSettingOption : UObject {
};

// Class Mist.MistCheckboxSettingOption
// Size: 0xc0 (Inherited: 0x28)
struct UMistCheckboxSettingOption : UMistSettingOption {
	struct UCheckBox* CheckBoxWidget; // 0x28(0x08)
	char pad_30[0x90]; // 0x30(0x90)

	void HandleCheckedChanged(bool bIsChecked); // Function Mist.MistCheckboxSettingOption.HandleCheckedChanged // (Final|Native|Private) // @ game+0x11925d0
};

// Class Mist.MistSliderSettingOption
// Size: 0xc0 (Inherited: 0x28)
struct UMistSliderSettingOption : UMistSettingOption {
	struct USlider* SliderWidget; // 0x28(0x08)
	char pad_30[0x90]; // 0x30(0x90)

	void HandleValueChanged(float Value); // Function Mist.MistSliderSettingOption.HandleValueChanged // (Final|Native|Private) // @ game+0x1192840
};

// Class Mist.MistSettleDownQuest
// Size: 0x160 (Inherited: 0x110)
struct UMistSettleDownQuest : UMistTutorialQuest {
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0x110(0x08)
	struct FName PlaceableTemplateName; // 0x118(0x08)
	struct FCampfireItems InputItems; // 0x120(0x18)
	struct FCampfireItems FuelItems; // 0x138(0x18)
	struct UMistItemTemplate* ItemToUseTemplate; // 0x150(0x08)
	struct FName ItemToUseTaskName; // 0x158(0x08)

	void ItemUsed(int32_t SoundId, struct UMistItemTemplate* ItemTemplate, int32_t Count); // Function Mist.MistSettleDownQuest.ItemUsed // (Final|Native|Protected) // @ game+0x11929b0
	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistSettleDownQuest.ItemBuilt // (Final|Native|Protected) // @ game+0x11928f0
	void ContainerUpdate(struct UMistContainerComponent* OpenedContainer, int32_t Count, struct UMistItemTemplate* ItemTemplate); // Function Mist.MistSettleDownQuest.ContainerUpdate // (Final|Native|Protected) // @ game+0x115df60
	void ContainerOpened(); // Function Mist.MistSettleDownQuest.ContainerOpened // (Final|Native|Protected) // @ game+0x1192590
	void ContainerClosed(); // Function Mist.MistSettleDownQuest.ContainerClosed // (Final|Native|Protected) // @ game+0x115df20
};

// Class Mist.MistShopBalanceData
// Size: 0x150 (Inherited: 0x28)
struct UMistShopBalanceData : UObject {
	char pad_28[0x90]; // 0x28(0x90)
	struct UMistBackendHttpClient* BackendClient; // 0xb8(0x08)
	char pad_C0[0x90]; // 0xc0(0x90)
};

// Class Mist.MistShopBrowserExpandItemWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistShopBrowserExpandItemWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UButton* ButtonWidget; // 0x2d8(0x08)
	struct UTextBlock* LabelWidget; // 0x2e0(0x08)
	struct UWidgetAnimation* HoverAnimation; // 0x2e8(0x08)
	struct FText LabelText; // 0x2f0(0x18)
	char pad_308[0x8]; // 0x308(0x08)

	void HandleClicked(); // Function Mist.MistShopBrowserExpandItemWidget.HandleClicked // (Final|Native|Private) // @ game+0x1192680
};

// Class Mist.MistShopBrowserItemWidget
// Size: 0x340 (Inherited: 0x2c0)
struct UMistShopBrowserItemWidget : UMistUIWidget {
	char pad_2C0[0x30]; // 0x2c0(0x30)
	struct UButton* ButtonWidget; // 0x2f0(0x08)
	struct UWidget* SelectionWidget; // 0x2f8(0x08)
	struct UImage* CategoryIconWidget; // 0x300(0x08)
	struct UImage* ImageWidget; // 0x308(0x08)
	struct UMistShopCurrencyWidget* PriceWidget; // 0x310(0x08)
	struct UWidget* DiscountRibbonWidget; // 0x318(0x08)
	struct UMistTextBlock* DiscountPercentTextWidget; // 0x320(0x08)
	struct UWidgetAnimation* HoverAnimation; // 0x328(0x08)
	struct UMistShopOfferData* Offer; // 0x330(0x08)
	char pad_338[0x8]; // 0x338(0x08)

	void HandleClicked(); // Function Mist.MistShopBrowserItemWidget.HandleClicked // (Final|Native|Private) // @ game+0x11926a0
};

// Class Mist.MistShopBrowserPreviewWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistShopBrowserPreviewWidget : UMistUIWidget {
	struct UMistShopOfferDetailsWidget* DetailsWidget; // 0x2c0(0x08)
	struct UMistShopOfferData* Offer; // 0x2c8(0x08)
};

// Class Mist.MistShopBrowserWidget
// Size: 0x3b0 (Inherited: 0x2c0)
struct UMistShopBrowserWidget : UMistUIWidget {
	char pad_2C0[0x30]; // 0x2c0(0x30)
	int32_t NumColumns; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
	struct UMistIconButtonWidget* CollapseButtonWidget; // 0x2f8(0x08)
	struct UWidget* PreviewPanelWidget; // 0x300(0x08)
	struct UMistShopBrowserPreviewWidget* PreviewWidget; // 0x308(0x08)
	struct UHorizontalBox* CategoryListWidget; // 0x310(0x08)
	struct UTextBlock* CategoryNameWidget; // 0x318(0x08)
	struct UUniformGridPanel* GridWidget; // 0x320(0x08)
	struct UComboBoxString* SortComboBoxWidget; // 0x328(0x08)
	struct UMistShopOfferListData* OfferList; // 0x330(0x08)
	struct TArray<struct UMistShopOfferData*> CurrentOffers; // 0x338(0x10)
	struct TArray<struct UMistShopCategoryWidget*> CurrentCategoryWidgets; // 0x348(0x10)
	struct TArray<struct UMistShopCategoryWidget*> CategoryWidgets; // 0x358(0x10)
	struct UMistShopCategoryWidget* SelectedCategoryWidget; // 0x368(0x08)
	struct UMistShopBrowserItemWidget* SelectedItemWidget; // 0x370(0x08)
	struct UMistShopCategoryWidget* FeaturedCategoryWidget; // 0x378(0x08)
	struct UMistShopCategoryWidget* SearchCategoryWidget; // 0x380(0x08)
	char pad_388[0x28]; // 0x388(0x28)

	struct UWidget* NavigateToPreview(enum class EUINavigation Nav); // Function Mist.MistShopBrowserWidget.NavigateToPreview // (Final|Native|Public|BlueprintCallable) // @ game+0x1192bd0
	struct UWidget* NavigateToItems(enum class EUINavigation Nav); // Function Mist.MistShopBrowserWidget.NavigateToItems // (Final|Native|Public|BlueprintCallable) // @ game+0x1192b40
	struct UWidget* NavigateToHeader(enum class EUINavigation Nav); // Function Mist.MistShopBrowserWidget.NavigateToHeader // (Final|Native|Public|BlueprintCallable) // @ game+0x1192ab0
	void HandleSortChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistShopBrowserWidget.HandleSortChanged // (Final|Native|Private) // @ game+0x1192720
	void HandleItemDiscountStateChanged(); // Function Mist.MistShopBrowserWidget.HandleItemDiscountStateChanged // (Final|Native|Private) // @ game+0x11926c0
};

// Class Mist.MistShopBuyButtonWidget
// Size: 0x328 (Inherited: 0x310)
struct UMistShopBuyButtonWidget : UMistLabelButtonWidget {
	struct UMistShopCurrencyWidget* PriceWidget; // 0x310(0x08)
	struct UMistShopBalanceData* Balance; // 0x318(0x08)
	char pad_320[0x8]; // 0x320(0x08)
};

// Class Mist.MistShopBuyCurrencyBundleWithSteamData
// Size: 0xb0 (Inherited: 0x28)
struct UMistShopBuyCurrencyBundleWithSteamData : UObject {
	char pad_28[0x58]; // 0x28(0x58)
	struct UMistBackendHttpClient* BackendClient; // 0x80(0x08)
	struct UMistShopCurrencyBundleData* CurrencyBundle; // 0x88(0x08)
	struct UMistGameClientSubsystem* GameClientInstance; // 0x90(0x08)
	char pad_98[0x18]; // 0x98(0x18)
};

// Class Mist.MistShopBuyCurrencyBundleWithSteamDialog
// Size: 0x3d8 (Inherited: 0x3c0)
struct UMistShopBuyCurrencyBundleWithSteamDialog : UMistUIDialog {
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x3c0(0x08)
	struct UMistShopCurrencyBundleData* Data; // 0x3c8(0x08)
	struct UMistShopBuyCurrencyBundleWithSteamData* ProcessData; // 0x3d0(0x08)
};

// Class Mist.MistShopBuyDialog
// Size: 0x450 (Inherited: 0x3c0)
struct UMistShopBuyDialog : UMistUIDialog {
	struct UMistTextBlock* TextWidget; // 0x3c0(0x08)
	struct UMistShopCurrencyWidget* PriceWidget; // 0x3c8(0x08)
	struct UWidget* GrantedItemsPanel; // 0x3d0(0x08)
	struct UHorizontalBox* GrantedItemsListWidget; // 0x3d8(0x08)
	struct UWidget* AlreadyOwnedItemsPanel; // 0x3e0(0x08)
	struct UHorizontalBox* AlreadyOwnedItemsListWidget; // 0x3e8(0x08)
	struct UMistBaseButtonWidget* OKButtonWidget; // 0x3f0(0x08)
	struct UMistBaseButtonWidget* CancelButtonWidget; // 0x3f8(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x400(0x08)
	struct UWidget* BuyingStatusWidget; // 0x408(0x08)
	struct UMistTextBlock* ResultTextWidget; // 0x410(0x08)
	struct UMistShopBalanceData* Balance; // 0x418(0x08)
	struct UMistShopInventoryData* Inventory; // 0x420(0x08)
	struct UMistShopOfferData* Offer; // 0x428(0x08)
	struct UMistShopBuyOfferData* BuyOffer; // 0x430(0x08)
	char pad_438[0x18]; // 0x438(0x18)
};

// Class Mist.MistShopBuyOfferData
// Size: 0xd0 (Inherited: 0x28)
struct UMistShopBuyOfferData : UObject {
	char pad_28[0x98]; // 0x28(0x98)
	struct UMistBackendHttpClient* BackendClient; // 0xc0(0x08)
	char pad_C8[0x8]; // 0xc8(0x08)
};

// Class Mist.MistShopCategoryWidget
// Size: 0x350 (Inherited: 0x2c0)
struct UMistShopCategoryWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct FLinearColor SelectedTint; // 0x2d8(0x10)
	struct UImage* IconWidget; // 0x2e8(0x08)
	char pad_2F0[0x10]; // 0x2f0(0x10)
	struct FMistShopCategoryRow DataRow; // 0x300(0x48)
	char pad_348[0x8]; // 0x348(0x08)
};

// Class Mist.MistShopCurrencyBundleItemWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistShopCurrencyBundleItemWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UTextBlock* DescriptionWidget; // 0x2c8(0x08)
	struct UMistShopCurrencyWidget* AmountWidget; // 0x2d0(0x08)
	struct UMistShopCurrencyWidget* BonusAmountWidget; // 0x2d8(0x08)
	struct UImage* ImageWidget; // 0x2e0(0x08)
	struct UTextBlock* PriceWidget; // 0x2e8(0x08)
	struct UMistBaseButtonWidget* BuyButtonWidget; // 0x2f0(0x08)
	struct UWidgetAnimation* SelectAnimation; // 0x2f8(0x08)
	char pad_300[0x18]; // 0x300(0x18)
	struct UMistShopCurrencyBundleData* Data; // 0x318(0x08)
};

// Class Mist.MistShopCurrencyBundleData
// Size: 0x138 (Inherited: 0x28)
struct UMistShopCurrencyBundleData : UObject {
	char pad_28[0x38]; // 0x28(0x38)
	struct FMistShopCurrencyBundleRow DataRow; // 0x60(0xa8)
	char pad_108[0x30]; // 0x108(0x30)
};

// Class Mist.MistShopCurrencyBundleListData
// Size: 0x1b0 (Inherited: 0x28)
struct UMistShopCurrencyBundleListData : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TArray<struct UMistShopCurrencyBundleData*> CurrencyBundles; // 0x98(0x10)
	char pad_A8[0x78]; // 0xa8(0x78)
	struct UMistBackendHttpClient* BackendClient; // 0x120(0x08)
	char pad_128[0x88]; // 0x128(0x88)
};

// Class Mist.MistShopCurrencyBundlesWidget
// Size: 0x368 (Inherited: 0x2c0)
struct UMistShopCurrencyBundlesWidget : UMistUIWidget {
	struct UMistUITabControl* TabControlWidget; // 0x2c0(0x08)
	struct UPanelWidget* CurrencyPanelWidget; // 0x2c8(0x08)
	struct UPanelWidget* CurrencyListWidget; // 0x2d0(0x08)
	struct UPanelWidget* VouchersPanelWidget; // 0x2d8(0x08)
	struct UPanelWidget* VouchersListWidget; // 0x2e0(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x2e8(0x08)
	struct FText CurrencyTabText; // 0x2f0(0x18)
	struct FText VouchersTabText; // 0x308(0x18)
	char pad_320[0x30]; // 0x320(0x30)
	struct UMistShopCurrencyBundleListData* CurrencyListData; // 0x350(0x08)
	struct UMistShopOfferListData* OfferListData; // 0x358(0x08)
	char pad_360[0x8]; // 0x360(0x08)
};

// Class Mist.MistShopCurrencyWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistShopCurrencyWidget : UMistUIWidget {
	struct UMistTextBlock* TextWidget; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)
};

// Class Mist.MistShopDataManager
// Size: 0x58 (Inherited: 0x28)
struct UMistShopDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistShopOfferListData* OfferListData; // 0x30(0x08)
	struct UMistShopBalanceData* BalanceData; // 0x38(0x08)
	struct UMistShopInventoryData* InventoryData; // 0x40(0x08)
	struct UMistShopUnclaimedItemsData* UnclaimedItemsData; // 0x48(0x08)
	struct UMistShopCurrencyBundleListData* CurrencyBundleListData; // 0x50(0x08)
};

// Class Mist.MistShopFeaturedCarouselWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistShopFeaturedCarouselWidget : UMistUIWidget {
	struct UScrollBox* ItemsScrollWidget; // 0x2c0(0x08)
	struct UHorizontalBox* ItemsListWidget; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct UWidget* WidgetToFocus; // 0x2d8(0x08)
	struct UMistShopOfferListData* OfferList; // 0x2e0(0x08)
	struct TArray<struct UMistShopOfferData*> Offers; // 0x2e8(0x10)

	struct UWidget* NavigateToPrevious(enum class EUINavigation Nav); // Function Mist.MistShopFeaturedCarouselWidget.NavigateToPrevious // (Final|Native|Public|BlueprintCallable) // @ game+0x1197190
	struct UWidget* NavigateToNext(enum class EUINavigation Nav); // Function Mist.MistShopFeaturedCarouselWidget.NavigateToNext // (Final|Native|Public|BlueprintCallable) // @ game+0x1197100
};

// Class Mist.MistShopFeaturedItemWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistShopFeaturedItemWidget : UMistUIWidget {
	struct UMistShopOfferDetailsWidget* DetailsWidget; // 0x2c0(0x08)
	struct UMistShopOfferData* Offer; // 0x2c8(0x08)
};

// Class Mist.MistShopHeaderWidget
// Size: 0x350 (Inherited: 0x2c0)
struct UMistShopHeaderWidget : UMistUIWidget {
	char pad_2C0[0x60]; // 0x2c0(0x60)
	struct UMistShopCurrencyWidget* BalanceWidget; // 0x320(0x08)
	struct UMistEditableTextBox* SearchTextWidget; // 0x328(0x08)
	struct UMistIconButtonWidget* BuyCurrencyButtonWidget; // 0x330(0x08)
	struct UMistBaseButtonWidget* InventoryButtonWidget; // 0x338(0x08)
	struct UMistIconButtonWidget* ExitButtonWidget; // 0x340(0x08)
	struct UMistShopBalanceData* Balance; // 0x348(0x08)

	void HandleTextChanged(struct FText& Text); // Function Mist.MistShopHeaderWidget.HandleTextChanged // (Final|Native|Private|HasOutParms) // @ game+0x1196df0
};

// Class Mist.MistShopInventoryItemData
// Size: 0xf0 (Inherited: 0x28)
struct UMistShopInventoryItemData : UObject {
	char pad_28[0x10]; // 0x28(0x10)
	struct FMistShopItemRow DataRow; // 0x38(0x88)
	char pad_C0[0x30]; // 0xc0(0x30)
};

// Class Mist.MistShopInventoryData
// Size: 0x1a0 (Inherited: 0x28)
struct UMistShopInventoryData : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TArray<struct UMistShopInventoryItemData*> Items; // 0x98(0x10)
	char pad_A8[0x60]; // 0xa8(0x60)
	struct UMistBackendHttpClient* BackendClient; // 0x108(0x08)
	char pad_110[0x90]; // 0x110(0x90)
};

// Class Mist.MistShopInventoryItemWidget
// Size: 0x388 (Inherited: 0x2c0)
struct UMistShopInventoryItemWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UImage* IconWidget; // 0x2c8(0x08)
	struct UTextBlock* QuantityWidget; // 0x2d0(0x08)
	struct UButton* PreviewButtonWidget; // 0x2d8(0x08)
	struct UMistShopInventoryItemData* Data; // 0x2e0(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x2e8(0x08)
	char pad_2F0[0x98]; // 0x2f0(0x98)

	void HandlePreviewClicked(); // Function Mist.MistShopInventoryItemWidget.HandlePreviewClicked // (Final|Native|Private) // @ game+0x1196dd0
};

// Class Mist.MistShopInventoryWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistShopInventoryWidget : UMistUIWidget {
	struct UHorizontalBox* FiltersBox; // 0x2c0(0x08)
	struct UWidget* GloballyOwnedHeaderWidget; // 0x2c8(0x08)
	struct UWidget* GloballyOwnedPanelWidget; // 0x2d0(0x08)
	struct UPanelWidget* GloballyOwnedItemsWidget; // 0x2d8(0x08)
	struct UPanelWidget* LocallyOwnedItemsWidget; // 0x2e0(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x2e8(0x08)
	char pad_2F0[0x18]; // 0x2f0(0x18)
	struct UMistShopInventoryData* Data; // 0x308(0x08)
	struct UMistShopCategoryWidget* SelectedCategoryWidget; // 0x310(0x08)
};

// Class Mist.MistShopItemIconWidget
// Size: 0x3a0 (Inherited: 0x2c0)
struct UMistShopItemIconWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UMistUIButton* Button; // 0x2d8(0x08)
	struct UImage* IconWidget; // 0x2e0(0x08)
	struct UTextBlock* CountTextWidget; // 0x2e8(0x08)
	struct UWidget* OwnedOverlayWidget; // 0x2f0(0x08)
	struct FMistShopOfferItemData Item; // 0x2f8(0x98)
	struct UMistShopInventoryData* Inventory; // 0x390(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x398(0x08)

	void HandleClicked(struct UMistUIButton* Sender); // Function Mist.MistShopItemIconWidget.HandleClicked // (Final|Native|Private) // @ game+0x1141b60
};

// Class Mist.MistShopItemInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistShopItemInterface : UInterface {
};

// Class Mist.MistShopItemPopupWidget
// Size: 0x428 (Inherited: 0x2c0)
struct UMistShopItemPopupWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UTextBlock* DescriptionWidget; // 0x2c8(0x08)
	struct UWidget* CountPanelWidget; // 0x2d0(0x08)
	struct UTextBlock* CountWidget; // 0x2d8(0x08)
	struct UWidget* OwnedPanelWidget; // 0x2e0(0x08)
	struct UTextBlock* OwnedCountWidget; // 0x2e8(0x08)
	struct FMistShopOfferItemData OfferItem; // 0x2f0(0x98)
	struct UMistShopInventoryItemData* Data; // 0x388(0x08)
	char pad_390[0x90]; // 0x390(0x90)
	struct UMistShopInventoryData* Inventory; // 0x420(0x08)
};

// Class Mist.MistShopOfferDetailsWidget
// Size: 0x330 (Inherited: 0x2c0)
struct UMistShopOfferDetailsWidget : UMistUIWidget {
	struct UMistTextBlock* NameTextWidget; // 0x2c0(0x08)
	struct UMistTextBlock* DescriptionTextWidget; // 0x2c8(0x08)
	struct UHorizontalBox* ItemListWidget; // 0x2d0(0x08)
	struct UWidget* DiscountRibbonWidget; // 0x2d8(0x08)
	struct UWidget* DiscountInfoWidget; // 0x2e0(0x08)
	struct UMistShopCurrencyWidget* DiscountOriginalPriceWidget; // 0x2e8(0x08)
	struct UMistTextBlock* DiscountPercentTextWidget; // 0x2f0(0x08)
	struct UMistTextBlock* DiscountRemainingTimeTextWidget; // 0x2f8(0x08)
	struct UImage* ImageWidget; // 0x300(0x08)
	struct UImage* CategoryIconWidget; // 0x308(0x08)
	struct UMistBaseButtonWidget* PreviewButtonWidget; // 0x310(0x08)
	struct UMistShopBuyButtonWidget* BuyButtonWidget; // 0x318(0x08)
	struct UMistShopOfferData* Offer; // 0x320(0x08)
	char pad_328[0x8]; // 0x328(0x08)
};

// Class Mist.MistShopOfferData
// Size: 0x160 (Inherited: 0x28)
struct UMistShopOfferData : UObject {
	char pad_28[0x60]; // 0x28(0x60)
	struct FMistShopOfferRow DataRow; // 0x88(0x60)
	struct FMistShopCategoryRow CategoryDataRow; // 0xe8(0x48)
	char pad_130[0x30]; // 0x130(0x30)
};

// Class Mist.MistShopOfferListData
// Size: 0x1b0 (Inherited: 0x28)
struct UMistShopOfferListData : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TArray<struct UMistShopOfferData*> Offers; // 0x98(0x10)
	char pad_A8[0x78]; // 0xa8(0x78)
	struct UMistBackendHttpClient* BackendClient; // 0x120(0x08)
	char pad_128[0x88]; // 0x128(0x88)
};

// Class Mist.MistShopPreviewDialog
// Size: 0x470 (Inherited: 0x3c0)
struct UMistShopPreviewDialog : UMistUIDialog {
	struct AMistCharacterMannequin* MannequinActorClass; // 0x3c0(0x08)
	struct AActor* FlagActorClass; // 0x3c8(0x08)
	struct AMistWalker* PreviewWalkerClass; // 0x3d0(0x08)
	struct TArray<struct UMistEquipmentItemTemplate*> MannequinEquipmentItemClasses; // 0x3d8(0x10)
	struct UHorizontalBox* ItemsListWidget; // 0x3e8(0x08)
	struct UMistPhotoStageWidget* PreviewWidget; // 0x3f0(0x08)
	struct UMistBaseButtonWidget* CloseButtonWidget; // 0x3f8(0x08)
	struct UMistShopOfferData* Offer; // 0x400(0x08)
	struct UMistShopInventoryItemData* InventoryItem; // 0x408(0x08)
	struct UMistShopPreviewItemIconWidget* SelectedItemWidget; // 0x410(0x08)
	struct AActor* PreviewActor; // 0x418(0x08)
	char pad_420[0x20]; // 0x420(0x20)
	struct UTexture2D* ClanEmblem; // 0x440(0x08)
	char pad_448[0x28]; // 0x448(0x28)
};

// Class Mist.MistShopPreviewItemIconWidget
// Size: 0x3a0 (Inherited: 0x2c0)
struct UMistShopPreviewItemIconWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UButton* ButtonWidget; // 0x2d8(0x08)
	struct UImage* IconWidget; // 0x2e0(0x08)
	struct UWidget* SelectionWidget; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)
	struct FMistShopOfferItemData OfferItem; // 0x2f8(0x98)
	struct UMistShopInventoryItemData* InventoryItem; // 0x390(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x398(0x08)

	void HandleClicked(); // Function Mist.MistShopPreviewItemIconWidget.HandleClicked // (Final|Native|Private) // @ game+0x1196910
};

// Class Mist.MistShopScreen
// Size: 0x410 (Inherited: 0x3a0)
struct UMistShopScreen : UMistUIScreen {
	struct UMistShopHeaderWidget* HeaderWidget; // 0x3a0(0x08)
	struct UPanelWidget* BrowserContainerWidget; // 0x3a8(0x08)
	struct UMistShopFeaturedCarouselWidget* FeaturedCarouselWidget; // 0x3b0(0x08)
	struct UMistShopBrowserWidget* BrowserWidget; // 0x3b8(0x08)
	struct UMistShopCurrencyBundlesWidget* CurrencyBundlesWidget; // 0x3c0(0x08)
	struct UMistShopInventoryWidget* InventoryWidget; // 0x3c8(0x08)
	struct UWidget* LoadingOverlayWidget; // 0x3d0(0x08)
	struct UMistNotificationsWidget* NotificationsWidget; // 0x3d8(0x08)
	struct UMistShopDataManager* Shop; // 0x3e0(0x08)
	struct UMistShopOfferListData* OfferList; // 0x3e8(0x08)
	struct UMistShopBalanceData* Balance; // 0x3f0(0x08)
	struct UMistShopInventoryData* Inventory; // 0x3f8(0x08)
	struct UMistShopUnclaimedItemsData* UnclaimedItems; // 0x400(0x08)
	struct UMistShopCurrencyBundleListData* CurrencyBundleList; // 0x408(0x08)

	struct UWidget* NavigateToHeader(enum class EUINavigation Nav); // Function Mist.MistShopScreen.NavigateToHeader // (Final|Native|Public|BlueprintCallable) // @ game+0x1197070
	struct UWidget* NavigateToFeatured(enum class EUINavigation Nav); // Function Mist.MistShopScreen.NavigateToFeatured // (Final|Native|Public|BlueprintCallable) // @ game+0x1196fe0
	struct UWidget* NavigateToContent(enum class EUINavigation Nav); // Function Mist.MistShopScreen.NavigateToContent // (Final|Native|Public|BlueprintCallable) // @ game+0x1196f50
	struct UWidget* NavigateToBrowser(enum class EUINavigation Nav); // Function Mist.MistShopScreen.NavigateToBrowser // (Final|Native|Public|BlueprintCallable) // @ game+0x1196ec0
};

// Class Mist.MistShopServerDataManager
// Size: 0x98 (Inherited: 0x28)
struct UMistShopServerDataManager : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct UMistBackendHttpClient* BackendClient; // 0x40(0x08)
	struct TMap<struct FString, struct UMistShopServerInventoryData*> InventoryData; // 0x48(0x50)
};

// Class Mist.MistShopServerInventoryData
// Size: 0x148 (Inherited: 0x28)
struct UMistShopServerInventoryData : UObject {
	char pad_28[0xd8]; // 0x28(0xd8)
	struct UMistBackendHttpClient* BackendClient; // 0x100(0x08)
	struct UMistShopServerDataManager* DataManager; // 0x108(0x08)
	char pad_110[0x38]; // 0x110(0x38)
};

// Class Mist.MistShopTestCreditCurrencyData
// Size: 0xa0 (Inherited: 0x28)
struct UMistShopTestCreditCurrencyData : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct UMistBackendHttpClient* BackendClient; // 0x98(0x08)
};

// Class Mist.MistShopTestCreditCurrencyDialog
// Size: 0x3d8 (Inherited: 0x3c0)
struct UMistShopTestCreditCurrencyDialog : UMistUIDialog {
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x3c0(0x08)
	struct UMistShopCurrencyBundleData* Data; // 0x3c8(0x08)
	struct UMistShopTestCreditCurrencyData* ProcessData; // 0x3d0(0x08)
};

// Class Mist.MistShopUnclaimedItemsData
// Size: 0x138 (Inherited: 0x28)
struct UMistShopUnclaimedItemsData : UObject {
	char pad_28[0x78]; // 0x28(0x78)
	struct UMistBackendHttpClient* BackendClient; // 0xa0(0x08)
	struct UMistShopDataManager* Manager; // 0xa8(0x08)
	char pad_B0[0x88]; // 0xb0(0x88)
};

// Class Mist.MistShopVoucherItemWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistShopVoucherItemWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UTextBlock* DescriptionWidget; // 0x2c8(0x08)
	struct UMistTextBlock* AmountWidget; // 0x2d0(0x08)
	struct UImage* ImageWidget; // 0x2d8(0x08)
	struct UMistShopBuyButtonWidget* BuyButtonWidget; // 0x2e0(0x08)
	struct UWidgetAnimation* SelectAnimation; // 0x2e8(0x08)
	struct UMistShopOfferData* Data; // 0x2f0(0x08)
};

// Class Mist.MistSiegePodComponent
// Size: 0x2f0 (Inherited: 0x1f0)
struct UMistSiegePodComponent : UMistInteractableComponent {
	char pad_1F0[0x8]; // 0x1f0(0x08)
	struct FMulticastInlineDelegate OnConnectedWeaponChanged; // 0x1f8(0x10)
	struct FMistComponentReference CameraSpringArmRef; // 0x208(0x28)
	struct FMistComponentReference YawComponentRef; // 0x230(0x28)
	struct FMistComponentReference PitchComponentRef; // 0x258(0x28)
	struct FMistComponentReference CharacterAttachRef; // 0x280(0x28)
	struct TArray<struct FMistComponentReference> CharacterDetachRefs; // 0x2a8(0x10)
	float PitchAngularSpeed; // 0x2b8(0x04)
	float YawAngularSpeed; // 0x2bc(0x04)
	struct AMistSiegePodWeapon* ConnectedWeapon; // 0x2c0(0x08)
	struct FRotator PrevRotator; // 0x2c8(0x0c)
	char pad_2D4[0x1c]; // 0x2d4(0x1c)

	void HandlePlayerLeft(struct AMistCharacter* Player); // Function Mist.MistSiegePodComponent.HandlePlayerLeft // (Final|Native|Private) // @ game+0x1196d50
	void HandlePlayerEntered(struct AMistCharacter* Player); // Function Mist.MistSiegePodComponent.HandlePlayerEntered // (Final|Native|Private) // @ game+0x1196cd0
	void HandleInteractQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // Function Mist.MistSiegePodComponent.HandleInteractQuery // (Final|Native|Private|HasOutParms) // @ game+0x1196a10
	void HandleInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistSiegePodComponent.HandleInteract // (Final|Native|Private|HasOutParms) // @ game+0x1196930
	void ConnectedWeaponChanged__DelegateSignature(struct UMistSiegePodComponent* Sender, struct AMistSiegePodWeapon* PrevWeapon, struct AMistSiegePodWeapon* NewWeapon); // DelegateFunction Mist.MistSiegePodComponent.ConnectedWeaponChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistSiegePodWeapon
// Size: 0x538 (Inherited: 0x4b0)
struct AMistSiegePodWeapon : AMistPlaceable {
	char pad_4B0[0x88]; // 0x4b0(0x88)

	void HandlePlayerLeftPod(struct AMistCharacter* Player); // Function Mist.MistSiegePodWeapon.HandlePlayerLeftPod // (Final|Native|Private) // @ game+0x119ae80
	void HandlePlayerEnteredPod(struct AMistCharacter* Player); // Function Mist.MistSiegePodWeapon.HandlePlayerEnteredPod // (Final|Native|Private) // @ game+0x119ae00
};

// Class Mist.MistSiegeWeaponTestBot
// Size: 0x9c0 (Inherited: 0x970)
struct AMistSiegeWeaponTestBot : AMistCharacter {
	char pad_970[0x8]; // 0x970(0x08)
	struct UMistContainerComponent* BotContainer; // 0x978(0x08)
	struct FMistAudioTestSettings Settings; // 0x980(0x18)
	bool bIsManningWeapon; // 0x998(0x01)
	bool bIsShooting; // 0x999(0x01)
	char pad_99A[0x6]; // 0x99a(0x06)
	struct AMistStructurePart* PossesedStructure; // 0x9a0(0x08)
	struct UMistMannedControlComponent* PossesedControlComponent; // 0x9a8(0x08)
	struct UMistContainerComponent* PossessedContainerComponent; // 0x9b0(0x08)
	char pad_9B8[0x8]; // 0x9b8(0x08)

	bool StopShooting(); // Function Mist.MistSiegeWeaponTestBot.StopShooting // (Final|Native|Public|BlueprintCallable) // @ game+0x119b4f0
	bool StartShooting(); // Function Mist.MistSiegeWeaponTestBot.StartShooting // (Final|Native|Public|BlueprintCallable) // @ game+0x119b4c0
	bool IsShooting(); // Function Mist.MistSiegeWeaponTestBot.IsShooting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119af80
	bool IsManningWeapon(); // Function Mist.MistSiegeWeaponTestBot.IsManningWeapon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x119af60
};

// Class Mist.MistSimpleTeleporterComponent
// Size: 0x208 (Inherited: 0x1f0)
struct UMistSimpleTeleporterComponent : UMistInteractableComponent {
	struct USceneComponent* TeleportationEndpoint; // 0x1f0(0x08)
	struct FName EndpointName; // 0x1f8(0x08)
	struct FName SocketName; // 0x200(0x08)
};

// Class Mist.MistSimpleTextDetailsWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistSimpleTextDetailsWidget : UMistUIWidget {
	struct UTextBlock* TextWidget; // 0x2c0(0x08)
	struct UTextBlock* ValueWidget; // 0x2c8(0x08)
	char pad_2D0[0x8]; // 0x2d0(0x08)
	struct FText DisplayedText; // 0x2d8(0x18)
	float DisplayedValue; // 0x2f0(0x04)
	char pad_2F4[0x4]; // 0x2f4(0x04)
};

// Class Mist.MistSingingComponent
// Size: 0x1b8 (Inherited: 0xf0)
struct UMistSingingComponent : UActorComponent {
	char pad_F0[0x58]; // 0xf0(0x58)
	struct UAudioComponent* NoteA; // 0x148(0x08)
	struct UAudioComponent* NoteB; // 0x150(0x08)
	struct UAudioComponent* EndNoteA; // 0x158(0x08)
	struct UAudioComponent* EndNoteB; // 0x160(0x08)
	int32_t NumberOfKeysToCough; // 0x168(0x04)
	float CoughCheckDuration; // 0x16c(0x04)
	float TimeOfPitchAdjust; // 0x170(0x04)
	float NoteFadeOutTime_Male_2; // 0x174(0x04)
	float NoteFadeOutTime_Male_3; // 0x178(0x04)
	float NoteFadeOutTime_Male_4; // 0x17c(0x04)
	float NoteFadeOutTime_Male_5; // 0x180(0x04)
	float NoteFadeOutTime_Female_2; // 0x184(0x04)
	float NoteFadeOutTime_Female_3; // 0x188(0x04)
	float NoteFadeOutTime_Female_4; // 0x18c(0x04)
	float NoteFadeOutTime_Female_5; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct UAudioComponent* VOLowStaminaBreathe; // 0x198(0x08)
	bool bDownedStateActive; // 0x1a0(0x01)
	bool bThirstDamageActive; // 0x1a1(0x01)
	char pad_1A2[0x6]; // 0x1a2(0x06)
	struct USoundConcurrency* SoundConcurrency_Cough; // 0x1a8(0x08)
	struct USoundConcurrency* SoundConcurrency_StopSinging; // 0x1b0(0x08)

	void UnlockSinging(); // Function Mist.MistSingingComponent.UnlockSinging // (Final|Native|Protected) // @ game+0x119b520
	void SingingInterrupted(bool bUnlockAfterDelay); // Function Mist.MistSingingComponent.SingingInterrupted // (Final|Native|Public|BlueprintCallable) // @ game+0x119b430
	void ServerUnlockSinging(); // Function Mist.MistSingingComponent.ServerUnlockSinging // (Net|Native|Event|Protected|NetServer) // @ game+0x10c2490
	void ServerLockSinging(); // Function Mist.MistSingingComponent.ServerLockSinging // (Net|Native|Event|Protected|NetServer) // @ game+0x10cccf0
	void ServerChangeSingingNote(int8_t NoteIndex, int8_t InNumberOfKeysPressed); // Function Mist.MistSingingComponent.ServerChangeSingingNote // (Net|Native|Event|Protected|NetServer) // @ game+0x119b370
	void ServerChangeSingingMode(int8_t InSingingMode); // Function Mist.MistSingingComponent.ServerChangeSingingMode // (Net|Native|Event|Protected|NetServer) // @ game+0x10f0b20
	void ServerChangePitchModifier(float InPitchModifier); // Function Mist.MistSingingComponent.ServerChangePitchModifier // (Net|Native|Event|Protected|NetServer) // @ game+0x119b2f0
	void ResetCoughCheck(); // Function Mist.MistSingingComponent.ResetCoughCheck // (Final|Native|Protected) // @ game+0x119b2d0
	void MulticastStopSingingNote(); // Function Mist.MistSingingComponent.MulticastStopSingingNote // (Net|Native|Event|NetMulticast|Protected) // @ game+0x108bfd0
	void MulticastSetLockSinging(bool bLocked); // Function Mist.MistSingingComponent.MulticastSetLockSinging // (Net|Native|Event|NetMulticast|Protected) // @ game+0x119b1a0
	void MulticastChangeSingingNote(int8_t NoteIndex, int8_t InNumberOfKeysPressed); // Function Mist.MistSingingComponent.MulticastChangeSingingNote // (Net|Native|Event|NetMulticast|Protected) // @ game+0x119b0e0
	void MulticastChangeSingingMode(int8_t InSingingMode); // Function Mist.MistSingingComponent.MulticastChangeSingingMode // (Net|Native|Event|NetMulticast|Protected) // @ game+0x10f0ba0
	void MulticastChangePitchModifier(float InPitchModifier); // Function Mist.MistSingingComponent.MulticastChangePitchModifier // (Net|Native|Event|NetMulticast|Protected) // @ game+0x119b060
	void InternalSingNoteB(); // Function Mist.MistSingingComponent.InternalSingNoteB // (Final|Native|Protected) // @ game+0x119af40
	void InternalSingNoteA(); // Function Mist.MistSingingComponent.InternalSingNoteA // (Final|Native|Protected) // @ game+0x119af20
	void InternalSing(); // Function Mist.MistSingingComponent.InternalSing // (Final|Native|Protected) // @ game+0x119af00
};

// Class Mist.MistSingingStatusWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UMistSingingStatusWidget : UMistHUDWidget {
	struct UTextBlock* TypeText; // 0x2e0(0x08)
	struct UImage* SingingImage; // 0x2e8(0x08)
};

// Class Mist.MistSkeletalMeshComponent
// Size: 0xf40 (Inherited: 0xea0)
struct UMistSkeletalMeshComponent : USkeletalMeshComponentBudgeted {
	struct UStaticMesh* ReplacementStaticMesh; // 0xea0(0x08)
	enum class EMistSkeletalMeshReplacementRange ReplacementRange; // 0xea8(0x01)
	char pad_EA9[0x7]; // 0xea9(0x07)
	struct UAnimationAsset* PreviewAnimationAsset; // 0xeb0(0x08)
	float PreviewAnimationTime; // 0xeb8(0x04)
	bool bSubscribeToDisablerEvents; // 0xebc(0x01)
	char pad_EBD[0x3]; // 0xebd(0x03)
	float InitialDisablingDelay; // 0xec0(0x04)
	float DisablingDelay; // 0xec4(0x04)
	struct FMulticastInlineDelegate OnTickStatusChanged; // 0xec8(0x10)
	struct UStaticMeshComponent* ReplacementMeshComponent; // 0xed8(0x08)
	struct UMistCharacterFXManagerComponent* CachedFXManagerComponent; // 0xee0(0x08)
	char pad_EE8[0x58]; // 0xee8(0x58)
};

// Class Mist.MistSkeletalMeshDisablerInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistSkeletalMeshDisablerInterface : UInterface {
};

// Class Mist.MistSkeletalMeshGridComponent
// Size: 0x140 (Inherited: 0xf0)
struct UMistSkeletalMeshGridComponent : UActorComponent {
	char pad_F0[0x50]; // 0xf0(0x50)
};

// Class Mist.MistWalker
// Size: 0xf38 (Inherited: 0x588)
struct AMistWalker : AMistStructure {
	char pad_588[0x148]; // 0x588(0x148)
	struct FMulticastInlineDelegate OnWalkerCollidedGeneral; // 0x6d0(0x10)
	struct FMulticastInlineDelegate OnWalkerCollided; // 0x6e0(0x10)
	struct FMulticastInlineDelegate OnWalkerCollidedMob; // 0x6f0(0x10)
	struct FMulticastInlineDelegate OnWalkerSandinessChanged; // 0x700(0x10)
	struct UStaticMeshComponent* Mesh; // 0x710(0x08)
	struct UStaticMeshComponent* FlagsMesh; // 0x718(0x08)
	struct UWalkerVehicleMovementComponent* VehicleMovement; // 0x720(0x08)
	struct UMistPlayerRespawnComponent* PlayerRespawnComponent; // 0x728(0x08)
	struct UMistFlipWalkerComponent* FlipInteractableComponent; // 0x730(0x08)
	struct UMistClanColorComponent* ClanColorComponent; // 0x738(0x08)
	struct UMistTerrainAffectionComponent* TerrainAffectionComponent; // 0x740(0x08)
	struct UMistBoostContainerComponent* BoostContainerComponent; // 0x748(0x08)
	struct UMistSparePartsContainerComponent* SparePartsContainerComponent; // 0x750(0x08)
	struct UMistTorqueGeneratorComponent* PassiveTorqueGeneration; // 0x758(0x08)
	struct UMistInteractableComponent* SelectSpawnpointComponent; // 0x760(0x08)
	struct UMistClanPermissionComponent* ClanPermissionComponent; // 0x768(0x08)
	struct UMistStructureCustomizationComponent* CustomizationComponent; // 0x770(0x08)
	struct TArray<float> BoostValues; // 0x778(0x10)
	struct FMistWalkerReplicatedSparePartValues ReplicatedSparePartsValues; // 0x788(0x10)
	struct FName FlagShopItemId; // 0x798(0x08)
	struct UDamageType* ImpactDamageType; // 0x7a0(0x08)
	float MinSpeedForImpactDamage; // 0x7a8(0x04)
	float MinImpactDamage; // 0x7ac(0x04)
	float ImpactDamageMinMultiplier; // 0x7b0(0x04)
	float ImpactDamageMaxMultiplier; // 0x7b4(0x04)
	float ImpactDamageAngleMaxFactor; // 0x7b8(0x04)
	float ImpactDamageAngleMinFactor; // 0x7bc(0x04)
	float CollisionBreakSeconds; // 0x7c0(0x04)
	bool bDamageProtected; // 0x7c4(0x01)
	bool bSupportsSafeLogout; // 0x7c5(0x01)
	char pad_7C6[0x2]; // 0x7c6(0x02)
	int32_t TradeProtectionLevel; // 0x7c8(0x04)
	float DamageResistanceFactor; // 0x7cc(0x04)
	float Health; // 0x7d0(0x04)
	float RepairHealth; // 0x7d4(0x04)
	enum class EMistWalkerWreckageState WreckageState; // 0x7d8(0x01)
	char pad_7D9[0x3]; // 0x7d9(0x03)
	int32_t WalkerStage; // 0x7dc(0x04)
	enum class EMistWalkerType WalkerType; // 0x7e0(0x01)
	char pad_7E1[0x7]; // 0x7e1(0x07)
	struct FString WalkerGuid; // 0x7e8(0x10)
	float SandinessLevel; // 0x7f8(0x04)
	int32_t ExitDirection; // 0x7fc(0x04)
	int32_t ExitTileID; // 0x800(0x04)
	char pad_804[0x4]; // 0x804(0x04)
	struct FString CustomName; // 0x808(0x10)
	struct TArray<struct FMistWalkerReplicatedDestroyedPart> ReplicatedDestroyedParts; // 0x818(0x10)
	uint32_t CollisionGroup; // 0x828(0x04)
	bool bDebugMaxHeightForFoliageDestruction; // 0x82c(0x01)
	char pad_82D[0x3]; // 0x82d(0x03)
	float MaxHeightForFoliageDestruction; // 0x830(0x04)
	float FoliageBaseDamage; // 0x834(0x04)
	float FoliageSpeedDamageModifier; // 0x838(0x04)
	float FoliageDamageSpeedThreshold; // 0x83c(0x04)
	float ImpulseOnDestructionMultiply; // 0x840(0x04)
	float TorqueOnDestructionMultiply; // 0x844(0x04)
	struct UDamageType* CollisionDamageType; // 0x848(0x08)
	struct TArray<struct AMistWalkerPart*> Parts; // 0x850(0x10)
	struct TArray<struct TScriptInterface<IMistWalkerModule>> Modules; // 0x860(0x10)
	struct UMistMannedWalkerControlComponent* ControllingComponent; // 0x870(0x08)
	struct TArray<struct UMistContainerComponent*> AmmoContainers; // 0x878(0x10)
	struct TSet<struct UMistGrapplingTetherComponent*> GrappledTethers; // 0x888(0x50)
	struct TSet<struct AMistCharacter*> BasedCharacters; // 0x8d8(0x50)
	struct TSet<struct AMistDropBag*> BasedDropBags; // 0x928(0x50)
	struct TSet<struct AMistCharacter*> MannedCharacters; // 0x978(0x50)
	char pad_9C8[0x430]; // 0x9c8(0x430)
	bool IsInLava; // 0xdf8(0x01)
	bool IsInWater; // 0xdf9(0x01)
	char pad_DFA[0x16]; // 0xdfa(0x16)
	float LegHarvestingMinSpeed; // 0xe10(0x04)
	float LegItemLootingMinSpeed; // 0xe14(0x04)
	float RepairItemsInterval; // 0xe18(0x04)
	struct FVector RipplePosition; // 0xe1c(0x0c)
	struct FRigidBodyErrorCorrection DestroyedPartReplicationParams; // 0xe28(0x34)
	char pad_E5C[0x4]; // 0xe5c(0x04)
	float LogoutTimer; // 0xe60(0x04)
	char pad_E64[0x4]; // 0xe64(0x04)
	struct AMistWorldDataHolder* CachedWorldDataHolder; // 0xe68(0x08)
	float CraftingPauseDuration; // 0xe70(0x04)
	char pad_E74[0x5]; // 0xe74(0x05)
	bool bShowAutoLogoutTimeToClients; // 0xe79(0x01)
	char pad_E7A[0x6]; // 0xe7a(0x06)
	float ServerAutoLogoutTime; // 0xe80(0x04)
	float SupportedWeight; // 0xe84(0x04)
	char pad_E88[0x10]; // 0xe88(0x10)
	struct AMistPlayer* AutoLogoutInstigator; // 0xe98(0x08)
	char pad_EA0[0x28]; // 0xea0(0x28)
	struct TMap<struct AActor*, float> WalkersCollided; // 0xec8(0x50)
	char pad_F18[0x20]; // 0xf18(0x20)

	void WalkerSandinessChanged__DelegateSignature(float NewSandiness); // DelegateFunction Mist.MistWalker.WalkerSandinessChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void WalkerGeneralCollisionEvent__DelegateSignature(struct AActor* Other, float MyImpactSpeed, struct FVector HitLocation, struct FVector BodySize); // DelegateFunction Mist.MistWalker.WalkerGeneralCollisionEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x163f1c0
	void WalkerCollisionEvent__DelegateSignature(struct AActor* Other, float Damage, float ImpactSpeedValue, float SpeedMult, float AngleMult, float MyImpactSpeed, struct FVector HitLocation); // DelegateFunction Mist.MistWalker.WalkerCollisionEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasDefaults) // @ game+0x163f1c0
	void UpdateClientSleepState(); // Function Mist.MistWalker.UpdateClientSleepState // (Final|Native|Private) // @ game+0x11d1df0
	void StartOverlappingWater(float WaterZPosition, bool bIsLava); // Function Mist.MistWalker.StartOverlappingWater // (Final|Native|Public|BlueprintCallable) // @ game+0x11d1d20
	void RippleDuringStep(struct UMeshComponent* MeshComponent, struct AActor* ThisObject, struct FName NotifyName, struct UParticleSystem* WaterSplash, struct FName FirstBoneName, struct FName SecondBoneName, struct FName FirstLegUpEventName, struct FName FirstLegDownEventName, struct FName SecondLegUpEventName, struct FName SecondLegDownEventName, float SidewaysScale, float SpeedScale, float Min, float Max); // Function Mist.MistWalker.RippleDuringStep // (Native|Public|BlueprintCallable) // @ game+0x11d1950
	void OnWalkerDamage(float PrevHealth, float NewHealth, float MaximumHealth); // Function Mist.MistWalker.OnWalkerDamage // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_WreckageState(); // Function Mist.MistWalker.OnRep_WreckageState // (Final|Native|Private) // @ game+0x11d1930
	void OnRep_WalkerStage(); // Function Mist.MistWalker.OnRep_WalkerStage // (Native|Public) // @ game+0x11d1910
	void OnRep_TradeProtectionLevel(); // Function Mist.MistWalker.OnRep_TradeProtectionLevel // (Final|Native|Private) // @ game+0x11d18f0
	void OnRep_SupportedWeight(); // Function Mist.MistWalker.OnRep_SupportedWeight // (Final|Native|Private) // @ game+0x11d18d0
	void OnRep_SparePartsValues(); // Function Mist.MistWalker.OnRep_SparePartsValues // (Final|Native|Private) // @ game+0x11d1790
	void OnRep_SandinessLevel(); // Function Mist.MistWalker.OnRep_SandinessLevel // (Native|Public) // @ game+0x11d18b0
	void OnRep_ReplicatedDestroyedParts(); // Function Mist.MistWalker.OnRep_ReplicatedDestroyedParts // (Final|Native|Private) // @ game+0x11d1890
	void OnRep_Health(float PrevHealth); // Function Mist.MistWalker.OnRep_Health // (Final|Native|Private) // @ game+0x11d1810
	void OnRep_CustomName(); // Function Mist.MistWalker.OnRep_CustomName // (Final|Native|Private) // @ game+0x11d17f0
	void OnRep_CraftingPauseDuration(); // Function Mist.MistWalker.OnRep_CraftingPauseDuration // (Final|Native|Private) // @ game+0x11d17d0
	void OnRep_CollisionGroup(); // Function Mist.MistWalker.OnRep_CollisionGroup // (Final|Native|Private) // @ game+0x11d17b0
	void OnRep_BoostValues(); // Function Mist.MistWalker.OnRep_BoostValues // (Final|Native|Private) // @ game+0x11d1790
	void MulticastSetRepairHealth(float InRepairHealth); // Function Mist.MistWalker.MulticastSetRepairHealth // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11d1710
	void MulticastSetCraftingPaused(bool bPaused); // Function Mist.MistWalker.MulticastSetCraftingPaused // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11d1680
	void MulticastSetAutoLogoutStatus(bool bInShowToClients, float InServerAutoLogoutTime); // Function Mist.MistWalker.MulticastSetAutoLogoutStatus // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11d15b0
	void MulticastNotifyPreventedModuleDestruction(struct UMistBoostItemTemplate* Module); // Function Mist.MistWalker.MulticastNotifyPreventedModuleDestruction // (Net|Native|Event|NetMulticast|Public) // @ game+0x11d1520
	void LogWalkerState(int32_t State, struct FTransform Transform, struct FString Filename, struct FString walkerName, bool cache); // Function Mist.MistWalker.LogWalkerState // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11d1290
	void LogWalkerFlushAll(struct FString Filename); // Function Mist.MistWalker.LogWalkerFlushAll // (Final|Native|Public|BlueprintCallable) // @ game+0x11d11b0
	void HandleSelectSpawnpointQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // Function Mist.MistWalker.HandleSelectSpawnpointQuery // (Final|Native|Public|HasOutParms) // @ game+0x11d0de0
	void HandleSelectSpawnpointInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistWalker.HandleSelectSpawnpointInteract // (Final|Native|Public|HasOutParms) // @ game+0x11d0d00
	void HandleActorHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Mist.MistWalker.HandleActorHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x11d0a50
	void EndOverlappingWater(bool bIsLava); // Function Mist.MistWalker.EndOverlappingWater // (Final|Native|Public|BlueprintCallable) // @ game+0x11d09c0
	struct FVector CalculateParticleScale(float SidewaysScale, float SpeedScale, float Min, float Max); // Function Mist.MistWalker.CalculateParticleScale // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11d0720
	void BroadcastSetCustomName(struct FString InCustomName); // Function Mist.MistWalker.BroadcastSetCustomName // (Final|Net|NetReliableNative|Event|Private) // @ game+0x10c31a0
	void BroadcastNotifyDamage(struct APawn* DamageInstigator); // Function Mist.MistWalker.BroadcastNotifyDamage // (Net|Native|Event|Public) // @ game+0x115e790
	void BroadcastCrashWalker(enum class EMistWalkerWreckageState Wreckage, bool bJustCrashed, struct FVector CrashVelocity); // Function Mist.MistWalker.BroadcastCrashWalker // (Net|NetReliableNative|Event|Public|HasDefaults) // @ game+0x11d0620
};

// Class Mist.MistSkywalker
// Size: 0xf40 (Inherited: 0xf38)
struct AMistSkywalker : AMistWalker {
	float FlippedAngleThreshold; // 0xf38(0x04)
	float FlippedSpeedThreshold; // 0xf3c(0x04)
};

// Class Mist.MistSkyWalkerAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UMistSkyWalkerAnimInstance : UAnimInstance {
	float X; // 0x268(0x04)
	float Y; // 0x26c(0x04)
	struct UMistMannedWalkerControlComponent* CachedControlComponent; // 0x270(0x08)
};

// Class Mist.MistSkywalkerControlComponent
// Size: 0x608 (Inherited: 0x600)
struct UMistSkywalkerControlComponent : UMistMannedWalkerControlComponent {
	float FlipViewHoldDelay; // 0x600(0x04)
	char pad_604[0x4]; // 0x604(0x04)
};

// Class Mist.MistWalkerPart
// Size: 0x5a0 (Inherited: 0x4b0)
struct AMistWalkerPart : AMistPlaceable {
	char pad_4B0[0x20]; // 0x4b0(0x20)
	float MaxAnimationPlayRate; // 0x4d0(0x04)
	bool bRemoveOnDestroyed; // 0x4d4(0x01)
	bool bChangeCollisionOnDestroyed; // 0x4d5(0x01)
	char pad_4D6[0x2]; // 0x4d6(0x02)
	float DestroyedStopSimulatingDelay; // 0x4d8(0x04)
	float CustomMass; // 0x4dc(0x04)
	struct FTransform PartOffsetOnConstruction; // 0x4e0(0x30)
	struct FName CollisionChannelOnDestroyed; // 0x510(0x08)
	struct TArray<struct FMistComponentReference> ComponentsToApplyCollisionOnDestroyed; // 0x518(0x10)
	float DestroyedLifespan; // 0x528(0x04)
	float MaxHealth; // 0x52c(0x04)
	float Health; // 0x530(0x04)
	int32_t ExperienceAwardAmount; // 0x534(0x04)
	struct UMistClanOwnershipComponent* DetachedClanOwnershipComponent; // 0x538(0x08)
	struct UMistVirtualCollisionBodiesComponent* VirtualBodies; // 0x540(0x08)
	char pad_548[0x18]; // 0x548(0x18)
	struct AMistWalker* ParentWalker; // 0x560(0x08)
	struct FMistWalkerPartAttachment Attachment; // 0x568(0x10)
	char pad_578[0x8]; // 0x578(0x08)
	float ReferenceAnimationPosition; // 0x580(0x04)
	float ReferenceAnimationDuration; // 0x584(0x04)
	float ReferenceAnimationPlayRate; // 0x588(0x04)
	bool bAnimationLooping; // 0x58c(0x01)
	bool bAnimationTicking; // 0x58d(0x01)
	char pad_58E[0x2]; // 0x58e(0x02)
	float TargetAnimationPosition; // 0x590(0x04)
	char pad_594[0xc]; // 0x594(0x0c)

	void SetCollisionProfile(struct FName CollisionProfileName); // Function Mist.MistWalkerPart.SetCollisionProfile // (Native|Protected) // @ game+0x11da990
	void ReceiveDetachedPart(); // Function Mist.MistWalkerPart.ReceiveDetachedPart // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_Health(float PrevHealth); // Function Mist.MistWalkerPart.OnRep_Health // (Native|Public) // @ game+0x11da8d0
	void OnRep_Attachment(); // Function Mist.MistWalkerPart.OnRep_Attachment // (Final|Native|Private) // @ game+0x11da8b0
	void HandleRootComponentSleep(struct UPrimitiveComponent* SleepingComponent, struct FName BoneName); // Function Mist.MistWalkerPart.HandleRootComponentSleep // (Final|Native|Private) // @ game+0x11da400
	void HandleDelayedStopSimulatingTimer(); // Function Mist.MistWalkerPart.HandleDelayedStopSimulatingTimer // (Final|Native|Private) // @ game+0x11d9ee0
	struct AMistWalker* GetParentWalker(); // Function Mist.MistWalkerPart.GetParentWalker // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d9ec0
	struct UMistWalkerPartSocketComponent* GetParentSocket(); // Function Mist.MistWalkerPart.GetParentSocket // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d9e50
};

// Class Mist.MistWalkerLeg
// Size: 0x6d0 (Inherited: 0x5a0)
struct AMistWalkerLeg : AMistWalkerPart {
	struct UMistWalkerLegNettableComponent* NettableComponent; // 0x5a0(0x08)
	enum class EMistWalkerPartAttachmentSide LegSide; // 0x5a8(0x01)
	char pad_5A9[0x3]; // 0x5a9(0x03)
	float LegAnimationDuration; // 0x5ac(0x04)
	float LegSpeedMulti; // 0x5b0(0x04)
	float LegUpperLimit; // 0x5b4(0x04)
	float LegMoveOverTime; // 0x5b8(0x04)
	bool bLegInvertAngle; // 0x5bc(0x01)
	char pad_5BD[0x3]; // 0x5bd(0x03)
	float LegWheelSpan; // 0x5c0(0x04)
	float LegParentScale; // 0x5c4(0x04)
	float LegDefaultWheelZ; // 0x5c8(0x04)
	char pad_5CC[0x4]; // 0x5cc(0x04)
	struct TArray<struct FName> ParticleSocketNames; // 0x5d0(0x10)
	struct UParticleSystem* EmitterTemplate; // 0x5e0(0x08)
	float ParticleScale; // 0x5e8(0x04)
	float ParticleMaxDrawDistance; // 0x5ec(0x04)
	float bWasRecentlyRendered; // 0x5f0(0x04)
	char pad_5F4[0x3c]; // 0x5f4(0x3c)
	struct TMap<struct UParticleSystemComponent*, struct FName> ParticleSystemsMap; // 0x630(0x50)
	struct TMap<struct UParticleSystemComponent*, struct UMeshComponent*> SkeletalMeshMap; // 0x680(0x50)

	void UpdateEmitters(struct FName& NotifyName); // Function Mist.MistWalkerLeg.UpdateEmitters // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x11d6ce0
	void SetEmittersState(struct UParticleSystemComponent* Emitter, struct TMap<struct FName, bool>& EmitterStates); // Function Mist.MistWalkerLeg.SetEmittersState // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x11d6b10
	void ReceiveUpdateVFX(); // Function Mist.MistWalkerLeg.ReceiveUpdateVFX // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveEnableEmittersByLandscapeLayer(struct UParticleSystemComponent* ParticleSystem, struct UVirtualLandscapeLayer* LandscapeLayer); // Function Mist.MistWalkerLeg.ReceiveEnableEmittersByLandscapeLayer // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistSkyWalkerLeg
// Size: 0x6d0 (Inherited: 0x6d0)
struct AMistSkyWalkerLeg : AMistWalkerLeg {
};

// Class Mist.WalkerVehicleMovementComponent
// Size: 0x7b8 (Inherited: 0x190)
struct UWalkerVehicleMovementComponent : UPawnMovementComponent {
	struct FWalkerEngineData EngineSetup; // 0x190(0xa0)
	struct FWalkerTransmissionData TransmissionSetup; // 0x230(0x30)
	struct FWalkerDifferentialData DifferentialSetup; // 0x260(0x1c)
	char pad_27C[0x4]; // 0x27c(0x04)
	struct FWalkerSteeringData SteeringSetup; // 0x280(0x90)
	struct TArray<struct FWalkerWheelSetup> WheelSetups; // 0x310(0x10)
	struct TArray<struct FWalkerAntiRollBarSetup> AntiRollBarSetups; // 0x320(0x10)
	struct FMistWalkerModularParameters ModularParameters; // 0x330(0xd0)
	float Mass; // 0x400(0x04)
	float AttachedMassMultiplier; // 0x404(0x04)
	float AttachedWeightMinPenalty; // 0x408(0x04)
	float AttachedWeightMaxPenalty; // 0x40c(0x04)
	float AttachedPenaltyWeightScale; // 0x410(0x04)
	char pad_414[0x4]; // 0x414(0x04)
	struct UCurveFloat* WeightTorquePenalty; // 0x418(0x08)
	float AdditionalGravity; // 0x420(0x04)
	float DragCoefficient; // 0x424(0x04)
	float ChassisWidth; // 0x428(0x04)
	float ChassisHeight; // 0x42c(0x04)
	bool bReverseAsBrake; // 0x430(0x01)
	char pad_431[0x3]; // 0x431(0x03)
	struct FVector InertiaTensorScale; // 0x434(0x0c)
	bool bUseWalkerInertia; // 0x440(0x01)
	char pad_441[0x3]; // 0x441(0x03)
	struct FVector WalkerInertiaTensor; // 0x444(0x0c)
	struct FVector WalkerInertiaTensorScale; // 0x450(0x0c)
	struct FVector WalkerCenterOfMass; // 0x45c(0x0c)
	float MinNormalizedTireLoad; // 0x468(0x04)
	float MinNormalizedTireLoadFiltered; // 0x46c(0x04)
	float MaxNormalizedTireLoad; // 0x470(0x04)
	float MaxNormalizedTireLoadFiltered; // 0x474(0x04)
	float ThresholdLongitudinalSpeed; // 0x478(0x04)
	int32_t LowForwardSpeedSubStepCount; // 0x47c(0x04)
	int32_t HighForwardSpeedSubStepCount; // 0x480(0x04)
	char pad_484[0x4]; // 0x484(0x04)
	struct FBodyInstance WheelBodyInstance; // 0x488(0x1e8)
	struct TArray<struct UWalkerWheel*> Wheels; // 0x670(0x10)
	char pad_680[0x10]; // 0x680(0x10)
	struct FReplicatedWalkerState ReplicatedState; // 0x690(0x14)
	float RawSteeringInput; // 0x6a4(0x04)
	float RawThrottleInput; // 0x6a8(0x04)
	float RawBrakeInput; // 0x6ac(0x04)
	char bRawHandbrakeInput : 1; // 0x6b0(0x01)
	char pad_6B0_1 : 7; // 0x6b0(0x01)
	char pad_6B1[0x3]; // 0x6b1(0x03)
	char bRawGearUpInput : 1; // 0x6b4(0x01)
	char bRawGearDownInput : 1; // 0x6b4(0x01)
	char pad_6B4_2 : 6; // 0x6b4(0x01)
	char pad_6B5[0x3]; // 0x6b5(0x03)
	float SteeringInput; // 0x6b8(0x04)
	float ThrottleInput; // 0x6bc(0x04)
	float BrakeInput; // 0x6c0(0x04)
	float HandbrakeInput; // 0x6c4(0x04)
	float AttachedWeight; // 0x6c8(0x04)
	float IdleBrakeInput; // 0x6cc(0x04)
	float StopThreshold; // 0x6d0(0x04)
	float WrongDirectionThreshold; // 0x6d4(0x04)
	struct FWalkerInputRate ThrottleInputRate; // 0x6d8(0x08)
	struct FWalkerInputRate BrakeInputRate; // 0x6e0(0x08)
	struct FWalkerInputRate HandbrakeInputRate; // 0x6e8(0x08)
	struct FWalkerInputRate SteeringInputRate; // 0x6f0(0x08)
	char pad_6F8[0x8]; // 0x6f8(0x08)
	float Drag; // 0x700(0x04)
	char pad_704[0xb4]; // 0x704(0xb4)

	void SetUseAutoGears(bool bUseAuto); // Function Mist.WalkerVehicleMovementComponent.SetUseAutoGears // (Final|Native|Public|BlueprintCallable) // @ game+0x11e8a20
	void SetThrottleInput(float Throttle); // Function Mist.WalkerVehicleMovementComponent.SetThrottleInput // (Native|Public|BlueprintCallable) // @ game+0x11e89a0
	void SetTargetGear(int32_t GearNum, bool bImmediate); // Function Mist.WalkerVehicleMovementComponent.SetTargetGear // (Final|Native|Public|BlueprintCallable) // @ game+0x11e88e0
	void SetSteeringInput(float Steering); // Function Mist.WalkerVehicleMovementComponent.SetSteeringInput // (Native|Public|BlueprintCallable) // @ game+0x11e8860
	void SetHandbrakeInput(bool bNewHandbrake); // Function Mist.WalkerVehicleMovementComponent.SetHandbrakeInput // (Final|Native|Public|BlueprintCallable) // @ game+0x11e87d0
	void SetGearUp(bool bNewGearUp); // Function Mist.WalkerVehicleMovementComponent.SetGearUp // (Final|Native|Public|BlueprintCallable) // @ game+0x11e8740
	void SetGearDown(bool bNewGearDown); // Function Mist.WalkerVehicleMovementComponent.SetGearDown // (Final|Native|Public|BlueprintCallable) // @ game+0x11e86b0
	void SetBrakeInput(float Brake); // Function Mist.WalkerVehicleMovementComponent.SetBrakeInput // (Native|Public|BlueprintCallable) // @ game+0x11e8630
	void ServerUpdateState(float InSteeringInput, float InThrottleInput, float InBrakeInput, float InHandbrakeInput, int32_t CurrentGear); // Function Mist.WalkerVehicleMovementComponent.ServerUpdateState // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x11e84a0
	float GetWheelRotationSpeed(int32_t Index); // Function Mist.WalkerVehicleMovementComponent.GetWheelRotationSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e83e0
	bool GetUseAutoGears(); // Function Mist.WalkerVehicleMovementComponent.GetUseAutoGears // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e83b0
	int32_t GetTargetGear(); // Function Mist.WalkerVehicleMovementComponent.GetTargetGear // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8380
	float GetSidewaysSpeed(); // Function Mist.WalkerVehicleMovementComponent.GetSidewaysSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e82b0
	float GetForwardSpeed(); // Function Mist.WalkerVehicleMovementComponent.GetForwardSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8250
	float GetEngineRotationSpeed(); // Function Mist.WalkerVehicleMovementComponent.GetEngineRotationSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8220
	float GetEngineMaxRotationSpeed(); // Function Mist.WalkerVehicleMovementComponent.GetEngineMaxRotationSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e81f0
	float GetEngineDriveTorque(float accel); // Function Mist.WalkerVehicleMovementComponent.GetEngineDriveTorque // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8160
	float GetDrag(); // Function Mist.WalkerVehicleMovementComponent.GetDrag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8130
	int32_t GetCurrentGear(); // Function Mist.WalkerVehicleMovementComponent.GetCurrentGear // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8100
	float GetClutchSlip(float engineSpeed); // Function Mist.WalkerVehicleMovementComponent.GetClutchSlip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8070
};

// Class Mist.MistSkywalkerMovementComponent
// Size: 0x828 (Inherited: 0x7b8)
struct UMistSkywalkerMovementComponent : UWalkerVehicleMovementComponent {
	float WingSpan; // 0x7b8(0x04)
	float WingChord; // 0x7bc(0x04)
	float ZeroLiftDragCoef; // 0x7c0(0x04)
	float EfficiencyFactor; // 0x7c4(0x04)
	struct UCurveFloat* LiftCoefCurve; // 0x7c8(0x08)
	float PitchSensitivity; // 0x7d0(0x04)
	float RollSensitivity; // 0x7d4(0x04)
	float ForwardFlapAcceleration; // 0x7d8(0x04)
	float UpFlapAcceleration; // 0x7dc(0x04)
	float WaveLength; // 0x7e0(0x04)
	float WaveUntilSpeed; // 0x7e4(0x04)
	float WaveAmplitude; // 0x7e8(0x04)
	int32_t FlapStage; // 0x7ec(0x04)
	float FlapDownPercentage; // 0x7f0(0x04)
	float TotalFlapTime; // 0x7f4(0x04)
	float TorquePerFlap; // 0x7f8(0x04)
	float TorquePerFlapReturn; // 0x7fc(0x04)
	struct FVector2D AltitudeLiftPenalty; // 0x800(0x08)
	char pad_808[0x20]; // 0x808(0x20)

	void OnRep_FlapStage(int32_t OldFlapStage); // Function Mist.MistSkywalkerMovementComponent.OnRep_FlapStage // (Final|Native|Private) // @ game+0x119b230
};

// Class Mist.MistWalkerWing
// Size: 0x750 (Inherited: 0x5a0)
struct AMistWalkerWing : AMistWalkerPart {
	struct UMistWalkerWingNettableComponent* NettableComponent; // 0x598(0x08)
	struct UMistClanColorComponent* ClanColorComponent; // 0x5a0(0x08)
	struct UMistWalkerTorqueGeneratorComponent* TorqueGenerator; // 0x5a8(0x08)
	struct UMistInteractableComponent* RetractionInteractableComponent; // 0x5b0(0x08)
	struct TArray<struct FVector> RaycastsForBending; // 0x5b8(0x10)
	float MinWingSpeed; // 0x5c8(0x04)
	float PeakWingSpeed; // 0x5cc(0x04)
	float MaxWingSpeed; // 0x5d0(0x04)
	float BendVsWalker; // 0x5d4(0x04)
	float BendVsWing; // 0x5d8(0x04)
	float WingBendDuration; // 0x5dc(0x04)
	struct FName RetractionParameterName; // 0x5e0(0x08)
	float RetractionDuration; // 0x5e8(0x04)
	float ExtensionDuration; // 0x5ec(0x04)
	struct FRuntimeFloatCurve RetractionProgressCurve; // 0x5f0(0x88)
	struct FRuntimeFloatCurve ExtensionProgressCurve; // 0x678(0x88)
	bool bShowDebugBones; // 0x700(0x01)
	bool bRetracted; // 0x701(0x01)
	struct USkeletalMeshComponent* CachedSkeletalMesh; // 0x708(0x08)
	char pad_712[0x3e]; // 0x712(0x3e)

	void ReceiveRetractStarted(); // Function Mist.MistWalkerWing.ReceiveRetractStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveRetractEnded(); // Function Mist.MistWalkerWing.ReceiveRetractEnded // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveExtendStarted(); // Function Mist.MistWalkerWing.ReceiveExtendStarted // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveExtendEnded(); // Function Mist.MistWalkerWing.ReceiveExtendEnded // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_bRetracted(); // Function Mist.MistWalkerWing.OnRep_bRetracted // (Final|Native|Private) // @ game+0x11da970
	void HandleRetractionInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistWalkerWing.HandleRetractionInteractable // (Final|Native|Private|HasOutParms) // @ game+0x11da320
	void HandleQueryRetractionInteractable(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& InOutProperties, struct FMistInteractionQuery& InOutQuery); // Function Mist.MistWalkerWing.HandleQueryRetractionInteractable // (Final|Native|Private|HasOutParms) // @ game+0x11da060
};

// Class Mist.MistSkyWalkerWing
// Size: 0x760 (Inherited: 0x750)
struct AMistSkyWalkerWing : AMistWalkerWing {
	float LowestWingPosition; // 0x750(0x04)
	char pad_754[0x4]; // 0x754(0x04)
	int32_t CurrentFlapStage; // 0x758(0x04)
	char pad_75C[0x4]; // 0x75c(0x04)
};

// Class Mist.MistSkyWalkerWingAnimInstance
// Size: 0x2c0 (Inherited: 0x270)
struct UMistSkyWalkerWingAnimInstance : UAnimInstance {
	struct UAnimSequence* ReferenceAnimation; // 0x268(0x08)
	struct FVector2D WalkerPitchRange; // 0x270(0x08)
	struct FVector2D WalkerRollRange; // 0x278(0x08)
	struct FRotator RootRotator; // 0x280(0x0c)
	float TargetAnimationPosition; // 0x28c(0x04)
	float FlappingAnimationPlayRate; // 0x290(0x04)
	float RootRotatorInterpolationSpeed; // 0x294(0x04)
	float WingRoll; // 0x298(0x04)
	float WingPitch; // 0x29c(0x04)
	struct AMistSkyWalkerWing* CachedWing; // 0x2a0(0x08)
	struct AMistSkywalker* CachedWalker; // 0x2a8(0x08)
	char pad_2B8[0x8]; // 0x2b8(0x08)
};

// Class Mist.MistSlingshotAnimInstance
// Size: 0x280 (Inherited: 0x280)
struct UMistSlingshotAnimInstance : UMistMannedControlAnimInstance {
	bool bIsActive; // 0x278(0x01)
	float WingExtension; // 0x27c(0x04)
};

// Class Mist.MistSlingshotControlComponent
// Size: 0x720 (Inherited: 0x598)
struct UMistSlingshotControlComponent : UMistMannedGimbalControlComponent {
	float FiringPowerMultiplier; // 0x598(0x04)
	float MinimumRotationDistance; // 0x59c(0x04)
	float MinimumPullDistance; // 0x5a0(0x04)
	char pad_5A4[0x4]; // 0x5a4(0x04)
	float CurrentStringingSpeed; // 0x5a8(0x04)
	float CurrentStringingDistance; // 0x5ac(0x04)
	struct FMulticastInlineDelegate OnFire; // 0x5b0(0x10)
	char pad_5C0[0x18]; // 0x5c0(0x18)
	struct FMistComponentReference PouchChildActorComponentRef; // 0x5d8(0x28)
	struct FMistComponentReference LeftCableComponentRef; // 0x600(0x28)
	struct FMistComponentReference RightCableComponentRef; // 0x628(0x28)
	struct TSet<struct UMistItemTemplate*> AllowedProjectiles; // 0x650(0x50)
	struct FMistComponentReference ProjectileMeshRef; // 0x6a0(0x28)
	float PullBackResistanceMultiplier; // 0x6c8(0x04)
	float FiringTime; // 0x6cc(0x04)
	float TimeToRemainManned; // 0x6d0(0x04)
	enum class EMistSlingshotState SlingshotState; // 0x6d4(0x01)
	char pad_6D5[0xb]; // 0x6d5(0x0b)
	struct FMistProjectileItem ProjectileItem; // 0x6e0(0x18)
	char pad_6F8[0x14]; // 0x6f8(0x14)
	struct FVector PouchRestingRelativePosition; // 0x70c(0x0c)
	struct AMistSlingshotPouch* PouchActor; // 0x718(0x08)

	void SlingshotFireEvent__DelegateSignature(struct UMistSlingshotControlComponent* Sender); // DelegateFunction Mist.MistSlingshotControlComponent.SlingshotFireEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ServerSetPreferredProjectile(struct UMistItemTemplate* InPreferredProjectile); // Function Mist.MistSlingshotControlComponent.ServerSetPreferredProjectile // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x10e8760
	void ServerAttackAction(); // Function Mist.MistSlingshotControlComponent.ServerAttackAction // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x10a1a10
	void OnRep_SlingshotState(); // Function Mist.MistSlingshotControlComponent.OnRep_SlingshotState // (Final|Native|Private) // @ game+0x10968b0
	void OnRep_PouchActor(); // Function Mist.MistSlingshotControlComponent.OnRep_PouchActor // (Final|Native|Private) // @ game+0x119b2b0
	void MulticastOnFired(); // Function Mist.MistSlingshotControlComponent.MulticastOnFired // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10a19f0
	void DelayedExitComponent(); // Function Mist.MistSlingshotControlComponent.DelayedExitComponent // (Final|Native|Private) // @ game+0x119ade0
};

// Class Mist.MistSlingshotPouch
// Size: 0x3c0 (Inherited: 0x3c0)
struct AMistSlingshotPouch : AActor {
};

// Class Mist.MistSlotLeaseAuctionWindowData
// Size: 0x138 (Inherited: 0x28)
struct UMistSlotLeaseAuctionWindowData : UObject {
	char pad_28[0x80]; // 0x28(0x80)
	struct UMistSlotLeaseAuctionRealmTileData* RealmTile; // 0xa8(0x08)
	char pad_B0[0x88]; // 0xb0(0x88)
};

// Class Mist.MistSlotLeaseAuctionRealmTileData
// Size: 0x1b0 (Inherited: 0x28)
struct UMistSlotLeaseAuctionRealmTileData : UObject {
	char pad_28[0x70]; // 0x28(0x70)
	struct TArray<struct UMistSlotLeaseAuctionWindowData*> Windows; // 0x98(0x10)
	char pad_A8[0x60]; // 0xa8(0x60)
	struct UMistDataManager* DataManager; // 0x108(0x08)
	struct UMistBackendHttpClient* BackendClient; // 0x110(0x08)
	char pad_118[0x98]; // 0x118(0x98)
};

// Class Mist.MistSlotLeaseAuctionDataManager
// Size: 0x88 (Inherited: 0x28)
struct UMistSlotLeaseAuctionDataManager : UObject {
	struct UMistBackendHttpClient* BackendClient; // 0x28(0x08)
	struct UMistDataManager* DataManager; // 0x30(0x08)
	struct TMap<struct FMistApiRealmTileIdentifier, struct UMistSlotLeaseAuctionRealmTileData*> DataItems; // 0x38(0x50)
};

// Class Mist.MistSmallWalkerControlAnimInstance
// Size: 0x2c0 (Inherited: 0x280)
struct UMistSmallWalkerControlAnimInstance : UMistMannedControlAnimInstance {
	float Direction; // 0x278(0x04)
	float Speed; // 0x27c(0x04)
	float AnimPlayRate; // 0x280(0x04)
	bool bIsSprinting; // 0x284(0x01)
	char pad_28D[0x3]; // 0x28d(0x03)
	struct FTransform IKTarget; // 0x290(0x30)
};

// Class Mist.MistSnappingTemplate
// Size: 0x40 (Inherited: 0x30)
struct UMistSnappingTemplate : UDataAsset {
	struct TArray<struct FMistSnapPointTemplateDesc> SnapPoints; // 0x30(0x10)
};

// Class Mist.MistSnapPointTemplate
// Size: 0x80 (Inherited: 0x30)
struct UMistSnapPointTemplate : UDataAsset {
	struct TMap<struct UMistSnapPointTemplate*, struct FMistSnapPairDesc> AcceptedSnapPoints; // 0x30(0x50)
};

// Class Mist.MistSoilQuest
// Size: 0x160 (Inherited: 0x110)
struct UMistSoilQuest : UMistTutorialQuest {
	struct TMap<struct UMistPlaceableTemplate*, struct FName> Placeable; // 0x110(0x50)

	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistSoilQuest.ItemBuilt // (Final|Native|Private) // @ game+0x119afa0
};

// Class Mist.MistSoundAnimNotify
// Size: 0x48 (Inherited: 0x38)
struct UMistSoundAnimNotify : UAnimNotify {
	struct FName NotifyName; // 0x38(0x08)
	float VolumeMultiplier; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
};

// Class Mist.MistSoundAnimNotifyState
// Size: 0x40 (Inherited: 0x30)
struct UMistSoundAnimNotifyState : UAnimNotifyState {
	struct FName NotifyName; // 0x30(0x08)
	float VolumeMultiplier; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class Mist.MistSoundNodeRandomStart
// Size: 0x58 (Inherited: 0x48)
struct UMistSoundNodeRandomStart : USoundNode {
	float MinValue; // 0x48(0x04)
	float MaxValue; // 0x4c(0x04)
	bool bLooping; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Mist.MistSoundNotifyListenerComponent
// Size: 0x220 (Inherited: 0xf0)
struct UMistSoundNotifyListenerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnSoundNotifyFired; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnSoundNotifyStateStarted; // 0x100(0x10)
	struct FMulticastInlineDelegate OnSoundNotifyStateEnded; // 0x110(0x10)
	struct FMulticastInlineDelegate OnSoundNotifyStateTick; // 0x120(0x10)
	bool bFireOnServer; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)
	struct TMap<struct FString, struct FDateTime> NotifyAntiSpamMap; // 0x138(0x50)
	struct TMap<struct FString, struct FDateTime> NotifyAntiSpamMapForBrakingLegs; // 0x188(0x50)
	struct FTimerHandle TimerHandle_PopNotifyData; // 0x1d8(0x08)
	struct FTimerHandle TimerHandle_PopNotifyDataForBrakingLegs; // 0x1e0(0x08)
	char pad_1E8[0x38]; // 0x1e8(0x38)

	void SoundNotifyEvent__DelegateSignature(struct USkeletalMeshComponent* MeshComponent, struct UAnimSequenceBase* Animation, struct FName& NotifyName, float VolumeMultiplier); // DelegateFunction Mist.MistSoundNotifyListenerComponent.SoundNotifyEvent__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x163f1c0
	void ForwardToParent(); // Function Mist.MistSoundNotifyListenerComponent.ForwardToParent // (Final|Native|Public|BlueprintCallable) // @ game+0x119ef40
};

// Class Mist.MistSoundSettingsWidget
// Size: 0x370 (Inherited: 0x2d0)
struct UMistSoundSettingsWidget : UMistSettingsWidget {
	struct USlider* MasterVolumeSlider; // 0x2d0(0x08)
	struct USlider* MusicVolumeSlider; // 0x2d8(0x08)
	struct USlider* SFXVolumeSlider; // 0x2e0(0x08)
	struct USlider* UIVolumeSlider; // 0x2e8(0x08)
	struct USlider* SingingVolumeSlider; // 0x2f0(0x08)
	struct USlider* NarratorVolumeSlider; // 0x2f8(0x08)
	struct UCheckBox* MuteWhenBackgroundCheckBoxWidget; // 0x300(0x08)
	struct UHorizontalBox* MasterVolumeContainer; // 0x308(0x08)
	struct UHorizontalBox* MusicVolumeContainer; // 0x310(0x08)
	struct UHorizontalBox* SFXVolumeContainer; // 0x318(0x08)
	struct UHorizontalBox* UIVolumeContainer; // 0x320(0x08)
	struct UHorizontalBox* SingingVolumeContainer; // 0x328(0x08)
	struct UHorizontalBox* NarratorVolumeContainer; // 0x330(0x08)
	struct UHorizontalBox* MuteInBackgroundContainer; // 0x338(0x08)
	struct UWidget* SettingsHeaderWidget; // 0x340(0x08)
	struct UWidget* NumpadHints; // 0x348(0x08)
	struct UWidget* JHints; // 0x350(0x08)
	struct UWidget* YHints; // 0x358(0x08)
	struct UWidget* NHints; // 0x360(0x08)
	struct UMistUserSoundSettings* UserSoundSettings; // 0x368(0x08)
};

// Class Mist.MistSoundUtils
// Size: 0x28 (Inherited: 0x28)
struct UMistSoundUtils : UBlueprintFunctionLibrary {

	struct UAudioComponent* SpawnSoundAttachedWithIntParameter(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, struct FName ParameterName, int32_t ParameterValue); // Function Mist.MistSoundUtils.SpawnSoundAttachedWithIntParameter // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x11a1040
	struct UAudioComponent* SpawnSoundAttachedLocal(struct USoundBase* Sound, struct USceneComponent* AttachToComponent, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, struct AActor* OwningActor, struct FName ParameterName, int32_t ParameterValue); // Function Mist.MistSoundUtils.SpawnSoundAttachedLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x11a0be0
	struct UAudioComponent* SpawnSoundAtLocationWithIntParameter(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, struct FName ParameterName, int32_t ParameterValue); // Function Mist.MistSoundUtils.SpawnSoundAtLocationWithIntParameter // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x11a0890
	struct UAudioComponent* SpawnSoundAtLocationLocal(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, bool bAutoDestroy, struct AActor* OwningActor, struct FName ParameterName, int32_t ParameterValue); // Function Mist.MistSoundUtils.SpawnSoundAtLocationLocal // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x11a0500
	struct UAudioComponent* SpawnSound2DWithIntParameter(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, struct FName ParameterName, int32_t ParameterValue); // Function Mist.MistSoundUtils.SpawnSound2DWithIntParameter // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x11a0240
	struct UAudioComponent* SpawnSound2DLocalWithIntParameter(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, struct AActor* OwningActor, struct FName ParameterName, int32_t ParameterValue); // Function Mist.MistSoundUtils.SpawnSound2DLocalWithIntParameter // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x119ff40
	struct UAudioComponent* SpawnSound2DLocal(struct UObject* WorldContextObject, struct USoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, struct AActor* OwningActor); // Function Mist.MistSoundUtils.SpawnSound2DLocal // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x119fcc0
	void SetSoundMixClassOverrideLocal(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct USoundClass* InSoundClass, struct AActor* OwningActor, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren); // Function Mist.MistSoundUtils.SetSoundMixClassOverrideLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119fa90
	void SetBaseSoundMixLocal(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct AActor* OwningActor); // Function Mist.MistSoundUtils.SetBaseSoundMixLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119f9a0
	void PushSoundMixModifierLocal(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct AActor* OwningActor); // Function Mist.MistSoundUtils.PushSoundMixModifierLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119f8b0
	void PopSoundMixModifierLocal(struct UObject* WorldContextObject, struct USoundMix* InSoundMixModifier, struct AActor* OwningActor); // Function Mist.MistSoundUtils.PopSoundMixModifierLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119f7c0
	void PlaySoundAtLocationWithIntParameter(struct UObject* WorldContextObject, struct USoundBase* Sound, struct FVector Location, struct FRotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, struct USoundAttenuation* AttenuationSettings, struct USoundConcurrency* ConcurrencySettings, struct AActor* OwningActor, struct FName ParameterName, int32_t ParameterValue); // Function Mist.MistSoundUtils.PlaySoundAtLocationWithIntParameter // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x119f470
	void PlayLocal(struct UAudioComponent* AudioComponent, float StartTime, struct AActor* OwningActor); // Function Mist.MistSoundUtils.PlayLocal // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x119f370
	struct UMistPlayerSFXSet* GetPlayerSFXSet(enum class EMistCharacterGender Gender, int32_t Index); // Function Mist.MistSoundUtils.GetPlayerSFXSet // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x119f130
	float GetDynamicMusicIntensity(struct UObject* WorldContextObject); // Function Mist.MistSoundUtils.GetDynamicMusicIntensity // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x119f0a0
	struct UReverbEffect* GetCurrentReverbEffectLocal(struct UObject* WorldContextObject, struct AActor* OwningActor); // Function Mist.MistSoundUtils.GetCurrentReverbEffectLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119efe0
	struct UMistPlayerSFXSet* GetCurrentPlayerSFXSet(struct UObject* WorldContextObject); // Function Mist.MistSoundUtils.GetCurrentPlayerSFXSet // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x119ef60
	void DeactivateReverbEffectLocal(struct UObject* WorldContextObject, struct FName TagName, struct AActor* OwningActor); // Function Mist.MistSoundUtils.DeactivateReverbEffectLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119ee50
	void ClearSoundMixModifiersLocal(struct UObject* WorldContextObject, struct AActor* OwningActor); // Function Mist.MistSoundUtils.ClearSoundMixModifiersLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119eda0
	void AdjustPitch(struct UObject* WorldContextObject, struct UAudioComponent* AudioComponent, float AdjustPitchDuration, float AdjustPitchLevel); // Function Mist.MistSoundUtils.AdjustPitch // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119ec70
	void ActivateReverbEffectLocal(struct UObject* WorldContextObject, struct UReverbEffect* ReverbEffect, struct FName TagName, float Priority, float Volume, float FadeTime, struct AActor* OwningActor); // Function Mist.MistSoundUtils.ActivateReverbEffectLocal // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x119ea80
};

// Class Mist.MistSparePartItemDetailsWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistSparePartItemDetailsWidget : UMistUIWidget {
	struct UTextBlock* EffectsTextWidget; // 0x2c0(0x08)
	struct UMistSparePartTemplate* ItemTemplate; // 0x2c8(0x08)
	struct UMistSparePartsWalkerProfile* Profile; // 0x2d0(0x08)
};

// Class Mist.MistSparePartQuest
// Size: 0x170 (Inherited: 0x110)
struct UMistSparePartQuest : UMistTutorialQuest {
	struct TMap<struct FName, struct UMistSparePartTemplate*> SpareParts; // 0x110(0x50)
	struct FName WaterTaskName; // 0x160(0x08)
	struct UMistItemTemplate* WaterTemplate; // 0x168(0x08)

	void ContainerUpdate(struct UMistContainerComponent* OpenedContainer, int32_t Count, struct UMistItemTemplate* ItemTemplate); // Function Mist.MistSparePartQuest.ContainerUpdate // (Final|Native|Protected) // @ game+0x115df60
	void ContainerOpened(); // Function Mist.MistSparePartQuest.ContainerOpened // (Final|Native|Protected) // @ game+0x115df40
	void ContainerClosed(); // Function Mist.MistSparePartQuest.ContainerClosed // (Final|Native|Protected) // @ game+0x115df20
};

// Class Mist.MistSparePartsContainerComponent
// Size: 0x3a0 (Inherited: 0x2e0)
struct UMistSparePartsContainerComponent : UMistContainerComponent {
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct TArray<struct UMistSparePartTemplate*> DefaultSpareParts; // 0x2e8(0x10)
	struct TMap<enum class ESparePartsSlot, struct FMistComponentReference> DependantMeshes; // 0x2f8(0x50)
	struct UMistSparePartsWalkerProfile* SparePartsProfile; // 0x348(0x08)
	char pad_350[0x50]; // 0x350(0x50)
};

// Class Mist.MistSparePartsCraftingStation
// Size: 0x3b0 (Inherited: 0x3b0)
struct UMistSparePartsCraftingStation : UMistPlayerCraftingStationComponent {
};

// Class Mist.MistSparePartsCraftingWidget
// Size: 0x488 (Inherited: 0x418)
struct UMistSparePartsCraftingWidget : UMistCraftingStationWidget {
	struct UMistSparePartsCraftingStation* CraftingStationComponent; // 0x418(0x08)
	struct UHorizontalBox* HorizontalBoxWidget; // 0x420(0x08)
	struct TMap<enum class ESparePartsSlot, struct UMistWalkerSparePartsUpgrade*> SlotToRow; // 0x428(0x50)
	struct UMistSparePartTemplate* CurrentlyCrafting; // 0x478(0x08)
	bool bRedrawNextFrame; // 0x480(0x01)
	char pad_481[0x7]; // 0x481(0x07)

	void HandleSparePartsChanged(struct UMistContainerComponent* InContainer, int32_t InSlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistSparePartsCraftingWidget.HandleSparePartsChanged // (Final|Native|Public) // @ game+0x119f270
	void HandleCraftingChanged(struct UMistCraftingStationComponent* Sender); // Function Mist.MistSparePartsCraftingWidget.HandleCraftingChanged // (Final|Native|Public) // @ game+0x119f1f0
};

// Class Mist.MistSparePartsCraftingWidgetRow
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistSparePartsCraftingWidgetRow : UMistUIWidget {
	struct UMistTextBlock* Text; // 0x2c0(0x08)
	struct UUniformGridPanel* RecipeGrid; // 0x2c8(0x08)
};

// Class Mist.MistWalkerSparePartsUpgrade
// Size: 0x358 (Inherited: 0x2c0)
struct UMistWalkerSparePartsUpgrade : UMistUIWidget {
	struct UTextBlock* PartsName; // 0x2c0(0x08)
	struct USizeBox* UnlockedBox1; // 0x2c8(0x08)
	struct UImage* UnlockedLine2; // 0x2d0(0x08)
	struct USizeBox* UnlockedBox2; // 0x2d8(0x08)
	struct UImage* UnlockedLine3; // 0x2e0(0x08)
	struct USizeBox* UnlockedBox3; // 0x2e8(0x08)
	struct UImage* UnlockedLine4; // 0x2f0(0x08)
	struct USizeBox* UnlockedBox4; // 0x2f8(0x08)
	struct UVerticalBox* SparePartsCraftingBox; // 0x300(0x08)
	struct TMap<enum class ESparePartsTier, struct UMistWalkerSparePartsUpgradeButton*> SparePartsButton; // 0x308(0x50)
};

// Class Mist.MistWalkerSparePartsUpgradeButton
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistWalkerSparePartsUpgradeButton : UMistUIWidget {
	struct UImage* CraftingLine; // 0x2c0(0x08)
	struct USizeBox* CraftingBox; // 0x2c8(0x08)
	struct USizeBox* UnlockWidgetPosition; // 0x2d0(0x08)
	struct UMistUICircularProgressBar* CraftingProgressWidget; // 0x2d8(0x08)
};

// Class Mist.MistSparePartsWalkerProfile
// Size: 0xd88 (Inherited: 0x30)
struct UMistSparePartsWalkerProfile : UPrimaryDataAsset {
	struct UMistUnlockableTreeItem* BoneTierUnlockable; // 0x30(0x08)
	struct UMistUnlockableTreeItem* CeramicTierUnlockable; // 0x38(0x08)
	struct UMistUnlockableTreeItem* IronTierUnlockable; // 0x40(0x08)
	struct FMistCargoSparePartData WoodCargoUpgrade; // 0x48(0x78)
	struct FMistCargoSparePartData BoneCargoUpgrade; // 0xc0(0x78)
	struct FMistCargoSparePartData CeramicCargoUpgrade; // 0x138(0x78)
	struct FMistCargoSparePartData IronCargoUpgrade; // 0x1b0(0x78)
	struct FMistHatchSparePartData WoodHatchUpgrade; // 0x228(0x78)
	struct FMistHatchSparePartData BoneHatchUpgrade; // 0x2a0(0x78)
	struct FMistHatchSparePartData CeramicHatchUpgrade; // 0x318(0x78)
	struct FMistHatchSparePartData IronHatchUpgrade; // 0x390(0x78)
	struct FMistWaterSparePartData WoodWaterUpgrade; // 0x408(0x78)
	struct FMistWaterSparePartData BoneWaterUpgrade; // 0x480(0x78)
	struct FMistWaterSparePartData CeramicWaterUpgrade; // 0x4f8(0x78)
	struct FMistWaterSparePartData IronWaterUpgrade; // 0x570(0x78)
	struct FMistTorqueSparePartData WoodTorqueUpgrade; // 0x5e8(0x78)
	struct FMistTorqueSparePartData BoneTorqueUpgrade; // 0x660(0x78)
	struct FMistTorqueSparePartData CeramicTorqueUpgrade; // 0x6d8(0x78)
	struct FMistTorqueSparePartData IronTorqueUpgrade; // 0x750(0x78)
	struct FMistGearsSparePartData WoodGearsUpgrade; // 0x7c8(0x78)
	struct FMistGearsSparePartData BoneGearsUpgrade; // 0x840(0x78)
	struct FMistGearsSparePartData CeramicGearsUpgrade; // 0x8b8(0x78)
	struct FMistGearsSparePartData IronGearsUpgrade; // 0x930(0x78)
	struct FMistArmorSparePartData WoodArmorUpgrade; // 0x9a8(0x80)
	struct FMistArmorSparePartData BoneArmorUpgrade; // 0xa28(0x80)
	struct FMistArmorSparePartData CeramicArmorUpgrade; // 0xaa8(0x80)
	struct FMistArmorSparePartData IronArmorUpgrade; // 0xb28(0x80)
	struct FMistPackingSparePartData WoodPackingUpgrade; // 0xba8(0x78)
	struct FMistPackingSparePartData BonePackingUpgrade; // 0xc20(0x78)
	struct FMistPackingSparePartData CeramicPackingUpgrade; // 0xc98(0x78)
	struct FMistPackingSparePartData IronPackingUpgrade; // 0xd10(0x78)
};

// Class Mist.MistSparePartTemplate
// Size: 0x1e0 (Inherited: 0x1d8)
struct UMistSparePartTemplate : UMistItemTemplate {
	enum class ESparePartsSlot Slot; // 0x1d8(0x01)
	enum class ESparePartsTier Tier; // 0x1d9(0x01)
	char pad_1DA[0x6]; // 0x1da(0x06)
};

// Class Mist.MistSpawnObsidianComponent
// Size: 0x130 (Inherited: 0xf0)
struct UMistSpawnObsidianComponent : UActorComponent {
	float HeatingDelay; // 0xf0(0x04)
	float CoolingSpawnThreshold; // 0xf4(0x04)
	float AreaSize; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct AMistObsidianActor* ObsidianActorClass; // 0x100(0x08)
	struct FVector ObsidianActorOffset; // 0x108(0x0c)
	char pad_114[0x4]; // 0x114(0x04)
	struct TArray<struct FMistSpawnObsidianArea> WateringAreas; // 0x118(0x10)
	char pad_128[0x8]; // 0x128(0x08)

	void ReceiveCoolingStopped(int32_t UniqueId); // Function Mist.MistSpawnObsidianComponent.ReceiveCoolingStopped // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveCoolingStarted(int32_t UniqueId, struct FVector& AreaPosition, struct FRotator& AreaRotation); // Function Mist.MistSpawnObsidianComponent.ReceiveCoolingStarted // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x163f1c0
	void MulticastStopCooling(int32_t UniqueId); // Function Mist.MistSpawnObsidianComponent.MulticastStopCooling // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11a4600
	void MulticastStartCooling(int32_t UniqueId, struct FVector AreaPosition, struct FRotator AreaRotation); // Function Mist.MistSpawnObsidianComponent.MulticastStartCooling // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x11a4500
	void HandleTakePointDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource, struct FHitResult& Hit); // Function Mist.MistSpawnObsidianComponent.HandleTakePointDamage // (Final|Native|Private|HasOutParms) // @ game+0x11a4310
};

// Class Mist.MistSpawnOnGridActorComponent
// Size: 0x100 (Inherited: 0xf0)
struct UMistSpawnOnGridActorComponent : UActorComponent {
	struct TArray<struct AActor*> ObjectsSpawned; // 0xf0(0x10)

	void SpawnRandomActorOnChunk(struct FVector& ActorBaundsMin, struct FVector& ActorBaundsMax, struct FVector& ActorPosition, struct FVector& ActorScale, struct FVector& ChunksCount, struct TArray<struct AActor*>& SpawnRandomActor); // Function Mist.MistSpawnOnGridActorComponent.SpawnRandomActorOnChunk // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11a4e40
	void ClearArray(); // Function Mist.MistSpawnOnGridActorComponent.ClearArray // (Final|Native|Public|BlueprintCallable) // @ game+0x11a3f50
	struct FVector CalculateChunkSize(struct FVector& ActorSize, struct FVector& ChunksCount); // Function Mist.MistSpawnOnGridActorComponent.CalculateChunkSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11a3e40
	struct FVector CalculateChunkCenter(struct FVector& ChunkBegin, struct FVector& ChunkSize); // Function Mist.MistSpawnOnGridActorComponent.CalculateChunkCenter // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11a3d30
	struct FVector CalculateChunkBegin(struct FVector& ActorPosition, struct FVector& ActorSize, struct FVector& ChunkCount, struct FVector& ChunkSize, int32_t& ChunkId); // Function Mist.MistSpawnOnGridActorComponent.CalculateChunkBegin // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11a3b20
	struct FVector CalculateActorSize(struct FVector& ActorBaundsMin, struct FVector& ActorBaundsMax, struct FVector& ActorScale); // Function Mist.MistSpawnOnGridActorComponent.CalculateActorSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11a39c0
};

// Class Mist.MistSpawnParticleComponent
// Size: 0x208 (Inherited: 0x118)
struct UMistSpawnParticleComponent : UMistPlayerComponent {
	float TickRate; // 0x118(0x04)
	bool bDebugLines; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	struct FVector Direction; // 0x120(0x0c)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct TArray<struct FVector> PointsToSpawnAround; // 0x130(0x10)
	struct AMistWeatherSystem* WeatherSystem; // 0x140(0x08)
	struct AMistSceneManager* SceneManager; // 0x148(0x08)
	struct AMistWorldDataHolder* WorldDataHolder; // 0x150(0x08)
	struct TArray<struct FMistParticleInfo> AtmosphericParticlesInfo; // 0x158(0x10)
	struct TArray<struct FMistParticleInfo> TargetWeatherParticlesInfo; // 0x168(0x10)
	struct TArray<struct FMistParticleInfo> CurrentWeatherParticlesInfo; // 0x178(0x10)
	struct TArray<struct UParticleSystemComponent*> ParticleComponentToDestroy; // 0x188(0x10)
	struct FTimerHandle TickHandle; // 0x198(0x08)
	struct TArray<float> WeightsNormalized; // 0x1a0(0x10)
	struct TArray<struct FName> UsedLayers; // 0x1b0(0x10)
	struct UMistWeightMapCacheComponent* WeightMapComponent; // 0x1c0(0x08)
	bool bSpawnedAtmosphericParticle; // 0x1c8(0x01)
	char pad_1C9[0x7]; // 0x1c9(0x07)
	struct TArray<struct UAudioComponent*> AudioComponents; // 0x1d0(0x10)
	float WeatherChangeTime; // 0x1e0(0x04)
	float TransitionTime; // 0x1e4(0x04)
	struct TArray<struct UMistWeatherEffect*> ActiveWeatherEffects; // 0x1e8(0x10)
	struct AWindDirectionalSource* WindActor; // 0x1f8(0x08)
	struct ACharacter* OwnerCharacter; // 0x200(0x08)

	struct AWindDirectionalSource* GetWindActor(); // Function Mist.MistSpawnParticleComponent.GetWindActor // (Final|Native|Public|BlueprintCallable) // @ game+0x11a4150
	struct ACharacter* GetOwnerCharacter(); // Function Mist.MistSpawnParticleComponent.GetOwnerCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x11a4120
};

// Class Mist.MistSpawnPointMapIconComponent
// Size: 0xaf0 (Inherited: 0xad0)
struct UMistSpawnPointMapIconComponent : UMistMapIconComponent {
	char pad_AD0[0x10]; // 0xad0(0x10)
	bool bForbidSpawnWithRedeployPenalty; // 0xae0(0x01)
	char pad_AE1[0xf]; // 0xae1(0x0f)

	void HandleMapScreenClosed(struct UMistUIScreen* Screen); // Function Mist.MistSpawnPointMapIconComponent.HandleMapScreenClosed // (Final|Native|Public) // @ game+0x11a4250
	void HandleIconClicked(struct UMapIconComponent* MapIcon, bool bIsLeftMouse); // Function Mist.MistSpawnPointMapIconComponent.HandleIconClicked // (Final|Native|Private) // @ game+0x11a4180
};

// Class Mist.MistSpawnProtectionBubble
// Size: 0x3e0 (Inherited: 0x3c0)
struct AMistSpawnProtectionBubble : AActor {
	float Duration; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct AMistWalker* Walker; // 0x3c8(0x08)
	struct TArray<struct AMistPlayer*> Players; // 0x3d0(0x10)
};

// Class Mist.MistSpawnWindBySpeed
// Size: 0x138 (Inherited: 0xf0)
struct UMistSpawnWindBySpeed : UActorComponent {
	bool bDebugLines; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct UParticleSystem* DefaultWindParticle; // 0xf8(0x08)
	char pad_100[0x8]; // 0x100(0x08)
	float MaxParticleLifeTime; // 0x108(0x04)
	float SpawnMultiplier; // 0x10c(0x04)
	float SpawnPowerFunction; // 0x110(0x04)
	struct FVector ParticlePositionMin; // 0x114(0x0c)
	struct FVector ParticlePositionMax; // 0x120(0x0c)
	char pad_12C[0xc]; // 0x12c(0x0c)
};

// Class Mist.MistSpectatorPawn
// Size: 0x588 (Inherited: 0x448)
struct AMistSpectatorPawn : ASpectatorPawn {
	struct UCineCameraComponent* CineCameraComponent; // 0x448(0x08)
	struct USpringArmComponent* CameraSpringArmComponent; // 0x450(0x08)
	float SpeedMovingFactor; // 0x458(0x04)
	float SpeedDownMovingFactor; // 0x45c(0x04)
	float SpeedMovingChangeFactor; // 0x460(0x04)
	float SunRotationSpeedFactor; // 0x464(0x04)
	char pad_468[0x8]; // 0x468(0x08)
	float WheelMouseSpeedFactor; // 0x470(0x04)
	float CameraMaxSpeed; // 0x474(0x04)
	float CameraAcceleration; // 0x478(0x04)
	float CameraDecceleration; // 0x47c(0x04)
	float CameraLagSpeed; // 0x480(0x04)
	float CameraRotationLagSpeed; // 0x484(0x04)
	float CameraSmoothingSpeed; // 0x488(0x04)
	float MaxFocusDistanceTime; // 0x48c(0x04)
	struct UCurveFloat* FocusDistanceCurve; // 0x490(0x08)
	float SandstormMoveSpeed; // 0x498(0x04)
	float SandstormRotationSpeed; // 0x49c(0x04)
	float CatchingDistance; // 0x4a0(0x04)
	float LookingMouseSpeed; // 0x4a4(0x04)
	float ArmLengthChangeFactor; // 0x4a8(0x04)
	float TargetChangeChangeSpeedFactor; // 0x4ac(0x04)
	float AnotherPlayerRotationSpeedChangeFactor; // 0x4b0(0x04)
	float AnotherPlayerArmLength; // 0x4b4(0x04)
	struct FVector AnotherPlayerTargetOffset; // 0x4b8(0x0c)
	bool bInheritFollowedPawnRotation; // 0x4c4(0x01)
	bool bDrawDebug; // 0x4c5(0x01)
	char pad_4C6[0x42]; // 0x4c6(0x42)
	struct USpringArmComponent* AnotherPlayerSpringArmComponent; // 0x508(0x08)
	struct AMistPlayerFollowerSpectatorPawn* FollowerPawn; // 0x510(0x08)
	struct AMistSceneManager* SceneManager; // 0x518(0x08)
	char pad_520[0x10]; // 0x520(0x10)
	struct ADirectionalLight* SunDirectionalLight; // 0x530(0x08)
	char pad_538[0x40]; // 0x538(0x40)
	struct AMistProjectile* FollowedProjectile; // 0x578(0x08)
	char pad_580[0x8]; // 0x580(0x08)

	void SetSunRotationSpeed(float Value); // Function Mist.MistSpectatorPawn.SetSunRotationSpeed // (Final|Exec|Native|Public) // @ game+0x11a4dc0
	void SetSpeedMovingMultiplier(float Value); // Function Mist.MistSpectatorPawn.SetSpeedMovingMultiplier // (Final|Exec|Native|Public) // @ game+0x11a4d40
	void SetSpectatingFOV(float Value); // Function Mist.MistSpectatorPawn.SetSpectatingFOV // (Final|Exec|Native|Public) // @ game+0x11a4cc0
	void SetSandstormRotationSpeed(float Value); // Function Mist.MistSpectatorPawn.SetSandstormRotationSpeed // (Final|Exec|Native|Public) // @ game+0x11a4c40
	void SetSandstormMoveSpeed(float Value); // Function Mist.MistSpectatorPawn.SetSandstormMoveSpeed // (Final|Exec|Native|Public) // @ game+0x11a4bc0
	void SetGlobalSun(); // Function Mist.MistSpectatorPawn.SetGlobalSun // (Final|Exec|Native|Public) // @ game+0x11a4ba0
	void SetFogDensity(float Density); // Function Mist.MistSpectatorPawn.SetFogDensity // (Final|Exec|Native|Public) // @ game+0x11a4b20
	void SetFocusDistance(float Value); // Function Mist.MistSpectatorPawn.SetFocusDistance // (Final|Exec|Native|Public) // @ game+0x11a4aa0
	void SetFocalLength(float Value); // Function Mist.MistSpectatorPawn.SetFocalLength // (Final|Exec|Native|Public) // @ game+0x11a4a20
	void SetCameraSmoothingSpeed(float Value); // Function Mist.MistSpectatorPawn.SetCameraSmoothingSpeed // (Final|Exec|Native|Public) // @ game+0x11a49a0
	void SetCameraRotationLagSpeed(float Value); // Function Mist.MistSpectatorPawn.SetCameraRotationLagSpeed // (Final|Exec|Native|Public) // @ game+0x11a4920
	void SetCameraLagSpeed(float Value); // Function Mist.MistSpectatorPawn.SetCameraLagSpeed // (Final|Exec|Native|Public) // @ game+0x11a48a0
	void SetCameraIneritFollowedRotation(bool Value); // Function Mist.MistSpectatorPawn.SetCameraIneritFollowedRotation // (Final|Exec|Native|Public) // @ game+0x11a4810
	void SetCameraFlareIntensity(float Value); // Function Mist.MistSpectatorPawn.SetCameraFlareIntensity // (Final|Exec|Native|Public) // @ game+0x11a4790
	void SetCameraDirtIntensity(float Value); // Function Mist.MistSpectatorPawn.SetCameraDirtIntensity // (Final|Exec|Native|Public) // @ game+0x11a4710
	void SetAperture(float Value); // Function Mist.MistSpectatorPawn.SetAperture // (Final|Exec|Native|Public) // @ game+0x11a4690
};

// Class Mist.MistSandstormFogComponent
// Size: 0x118 (Inherited: 0xf0)
struct UMistSandstormFogComponent : UActorComponent {
	char pad_F0[0x28]; // 0xf0(0x28)
};

// Class Mist.MistSpiderWalker
// Size: 0xf50 (Inherited: 0xf38)
struct AMistSpiderWalker : AMistWalker {
	struct UMistNettableComponent* NettableComponent; // 0xf38(0x08)
	float MinDeltaMove; // 0xf40(0x04)
	float NormalizeScale; // 0xf44(0x04)
	float MoveSiteAngle; // 0xf48(0x04)
	char pad_F4C[0x4]; // 0xf4c(0x04)

	void HandleNetRemoved(); // Function Mist.MistSpiderWalker.HandleNetRemoved // (Final|Native|Private) // @ game+0x11a42f0
	void HandleNetAttached(); // Function Mist.MistSpiderWalker.HandleNetAttached // (Final|Native|Private) // @ game+0x11a42d0
	void HandleHitByNet(struct AMistNetProjectile* NetProjectile); // Function Mist.MistSpiderWalker.HandleHitByNet // (Final|Native|Private) // @ game+0x1141b60
	void ContinuosRipple(struct FVector Position, struct UParticleSystem* WaterSplash, struct AActor* ThisActor, float VelocityScale, float VelocityMultiply); // Function Mist.MistSpiderWalker.ContinuosRipple // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11a3f70
};

// Class Mist.MistStaminaBonusStatusEffect
// Size: 0xe8 (Inherited: 0xe0)
struct UMistStaminaBonusStatusEffect : UMistStatusEffect {
	float StaminaBonusValue; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Mist.MistStatChangeStatusEffect
// Size: 0xe8 (Inherited: 0xe0)
struct UMistStatChangeStatusEffect : UMistStatusEffect {
	enum class EMistPlayerStat Stat; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	float ValueChange; // 0xe4(0x04)
};

// Class Mist.MistStationFlotillaQuestsComponent
// Size: 0x170 (Inherited: 0xf0)
struct UMistStationFlotillaQuestsComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	struct UMistBaseQuestGenerator* QuestGeneratorClass; // 0x110(0x08)
	int32_t QuestGenerationIntervalMinutes; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct TMap<int64_t, struct FMistQuestGiverPlayerData> SavedPlayerData; // 0x120(0x50)
};

// Class Mist.MistStatPointsHudLogEntryWidget
// Size: 0x300 (Inherited: 0x2f0)
struct UMistStatPointsHudLogEntryWidget : UMistHudLogEntryBaseWidget {
	struct UTextBlock* CountWidget; // 0x2f0(0x08)
	struct UMistStatPointsHudLogEntry* StatPointData; // 0x2f8(0x08)
};

// Class Mist.MistStatusEffectPlayerComponent
// Size: 0x1c0 (Inherited: 0x118)
struct UMistStatusEffectPlayerComponent : UMistPlayerComponent {
	char pad_118[0x68]; // 0x118(0x68)
	struct FMistActiveStatusEffectHolder ActiveStatusEffectsHolder; // 0x180(0x10)
	struct UMistStatusEffect* BurningStatusEffect; // 0x190(0x08)
	float SetOnFireDamageThreshold; // 0x198(0x04)
	float SetOnFireDamageResetDuration; // 0x19c(0x04)
	struct UParticleSystemComponent* BurningParticleComponent; // 0x1a0(0x08)
	struct APawn* BurningInstigatorPawn; // 0x1a8(0x08)
	char pad_1B0[0x10]; // 0x1b0(0x10)

	void OnRep_ActiveStatusEffectsHolder(struct FMistActiveStatusEffectHolder& OldActiveStatusEffectsHolder); // Function Mist.MistStatusEffectPlayerComponent.OnRep_ActiveStatusEffectsHolder // (Final|Native|Private|HasOutParms) // @ game+0x11a9450
	void MulticastRemoveActiveStatusEffect(uint64_t ID); // Function Mist.MistStatusEffectPlayerComponent.MulticastRemoveActiveStatusEffect // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11a91f0
	void MulticastAddActiveStatusEffect(struct FMistActiveStatusEffect InStatusEffect); // Function Mist.MistStatusEffectPlayerComponent.MulticastAddActiveStatusEffect // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11a9140
	void HandleStatusEffectTimerExpired(uint64_t ID); // Function Mist.MistStatusEffectPlayerComponent.HandleStatusEffectTimerExpired // (Final|Native|Private) // @ game+0x11a8d90
	void HandleStatusEffectIntervalTick(uint64_t ID); // Function Mist.MistStatusEffectPlayerComponent.HandleStatusEffectIntervalTick // (Final|Native|Private) // @ game+0x11a8d10
	void HandleReceiveDamage(struct AActor* DamagedActor, float Damage, struct UDamageType* DamageType, struct FDamageSource& DamageSource); // Function Mist.MistStatusEffectPlayerComponent.HandleReceiveDamage // (Final|Native|Private|HasOutParms) // @ game+0x11a87f0
	float GetModifiedDamageParameter(float BaseValue, enum class EMistDamageModifier ActionType, struct UDamageType* DamageType); // Function Mist.MistStatusEffectPlayerComponent.GetModifiedDamageParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x11a85d0
	float GetModifiedActionParameter(float BaseValue, enum class EMistActionModifier ActionType); // Function Mist.MistStatusEffectPlayerComponent.GetModifiedActionParameter // (Final|Native|Public|BlueprintCallable) // @ game+0x11a8500
	void ClientSetActiveStatusEffects(struct TArray<struct FMistActiveStatusEffect> InStatusEffects); // Function Mist.MistStatusEffectPlayerComponent.ClientSetActiveStatusEffects // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x1176480
	void ClientRemoveActiveStatusEffect(uint64_t ID); // Function Mist.MistStatusEffectPlayerComponent.ClientRemoveActiveStatusEffect // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x10dc270
	void ClientAddActiveStatusEffect(struct FMistActiveStatusEffect InStatusEffect); // Function Mist.MistStatusEffectPlayerComponent.ClientAddActiveStatusEffect // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11a8450
	void AddStatusEffect(struct UMistStatusEffect* EffectClass, struct UObject* SourceObject, int32_t SourceIndex, float ExtraDuration, float InitialMagnitude); // Function Mist.MistStatusEffectPlayerComponent.AddStatusEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x11a82c0
};

// Class Mist.MistStayHydratedQuest
// Size: 0x120 (Inherited: 0x110)
struct UMistStayHydratedQuest : UMistTutorialQuest {
	struct UMistItemTemplate* ItemToUseTemplate; // 0x110(0x08)
	struct FName ItemToUseTaskName; // 0x118(0x08)

	void OnFirstItemUsed(); // Function Mist.MistStayHydratedQuest.OnFirstItemUsed // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void ItemUsed(int32_t SoundId, struct UMistItemTemplate* ItemTemplate, int32_t Count); // Function Mist.MistStayHydratedQuest.ItemUsed // (Final|Native|Private) // @ game+0x112ec30
};

// Class Mist.MistSteeringLeversAnimInstance
// Size: 0x2a0 (Inherited: 0x280)
struct UMistSteeringLeversAnimInstance : UMistMannedControlAnimInstance {
	float MaxSpeed; // 0x278(0x04)
	float SpeedAlpha; // 0x27c(0x04)
	float LeftStick; // 0x280(0x04)
	float RightStick; // 0x284(0x04)
	float WalkerSpeed; // 0x288(0x04)
	float DeckPitch; // 0x28c(0x04)
	float DeckRoll; // 0x290(0x04)
	char pad_29C[0x4]; // 0x29c(0x04)
};

// Class Mist.MistSteeringLeversPlaceableTemplate
// Size: 0x1c8 (Inherited: 0x1c8)
struct UMistSteeringLeversPlaceableTemplate : UMistPlaceableTemplate {
};

// Class Mist.MistStompingQuest
// Size: 0x160 (Inherited: 0x110)
struct UMistStompingQuest : UMistTutorialQuest {
	struct TMap<struct UMistPlaceableTemplate*, struct FName> Placeable; // 0x110(0x50)

	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistStompingQuest.ItemBuilt // (Final|Native|Private) // @ game+0x11a9080
};

// Class Mist.MistStructureCustomizationComponent
// Size: 0x178 (Inherited: 0xf0)
struct UMistStructureCustomizationComponent : UActorComponent {
	char pad_F0[0x38]; // 0xf0(0x38)
	struct UMistStructureDecorationTemplate* DefaultDecoration; // 0x128(0x08)
	bool bEnableDecoration; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)
	struct FMistStructureCustomization Customization; // 0x138(0x28)
	char pad_160[0x8]; // 0x160(0x08)
	struct TArray<struct UMeshComponent*> DecorationMeshes; // 0x168(0x10)

	void OnRep_Customization(); // Function Mist.MistStructureCustomizationComponent.OnRep_Customization // (Final|Native|Private) // @ game+0x11a9520
	void MulticastSetCustomization(struct FMistStructureCustomization InCustomization); // Function Mist.MistStructureCustomizationComponent.MulticastSetCustomization // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11a9320
};

// Class Mist.MistStructureCustomizationWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistStructureCustomizationWidget : UMistUIWidget {
	struct UMistStructureDetailCustomizationWidget* WalkerDetailCustomizationWidget; // 0x2c0(0x08)
	struct AActor* BoundActor; // 0x2c8(0x08)
};

// Class Mist.MistStructureDecorationTemplate
// Size: 0x150 (Inherited: 0xc0)
struct UMistStructureDecorationTemplate : UMistCustomizationTemplate {
	struct AActor* Actor; // 0xc0(0x08)
	struct TSoftObjectPtr<UTexture2D> PreviewIcon; // 0xc8(0x28)
	struct FName ComponentTag; // 0xf0(0x08)
	struct TMap<struct FName, struct UStreamableRenderAsset*> ReplacementMeshes; // 0xf8(0x50)
	bool bSupportsPrimaryDye; // 0x148(0x01)
	bool bSupportsSecondaryDye; // 0x149(0x01)
	bool bSupportsEdgePattern; // 0x14a(0x01)
	bool bSupportsEmblem; // 0x14b(0x01)
	bool bHidden; // 0x14c(0x01)
	char pad_14D[0x3]; // 0x14d(0x03)
};

// Class Mist.MistStructureDetailCustomizationWidget
// Size: 0x3a8 (Inherited: 0x2c0)
struct UMistStructureDetailCustomizationWidget : UMistUIWidget {
	struct UWidget* DecorationTextWidget; // 0x2c0(0x08)
	struct UMistExpandableSelectionWidget* DecorationSelectionWidget; // 0x2c8(0x08)
	struct UWidget* BackgroundDyeTextWidget; // 0x2d0(0x08)
	struct UMistExpandableSelectionWidget* BackgroundDyeSelectionWidget; // 0x2d8(0x08)
	struct UWidget* ForegroundDyeTextWidget; // 0x2e0(0x08)
	struct UMistExpandableSelectionWidget* ForegroundDyeSelectionWidget; // 0x2e8(0x08)
	struct UWidget* EmblemTextWidget; // 0x2f0(0x08)
	struct UMistExpandableSelectionWidget* EmblemSelectionWidget; // 0x2f8(0x08)
	struct UWidget* EdgePatternTextWidget; // 0x300(0x08)
	struct UMistExpandableSelectionWidget* EdgePatternSelectionWidget; // 0x308(0x08)
	struct UMistPhotoStageWidget* PreviewWidget; // 0x310(0x08)
	struct UVerticalBox* RequirementsListWidget; // 0x318(0x08)
	struct UMistBaseButtonWidget* ApplyButton; // 0x320(0x08)
	struct AActor* BoundActor; // 0x328(0x08)
	struct UMistStructureCustomizationComponent* BoundCustomizationComponent; // 0x330(0x08)
	struct AMistPlacementPreviewActor* PreviewActor; // 0x338(0x08)
	struct TArray<struct UMeshComponent*> PreviewDecorationMeshes; // 0x340(0x10)
	struct FMistStructureCustomization PreviewCustomization; // 0x350(0x28)
	struct FMistStructureCustomization InitialCustomization; // 0x378(0x28)
	char pad_3A0[0x8]; // 0x3a0(0x08)

	void HandleApplyButtonClicked(); // Function Mist.MistStructureDetailCustomizationWidget.HandleApplyButtonClicked // (Final|Native|Private) // @ game+0x11a86e0
};

// Class Mist.MistStructureGridComponent
// Size: 0x128 (Inherited: 0xf0)
struct UMistStructureGridComponent : UActorComponent {
	char pad_F0[0x38]; // 0xf0(0x38)
};

// Class Mist.MistStructureRenamingScreen
// Size: 0x3b0 (Inherited: 0x3a0)
struct UMistStructureRenamingScreen : UMistUIScreen {
	struct UMistStructureRenamingWidget* StructureRenamingWidget; // 0x3a0(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x3a8(0x08)
};

// Class Mist.MistStructureRenamingWidget
// Size: 0x330 (Inherited: 0x2c0)
struct UMistStructureRenamingWidget : UMistUIWidget {
	struct UPanelWidget* StructureNamePanelWidget; // 0x2c0(0x08)
	struct UTextBlock* StructureNameTextWidget; // 0x2c8(0x08)
	struct UTextBlock* StructureTypeTextWidget; // 0x2d0(0x08)
	struct UPanelWidget* StructureNameInputPanelWidget; // 0x2d8(0x08)
	struct UEditableTextBox* StructureNameInputWidget; // 0x2e0(0x08)
	struct UMistBaseButtonWidget* EditStructureNameButtonWidget; // 0x2e8(0x08)
	struct UMistInputBindingHintWidget* InputBindingHintWidget; // 0x2f0(0x08)
	struct FText StructureNameTooLongError; // 0x2f8(0x18)
	struct AMistStructurePart* BoundStructurePart; // 0x310(0x08)
	char pad_318[0x18]; // 0x318(0x18)

	void HandleStructureNameInputCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function Mist.MistStructureRenamingWidget.HandleStructureNameInputCommitted // (Final|Native|Private|HasOutParms) // @ game+0x11a8ee0
	void HandleStructureNameInputChanged(struct FText& Text); // Function Mist.MistStructureRenamingWidget.HandleStructureNameInputChanged // (Final|Native|Private|HasOutParms) // @ game+0x11a8e10
};

// Class Mist.MistStructureSettings
// Size: 0x70 (Inherited: 0x38)
struct UMistStructureSettings : UMistSettingsObject {
	float MinCombatCooldown; // 0x38(0x04)
	float MaxCombatCooldown; // 0x3c(0x04)
	float CombatCooldownWallDamaged; // 0x40(0x04)
	float CombatCooldownWallDestroyed; // 0x44(0x04)
	float OneSecondsCooldownDamage; // 0x48(0x04)
	float StructureMinDecayInterval; // 0x4c(0x04)
	float StructureMaxDecayInterval; // 0x50(0x04)
	float StructureDecayMinDamagePerHour; // 0x54(0x04)
	float StructureDecayMaxDamagePerHour; // 0x58(0x04)
	float StructureAutoRepairPerHour; // 0x5c(0x04)
	float StructureDailyMaintenanceFactor; // 0x60(0x04)
	float DecayGracePeriod; // 0x64(0x04)
	struct UMistDamageType* DecayDamageType; // 0x68(0x08)
};

// Class Mist.MistStubActionsPanelWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistStubActionsPanelWidget : UMistUIWidget {
	struct UMistBaseButtonWidget* CollapseButtonWidget; // 0x2c0(0x08)
	struct UPanelWidget* ContentPanelWidget; // 0x2c8(0x08)
	struct UPanelWidget* ActionsPanelWidget; // 0x2d0(0x08)
	struct TArray<struct FMistStubActionsPanelWidgetActionGroup> Groups; // 0x2d8(0x10)
	struct FMistFontStyle GroupFontStyle; // 0x2e8(0x10)
	struct UMistLabelButtonWidget* ItemButtonType; // 0x2f8(0x08)
	struct FMistLabelButtonStyle ItemButtonStyle; // 0x300(0x08)
	char pad_308[0x18]; // 0x308(0x18)
};

// Class Mist.MistStubItemTemplate
// Size: 0x1d8 (Inherited: 0x1d8)
struct UMistStubItemTemplate : UMistItemTemplate {
};

// Class Mist.MistFontTypeAsset
// Size: 0x98 (Inherited: 0x30)
struct UMistFontTypeAsset : UDataAsset {
	struct FSlateFontInfo Font; // 0x30(0x50)
	struct FVector2D ShadowOffset; // 0x80(0x08)
	struct FLinearColor ShadowColorAndOpacity; // 0x88(0x10)
};

// Class Mist.MistFontColorAsset
// Size: 0x58 (Inherited: 0x30)
struct UMistFontColorAsset : UDataAsset {
	struct FSlateColor Color; // 0x30(0x28)
};

// Class Mist.MistButtonTypeAsset
// Size: 0x2a8 (Inherited: 0x30)
struct UMistButtonTypeAsset : UDataAsset {
	struct FButtonStyle Button; // 0x30(0x278)
};

// Class Mist.MistProgressBarTypeAsset
// Size: 0x1d0 (Inherited: 0x30)
struct UMistProgressBarTypeAsset : UDataAsset {
	struct FProgressBarStyle ProgressBar; // 0x30(0x1a0)
};

// Class Mist.MistCheckBoxTypeAsset
// Size: 0x5b0 (Inherited: 0x30)
struct UMistCheckBoxTypeAsset : UDataAsset {
	struct FCheckBoxStyle CheckBox; // 0x30(0x580)
};

// Class Mist.MistPanelTypeAsset
// Size: 0x170 (Inherited: 0x30)
struct UMistPanelTypeAsset : UDataAsset {
	struct FSlateBrush Background; // 0x30(0x88)
	struct FMargin BackgroundMargin; // 0xb8(0x10)
	struct FSlateBrush Border; // 0xc8(0x88)
	struct FMargin BorderMargin; // 0x150(0x10)
	struct FMargin ContentMargin; // 0x160(0x10)
};

// Class Mist.MistBrushTypeAsset
// Size: 0xb8 (Inherited: 0x30)
struct UMistBrushTypeAsset : UDataAsset {
	struct FSlateBrush Brush; // 0x30(0x88)
};

// Class Mist.MistEditableTextBoxTypeAsset
// Size: 0x820 (Inherited: 0x30)
struct UMistEditableTextBoxTypeAsset : UDataAsset {
	struct FEditableTextBoxStyle EditableTextBox; // 0x30(0x7f0)
};

// Class Mist.MistLabelButtonTypeAsset
// Size: 0x48 (Inherited: 0x30)
struct UMistLabelButtonTypeAsset : UDataAsset {
	struct FMistButtonStyle ButtonStyle; // 0x30(0x08)
	struct FMistFontStyle FontStyle; // 0x38(0x10)
};

// Class Mist.MistLabelCheckBoxTypeAsset
// Size: 0x48 (Inherited: 0x30)
struct UMistLabelCheckBoxTypeAsset : UDataAsset {
	struct FMistCheckBoxStyle CheckBoxStyle; // 0x30(0x08)
	struct FMistFontStyle FontStyle; // 0x38(0x10)
};

// Class Mist.MistSubtitleWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UMistSubtitleWidget : UMistHUDWidget {
	struct UTextBlock* TextWidget; // 0x2e0(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x2e8(0x08)
	struct UWidgetAnimation* HideAnimation; // 0x2f0(0x08)
	char pad_2F8[0x8]; // 0x2f8(0x08)

	void HandleHideAnimationFinished(); // Function Mist.MistSubtitleWidget.HandleHideAnimationFinished // (Final|Native|Private) // @ game+0x11ad1a0
};

// Class Mist.MistSunsetBall
// Size: 0x438 (Inherited: 0x3d0)
struct AMistSunsetBall : AStaticMeshActor {
	char pad_3D0[0x20]; // 0x3d0(0x20)
	struct FVector GravityForce; // 0x3f0(0x0c)
	char pad_3FC[0x1c]; // 0x3fc(0x1c)
	struct TWeakObjectPtr<struct AMistOasisPlayerController> LastTouchedBy; // 0x418(0x08)
	struct UDamageType* CollisionDamageType; // 0x420(0x08)
	struct TWeakObjectPtr<struct AMistSunsetPlayfield> Playfield; // 0x428(0x08)
	int32_t LastTeam; // 0x430(0x04)
	char pad_434[0x4]; // 0x434(0x04)

	void OnRep_Team(int32_t LastLastTeam); // Function Mist.MistSunsetBall.OnRep_Team // (Final|Native|Public) // @ game+0x11ad7c0
	void HandleComponentWake(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function Mist.MistSunsetBall.HandleComponentWake // (Final|Native|Public) // @ game+0x115e370
	void HandleComponentSleep(struct UPrimitiveComponent* WakingComponent, struct FName BoneName); // Function Mist.MistSunsetBall.HandleComponentSleep // (Final|Native|Public) // @ game+0x115e370
	void HandleComponentHit(struct UPrimitiveComponent* HitComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Mist.MistSunsetBall.HandleComponentHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x11acfd0
};

// Class Mist.MistSunsetGoal
// Size: 0x3d8 (Inherited: 0x3d0)
struct AMistSunsetGoal : AStaticMeshActor {
	int32_t Team; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
};

// Class Mist.MistSunsetMovementComponent
// Size: 0x858 (Inherited: 0x828)
struct UMistSunsetMovementComponent : UMistSkywalkerMovementComponent {
	struct FVector PitchVector; // 0x828(0x0c)
	float HorizontalRotation; // 0x834(0x04)
	float PitchAngle; // 0x838(0x04)
	float ForwardForce; // 0x83c(0x04)
	float GravityForce; // 0x840(0x04)
	float LinearDragForce; // 0x844(0x04)
	float SquaredDragForce; // 0x848(0x04)
	float FakeWindSpeed; // 0x84c(0x04)
	float PitchForce; // 0x850(0x04)
	char pad_854[0x4]; // 0x854(0x04)
};

// Class Mist.SunsetPlayerState
// Size: 0x58 (Inherited: 0x28)
struct USunsetPlayerState : UObject {
	struct AMistOasisPlayerController* Controller; // 0x28(0x08)
	struct TWeakObjectPtr<struct AMistPlayer> Pawn; // 0x30(0x08)
	int32_t Team; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct AMistSunsetSkywalker* Walker; // 0x40(0x08)
	float Score; // 0x48(0x04)
	struct TWeakObjectPtr<struct AMistSunsetPlayfield> Playfield; // 0x4c(0x08)
	char pad_54[0x4]; // 0x54(0x04)

	void OnStatePawnChanged(); // Function Mist.SunsetPlayerState.OnStatePawnChanged // (Final|Native|Public) // @ game+0x10968b0
	void OnStateChanged(struct AMistCharacter* Character, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.SunsetPlayerState.OnStateChanged // (Final|Native|Public) // @ game+0x11ad920
	void OnControllerPawnChanged(struct APawn* NewPawn); // Function Mist.SunsetPlayerState.OnControllerPawnChanged // (Final|Native|Public) // @ game+0x11ad2c0
};

// Class Mist.MistSunsetPlayfield
// Size: 0x4c8 (Inherited: 0x3d0)
struct AMistSunsetPlayfield : AStaticMeshActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct AMistSunsetSkywalker* WalkerClass; // 0x3d8(0x08)
	struct UMistProjectileItemTemplate* ProjectileClass; // 0x3e0(0x08)
	struct AMistSunsetBall* BallClass; // 0x3e8(0x08)
	struct AMistSunsetBall* Ball; // 0x3f0(0x08)
	float BallMaxAngle; // 0x3f8(0x04)
	float BallInitialVelocity; // 0x3fc(0x04)
	float WaitingForPlayersTimer; // 0x400(0x04)
	float MatchInProgressTime; // 0x404(0x04)
	struct UMistInteractableComponent* RestartMatch; // 0x408(0x08)
	struct UMistInteractableComponent* JoinTeam1; // 0x410(0x08)
	struct UMistInteractableComponent* JoinTeam2; // 0x418(0x08)
	struct UMistInteractableComponent* JoinTeamAuto; // 0x420(0x08)
	struct TMap<struct AMistOasisPlayerController*, struct USunsetPlayerState*> SunsetPlayers; // 0x428(0x50)
	struct TArray<struct AMistSunsetGoal*> Goals; // 0x478(0x10)
	float MatchTime; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct FString CurrentMessage; // 0x490(0x10)
	float Countdown; // 0x4a0(0x04)
	float BallInSeconds; // 0x4a4(0x04)
	float BallDelayRoundStart; // 0x4a8(0x04)
	float BallDelayGoal; // 0x4ac(0x04)
	float BallDelayOOB; // 0x4b0(0x04)
	char pad_4B4[0x4]; // 0x4b4(0x04)
	struct TArray<int32_t> Scores; // 0x4b8(0x10)

	void OnRestartMatch(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistSunsetPlayfield.OnRestartMatch // (Final|Native|Public|HasOutParms) // @ game+0x11ad840
	void OnRep_CurrentMessage(struct FString NewMessage); // Function Mist.MistSunsetPlayfield.OnRep_CurrentMessage // (Final|Native|Public) // @ game+0x11ad6e0
	void OnRep_Countdown(float newCountdown); // Function Mist.MistSunsetPlayfield.OnRep_Countdown // (Final|Native|Public) // @ game+0x11ad660
	void OnRep_BallInSeconds(float newCountdown); // Function Mist.MistSunsetPlayfield.OnRep_BallInSeconds // (Final|Native|Public) // @ game+0x11ad5e0
	void OnJoinTeamAuto(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistSunsetPlayfield.OnJoinTeamAuto // (Final|Native|Public|HasOutParms) // @ game+0x11ad500
	void OnJoinTeam2(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistSunsetPlayfield.OnJoinTeam2 // (Final|Native|Public|HasOutParms) // @ game+0x11ad420
	void OnJoinTeam1(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistSunsetPlayfield.OnJoinTeam1 // (Final|Native|Public|HasOutParms) // @ game+0x11ad340
	void BallWentOOB(struct AMistOasisPlayerController* Controller); // Function Mist.MistSunsetPlayfield.BallWentOOB // (Final|Native|Public) // @ game+0x11ace90
	void BallHitGoal(struct AMistOasisPlayerController* Controller, struct AMistSunsetGoal* Goal); // Function Mist.MistSunsetPlayfield.BallHitGoal // (Final|Native|Public) // @ game+0x11acdd0
};

// Class Mist.MistSunsetSkywalker
// Size: 0xf48 (Inherited: 0xf40)
struct AMistSunsetSkywalker : AMistSkywalker {
	int32_t Team; // 0xf40(0x04)
	char pad_F44[0x4]; // 0xf44(0x04)
};

// Class Mist.MistSunsetClanOwnershipComponent
// Size: 0x1f8 (Inherited: 0x1f8)
struct UMistSunsetClanOwnershipComponent : UMistClanOwnershipComponent {
};

// Class Mist.MistSunsetSkywalkerControlComponent
// Size: 0x660 (Inherited: 0x608)
struct UMistSunsetSkywalkerControlComponent : UMistSkywalkerControlComponent {
	struct UMistProjectileItemTemplate* ItemTemplate; // 0x608(0x08)
	char pad_610[0x30]; // 0x610(0x30)
	struct ULineBatchComponent* LineBatcher; // 0x640(0x08)
	struct UCameraComponent* PrimaryCam; // 0x648(0x08)
	struct UCameraComponent* SecondaryCam; // 0x650(0x08)
	bool bIsPrimaryActive; // 0x658(0x01)
	char pad_659[0x7]; // 0x659(0x07)

	void ServerShoot(int32_t Item, struct FVector Location, struct FRotator Rotation, bool Additional); // Function Mist.MistSunsetSkywalkerControlComponent.ServerShoot // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x10cc1d0
	void ClientShoot(); // Function Mist.MistSunsetSkywalkerControlComponent.ClientShoot // (Final|Native|Public) // @ game+0x11acf10
};

// Class Mist.MistSunsetTetherMasterComponent
// Size: 0x5a0 (Inherited: 0x590)
struct UMistSunsetTetherMasterComponent : UMistTetherMasterComponent {
	struct UPhysicsConstraintComponent* D6Constraint; // 0x590(0x08)
	char pad_598[0x8]; // 0x598(0x08)
};

// Class Mist.MistSyncMusicCauserInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistSyncMusicCauserInterface : UInterface {
};

// Class Mist.MistSyncMusicControlComponent
// Size: 0x378 (Inherited: 0xf0)
struct UMistSyncMusicControlComponent : UActorComponent {
	struct FMulticastInlineDelegate OnCauserAdded; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnCauserRemoved; // 0x100(0x10)
	char pad_110[0x150]; // 0x110(0x150)
	struct FTimerHandle TimerHandle_SpawnCausersSpheres; // 0x260(0x08)
	char pad_268[0x58]; // 0x268(0x58)
	struct TArray<struct AMistWormMonster*> ActiveWorms; // 0x2c0(0x10)
	struct UCurveFloat* IntensityCurve; // 0x2d0(0x08)
	struct AMistPlayer* PlayerCached; // 0x2d8(0x08)
	struct UMistCharacterGridComponent* CharacterGridComponentCached; // 0x2e0(0x08)
	struct TArray<struct FMistSyncCauserData> Causers; // 0x2e8(0x10)
	char pad_2F8[0x40]; // 0x2f8(0x40)
	float CauserStallTime; // 0x338(0x04)
	char pad_33C[0x3c]; // 0x33c(0x3c)

	void ZeroIntensity(); // Function Mist.MistSyncMusicControlComponent.ZeroIntensity // (Final|Exec|Native|Public) // @ game+0x10968b0
	void ToggleIntensityDebug(); // Function Mist.MistSyncMusicControlComponent.ToggleIntensityDebug // (Final|Exec|Native|Public) // @ game+0x10968b0
	void SpawnCausersSpheres(); // Function Mist.MistSyncMusicControlComponent.SpawnCausersSpheres // (Final|Native|Public) // @ game+0x10968b0
	void ShowCausersSpheres(bool bShow); // Function Mist.MistSyncMusicControlComponent.ShowCausersSpheres // (Final|Exec|Native|Public) // @ game+0x11ade00
	void ProceedHitReceived(struct AMistCharacter* Causer, float Damage); // Function Mist.MistSyncMusicControlComponent.ProceedHitReceived // (Final|Native|Public|BlueprintCallable) // @ game+0x11add30
	void ProceedHitLanded(float Damage, struct AActor* HitActor); // Function Mist.MistSyncMusicControlComponent.ProceedHitLanded // (Final|Native|Public|BlueprintCallable) // @ game+0x11adc60
	void ProceedHitBlocked(struct AMistCharacter* Causer); // Function Mist.MistSyncMusicControlComponent.ProceedHitBlocked // (Final|Native|Public|BlueprintCallable) // @ game+0x11adbe0
	void ProceedHitAlmostReceived(struct AMistCharacter* Causer); // Function Mist.MistSyncMusicControlComponent.ProceedHitAlmostReceived // (Final|Native|Public|BlueprintCallable) // @ game+0x11adb60
	void ProceedHitAlmostLanded(struct AActor* HitActor); // Function Mist.MistSyncMusicControlComponent.ProceedHitAlmostLanded // (Final|Native|Public|BlueprintCallable) // @ game+0x11adae0
	void ProceedGotBlocked(struct AMistCharacter* Causer, struct AMistCharacter* BlockingCharacter); // Function Mist.MistSyncMusicControlComponent.ProceedGotBlocked // (Final|Native|Public|BlueprintCallable) // @ game+0x11ada20
	void MistCauserChangeEvent__DelegateSignature(struct APawn* Causer, int32_t IntensityChangeLevel); // DelegateFunction Mist.MistSyncMusicControlComponent.MistCauserChangeEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void ListCausers(float ShowTime); // Function Mist.MistSyncMusicControlComponent.ListCausers // (Final|Exec|Native|Public) // @ game+0x114c840
	void IncreaseIntensity(float Value); // Function Mist.MistSyncMusicControlComponent.IncreaseIntensity // (Final|Exec|Native|Public) // @ game+0x114c840
	void HandlePlayerHealthChanged(struct UMistHealthComponent* Sender, float PrevHealth, float NewHealth); // Function Mist.MistSyncMusicControlComponent.HandlePlayerHealthChanged // (Final|Native|Private) // @ game+0x11ad1c0
	void HandleCauserDestroyed(struct AActor* DestroyedActor); // Function Mist.MistSyncMusicControlComponent.HandleCauserDestroyed // (Final|Native|Private) // @ game+0x11acf50
	float GetCurrentIntensityLevel(); // Function Mist.MistSyncMusicControlComponent.GetCurrentIntensityLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11acf30
};

// Class Mist.MistTakeOffAnimNotify
// Size: 0x38 (Inherited: 0x38)
struct UMistTakeOffAnimNotify : UAnimNotify {
};

// Class Mist.MistTargetConstructionSiteWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistTargetConstructionSiteWidget : UMistUIWidget {
	float ForcedUpdateTime; // 0x2c0(0x04)
	char pad_2C4[0x4]; // 0x2c4(0x04)
	struct UTextBlock* NameWidget; // 0x2c8(0x08)
	struct UTextBlock* DecayWidget; // 0x2d0(0x08)
	struct UTextBlock* FinishedPartsWidget; // 0x2d8(0x08)
	struct UTextBlock* TotalPartsWidget; // 0x2e0(0x08)
	struct UProgressBar* ConstructionProgressWidget; // 0x2e8(0x08)
	struct UScrollBox* InputListWidget; // 0x2f0(0x08)
	struct UMistConstructionSiteComponent* TargetConstructionSite; // 0x2f8(0x08)
	char pad_300[0x8]; // 0x300(0x08)

	void HandlePartConstructed(struct UMistConstructionSiteComponent* ConstructionSite, struct UMistConstructionPartComponent* ConstructionPart); // Function Mist.MistTargetConstructionSiteWidget.HandlePartConstructed // (Final|Native|Private) // @ game+0x10d1420
};

// Class Mist.MistTargetDetailsWidget
// Size: 0x318 (Inherited: 0x2e0)
struct UMistTargetDetailsWidget : UMistHUDWidget {
	float LingerTime; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)
	struct UWidgetSwitcher* ContentWidget; // 0x2e8(0x08)
	struct UMistTargetPackingWidget* PackingWidget; // 0x2f0(0x08)
	struct UMistTargetConstructionSiteWidget* ConstructionSiteWidget; // 0x2f8(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x300(0x08)
	struct UObject* TargetObject; // 0x308(0x08)
	char pad_310[0x8]; // 0x310(0x08)
};

// Class Mist.MistTargetPackingWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistTargetPackingWidget : UMistUIWidget {
	struct UTextBlock* NameWidget; // 0x2c0(0x08)
	struct UTextBlock* ReasonWidget; // 0x2c8(0x08)
	struct UTextBlock* FinishedPartsWidget; // 0x2d0(0x08)
	struct UTextBlock* TotalPartsWidget; // 0x2d8(0x08)
	struct UProgressBar* ProgressWidget; // 0x2e0(0x08)
	struct AMistPackingProcessActor* TargetPackingActor; // 0x2e8(0x08)
};

// Class Mist.MistTauntBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistTauntBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistTauntWalkerBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistTauntWalkerBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistTechTreeItem
// Size: 0xe0 (Inherited: 0xd0)
struct UMistTechTreeItem : UMistUnlockableTreeItem {
	struct TArray<struct UMistTechTreeItem*> Requirements; // 0xd0(0x10)
};

// Class Mist.MistTemperatureWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistTemperatureWidget : UMistUIWidget {
	struct UBorder* Background; // 0x2c0(0x08)
	struct UImage* CurrentMark; // 0x2c8(0x08)
	struct UImage* RequiredField; // 0x2d0(0x08)
	struct UTextBlock* TextWidget; // 0x2d8(0x08)
	struct UTextBlock* MinTempTextWidget; // 0x2e0(0x08)
	struct UTextBlock* MaxTempTextWidget; // 0x2e8(0x08)
	struct UTextBlock* CombinedTempTextWidget; // 0x2f0(0x08)
	struct UGridPanel* CurrentAlignPanel; // 0x2f8(0x08)
	struct UGridPanel* RequiredAlignPanel; // 0x300(0x08)
	float MaxTemperature; // 0x308(0x04)
	char pad_30C[0x4]; // 0x30c(0x04)
};

// Class Mist.MistTermsAndConditionsScreen
// Size: 0x410 (Inherited: 0x3a0)
struct UMistTermsAndConditionsScreen : UMistUIScreen {
	struct UTextBlock* HeaderTextWidget; // 0x3a0(0x08)
	struct UScrollBox* ContentScrollWidget; // 0x3a8(0x08)
	struct UTextBlock* ContentTextWidget; // 0x3b0(0x08)
	struct UPanelWidget* CheckBoxPanelWidget; // 0x3b8(0x08)
	struct UMistBaseButtonWidget* AcceptButtonWidget; // 0x3c0(0x08)
	struct UMistBaseButtonWidget* QuitButtonWidget; // 0x3c8(0x08)
	struct TArray<struct FMistTermsAndConditionsScreenEntryConfig> Entries; // 0x3d0(0x10)
	char pad_3E0[0x20]; // 0x3e0(0x20)
	struct TArray<struct UMistLabelCheckBoxWidget*> CurrentCheckBoxWidgets; // 0x400(0x10)
};

// Class Mist.MistTerrainAffectionComponent
// Size: 0x110 (Inherited: 0xf0)
struct UMistTerrainAffectionComponent : UActorComponent {
	char pad_F0[0x8]; // 0xf0(0x08)
	float BaseSandinessReductionRate; // 0xf8(0x04)
	float BaseSandinessRate; // 0xfc(0x04)
	struct AMistWalker* WalkerOwner; // 0x100(0x08)
	struct AMistSkywalker* SkywalkerOwner; // 0x108(0x08)
};

// Class Mist.MistTetherCable
// Size: 0x3d0 (Inherited: 0x3c0)
struct AMistTetherCable : AActor {
	struct UCableComponent* CableComponent; // 0x3c0(0x08)
	float TileMaterialLengthFactor; // 0x3c8(0x04)
	char pad_3CC[0x4]; // 0x3cc(0x04)
};

// Class Mist.MistTetherDamageInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistTetherDamageInterface : UInterface {
};

// Class Mist.MistTetherParamsOverrideComponent
// Size: 0xf8 (Inherited: 0xf0)
struct UMistTetherParamsOverrideComponent : UActorComponent {
	float SpringStiffnessOverride; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
};

// Class Mist.MistTetherSlaveComponent
// Size: 0x350 (Inherited: 0x2a0)
struct UMistTetherSlaveComponent : UMistTetherComponent {
	struct FMulticastInlineDelegate OnConnectionBroken; // 0x2a0(0x10)
	struct FMistTetherParameters Parameters; // 0x2b0(0x90)
	struct UMistTetherMasterComponent* LinkedTetherComponent; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)

	bool IsTethered(); // Function Mist.MistTetherSlaveComponent.IsTethered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b16c0
	struct UMistTetherMasterComponent* GetMasterTether(); // Function Mist.MistTetherSlaveComponent.GetMasterTether // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11b14c0
	void Event__DelegateSignature(struct UMistTetherMasterComponent* Sender); // DelegateFunction Mist.MistTetherSlaveComponent.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistTextBlock
// Size: 0x2b0 (Inherited: 0x2a0)
struct UMistTextBlock : UTextBlock {
	struct FMistFontStyle FontStyle; // 0x2a0(0x10)
};

// Class Mist.MistTextFilterDataManager
// Size: 0x138 (Inherited: 0x28)
struct UMistTextFilterDataManager : UObject {
	char pad_28[0xa0]; // 0x28(0xa0)
	struct UMistBackendHttpClient* BackendClient; // 0xc8(0x08)
	char pad_D0[0x68]; // 0xd0(0x68)
};

// Class Mist.MistTextRenderComponent
// Size: 0x810 (Inherited: 0x810)
struct UMistTextRenderComponent : UTextRenderComponent {
	enum class EMistTextRenderBillboardMode BillboardMode; // 0x808(0x01)
};

// Class Mist.MistTextureMerge
// Size: 0x130 (Inherited: 0x108)
struct UMistTextureMerge : UCanvasRenderTarget2D {
	struct TArray<struct UTexture2D*> Layers; // 0x108(0x10)
	struct TArray<struct FColor> LayerTints; // 0x118(0x10)
	bool SrgbCheck; // 0x128(0x01)
	enum class TextureCompressionSettings CompressionSettingsCheck; // 0x129(0x01)
	char pad_12A[0x6]; // 0x12a(0x06)

	void PerformMerge(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Mist.MistTextureMerge.PerformMerge // (Final|Native|Private) // @ game+0x11b1a10
};

// Class Mist.MistTextureMergeBPLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMistTextureMergeBPLibrary : UBlueprintFunctionLibrary {

	struct UMistTextureMerge* CreateWithWeights(struct UObject* WorldContextObject, struct TArray<struct UTexture2D*>& Layers, struct TArray<float>& Weights); // Function Mist.MistTextureMergeBPLibrary.CreateWithWeights // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11b12a0
	void CheckBiomeUsage(struct TArray<bool> BiomeCheckList, int32_t BiomeAmount, bool& NoDouble, bool& EveryBiomeUsed); // Function Mist.MistTextureMergeBPLibrary.CheckBiomeUsage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x11b1100
};

// Class Mist.MistTextWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistTextWidget : UMistUIWidget {
	char pad_2C0[0x48]; // 0x2c0(0x48)

	void OnTextChange(struct FText& InText); // Function Mist.MistTextWidget.OnTextChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
	void OnColorChange(struct FSlateColor& InColor); // Function Mist.MistTextWidget.OnColorChange // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistTextWidgetComponent
// Size: 0x920 (Inherited: 0x900)
struct UMistTextWidgetComponent : UWidgetComponent {
	bool bScaleWithDistance; // 0x900(0x01)
	char pad_901[0x3]; // 0x901(0x03)
	float MaxScale; // 0x904(0x04)
	float MinScale; // 0x908(0x04)
	float MaxScaleDistance; // 0x90c(0x04)
	float MinScaleDistance; // 0x910(0x04)
	char pad_914[0xc]; // 0x914(0x0c)
};

// Class Mist.MistThirstQuenchingStatusEffect
// Size: 0xe8 (Inherited: 0xe0)
struct UMistThirstQuenchingStatusEffect : UMistStatusEffect {
	float QuenchingValue; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class Mist.MistThrowableItemTemplate
// Size: 0x260 (Inherited: 0x250)
struct UMistThrowableItemTemplate : UMistProjectileItemTemplate {
	struct FVector InitialLocationOffset; // 0x250(0x0c)
	char pad_25C[0x4]; // 0x25c(0x04)
};

// Class Mist.MistThrowingCrosshairWidget
// Size: 0x340 (Inherited: 0x340)
struct UMistThrowingCrosshairWidget : UMistCrosshairWidget {
};

// Class Mist.MistTileFoliageParametersComponent
// Size: 0x208 (Inherited: 0xf0)
struct UMistTileFoliageParametersComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	struct TSoftObjectPtr<UDataTable> OptionsTable; // 0x110(0x28)
	char pad_138[0x78]; // 0x138(0x78)
	struct TMap<struct UMistFoliageComponent*, float> BoostedFoliage; // 0x1b0(0x50)
	char pad_200[0x8]; // 0x200(0x08)
};

// Class Mist.MistTileTimeActor
// Size: 0x3f8 (Inherited: 0x3c0)
struct AMistTileTimeActor : AActor {
	char pad_3C0[0x38]; // 0x3c0(0x38)
};

// Class Mist.MistToggleAutoCraftingStationComponent
// Size: 0x440 (Inherited: 0x438)
struct UMistToggleAutoCraftingStationComponent : UMistAutoCraftingStationComponent {
	bool bAllowUserCancelling; // 0x438(0x01)
	bool bCraftingStationActive; // 0x439(0x01)
	char pad_43A[0x6]; // 0x43a(0x06)

	void MulticastToggleCraftingStation(bool bInToggleCraftingStation); // Function Mist.MistToggleAutoCraftingStationComponent.MulticastToggleCraftingStation // (Net|Native|Event|NetMulticast|Public) // @ game+0x11b55a0
};

// Class Mist.MistTorchLogicComponent
// Size: 0x130 (Inherited: 0x128)
struct UMistTorchLogicComponent : UMistPlayerEquipmentItemComponent {
	struct UDamageType* FireDamageType; // 0x128(0x08)

	void HandleCombatActionChanged(enum class ECombatAction PrevAction, enum class ECombatAction NewAction); // Function Mist.MistTorchLogicComponent.HandleCombatActionChanged // (Final|Native|Private) // @ game+0x11b4c50
	void HandleAttackStoppedDealingDamage(); // Function Mist.MistTorchLogicComponent.HandleAttackStoppedDealingDamage // (Final|Native|Private) // @ game+0x11b4a90
};

// Class Mist.MistTorqueGeneratorComponent
// Size: 0x108 (Inherited: 0xf0)
struct UMistTorqueGeneratorComponent : UActorComponent {
	char pad_F0[0x8]; // 0xf0(0x08)
	struct UMistTorqueContainerComponent* TorqueContainer; // 0xf8(0x08)
	float BaseTorqueGenerationRate; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class Mist.MistTorqueProductionWalkerComponent
// Size: 0x3c0 (Inherited: 0x388)
struct UMistTorqueProductionWalkerComponent : UMistPumpWalkerComponent {
	struct TArray<struct UMistItemTemplate*> AcceptedPumpingSourceItems; // 0x388(0x10)
	struct TArray<struct UMistItemTemplate*> AcceptedWaterTypes; // 0x398(0x10)
	int32_t WaterCost; // 0x3a8(0x04)
	char pad_3AC[0x4]; // 0x3ac(0x04)
	struct UMistItemTemplate* TorqueOutputClass; // 0x3b0(0x08)
	int32_t TorqueOutputAmount; // 0x3b8(0x04)
	bool bHasEnoughWater; // 0x3bc(0x01)
	char pad_3BD[0x3]; // 0x3bd(0x03)

	void MulticastSetHasEnoughWater(bool bInHasEnoughWater); // Function Mist.MistTorqueProductionWalkerComponent.MulticastSetHasEnoughWater // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11b5510
};

// Class Mist.MistTorqueWindmillAnimInstance
// Size: 0x280 (Inherited: 0x270)
struct UMistTorqueWindmillAnimInstance : UAnimInstance {
	float CurrentRotationSpeed; // 0x268(0x04)
	float Shakes; // 0x26c(0x04)
	struct UMistTorqueWindmillComponent* CachedTorqueWindmillComponent; // 0x278(0x08)
};

// Class Mist.MistTorqueWindmillComponent
// Size: 0x118 (Inherited: 0xf0)
struct UMistTorqueWindmillComponent : UActorComponent {
	char pad_F0[0x8]; // 0xf0(0x08)
	bool bIsWorking; // 0xf8(0x01)
	char pad_F9[0x1f]; // 0xf9(0x1f)

	void OnRep_IsWorking(); // Function Mist.MistTorqueWindmillComponent.OnRep_IsWorking // (Final|Native|Private) // @ game+0x11b5770
	void MulticastSetIsWorking(bool bInIsWorking); // Function Mist.MistTorqueWindmillComponent.MulticastSetIsWorking // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10d1870
};

// Class Mist.MistTowerWalkerTurretComponent
// Size: 0x2a8 (Inherited: 0x2a8)
struct UMistTowerWalkerTurretComponent : UMistTurretComponent {
};

// Class Mist.MistTrackingHutPopupWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistTrackingHutPopupWidget : UMistUIWidget {
	struct UTextBlock* ExpirationTimerWidget; // 0x2c0(0x08)
	struct UTextBlock* OwnershipWidget; // 0x2c8(0x08)
	char pad_2D0[0x20]; // 0x2d0(0x20)

	void HandleExpirationTimer(); // Function Mist.MistTrackingHutPopupWidget.HandleExpirationTimer // (Final|Native|Protected) // @ game+0x10cc500
};

// Class Mist.MistTradeProtectionComponent
// Size: 0x2b8 (Inherited: 0xf0)
struct UMistTradeProtectionComponent : UActorComponent {
	struct USphereComponent* OuterRing; // 0xf0(0x08)
	struct FMistComponentReference OuterRingRef; // 0xf8(0x28)
	float ProtectionTimer_MaxValue; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct TMap<struct AMistPlayer*, float> PlayersTimer; // 0x128(0x50)
	struct TMap<struct AMistPlayer*, enum class ETradeProtectionState> PlayersInside; // 0x178(0x50)
	struct TMap<struct AMistPlayer*, struct AMistWalker*> PlayerToWalkerMap; // 0x1c8(0x50)
	struct TMap<struct AMistWalker*, float> WalkersTimer; // 0x218(0x50)
	struct TMap<struct AMistWalker*, enum class ETradeProtectionState> WalkersInside; // 0x268(0x50)

	void StopTimerForPlayerOrWalker(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistTradeProtectionComponent.StopTimerForPlayerOrWalker // (Final|Native|Public) // @ game+0x11b5c70
	void StartTimerForPlayerOrWalker(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistTradeProtectionComponent.StartTimerForPlayerOrWalker // (Final|Native|Public) // @ game+0x11b5bb0
	void PlayerOrWalkerLeftInnerRing(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistTradeProtectionComponent.PlayerOrWalkerLeftInnerRing // (Final|Native|Public) // @ game+0x11b5af0
	void PlayerOrWalkerEnteredInnerRing(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistTradeProtectionComponent.PlayerOrWalkerEnteredInnerRing // (Final|Native|Public) // @ game+0x11b5a30
	void HandleWalkerDestroyed(struct AActor* DestroyedActor); // Function Mist.MistTradeProtectionComponent.HandleWalkerDestroyed // (Final|Native|Public) // @ game+0x11b5490
	void HandlePlayerPossessed(struct AMistCharacter* Character, struct AController* Controller); // Function Mist.MistTradeProtectionComponent.HandlePlayerPossessed // (Final|Native|Public) // @ game+0x11b5030
	void HandlePlayerDestroyed(struct AActor* DestroyedActor); // Function Mist.MistTradeProtectionComponent.HandlePlayerDestroyed // (Final|Native|Public) // @ game+0x11b4f30
	void HandleCharacterStopUsingWalker(struct AMistWalker* Walker, struct AMistCharacter* NewCharacter); // Function Mist.MistTradeProtectionComponent.HandleCharacterStopUsingWalker // (Final|Native|Public) // @ game+0x11b4b90
	void HandleCharacterStartUsingWalker(struct AMistWalker* Walker, struct AMistCharacter* NewCharacter); // Function Mist.MistTradeProtectionComponent.HandleCharacterStartUsingWalker // (Final|Native|Public) // @ game+0x11b4ad0
};

// Class Mist.MistTraderComponent
// Size: 0x2b0 (Inherited: 0x1f0)
struct UMistTraderComponent : UMistInteractableComponent {
	char pad_1F0[0x20]; // 0x1f0(0x20)
	struct UMistTraderOrdersProfile* OrdersProfileClass; // 0x210(0x08)
	struct FMistComponentReference SellContainerRef; // 0x218(0x28)
	float TimeToDepartureInSeconds; // 0x240(0x04)
	float DeparturePlayersDetectionRange; // 0x244(0x04)
	float BribeCost; // 0x248(0x04)
	char pad_24C[0x4]; // 0x24c(0x04)
	struct TArray<struct FString> PossibleMerchantNames; // 0x250(0x10)
	struct FString MerchantName; // 0x260(0x10)
	struct TArray<struct FMistTraderOffer> PurchasableItems; // 0x270(0x10)
	struct TArray<struct FMistTraderOffer> SellableItems; // 0x280(0x10)
	struct UMistTraderWidget* InteractionWidget; // 0x290(0x08)
	struct UMistContainerComponent* SellContainer; // 0x298(0x08)
	float DepartureTime; // 0x2a0(0x04)
	char pad_2A4[0xc]; // 0x2a4(0x0c)

	void OnRep_SellableItems(); // Function Mist.MistTraderComponent.OnRep_SellableItems // (Final|Native|Private) // @ game+0x11b5790
	void MulticastUpdateSellableItems(struct TArray<struct FMistTraderOffer> NewSellableItems); // Function Mist.MistTraderComponent.MulticastUpdateSellableItems // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x109ce10
	void MulticastUpdatePurchasableItems(int32_t SlotIndex, int32_t NewCount); // Function Mist.MistTraderComponent.MulticastUpdatePurchasableItems // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11b56b0
	void MulticastUpdateDepartureTime(float NewSecondsToDeparture); // Function Mist.MistTraderComponent.MulticastUpdateDepartureTime // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11b5630
};

// Class Mist.MistTraderOrdersProfile
// Size: 0xd0 (Inherited: 0x30)
struct UMistTraderOrdersProfile : UDataAsset {
	int32_t MinBuyOrders; // 0x30(0x04)
	int32_t MaxBuyOrders; // 0x34(0x04)
	int32_t MinSellOrders; // 0x38(0x04)
	int32_t MaxSellOrders; // 0x3c(0x04)
	bool bUseTable; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TSoftObjectPtr<UDataTable> OrdersTable; // 0x48(0x28)
	struct TArray<struct FMistTraderRandomOfferRow> OrdersArray; // 0x70(0x10)
	char pad_80[0x50]; // 0x80(0x50)
};

// Class Mist.MistTraderSellOfferWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistTraderSellOfferWidget : UMistUIWidget {
	struct UMistBasicItemIconWidget* IconWidget; // 0x2c0(0x08)
};

// Class Mist.MistTraderWidget
// Size: 0x328 (Inherited: 0x2c0)
struct UMistTraderWidget : UMistUIWidget {
	struct UTextBlock* MerchantNameWidget; // 0x2c0(0x08)
	struct UGridPanel* RecipesPanelWidget; // 0x2c8(0x08)
	struct UGridPanel* SellableItemsPanelWidget; // 0x2d0(0x08)
	struct UMistContainerWidget* SellContainerWidget; // 0x2d8(0x08)
	struct UButton* SellButtonWidget; // 0x2e0(0x08)
	struct UButton* BribeButtonWidget; // 0x2e8(0x08)
	struct UHorizontalBox* PriceBox; // 0x2f0(0x08)
	struct UTextBlock* PriceWidget; // 0x2f8(0x08)
	struct UTextBlock* DepartureTimeWidget; // 0x300(0x08)
	struct UTextBlock* BribeCostWidget; // 0x308(0x08)
	struct UGridPanel* ItemSlotPopupContainer; // 0x310(0x08)
	struct UMistTraderComponent* Trader; // 0x318(0x08)
	struct UMistContainerComponent* SellContainer; // 0x320(0x08)

	void HandleSellButtonPressed(); // Function Mist.MistTraderWidget.HandleSellButtonPressed // (Final|Native|Private) // @ game+0x11b52b0
	struct UWidget* HandleNavToSellButton(enum class EUINavigation Nav); // Function Mist.MistTraderWidget.HandleNavToSellButton // (Final|Native|Public|BlueprintCallable) // @ game+0x11b4d30
	void HandleInventoryUpdated(); // Function Mist.MistTraderWidget.HandleInventoryUpdated // (Final|Native|Private) // @ game+0x10cc500
	void HandleInputContainerSlotUpdate(struct UMistContainerComponent* Container, int32_t InSlot, struct UMistItemTemplate* Item); // Function Mist.MistTraderWidget.HandleInputContainerSlotUpdate // (Final|Native|Private) // @ game+0x10dc800
	void HandleBribeButtonPressed(); // Function Mist.MistTraderWidget.HandleBribeButtonPressed // (Final|Native|Private) // @ game+0x11b4ab0
};

// Class Mist.MistTradeStation
// Size: 0x3f0 (Inherited: 0x3f0)
struct AMistTradeStation : AMistBasePersistentActor {
};

// Class Mist.MistTradeStationArenaComponent
// Size: 0x148 (Inherited: 0xf0)
struct UMistTradeStationArenaComponent : UActorComponent {
	struct FMistComponentReference ArenaBoundsRef; // 0xf0(0x28)
	struct USphereComponent* ArenaBounds; // 0x118(0x08)
	struct TArray<struct AMistPlayer*> PlayersInside; // 0x120(0x10)
	char pad_130[0x18]; // 0x130(0x18)

	void PlayerLeftArena(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistTradeStationArenaComponent.PlayerLeftArena // (Final|Native|Public) // @ game+0x11b5970
	void PlayerEnteredArena(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistTradeStationArenaComponent.PlayerEnteredArena // (Final|Native|Public) // @ game+0x11b58b0
	void OnWagedChallengeIssued(struct AMistPlayer* Challenged, struct AMistPlayer* Challenger, int32_t Wage); // Function Mist.MistTradeStationArenaComponent.OnWagedChallengeIssued // (Final|Native|Private) // @ game+0x11b57b0
	void HandlePlayerStateChanged(struct AMistCharacter* InCharacter, enum class EMistCharacterState OldState, enum class EMistCharacterState NewState); // Function Mist.MistTradeStationArenaComponent.HandlePlayerStateChanged // (Final|Native|Public) // @ game+0x11b51b0
	void HandlePlayerPossessed(struct AMistCharacter* InCharacter, struct AController* InController); // Function Mist.MistTradeStationArenaComponent.HandlePlayerPossessed // (Final|Native|Private) // @ game+0x11b50f0
	void HandlePlayerDestroyed(struct AActor* DestroyedActor); // Function Mist.MistTradeStationArenaComponent.HandlePlayerDestroyed // (Final|Native|Public) // @ game+0x11b4fb0
	void HandlePlayerChallenged(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistTradeStationArenaComponent.HandlePlayerChallenged // (Final|Native|Public|HasOutParms) // @ game+0x11b4e50
};

// Class Mist.MistTradeStationAuctionWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistTradeStationAuctionWidget : UMistUIWidget {
	struct UMistAuctionBrowseWidget* BrowseWidget; // 0x2c0(0x08)
	struct UCanvasPanel* NewAuctionsCountdownPanel; // 0x2c8(0x08)
	struct UTextBlock* NewAuctionsCountdown; // 0x2d0(0x08)
	struct UMistTradeStationScreen* ParentScreen; // 0x2d8(0x08)
	struct UMistPlayerTradeStationComponent* BoundTradeStationComponent; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void HandleTradeStationAuctionUpdated(struct UMistTradeStationClientAuction* Auction); // Function Mist.MistTradeStationAuctionWidget.HandleTradeStationAuctionUpdated // (Final|Native|Public) // @ game+0x11b53f0
	void HandleTradeStationAuctionDeleted(struct UMistTradeStationClientAuction* Auction); // Function Mist.MistTradeStationAuctionWidget.HandleTradeStationAuctionDeleted // (Final|Native|Public) // @ game+0x11b5370
	void HandleTradeStationAuctionAdded(struct UMistTradeStationClientAuction* Auction); // Function Mist.MistTradeStationAuctionWidget.HandleTradeStationAuctionAdded // (Final|Native|Public) // @ game+0x11b52f0
};

// Class Mist.MistTradeStationBrowseGroupWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistTradeStationBrowseGroupWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UPanelWidget* HasPlayerOrdersWidget; // 0x2c8(0x08)
	struct UMistBasicItemIconWidget* ItemIconWidget; // 0x2d0(0x08)
	struct UTextBlock* ItemNameWidget; // 0x2d8(0x08)
	struct UTextBlock* ItemRarityNameWidget; // 0x2e0(0x08)
	struct UTextBlock* CountWidget; // 0x2e8(0x08)
	struct UTextBlock* BestUnitPriceWidget; // 0x2f0(0x08)
	struct UVerticalBox* ChildrenWidget; // 0x2f8(0x08)
	struct UButton* ToggleChildrenButtonWidget; // 0x300(0x08)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x308(0x08)
	struct UMistTradeStationOrderGroup* Data; // 0x310(0x08)

	void HandleToggleChildrenClicked(); // Function Mist.MistTradeStationBrowseGroupWidget.HandleToggleChildrenClicked // (Final|Native|Private) // @ game+0x11b52d0
	struct UWidget* HandleNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationBrowseGroupWidget.HandleNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11b4dc0
};

// Class Mist.MistTradeStationBrowseItemWidget
// Size: 0x398 (Inherited: 0x2c0)
struct UMistTradeStationBrowseItemWidget : UMistUIWidget {
	struct UPanelWidget* IsPlayerOrderWidget; // 0x2c0(0x08)
	struct UMistBasicItemIconWidget* ItemIconWidget; // 0x2c8(0x08)
	struct URichTextBlock* SellerNameWidget; // 0x2d0(0x08)
	struct UTextBlock* TypeLabel; // 0x2d8(0x08)
	struct UPanelWidget* ClanPanelWidget; // 0x2e0(0x08)
	struct UTextBlock* ClanNameWidget; // 0x2e8(0x08)
	struct UTextBlock* UnitPriceWidget; // 0x2f0(0x08)
	struct UPanelWidget* ExecutePanelWidget; // 0x2f8(0x08)
	struct UMistNumberInputWidget* QuantityInputWidget; // 0x300(0x08)
	struct UMistNumberSliderWidget* QuantitySliderWidget; // 0x308(0x08)
	struct UButton* QuantityAllButtonWidget; // 0x310(0x08)
	struct UButton* ExecuteOrderButtonWidget; // 0x318(0x08)
	struct UTextBlock* ExecuteOrderButtonLabelWidget; // 0x320(0x08)
	struct UTextBlock* TotalPriceLabelWidget; // 0x328(0x08)
	struct UTextBlock* TotalPriceWidget; // 0x330(0x08)
	struct UTextBlock* NetPriceWidget; // 0x338(0x08)
	struct UPanelWidget* UpdatePanelWidget; // 0x340(0x08)
	struct UButton* UpdateOrderButtonWidget; // 0x348(0x08)
	struct FText NetPriceFormatText; // 0x350(0x18)
	struct FText TotalPriceFormatText; // 0x368(0x18)
	char pad_380[0x8]; // 0x380(0x08)
	struct UMistTradeStationScreen* Screen; // 0x388(0x08)
	struct UMistTradeStationClientOrder* Data; // 0x390(0x08)

	void HandleUpdateOrderButtonClicked(); // Function Mist.MistTradeStationBrowseItemWidget.HandleUpdateOrderButtonClicked // (Final|Native|Private) // @ game+0x11b5470
	void HandleExecuteOrderButtonClicked(); // Function Mist.MistTradeStationBrowseItemWidget.HandleExecuteOrderButtonClicked // (Final|Native|Private) // @ game+0x11b4d10
};

// Class Mist.MistTradeStationBrowseWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistTradeStationBrowseWidget : UMistUIWidget {
	struct UListView* ListWidget; // 0x2c0(0x08)
	struct UScrollBox* ScrollBoxWidget; // 0x2c8(0x08)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x2d0(0x08)

	struct UWidget* HandleNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationBrowseWidget.HandleNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11b9a70
};

// Class Mist.MistTradeStationCategoryFilterItemWidget
// Size: 0x330 (Inherited: 0x2c0)
struct UMistTradeStationCategoryFilterItemWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UTextBlock* NameWidget; // 0x2c8(0x08)
	struct UWidget* ChildrenToggleIndicatorWidget; // 0x2d0(0x08)
	struct UBorder* BorderWidget; // 0x2d8(0x08)
	struct UBorder* HighlightWidget; // 0x2e0(0x08)
	struct UCheckBox* CheckBoxWidget; // 0x2e8(0x08)
	struct UPanelWidget* ChildrenWidget; // 0x2f0(0x08)
	struct UVerticalBox* ChildrenListWidget; // 0x2f8(0x08)
	struct UWidgetAnimation* ChildrenToggleAnimation; // 0x300(0x08)
	bool bTakeColorFromCategory; // 0x308(0x01)
	char pad_309[0x3]; // 0x309(0x03)
	float CategoryColorAlpha; // 0x30c(0x04)
	struct UMistItemCategoryGroup* Group; // 0x310(0x08)
	struct UMistItemCategory* Category; // 0x318(0x08)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x320(0x08)
	char pad_328[0x8]; // 0x328(0x08)

	void HandleUnhovered(); // Function Mist.MistTradeStationCategoryFilterItemWidget.HandleUnhovered // (Final|Native|Private) // @ game+0x11b9d20
	void HandleToggleFinished(); // Function Mist.MistTradeStationCategoryFilterItemWidget.HandleToggleFinished // (Final|Native|Private) // @ game+0x11b9c20
	struct UWidget* HandleNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationCategoryFilterItemWidget.HandleNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11b9b00
	void HandleHovered(); // Function Mist.MistTradeStationCategoryFilterItemWidget.HandleHovered // (Final|Native|Private) // @ game+0x11b9a50
	void HandleClicked(); // Function Mist.MistTradeStationCategoryFilterItemWidget.HandleClicked // (Final|Native|Private) // @ game+0x11b9990
	void HandleCheckedChanged(bool bInIsChecked); // Function Mist.MistTradeStationCategoryFilterItemWidget.HandleCheckedChanged // (Final|Native|Private) // @ game+0x11b9900
};

// Class Mist.MistTradeStationCategoryFilterItemLevel0Widget
// Size: 0x330 (Inherited: 0x330)
struct UMistTradeStationCategoryFilterItemLevel0Widget : UMistTradeStationCategoryFilterItemWidget {
};

// Class Mist.MistTradeStationCategoryFilterItemLevel1Widget
// Size: 0x330 (Inherited: 0x330)
struct UMistTradeStationCategoryFilterItemLevel1Widget : UMistTradeStationCategoryFilterItemWidget {
};

// Class Mist.MistTradeStationCategoryFilterItemLevel2Widget
// Size: 0x330 (Inherited: 0x330)
struct UMistTradeStationCategoryFilterItemLevel2Widget : UMistTradeStationCategoryFilterItemWidget {
};

// Class Mist.MistTradeStationCategoryFilterWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistTradeStationCategoryFilterWidget : UMistUIWidget {
	struct UScrollBox* ItemListWidget; // 0x2c0(0x08)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x2c8(0x08)

	struct UWidget* HandleNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationCategoryFilterWidget.HandleNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11b9b90
};

// Class Mist.MistTradeStationComponent
// Size: 0x540 (Inherited: 0xf0)
struct UMistTradeStationComponent : UActorComponent {
	char pad_F0[0x128]; // 0xf0(0x128)
	struct FMistComponentReference Interactable; // 0x218(0x28)
	struct FMistComponentReference WalkerStationInteractable; // 0x240(0x28)
	struct FString PersistenceGuid; // 0x268(0x10)
	float TestAuctionDuration; // 0x278(0x04)
	int32_t TestAuctionNumberOfInitAuctions; // 0x27c(0x04)
	float TestAuctionMinTimeToAddNewAuction; // 0x280(0x04)
	float TestAuctionMaxTimeToAddNewAuction; // 0x284(0x04)
	struct UMistItemTemplate* TestAuctionItem; // 0x288(0x08)
	struct UDataTable* AuctionGeneratingTable; // 0x290(0x08)
	struct FTimespan MinTimeBetweenAuctions; // 0x298(0x08)
	struct FTimespan MaxTimeBetweenAuctions; // 0x2a0(0x08)
	struct TMap<struct FString, struct UMistTradeStationAuctionObject*> Auctions; // 0x2a8(0x50)
	struct TMap<struct FString, struct FMistTradeStationAuctionChangeList> AuctionChanges; // 0x2f8(0x50)
	struct TMap<struct FString, struct UMistTradeStationServerOrder*> Orders; // 0x348(0x50)
	struct TMap<struct FString, struct FMistTradeStationOrderTransactionList> OrderTransactions; // 0x398(0x50)
	struct TMap<int64_t, struct FMistTradePlayerHistory> TradeHistory; // 0x3e8(0x50)
	struct FTimerHandle TimerHandle_AddNewAuction; // 0x438(0x08)
	int64_t TransactionVersion; // 0x440(0x08)
	int64_t AuctionChangeVersion; // 0x448(0x08)
	struct TMap<int64_t, struct FMistTradeStationVaultContent> Vault; // 0x450(0x50)
	struct TMap<int64_t, struct FMistTradeStationVaultMoney> VaultMoney; // 0x4a0(0x50)
	char pad_4F0[0x50]; // 0x4f0(0x50)

	void HandleTradeStationInteraction(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistTradeStationComponent.HandleTradeStationInteraction // (Final|Native|Protected|HasOutParms) // @ game+0x11b9c40
	void HandleAuctionEnded(struct UMistTradeStationAuctionObject* AuctionObject); // Function Mist.MistTradeStationComponent.HandleAuctionEnded // (Final|Native|Protected) // @ game+0x11b9880
};

// Class Mist.MistTradeStationConditionFilterWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistTradeStationConditionFilterWidget : UMistUIWidget {
	struct USlider* DurabilitySliderWidget; // 0x2c0(0x08)
	float MinDurability; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x2d0(0x08)

	void HandleDurabilitySliderValueChanged(float InValue); // Function Mist.MistTradeStationConditionFilterWidget.HandleDurabilitySliderValueChanged // (Final|Native|Private) // @ game+0x11b99d0
};

// Class Mist.MistTradeStationCreateWidget
// Size: 0x348 (Inherited: 0x308)
struct UMistTradeStationCreateWidget : UMistUIDragDropWidget {
	struct UButton* ButtonWidget; // 0x308(0x08)
	char pad_310[0x30]; // 0x310(0x30)
	struct UMistTradeStationScreen* Data; // 0x340(0x08)

	void ReceiveDragEnter(); // Function Mist.MistTradeStationCreateWidget.ReceiveDragEnter // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleClicked(); // Function Mist.MistTradeStationCreateWidget.HandleClicked // (Final|Native|Private) // @ game+0x11b99b0
};

// Class Mist.MistTradeStationAuctionObject
// Size: 0xa0 (Inherited: 0x28)
struct UMistTradeStationAuctionObject : UObject {
	char pad_28[0x18]; // 0x28(0x18)
	struct FString AuctionGuid; // 0x40(0x10)
	struct FTradeStationAuctionItem Data; // 0x50(0x48)
	struct FTimerHandle TimerHandle_EndAuction; // 0x98(0x08)

	void EndAuction(); // Function Mist.MistTradeStationAuctionObject.EndAuction // (Final|Native|Public) // @ game+0x11b9860
};

// Class Mist.MistTradeStationClientAuction
// Size: 0xb0 (Inherited: 0x28)
struct UMistTradeStationClientAuction : UObject {
	struct FString AuctionGuid; // 0x28(0x10)
	struct FTradeStationAuctionItem Data; // 0x38(0x48)
	char pad_80[0x30]; // 0x80(0x30)
};

// Class Mist.MistTradeStationServerOrder
// Size: 0x68 (Inherited: 0x28)
struct UMistTradeStationServerOrder : UObject {
	struct FString OrderGuid; // 0x28(0x10)
	bool bIsBuyOrder; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	int64_t CharacterId; // 0x40(0x08)
	struct FMistItem Item; // 0x48(0x18)
	int32_t Quantity; // 0x60(0x04)
	float Price; // 0x64(0x04)
};

// Class Mist.MistTradeStationClientOrder
// Size: 0xf0 (Inherited: 0x28)
struct UMistTradeStationClientOrder : UObject {
	struct FString OrderGuid; // 0x28(0x10)
	bool bIsBuyOrder; // 0x38(0x01)
	bool bIsPlayer; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	int64_t CharacterId; // 0x40(0x08)
	struct FString CharacterName; // 0x48(0x10)
	int64_t ClanId; // 0x58(0x08)
	struct FString ClanName; // 0x60(0x10)
	int32_t ClanColorIndex; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct FString AccountName; // 0x78(0x10)
	enum class EMistGamePlatform AccountPlatform; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
	struct FMistItem Item; // 0x90(0x18)
	float ItemDurability; // 0xa8(0x04)
	int32_t Quantity; // 0xac(0x04)
	float Price; // 0xb0(0x04)
	int32_t PreviousQuantity; // 0xb4(0x04)
	float PreviousPrice; // 0xb8(0x04)
	char pad_BC[0x34]; // 0xbc(0x34)
};

// Class Mist.MistTradeStationQuickSellEntry
// Size: 0x60 (Inherited: 0x28)
struct UMistTradeStationQuickSellEntry : UObject {
	struct FMistItem Item; // 0x28(0x18)
	char pad_40[0x20]; // 0x40(0x20)
};

// Class Mist.MistTradeHistoryEntryObject
// Size: 0x70 (Inherited: 0x28)
struct UMistTradeHistoryEntryObject : UObject {
	struct FMistTradeHistoryEntry Data; // 0x28(0x48)
};

// Class Mist.MistTradeStationHistoryWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistTradeStationHistoryWidget : UMistUIWidget {
	struct UMistTradeTransactionLogWidget* BrowseWidget; // 0x2c0(0x08)
	struct UButton* ClearHistoryButton; // 0x2c8(0x08)
	struct UMistPlayerTradeStationComponent* BoundTradeStationComponent; // 0x2d0(0x08)

	void HandleClearHistoryButtonClicked(); // Function Mist.MistTradeStationHistoryWidget.HandleClearHistoryButtonClicked // (Final|Native|Private) // @ game+0x11bcd80
};

// Class Mist.MistTradeStationMerchantFilterWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistTradeStationMerchantFilterWidget : UMistUIWidget {
	struct UMistLabelButtonWidget* AnyButtonWidget; // 0x2c0(0x08)
	struct UMistLabelButtonWidget* WithPlayerOrdersButtonWidget; // 0x2c8(0x08)
	struct UMistLabelButtonWidget* OnlyPlayerOrdersButtonWidget; // 0x2d0(0x08)
	struct FMistLabelButtonStyle SelectedStyle; // 0x2d8(0x08)
	struct FMistLabelButtonStyle NotSelectedStyle; // 0x2e0(0x08)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x2e8(0x08)
};

// Class Mist.MistTradeStationMessageItemWidget
// Size: 0x2c8 (Inherited: 0x2c0)
struct UMistTradeStationMessageItemWidget : UMistUIWidget {
	struct UTextBlock* TextWidget; // 0x2c0(0x08)
};

// Class Mist.MistTradeStationSuccessMessageItemWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UMistTradeStationSuccessMessageItemWidget : UMistTradeStationMessageItemWidget {
};

// Class Mist.MistTradeStationErrorMessageItemWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UMistTradeStationErrorMessageItemWidget : UMistTradeStationMessageItemWidget {
};

// Class Mist.MistTradeStationInfoMessageItemWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UMistTradeStationInfoMessageItemWidget : UMistTradeStationMessageItemWidget {
};

// Class Mist.MistTradeStationMessageWidget
// Size: 0x300 (Inherited: 0x2c0)
struct UMistTradeStationMessageWidget : UMistUIWidget {
	struct UPanelWidget* LatestMessageContainerWidget; // 0x2c0(0x08)
	float DisplayDuration; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)
	struct UMistTradeStationScreen* Screen; // 0x2d0(0x08)
	struct FTimerHandle HideMessageItemWidgetTimerHandler; // 0x2d8(0x08)
	char pad_2E0[0x20]; // 0x2e0(0x20)
};

// Class Mist.MistTradeStationOpenVaultButtonWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistTradeStationOpenVaultButtonWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UPanelWidget* CountContainerWidget; // 0x2c8(0x08)
	struct UTextBlock* CountTextWidget; // 0x2d0(0x08)
	struct UMistTradeStationScreen* Screen; // 0x2d8(0x08)
	struct FMistTradeStationVaultContent VaultContent; // 0x2e0(0x10)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	void HandleButtonClicked(); // Function Mist.MistTradeStationOpenVaultButtonWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x11bcbe0
};

// Class Mist.MistTradeStationOrderDetailsWidget
// Size: 0x478 (Inherited: 0x308)
struct UMistTradeStationOrderDetailsWidget : UMistUIDragDropWidget {
	struct FMistItem Item; // 0x308(0x18)
	int32_t Quantity; // 0x320(0x04)
	float Price; // 0x324(0x04)
	int32_t TotalPrice; // 0x328(0x04)
	int32_t MaxQuantity; // 0x32c(0x04)
	struct UTextBlock* HeaderTextWidget; // 0x330(0x08)
	struct UPanelWidget* NoItemPanelWidget; // 0x338(0x08)
	struct UPanelWidget* HasItemPanelWidget; // 0x340(0x08)
	struct UMistBasicItemIconWidget* ItemIconWidget; // 0x348(0x08)
	struct UTextBlock* ItemNameWidget; // 0x350(0x08)
	struct UTextBlock* ItemRarityNameWidget; // 0x358(0x08)
	struct UPanelWidget* ConditionPanelWidget; // 0x360(0x08)
	struct UMistNumberSliderWidget* DurabilitySliderWidget; // 0x368(0x08)
	struct UMistNumberInputWidget* QuantityInputWidget; // 0x370(0x08)
	struct UMistNumberSliderWidget* QuantitySliderWidget; // 0x378(0x08)
	struct UButton* QuantityAllButtonWidget; // 0x380(0x08)
	struct UMistNumberInputWidget* PriceInputWidget; // 0x388(0x08)
	struct UTextBlock* TotalPriceWidget; // 0x390(0x08)
	struct UTextBlock* NetPriceWidget; // 0x398(0x08)
	struct UButton* SaveButtonWidget; // 0x3a0(0x08)
	struct UButton* CancelButtonWidget; // 0x3a8(0x08)
	struct UButton* DeleteButtonWidget; // 0x3b0(0x08)
	struct USizeBox* TaxInfoPanel; // 0x3b8(0x08)
	struct UWidgetSwitcher* TaxWidgetSwitcher; // 0x3c0(0x08)
	struct UTextBlock* ListingTaxPercentWidget; // 0x3c8(0x08)
	struct UTextBlock* ListingTaxValueWidget; // 0x3d0(0x08)
	struct UTextBlock* FinalTaxPercentWidget; // 0x3d8(0x08)
	struct UTextBlock* FinalTaxValueWidget; // 0x3e0(0x08)
	struct FText NetPriceFormatText; // 0x3e8(0x18)
	char pad_400[0x60]; // 0x400(0x60)
	struct UMistTradeStationScreen* Screen; // 0x460(0x08)
	struct UMistTradeStationClientOrder* Order; // 0x468(0x08)
	char pad_470[0x8]; // 0x470(0x08)

	void ReceiveItemTemplate(); // Function Mist.MistTradeStationOrderDetailsWidget.ReceiveItemTemplate // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveDragEnter(); // Function Mist.MistTradeStationOrderDetailsWidget.ReceiveDragEnter // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleSaveButtonClicked(); // Function Mist.MistTradeStationOrderDetailsWidget.HandleSaveButtonClicked // (Final|Native|Private) // @ game+0x11bd520
	struct UWidget* HandleNavigationToButtons(enum class EUINavigation Nav); // Function Mist.MistTradeStationOrderDetailsWidget.HandleNavigationToButtons // (Final|Native|Public|BlueprintCallable) // @ game+0x11bd360
	void HandleDeleteButtonClicked(); // Function Mist.MistTradeStationOrderDetailsWidget.HandleDeleteButtonClicked // (Final|Native|Private) // @ game+0x11bcf60
	void HandleCancelButtonClicked(); // Function Mist.MistTradeStationOrderDetailsWidget.HandleCancelButtonClicked // (Final|Native|Private) // @ game+0x11bcc00
};

// Class Mist.MistTradeStationOrderGroup
// Size: 0x80 (Inherited: 0x28)
struct UMistTradeStationOrderGroup : UObject {
	struct UMistItemTemplate* ItemTemplate; // 0x28(0x08)
	float BestUnitPrice; // 0x30(0x04)
	int32_t AvailableQuantity; // 0x34(0x04)
	bool bIsBuyOrders; // 0x38(0x01)
	bool bHasPlayerOrders; // 0x39(0x01)
	char pad_3A[0x6]; // 0x3a(0x06)
	struct TArray<struct UMistTradeStationClientOrder*> Orders; // 0x40(0x10)
	char pad_50[0x30]; // 0x50(0x30)
};

// Class Mist.MistTradeStationPriceFilterWidget
// Size: 0x2e0 (Inherited: 0x2c0)
struct UMistTradeStationPriceFilterWidget : UMistUIWidget {
	struct UEditableTextBox* MinInputWidget; // 0x2c0(0x08)
	struct UEditableTextBox* MaxInputWidget; // 0x2c8(0x08)
	int32_t Min; // 0x2d0(0x04)
	int32_t Max; // 0x2d4(0x04)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x2d8(0x08)

	void HandleMinInputChanged(struct FText& InText); // Function Mist.MistTradeStationPriceFilterWidget.HandleMinInputChanged // (Final|Native|Private|HasOutParms) // @ game+0x11bd1d0
	void HandleMaxInputChanged(struct FText& InText); // Function Mist.MistTradeStationPriceFilterWidget.HandleMaxInputChanged // (Final|Native|Private|HasOutParms) // @ game+0x11bd100
};

// Class Mist.MistTradeStationQuestsWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistTradeStationQuestsWidget : UMistUIWidget {
	struct UMistQuestsSelectionWidget* BrowseWidget; // 0x2c0(0x08)
	struct UVerticalBox* CurrentQuestBoxWidget; // 0x2c8(0x08)
	struct UMistQuestsSelectionItemWidget* CurrentQuestWidget; // 0x2d0(0x08)
	struct UTextBlock* AvailableQuestsTimerWidget; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct UMistPlayerFlotillaQuestsComponent* PlayerQuestsComponent; // 0x2e8(0x08)
};

// Class Mist.MistTradeStationQuickSellItemWidget
// Size: 0x370 (Inherited: 0x308)
struct UMistTradeStationQuickSellItemWidget : UMistUIDragDropWidget {
	char pad_308[0x8]; // 0x308(0x08)
	struct UMistBasicItemIconWidget* ItemIconWidget; // 0x310(0x08)
	struct UHorizontalBox* ValueBox; // 0x318(0x08)
	struct UTextBlock* ValueWidget; // 0x320(0x08)
	struct UTextBlock* ItemName; // 0x328(0x08)
	struct UMistBaseButtonWidget* RemoveButton; // 0x330(0x08)
	struct UImage* EmptyEntryImage; // 0x338(0x08)
	char pad_340[0x18]; // 0x340(0x18)
	float RemoveAnimationLength; // 0x358(0x04)
	char pad_35C[0xc]; // 0x35c(0x0c)
	struct UMistTradeStationQuickSellEntry* Data; // 0x368(0x08)

	void RemoveAfterAnimation(); // Function Mist.MistTradeStationQuickSellItemWidget.RemoveAfterAnimation // (Final|Native|Public) // @ game+0x11bd7a0
	void PlayRemoveAnimation(); // Function Mist.MistTradeStationQuickSellItemWidget.PlayRemoveAnimation // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleRemoveClicked(); // Function Mist.MistTradeStationQuickSellItemWidget.HandleRemoveClicked // (Final|Native|Private) // @ game+0x11bd450
};

// Class Mist.MistTradeStationQuickSellWidget
// Size: 0x370 (Inherited: 0x308)
struct UMistTradeStationQuickSellWidget : UMistUIDragDropWidget {
	struct UListView* ListWidget; // 0x308(0x08)
	struct UButton* SellButton; // 0x310(0x08)
	struct UButton* ClearButton; // 0x318(0x08)
	struct UTextBlock* TotalValueWidget; // 0x320(0x08)
	struct UScrollBox* ScrollBoxWidget; // 0x328(0x08)
	float ClearAnimationLength; // 0x330(0x04)
	char pad_334[0xc]; // 0x334(0x0c)
	struct UMistTradeStationScreen* Screen; // 0x340(0x08)
	struct UMistPlayerTradeStationComponent* BoundTradeStationComponent; // 0x348(0x08)
	struct UMistInventoryComponent* Inventory; // 0x350(0x08)
	struct TArray<struct UMistTradeStationQuickSellEntry*> Entries; // 0x358(0x10)
	char pad_368[0x8]; // 0x368(0x08)

	void ReceiveNewEntry(); // Function Mist.MistTradeStationQuickSellWidget.ReceiveNewEntry // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveDragEnter(); // Function Mist.MistTradeStationQuickSellWidget.ReceiveDragEnter // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void PlayClearAnimation(); // Function Mist.MistTradeStationQuickSellWidget.PlayClearAnimation // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleSellClicked(); // Function Mist.MistTradeStationQuickSellWidget.HandleSellClicked // (Final|Native|Private) // @ game+0x11bd540
	void HandleContainerUpdate(struct UMistContainerComponent* UpdatedContainer); // Function Mist.MistTradeStationQuickSellWidget.HandleContainerUpdate // (Final|Native|Private) // @ game+0x11bcee0
	void HandleContainerSlotUpdate(struct UMistContainerComponent* UpdatedContainer, int32_t SlotIndex, struct UMistItemTemplate* PrevItemTemplate); // Function Mist.MistTradeStationQuickSellWidget.HandleContainerSlotUpdate // (Final|Native|Private) // @ game+0x11bcde0
	void HandleCancelClicked(); // Function Mist.MistTradeStationQuickSellWidget.HandleCancelClicked // (Final|Native|Private) // @ game+0x11bcc20
	struct UMistTradeStationQuickSellItemWidget* GetWidgetOfItemIfVisible(int32_t ItemIndex); // Function Mist.MistTradeStationQuickSellWidget.GetWidgetOfItemIfVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x11bcac0
	void ClearEntries(); // Function Mist.MistTradeStationQuickSellWidget.ClearEntries // (Final|Native|Public) // @ game+0x11bcaa0
};

// Class Mist.MistTradeStationRarityFilterItemWidget
// Size: 0x348 (Inherited: 0x2c0)
struct UMistTradeStationRarityFilterItemWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UTextBlock* NameWidget; // 0x2c8(0x08)
	struct UBorder* BorderWidget; // 0x2d0(0x08)
	struct UBorder* HighlightWidget; // 0x2d8(0x08)
	struct UCheckBox* CheckBoxWidget; // 0x2e0(0x08)
	struct UMistItemRarity* Rarity; // 0x2e8(0x08)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x2f0(0x08)
	char pad_2F8[0x50]; // 0x2f8(0x50)

	void HandleUnhovered(); // Function Mist.MistTradeStationRarityFilterItemWidget.HandleUnhovered // (Final|Native|Private) // @ game+0x11bd6c0
	void HandleHovered(); // Function Mist.MistTradeStationRarityFilterItemWidget.HandleHovered // (Final|Native|Private) // @ game+0x11bd010
	void HandleClicked(); // Function Mist.MistTradeStationRarityFilterItemWidget.HandleClicked // (Final|Native|Private) // @ game+0x11bcda0
	void HandleCheckedChanged(bool bInIsChecked); // Function Mist.MistTradeStationRarityFilterItemWidget.HandleCheckedChanged // (Final|Native|Private) // @ game+0x11bccf0
};

// Class Mist.MistTradeStationRarityFilterWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistTradeStationRarityFilterWidget : UMistUIWidget {
	struct UVerticalBox* ItemListWidget; // 0x2c0(0x08)
	struct UMistTradeStationSellBuyWidget* ParentWidget; // 0x2c8(0x08)
};

// Class Mist.MistTradeStationScreen
// Size: 0x5b0 (Inherited: 0x3a0)
struct UMistTradeStationScreen : UMistUIScreen {
	struct UMistUITabControl* TabControl; // 0x3a0(0x08)
	struct UMistTradeStationQuickSellWidget* QuickSellWidget; // 0x3a8(0x08)
	struct UMistTradeStationSellBuyWidget* SellWidget; // 0x3b0(0x08)
	struct UMistTradeStationSellBuyWidget* BuyWidget; // 0x3b8(0x08)
	struct UMistTradeStationAuctionWidget* AuctionWidget; // 0x3c0(0x08)
	struct UMistTradeStationQuestsWidget* QuestsWidget; // 0x3c8(0x08)
	struct UMistTradeStationHistoryWidget* TransactionLogWidget; // 0x3d0(0x08)
	struct UMistTradeStationCreateWidget* CreateSellWidget; // 0x3d8(0x08)
	struct UMistTradeStationCreateWidget* CreateBuyWidget; // 0x3e0(0x08)
	struct UMistTradeStationCreateWidget* CreateExchangeWidget; // 0x3e8(0x08)
	struct UMistExchangeFlotsWidget* ExchangeFlotsWidget; // 0x3f0(0x08)
	struct UMistTradeStationOpenVaultButtonWidget* OpenVaultButtonWidget; // 0x3f8(0x08)
	struct UMistInventoryWidget* PlayerInventoryWidget; // 0x400(0x08)
	struct UMistTradeStationVaultContentWidget* VaultContentWidget; // 0x408(0x08)
	struct UMistTradeStationOrderDetailsWidget* OrderDetailsWidget; // 0x410(0x08)
	struct UMistItemNameSearchWidget* SelectItemForCreateWidget; // 0x418(0x08)
	struct UMistTradeStationMessageWidget* MessageWidget; // 0x420(0x08)
	struct UTextBlock* TaxRateWidget; // 0x428(0x08)
	struct UBorder* OwnershipColorWidget; // 0x430(0x08)
	struct UTextBlock* OwnershipNameWidget; // 0x438(0x08)
	struct UMistCanvasPanel* OwnershipPanelWidget; // 0x440(0x08)
	struct UMistCanvasPanel* TaxRatePanel; // 0x448(0x08)
	struct FText HasOwnershipFormatText; // 0x450(0x18)
	struct FText NoOwnershipFormatText; // 0x468(0x18)
	char pad_480[0x90]; // 0x480(0x90)
	struct TArray<struct UMistTradeStationOrderGroup*> FilteredOrders; // 0x510(0x10)
	char pad_520[0x50]; // 0x520(0x50)
	struct UMistPlayerTradeStationComponent* BoundTradeStationComponent; // 0x570(0x08)
	struct UMistClanOwnershipComponent* BoundTradeStationOwnershipComponent; // 0x578(0x08)
	struct UMistInventoryComponent* BoundInventoryComponent; // 0x580(0x08)
	struct TArray<struct UMistItemCategory*> ExcludeCategoriesFilter; // 0x588(0x10)
	struct TArray<struct UMistItemRarity*> ExcludeRaritiesFilter; // 0x598(0x10)
	char pad_5A8[0x8]; // 0x5a8(0x08)

	void HandleVaultMoneyUpdated(struct AMistOasisPlayerState* InSender, uint64_t InVaultMoney); // Function Mist.MistTradeStationScreen.HandleVaultMoneyUpdated // (Final|Native|Private) // @ game+0x11bd6e0
	struct UWidget* HandleRightPouchSlotNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationScreen.HandleRightPouchSlotNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11bd490
	void HandleMoneyUpdated(struct AMistOasisPlayerState* InSender, uint64_t InMoney); // Function Mist.MistTradeStationScreen.HandleMoneyUpdated // (Final|Native|Private) // @ game+0x11bd2a0
	struct UWidget* HandleLeftPouchSlotNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationScreen.HandleLeftPouchSlotNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11bd070
	void HandleInventoryUpdated(); // Function Mist.MistTradeStationScreen.HandleInventoryUpdated // (Final|Native|Private) // @ game+0x11bd030
	void HandleInventoryClosed(); // Function Mist.MistTradeStationScreen.HandleInventoryClosed // (Final|Native|Private) // @ game+0x109caa0
	struct UWidget* HandleExchangeNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationScreen.HandleExchangeNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11bcf80
	struct UWidget* HandleCharacterContainerNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationScreen.HandleCharacterContainerNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11bcc60
	struct UWidget* HandleBeltSlotNavigation(enum class EUINavigation Nav); // Function Mist.MistTradeStationScreen.HandleBeltSlotNavigation // (Final|Native|Public|BlueprintCallable) // @ game+0x11bcb50
};

// Class Mist.MistTradeStationSellBuyWidget
// Size: 0x550 (Inherited: 0x2c0)
struct UMistTradeStationSellBuyWidget : UMistUIWidget {
	struct UButton* CategoryFilterButtonWidget; // 0x2c0(0x08)
	struct UButton* RarityFilterButtonWidget; // 0x2c8(0x08)
	struct UButton* PriceFilterButtonWidget; // 0x2d0(0x08)
	struct UButton* ConditionFilterButtonWidget; // 0x2d8(0x08)
	struct UMistTradeStationMerchantFilterWidget* MerchantFilterWidget; // 0x2e0(0x08)
	struct UButton* ResetFilterButtonWidget; // 0x2e8(0x08)
	struct UMistItemNameSearchWidget* ItemFilterWidget; // 0x2f0(0x08)
	struct UButton* RefreshButtonWidget; // 0x2f8(0x08)
	struct UMistTradeStationBrowseWidget* BrowseWidget; // 0x300(0x08)
	struct UMistTradeStationCategoryFilterWidget* CategoryFilterWidget; // 0x308(0x08)
	struct UMistTradeStationRarityFilterWidget* RarityFilterWidget; // 0x310(0x08)
	struct UMistTradeStationPriceFilterWidget* PriceFilterWidget; // 0x318(0x08)
	struct UMistTradeStationConditionFilterWidget* ConditionFilterWidget; // 0x320(0x08)
	float ApplyFilterDelay; // 0x328(0x04)
	char pad_32C[0xc4]; // 0x32c(0xc4)
	struct UMistTradeStationScreen* ParentScreen; // 0x3f0(0x08)
	struct TArray<struct UMistTradeStationOrderGroup*> FilteredOrders; // 0x3f8(0x10)
	struct UMistPlayerTradeStationComponent* BoundTradeStationComponent; // 0x408(0x08)
	struct TMap<struct UMistItemCategoryGroup*, enum class EMistTradeStationCategoryGroupFilterState> CategoryGroupFilters; // 0x410(0x50)
	struct TMap<struct UMistItemCategory*, bool> CategoryFilters; // 0x460(0x50)
	struct TMap<struct UMistItemRarity*, bool> RarityFilters; // 0x4b0(0x50)
	char pad_500[0x10]; // 0x500(0x10)
	struct UMistItemCategoryTree* CategoryTree; // 0x510(0x08)
	struct FTimerHandle ApplyFilterDelayedTimerHandle; // 0x518(0x08)
	char pad_520[0x8]; // 0x520(0x08)
	struct TArray<struct UMistItemCategory*> ExcludeCategoriesFilter; // 0x528(0x10)
	struct TArray<struct UMistItemRarity*> ExcludeRaritiesFilter; // 0x538(0x10)
	char pad_548[0x8]; // 0x548(0x08)

	void HandleTradeStationOrdersLoading(); // Function Mist.MistTradeStationSellBuyWidget.HandleTradeStationOrdersLoading // (Final|Native|Public) // @ game+0x11bd6a0
	void HandleTradeStationOrdersLoadedError(); // Function Mist.MistTradeStationSellBuyWidget.HandleTradeStationOrdersLoadedError // (Final|Native|Public) // @ game+0x11bd680
	void HandleTradeStationOrdersLoaded(); // Function Mist.MistTradeStationSellBuyWidget.HandleTradeStationOrdersLoaded // (Final|Native|Public) // @ game+0x11bd660
	void HandleTradeStationOrderDeleted(struct UMistTradeStationClientOrder* Order); // Function Mist.MistTradeStationSellBuyWidget.HandleTradeStationOrderDeleted // (Final|Native|Public) // @ game+0x11bd5e0
	void HandleTradeStationOrderAdded(struct UMistTradeStationClientOrder* Order); // Function Mist.MistTradeStationSellBuyWidget.HandleTradeStationOrderAdded // (Final|Native|Public) // @ game+0x11bd560
	void HandleResetFilterButtonClicked(); // Function Mist.MistTradeStationSellBuyWidget.HandleResetFilterButtonClicked // (Final|Native|Private) // @ game+0x11bd470
	void HandleRefreshButtonClicked(); // Function Mist.MistTradeStationSellBuyWidget.HandleRefreshButtonClicked // (Final|Native|Private) // @ game+0x11bd430
	void HandleRarityFilterButtonClicked(); // Function Mist.MistTradeStationSellBuyWidget.HandleRarityFilterButtonClicked // (Final|Native|Private) // @ game+0x11bd410
	void HandlePriceFilterButtonClicked(); // Function Mist.MistTradeStationSellBuyWidget.HandlePriceFilterButtonClicked // (Final|Native|Private) // @ game+0x11bd3f0
	void HandleItemFilterChanged(); // Function Mist.MistTradeStationSellBuyWidget.HandleItemFilterChanged // (Final|Native|Private) // @ game+0x11bd050
	void HandleConditionFilterButtonClicked(); // Function Mist.MistTradeStationSellBuyWidget.HandleConditionFilterButtonClicked // (Final|Native|Private) // @ game+0x11bcdc0
	void HandleCategoryFilterButtonClicked(); // Function Mist.MistTradeStationSellBuyWidget.HandleCategoryFilterButtonClicked // (Final|Native|Private) // @ game+0x11bcc40
};

// Class Mist.MistTradeStationSettings
// Size: 0x60 (Inherited: 0x38)
struct UMistTradeStationSettings : UMistSettingsObject {
	float FlotillaTaxRate; // 0x38(0x04)
	float SellOrdersUpfrontTax; // 0x3c(0x04)
	float ClaimTaxRate; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FTimespan AiTradeCycleDuration; // 0x48(0x08)
	float AuctionProlongationOnNewBidSeconds; // 0x50(0x04)
	float TimeBetweenAuctionsMultiplier; // 0x54(0x04)
	float AuctionStartingPriceMultiplier; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class Mist.MistTradeStationTypeFilterWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistTradeStationTypeFilterWidget : UMistUIWidget {
	struct UMistLabelButtonWidget* BuyButtonWidget; // 0x2c0(0x08)
	struct UMistLabelButtonWidget* SellButtonWidget; // 0x2c8(0x08)
	struct FMistLabelButtonStyle SelectedStyle; // 0x2d0(0x08)
	struct FMistLabelButtonStyle NotSelectedStyle; // 0x2d8(0x08)
	struct UMistTradeStationScreen* Screen; // 0x2e0(0x08)
};

// Class Mist.MistTradeStationVaultContentWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistTradeStationVaultContentWidget : UMistUIWidget {
	struct UButton* TakeMoneyButtonWidget; // 0x2c0(0x08)
	struct UButton* TakeAllButtonWidget; // 0x2c8(0x08)
	struct UPanelWidget* ItemsWidget; // 0x2d0(0x08)
	struct UTextBlock* MoneyWidget; // 0x2d8(0x08)
	struct UPanelWidget* TaxPanelWidget; // 0x2e0(0x08)
	struct UButton* TakeTaxButtonWidget; // 0x2e8(0x08)
	struct UTextBlock* TaxWidget; // 0x2f0(0x08)
	struct UMistTradeStationScreen* Screen; // 0x2f8(0x08)
	struct FMistTradeStationVaultContent VaultContent; // 0x300(0x10)
	char pad_310[0x8]; // 0x310(0x08)

	void HandleTakeTaxButtonClicked(); // Function Mist.MistTradeStationVaultContentWidget.HandleTakeTaxButtonClicked // (Final|Native|Private) // @ game+0x11c0ed0
	void HandleTakeMoneyButtonClicked(); // Function Mist.MistTradeStationVaultContentWidget.HandleTakeMoneyButtonClicked // (Final|Native|Private) // @ game+0x11c0eb0
	void HandleTakeAllButtonClicked(); // Function Mist.MistTradeStationVaultContentWidget.HandleTakeAllButtonClicked // (Final|Native|Private) // @ game+0x11c0e90
};

// Class Mist.MistTradeStationVaultItemWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistTradeStationVaultItemWidget : UMistUIWidget {
	struct UMistBasicItemIconWidget* IconWidget; // 0x2c0(0x08)
	struct UMistTradeStationScreen* Screen; // 0x2c8(0x08)
	struct FMistTradeStationVaultItem Data; // 0x2d0(0x20)
};

// Class Mist.MistTradeTransactionLogItemWidget
// Size: 0x300 (Inherited: 0x2c0)
struct UMistTradeTransactionLogItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UTextBlock* TimeWidget; // 0x2c8(0x08)
	struct UTextBlock* PlayerNameWidget; // 0x2d0(0x08)
	struct UTextBlock* ActionWidget; // 0x2d8(0x08)
	struct UTextBlock* ItemAmountWidget; // 0x2e0(0x08)
	struct UImage* ItemIconWidget; // 0x2e8(0x08)
	struct UTextBlock* ItemNameWidget; // 0x2f0(0x08)
	struct UTextBlock* FlotsWidget; // 0x2f8(0x08)
};

// Class Mist.MistTradeTransactionLogWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistTradeTransactionLogWidget : UMistUIWidget {
	struct UListView* ListWidget; // 0x2c0(0x08)
	struct UMistTradeStationQuestsWidget* ParentWidget; // 0x2c8(0x08)
};

// Class Mist.MistTradingQuest
// Size: 0x128 (Inherited: 0x110)
struct UMistTradingQuest : UMistTutorialQuest {
	struct FName SellTaskName; // 0x110(0x08)
	struct FName BuyTaskName; // 0x118(0x08)
	struct FName MoneyTaskName; // 0x120(0x08)

	void OrderAdded(struct UMistTradeStationClientOrder* Order); // Function Mist.MistTradingQuest.OrderAdded // (Final|Native|Private) // @ game+0x1141b60
	void MoneyUpdate(struct AMistOasisPlayerState* OasisPlayerState, uint64_t Money); // Function Mist.MistTradingQuest.MoneyUpdate // (Final|Native|Private) // @ game+0x115e370
};

// Class Mist.MistTransportationQuest
// Size: 0x148 (Inherited: 0x110)
struct UMistTransportationQuest : UMistTutorialQuest {
	struct AMistWalker* WalkerToBuild; // 0x110(0x08)
	struct FName WalkerToBuildTaskName; // 0x118(0x08)
	struct FName WalkerToMannTaskName; // 0x120(0x08)
	struct TArray<struct AMistWalkerLeg*> WalkerLegToBuild; // 0x128(0x10)
	struct FName WalkerLegToBuildTaskName; // 0x138(0x08)
	struct FName ChooseSpawnpointTaskName; // 0x140(0x08)

	void MannWalker(struct AMistCharacter* Character, struct UMistMannedControlComponent* MannedComponent); // Function Mist.MistTransportationQuest.MannWalker // (Final|Native|Private) // @ game+0x11c0fe0
	void Finished(struct UMistConstructionSiteComponent* Component, struct AActor* ConstructionActor); // Function Mist.MistTransportationQuest.Finished // (Final|Native|Private) // @ game+0x11c05d0
};

// Class Mist.MistTrapDamageComponent
// Size: 0x208 (Inherited: 0x1f0)
struct UMistTrapDamageComponent : UMistInteractableComponent {
	struct UDamageType* DamageTypeClass; // 0x1f0(0x08)
	float Damage; // 0x1f8(0x04)
	char pad_1FC[0x4]; // 0x1fc(0x04)
	struct UActorComponent* ConnectedTrapComponent; // 0x200(0x08)

	void HandleTrapTriggered(struct AActor* InActor, struct AMistCharacter* InInstigator); // Function Mist.MistTrapDamageComponent.HandleTrapTriggered // (Final|Native|Private) // @ game+0x11c0ef0
};

// Class Mist.MistTrapInfoPopupWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistTrapInfoPopupWidget : UMistUIWidget {
	struct FText PlaceableName; // 0x2c0(0x18)
	struct UTexture2D* PlaceableIcon; // 0x2d8(0x08)
	struct UMistPlaceableTemplate* PlaceableTemplate; // 0x2e0(0x08)
};

// Class Mist.MistTrapTrigger
// Size: 0x28 (Inherited: 0x28)
struct UMistTrapTrigger : UInterface {
};

// Class Mist.MistTravelZonesMapComponent
// Size: 0x108 (Inherited: 0xf0)
struct UMistTravelZonesMapComponent : UActorComponent {
	struct AMistWorldTravelZonesManager* TravelZonesManager; // 0xf0(0x08)
	struct UCanvasRenderTarget2D* OutMap; // 0xf8(0x08)
	char pad_100[0x8]; // 0x100(0x08)

	void HandleCanvasRenderTargetUpdate(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function Mist.MistTravelZonesMapComponent.HandleCanvasRenderTargetUpdate // (Final|Native|Private) // @ game+0x11c09f0
};

// Class Mist.MistTriggerListenerComponent
// Size: 0x1e0 (Inherited: 0xf0)
struct UMistTriggerListenerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnBeginTrigger; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnEndTrigger; // 0x100(0x10)
	struct FMistComponentReference TriggerComponentRef; // 0x110(0x28)
	bool bUseAttachmentRootActor; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)
	struct TSet<struct AActor*> FilterClasses; // 0x140(0x50)
	struct TMap<struct AActor*, int32_t> ActorContacts; // 0x190(0x50)

	void TriggerEvent__DelegateSignature(struct AActor* Actor); // DelegateFunction Mist.MistTriggerListenerComponent.TriggerEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void HandleComponentEndTrigger(struct UPrimitiveComponent* SelfComponent, struct AActor* OtherActor); // Function Mist.MistTriggerListenerComponent.HandleComponentEndTrigger // (Final|Native|Private) // @ game+0x11c0770
	void HandleComponentBeginTrigger(struct UPrimitiveComponent* SelfComponent, struct AActor* OtherActor); // Function Mist.MistTriggerListenerComponent.HandleComponentBeginTrigger // (Final|Native|Private) // @ game+0x11c06b0
	void HandleAttachmentChanged(struct USceneComponent* UpdatedComponent, struct USceneComponent* PrevAttachParent, struct USceneComponent* NewAttachParent); // Function Mist.MistTriggerListenerComponent.HandleAttachmentChanged // (Final|Native|Private) // @ game+0x11c0830
	void HandleActorEndTrigger(struct AActor* SelfActor, struct AActor* OtherActor); // Function Mist.MistTriggerListenerComponent.HandleActorEndTrigger // (Final|Native|Private) // @ game+0x11c0770
	void HandleActorBeginTrigger(struct AActor* SelfActor, struct AActor* OtherActor); // Function Mist.MistTriggerListenerComponent.HandleActorBeginTrigger // (Final|Native|Private) // @ game+0x11c06b0
};

// Class Mist.MistTripwireComponent
// Size: 0x308 (Inherited: 0x258)
struct UMistTripwireComponent : UMistRearmableTrapTriggerComponent {
	struct FMistComponentReference WireComponentRef; // 0x258(0x28)
	struct FMistComponentReference TriggerComponentRef; // 0x280(0x28)
	struct TSet<struct AActor*> CanBeTriggeredByClasses; // 0x2a8(0x50)
	struct UPrimitiveComponent* CachedWireComponent; // 0x2f8(0x08)
	struct UPrimitiveComponent* CachedTriggerComponent; // 0x300(0x08)

	void HandleBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistTripwireComponent.HandleBeginTrigger // (Final|Native|Private) // @ game+0x11c0930
};

// Class Mist.MistTurretStructure
// Size: 0x5e8 (Inherited: 0x5b8)
struct AMistTurretStructure : AMistStructurePart {
	char pad_5B8[0x18]; // 0x5b8(0x18)
	struct UMistTurretComponent* TurretComponent; // 0x5d0(0x08)
	float ActivationTimeDelay; // 0x5d8(0x04)
	float ActivationTime; // 0x5dc(0x04)
	struct FTimerHandle ActivationTimerHandle; // 0x5e0(0x08)

	void OnRep_ActivationTime(); // Function Mist.MistTurretStructure.OnRep_ActivationTime // (Final|Native|Private) // @ game+0x11c1170
	void HandleActivationTimerUpdate(); // Function Mist.MistTurretStructure.HandleActivationTimerUpdate // (Final|Native|Private) // @ game+0x11c0690
};

// Class Mist.MistTurretWalkerComponent
// Size: 0x260 (Inherited: 0xf0)
struct UMistTurretWalkerComponent : UActorComponent {
	char pad_F0[0x20]; // 0xf0(0x20)
	enum class ETurretWalkerState TurretWalkerState; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)
	struct FMulticastInlineDelegate OnTurretWalkerStateChanged; // 0x118(0x10)
	float TurretModeTransitionTime; // 0x128(0x04)
	float DriveModeTransitionTime; // 0x12c(0x04)
	float TurretModeTransitionEaseIn; // 0x130(0x04)
	float DriveModeTransitionEaseIn; // 0x134(0x04)
	float PitchRotationTowerDown; // 0x138(0x04)
	float PitchRotationTowerUp; // 0x13c(0x04)
	float FixedRollRotation; // 0x140(0x04)
	float FixedYawRotation; // 0x144(0x04)
	struct FText InteractionTextDeploy; // 0x148(0x18)
	struct FText InteractionTextUndeploy; // 0x160(0x18)
	struct FText InteractionTextUnevenGround; // 0x178(0x18)
	struct FMistComponentReference ModeSwitchInteractable; // 0x190(0x28)
	struct FMistComponentReference DriveInteractable; // 0x1b8(0x28)
	struct FMistComponentReference MannedWalkerControl; // 0x1e0(0x28)
	struct FMistComponentReference TurretComponent; // 0x208(0x28)
	struct FMistComponentReference TowerComponent; // 0x230(0x28)
	float InterProgress; // 0x258(0x04)
	char pad_25C[0x4]; // 0x25c(0x04)

	void TurretWalkerStateChanged__DelegateSignature(enum class ETurretWalkerState NewState); // DelegateFunction Mist.MistTurretWalkerComponent.TurretWalkerStateChanged__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void OnRep_TurretWalkerState(); // Function Mist.MistTurretWalkerComponent.OnRep_TurretWalkerState // (Final|Native|Protected) // @ game+0x11c11b0
	void MulticastTurretWalkerStateChanged(enum class ETurretWalkerState NewState); // Function Mist.MistTurretWalkerComponent.MulticastTurretWalkerStateChanged // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x10d17f0
	void HandleModeSwitchQuery(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction, bool& bInOutCanInteract, struct FMistInteractableProperties& Properties, struct FMistInteractionQuery& Query); // Function Mist.MistTurretWalkerComponent.HandleModeSwitchQuery // (Final|Native|Protected|HasOutParms) // @ game+0x11c0bd0
	void HandleModeSwitchInteract(struct UMistInteractableComponent* Sender, struct FMistInteraction& Interaction); // Function Mist.MistTurretWalkerComponent.HandleModeSwitchInteract // (Final|Native|Protected|HasOutParms) // @ game+0x11c0af0
};

// Class Mist.MistTutorialComponent
// Size: 0x258 (Inherited: 0x128)
struct UMistTutorialComponent : UMistPlayerStateQuestsComponent {
	char pad_128[0xc8]; // 0x128(0xc8)
	float TutorialInitialDelay; // 0x1f0(0x04)
	char pad_1F4[0x4]; // 0x1f4(0x04)
	struct TSoftObjectPtr<UDataTable> TutorialTable; // 0x1f8(0x28)
	struct UMistTutorialQuest* CurrentTutorialQuest; // 0x220(0x08)
	bool bIsTutorialOver; // 0x228(0x01)
	char pad_229[0x2f]; // 0x229(0x2f)

	void ServerSetVoicePlaying(bool bInVoicePlaying); // Function Mist.MistTutorialComponent.ServerSetVoicePlaying // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11c58d0
	void ServerSetSubtaskProgress(struct FName SubtaskName, int32_t Count, struct FName QuestName); // Function Mist.MistTutorialComponent.ServerSetSubtaskProgress // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11c57d0
	void ServerSendInitialReplication(); // Function Mist.MistTutorialComponent.ServerSendInitialReplication // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108c30
	void ServerFinishSubtaskProgress(struct FName SubtaskName, struct FName QuestName); // Function Mist.MistTutorialComponent.ServerFinishSubtaskProgress // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11c5700
	void ServerAddSubtaskProgress(struct FName SubtaskName, int32_t Count, struct FName QuestName); // Function Mist.MistTutorialComponent.ServerAddSubtaskProgress // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x11c5600
	void SendInitialReplication(); // Function Mist.MistTutorialComponent.SendInitialReplication // (Final|Native|Private) // @ game+0x11c55e0
	void PlaySoundCue(); // Function Mist.MistTutorialComponent.PlaySoundCue // (Final|Native|Public) // @ game+0x11c55c0
	void HandleSoundFinished(struct UAudioComponent* AudioComponent); // Function Mist.MistTutorialComponent.HandleSoundFinished // (Final|Native|Private) // @ game+0x11c51d0
	void ClientSetTutorialIsOver(bool bIsOver); // Function Mist.MistTutorialComponent.ClientSetTutorialIsOver // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11c47f0
	void ClientSetSubtaskProgress(struct FName SubtaskName, int32_t Count, struct FName QuestName); // Function Mist.MistTutorialComponent.ClientSetSubtaskProgress // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11c46f0
	void ClientSetCurrentQuest(struct UMistTutorialQuest* QuestClass, struct FName EntryName); // Function Mist.MistTutorialComponent.ClientSetCurrentQuest // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11c4620
};

// Class Mist.MistTutorialEntryWidget
// Size: 0x308 (Inherited: 0x2e0)
struct UMistTutorialEntryWidget : UMistBaseQuestEntryWidget {
	struct UTextBlock* OptionalTextWidget; // 0x2e0(0x08)
	struct UTextBlock* TitleTextWidget; // 0x2e8(0x08)
	char pad_2F0[0x10]; // 0x2f0(0x10)
	struct UMistInputBindingHintWidget* BindingHintWidget; // 0x300(0x08)
};

// Class Mist.MistTutorialQuestWidget
// Size: 0x338 (Inherited: 0x2c0)
struct UMistTutorialQuestWidget : UMistUIWidget {
	struct UTextBlock* TitleText; // 0x2c0(0x08)
	struct UTextBlock* QuestProgressText; // 0x2c8(0x08)
	struct UProgressBar* QuestProgress; // 0x2d0(0x08)
	struct UVerticalBox* TasksListWidget; // 0x2d8(0x08)
	struct UTextBlock* ExperianceAward; // 0x2e0(0x08)
	struct UVerticalBox* Description; // 0x2e8(0x08)
	struct UHorizontalBox* FlotsRewardWidget; // 0x2f0(0x08)
	struct UTextBlock* FlotsRewardValueWidget; // 0x2f8(0x08)
	struct UHorizontalBox* IcRewardWidget; // 0x300(0x08)
	struct UTextBlock* IcRewardValueWidget; // 0x308(0x08)
	struct UMistInputBindingHintWidget* ModifierHint; // 0x310(0x08)
	struct UTextBlock* ModifierText; // 0x318(0x08)
	struct UMistPlayerStateQuestsComponent* PlayerQuestsComponent; // 0x320(0x08)
	struct UMistQuest* Quest; // 0x328(0x08)
	struct UTextBlock* LoreText; // 0x330(0x08)

	void OnShowFull(); // Function Mist.MistTutorialQuestWidget.OnShowFull // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnShow(); // Function Mist.MistTutorialQuestWidget.OnShow // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnQuestFinished(); // Function Mist.MistTutorialQuestWidget.OnQuestFinished // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnHide(); // Function Mist.MistTutorialQuestWidget.OnHide // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleTutorialUpdate(); // Function Mist.MistTutorialQuestWidget.HandleTutorialUpdate // (Final|Native|Private) // @ game+0x11c5350
	void HandleSubtaskProgressChange(struct UMistPlayerStateQuestsComponent* Sender, struct UMistQuest* InQuest, int32_t InSubtaskIndex); // Function Mist.MistTutorialQuestWidget.HandleSubtaskProgressChange // (Final|Native|Private) // @ game+0x11c5250
};

// Class Mist.MistTutorialWindowWidget
// Size: 0x320 (Inherited: 0x2e0)
struct UMistTutorialWindowWidget : UMistHUDWidget {
	struct UVerticalBox* QuestsListWidget; // 0x2e0(0x08)
	struct UMistInputBindingHintWidget* ModifierHint; // 0x2e8(0x08)
	struct UTextBlock* ModifierText; // 0x2f0(0x08)
	float UpdateDelay; // 0x2f8(0x04)
	int32_t EntriesActive; // 0x2fc(0x04)
	struct UMistTutorialComponent* TutorialComponent; // 0x300(0x08)
	struct UMistPlayerFlotillaQuestsComponent* FlotillaQuestsComponent; // 0x308(0x08)
	char pad_310[0x10]; // 0x310(0x10)

	void OnTutorialUpdate(int32_t TutorialNumber); // Function Mist.MistTutorialWindowWidget.OnTutorialUpdate // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnShowFull(); // Function Mist.MistTutorialWindowWidget.OnShowFull // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnShow(); // Function Mist.MistTutorialWindowWidget.OnShow // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnHide(); // Function Mist.MistTutorialWindowWidget.OnHide // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleTutorialFinished(struct UMistTutorialComponent* Sender); // Function Mist.MistTutorialWindowWidget.HandleTutorialFinished // (Final|Native|Private) // @ game+0x108b100
	void HandleScreenOpened(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistTutorialWindowWidget.HandleScreenOpened // (Final|Native|Private) // @ game+0x11c5110
	void HandleScreenClosed(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistTutorialWindowWidget.HandleScreenClosed // (Final|Native|Private) // @ game+0x11c5050
	void HandleQuestTextStarted(struct UMistTutorialComponent* Sender, struct UMistTutorialQuest* Quest); // Function Mist.MistTutorialWindowWidget.HandleQuestTextStarted // (Final|Native|Private) // @ game+0x11c4f90
	void HandleQuestStarted(struct UMistTutorialComponent* Sender, struct UMistTutorialQuest* Quest); // Function Mist.MistTutorialWindowWidget.HandleQuestStarted // (Final|Native|Private) // @ game+0x11c4ed0
	void HandleQuestFinished(struct UMistTutorialComponent* Sender, struct UMistTutorialQuest* Quest); // Function Mist.MistTutorialWindowWidget.HandleQuestFinished // (Final|Native|Private) // @ game+0x11c4e10
	void HandleDelayedUpdate(); // Function Mist.MistTutorialWindowWidget.HandleDelayedUpdate // (Final|Native|Private) // @ game+0x11c4ad0
};

// Class Mist.MistUIButtonWithKeyMappingWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistUIButtonWithKeyMappingWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UTextBlock* ButtonLabelWidget; // 0x2c8(0x08)
	struct UTextBlock* KeyMappingLabelWidget; // 0x2d0(0x08)
	struct FText ButtonLabel; // 0x2d8(0x18)
	struct FText KeyMappingLabel; // 0x2f0(0x18)
	char pad_308[0x10]; // 0x308(0x10)

	void HandleButtonClicked(); // Function Mist.MistUIButtonWithKeyMappingWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x11c49d0
	void Event__DelegateSignature(); // DelegateFunction Mist.MistUIButtonWithKeyMappingWidget.Event__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistUIIconButton
// Size: 0x5f0 (Inherited: 0x5e0)
struct UMistUIIconButton : UMistUIButton {
	struct UImage* IconImage; // 0x5e0(0x08)
	struct UTexture2D* IconTexture; // 0x5e8(0x08)
};

// Class Mist.MistUICharacterCustomizationCategory
// Size: 0xae0 (Inherited: 0x5f0)
struct UMistUICharacterCustomizationCategory : UMistUIIconButton {
	struct FButtonStyle DefaultButtonStyle; // 0x5f0(0x278)
	struct FButtonStyle SelectedButtonStyle; // 0x868(0x278)

	void OnUnselected(); // Function Mist.MistUICharacterCustomizationCategory.OnUnselected // (Final|Native|Public) // @ game+0x11c55a0
	void OnSelected(); // Function Mist.MistUICharacterCustomizationCategory.OnSelected // (Final|Native|Public) // @ game+0x11c5580
};

// Class Mist.MistUICircularProgressBar
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistUICircularProgressBar : UMistUIWidget {
	struct UImage* CircleImage; // 0x2c0(0x08)
	struct UMaterialInterface* RenderMaterialType; // 0x2c8(0x08)
	float Thickness; // 0x2d0(0x04)
	float ConstFactor; // 0x2d4(0x04)
	struct UTexture2D* FillTexture; // 0x2d8(0x08)
	float Progress; // 0x2e0(0x04)
	char pad_2E4[0xc]; // 0x2e4(0x0c)

	void SetProgress(float InProgress); // Function Mist.MistUICircularProgressBar.SetProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x11c5960
};

// Class Mist.MistUICollapsibleVerticalBox
// Size: 0x320 (Inherited: 0x2c0)
struct UMistUICollapsibleVerticalBox : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UButton* HeaderButtonWidget; // 0x2d8(0x08)
	struct UTextBlock* HeaderTextWidget; // 0x2e0(0x08)
	struct UVerticalBox* VerticalBoxWidget; // 0x2e8(0x08)
	struct FText HeaderText; // 0x2f0(0x18)
	struct TArray<struct UWidget*> Children; // 0x308(0x10)
	bool bIsCollapsed; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)

	void HandleHeaderClick(); // Function Mist.MistUICollapsibleVerticalBox.HandleHeaderClick // (Final|Native|Private) // @ game+0x11c4bc0
};

// Class Mist.MistUIConfirmationDialog
// Size: 0x3f0 (Inherited: 0x3c0)
struct UMistUIConfirmationDialog : UMistUIDialog {
	struct UTextBlock* DescriptionTextWidget; // 0x3c0(0x08)
	struct UButton* YesButtonWidget; // 0x3c8(0x08)
	struct UButton* NoButtonWidget; // 0x3d0(0x08)
	struct FText Description; // 0x3d8(0x18)

	void HandleYesButtonClicked(); // Function Mist.MistUIConfirmationDialog.HandleYesButtonClicked // (Final|Native|Private) // @ game+0x11c4ab0
	void HandleNoButtonClicked(); // Function Mist.MistUIConfirmationDialog.HandleNoButtonClicked // (Final|Native|Private) // @ game+0x11c4a50
};

// Class Mist.MistUIControllerDisconnectDialog
// Size: 0x3e0 (Inherited: 0x3c0)
struct UMistUIControllerDisconnectDialog : UMistUIDialog {
	struct URichTextBlock* DescriptionTextWidget; // 0x3c0(0x08)
	struct FText Description; // 0x3c8(0x18)
};

// Class Mist.MistUIDragDropOperation
// Size: 0x98 (Inherited: 0x88)
struct UMistUIDragDropOperation : UDragDropOperation {
	char pad_88[0x8]; // 0x88(0x08)
	struct UMistUIDragDropWidget* DraggedWidget; // 0x90(0x08)
};

// Class Mist.MistUIDuelBetDialog
// Size: 0x400 (Inherited: 0x3c0)
struct UMistUIDuelBetDialog : UMistUIDialog {
	struct UTextBlock* DescriptionTextWidget; // 0x3c0(0x08)
	struct UButton* ConfirmButtonWidget; // 0x3c8(0x08)
	struct UButton* CancelButtonWidget; // 0x3d0(0x08)
	struct UMistNumberSliderWidget* NumberSliderWidget; // 0x3d8(0x08)
	struct FText Description; // 0x3e0(0x18)
	char pad_3F8[0x8]; // 0x3f8(0x08)

	void HandleValueChanged(); // Function Mist.MistUIDuelBetDialog.HandleValueChanged // (Final|Native|Private) // @ game+0x11c5370
	void HandleConfirmButtonClicked(); // Function Mist.MistUIDuelBetDialog.HandleConfirmButtonClicked // (Final|Native|Private) // @ game+0x11c4ab0
	void HandleCancelButtonClicked(); // Function Mist.MistUIDuelBetDialog.HandleCancelButtonClicked // (Final|Native|Private) // @ game+0x11c4a50
};

// Class Mist.MistUIErrorDialog
// Size: 0x3e8 (Inherited: 0x3c0)
struct UMistUIErrorDialog : UMistUIDialog {
	struct UTextBlock* DescriptionTextWidget; // 0x3c0(0x08)
	struct UButton* CloseButtonWidget; // 0x3c8(0x08)
	struct FText Description; // 0x3d0(0x18)

	void HandleCloseButtonClicked(); // Function Mist.MistUIErrorDialog.HandleCloseButtonClicked // (Final|Native|Private) // @ game+0x11c4a90
};

// Class Mist.MistUIInfoDialog
// Size: 0x3e8 (Inherited: 0x3c0)
struct UMistUIInfoDialog : UMistUIDialog {
	struct UTextBlock* DescriptionTextWidget; // 0x3c0(0x08)
	struct UButton* OKButtonWidget; // 0x3c8(0x08)
	struct FText Description; // 0x3d0(0x18)

	void HandleOKButtonClicked(); // Function Mist.MistUIInfoDialog.HandleOKButtonClicked // (Final|Native|Private) // @ game+0x11c4a90
};

// Class Mist.MistUIManager
// Size: 0x1d0 (Inherited: 0xf0)
struct UMistUIManager : UActorComponent {
	struct FMulticastInlineDelegate OnScreenOpened; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnScreenClosed; // 0x100(0x10)
	char pad_110[0x30]; // 0x110(0x30)
	struct UMistUIDragDropOperation* DragOperation; // 0x140(0x08)
	char pad_148[0x10]; // 0x148(0x10)
	struct TArray<struct FMistOpenScreenData> OpenScreens; // 0x158(0x10)
	struct UMistWatermarkScreen* WatermarkScreen; // 0x168(0x08)
	struct TMap<struct UMistUIScreen*, struct UMistUIScreen*> CachedScreens; // 0x170(0x50)
	char pad_1C0[0x8]; // 0x1c0(0x08)
	struct UMistLegendWidget* LegendWidget; // 0x1c8(0x08)

	bool ToggleScreen(struct UMistUIScreen* Screen); // Function Mist.MistUIManager.ToggleScreen // (Final|Native|Public) // @ game+0x11ca530
	bool OpenScreen(struct UMistUIScreen* Screen); // Function Mist.MistUIManager.OpenScreen // (Final|Native|Public) // @ game+0x11c9f50
	void MistScreenEvent__DelegateSignature(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // DelegateFunction Mist.MistUIManager.MistScreenEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	bool IsScreenOpen(struct UMistUIScreen* Screen); // Function Mist.MistUIManager.IsScreenOpen // (Final|Native|Public|Const) // @ game+0x11c9c40
	void HandleScreenInputModeChanged(struct UMistUIScreen* Screen); // Function Mist.MistUIManager.HandleScreenInputModeChanged // (Final|Native|Private) // @ game+0x11c9a60
	bool CloseScreen(struct UMistUIScreen* Screen); // Function Mist.MistUIManager.CloseScreen // (Final|Native|Public) // @ game+0x11c90e0
};

// Class Mist.MistUISelectionDialog
// Size: 0x418 (Inherited: 0x3c0)
struct UMistUISelectionDialog : UMistUIDialog {
	struct UTextBlock* DescriptionTextWidget; // 0x3c0(0x08)
	struct UScrollBox* ListWidget; // 0x3c8(0x08)
	struct UButton* OKButtonWidget; // 0x3d0(0x08)
	struct UButton* CancelButtonWidget; // 0x3d8(0x08)
	struct FText Description; // 0x3e0(0x18)
	int32_t SelectedIndex; // 0x3f8(0x04)
	char pad_3FC[0x4]; // 0x3fc(0x04)
	struct UMistUISelectionItemWidget* WidgetClass; // 0x400(0x08)
	struct TArray<struct FMistUISelectionDialogItem> Items; // 0x408(0x10)

	void HandleOKButtonClicked(); // Function Mist.MistUISelectionDialog.HandleOKButtonClicked // (Final|Native|Private) // @ game+0x11c9a40
	void HandleListItemSelected(struct UMistUISelectionItemWidget* Sender); // Function Mist.MistUISelectionDialog.HandleListItemSelected // (Final|Native|Private) // @ game+0x11c99c0
	void HandleCancelButtonClicked(); // Function Mist.MistUISelectionDialog.HandleCancelButtonClicked // (Final|Native|Private) // @ game+0x11c4a70
};

// Class Mist.MistUISelectionItemWidget
// Size: 0x300 (Inherited: 0x2c0)
struct UMistUISelectionItemWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UTextBlock* TextWidget; // 0x2d0(0x08)
	bool bIsSelected; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FMistUISelectionDialogItem Item; // 0x2e0(0x20)
};

// Class Mist.MistUITabButton
// Size: 0x5e8 (Inherited: 0x5e0)
struct UMistUITabButton : UMistUIButton {
	bool bCurrentTab; // 0x5e0(0x01)
	char pad_5E1[0x7]; // 0x5e1(0x07)

	void ChangedCurrent(bool bNewValue); // Function Mist.MistUITabButton.ChangedCurrent // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistUITabControl
// Size: 0x348 (Inherited: 0x2c0)
struct UMistUITabControl : UMistUIWidget {
	char pad_2C0[0x28]; // 0x2c0(0x28)
	struct UMistUITabButton* TabButtonClass; // 0x2e8(0x08)
	struct UUniformGridPanel* TitleGridWidget; // 0x2f0(0x08)
	struct UWidgetSwitcher* ContentSwitcherWidget; // 0x2f8(0x08)
	struct UMistInputBindingHintWidget* PreviousItemWidget; // 0x300(0x08)
	struct UMistInputBindingHintWidget* NextItemWidget; // 0x308(0x08)
	struct UWidget* HeaderPanel; // 0x310(0x08)
	struct UScrollBox* ScrollBoxWidget; // 0x318(0x08)
	enum class EHorizontalAlignment TabHeaderAlignment; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	float GamepadScrollSpeed; // 0x324(0x04)
	enum class ETabScrollBehaviour ScrollTabBehaviour; // 0x328(0x01)
	char pad_329[0x7]; // 0x329(0x07)
	struct TArray<struct FMistTabInfo> Tabs; // 0x330(0x10)
	char pad_340[0x8]; // 0x340(0x08)

	void SwitchRight(bool bActivatedByUser); // Function Mist.MistUITabControl.SwitchRight // (Final|Native|Public) // @ game+0x11ca4a0
	void SwitchLeft(bool bActivatedByUser); // Function Mist.MistUITabControl.SwitchLeft // (Final|Native|Public) // @ game+0x11ca410
	void ScrollTab(struct FMistTabInfo& TabInfo, float ScrollAmount, bool bIsActive); // Function Mist.MistUITabControl.ScrollTab // (Final|Native|Public|HasOutParms) // @ game+0x11ca1a0
	void ReceiveTabActivated(); // Function Mist.MistUITabControl.ReceiveTabActivated // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void InputSwitchRight(); // Function Mist.MistUITabControl.InputSwitchRight // (Final|Native|Private) // @ game+0x11c9c20
	void InputSwitchLeft(); // Function Mist.MistUITabControl.InputSwitchLeft // (Final|Native|Private) // @ game+0x11c9c00
	void HandleTabButtonClicked(struct UMistUIButton* Sender); // Function Mist.MistUITabControl.HandleTabButtonClicked // (Final|Native|Private) // @ game+0x11c9ae0
	void HandleGamepadScroll(float ScrollAmount, float DeltaTime); // Function Mist.MistUITabControl.HandleGamepadScroll // (Final|Native|Public) // @ game+0x11c9880
};

// Class Mist.MistUnlockableAssetTooltipWidget
// Size: 0x380 (Inherited: 0x2c0)
struct UMistUnlockableAssetTooltipWidget : UMistUIWidget {
	struct UVerticalBox* VerticalBoxWidget; // 0x2c0(0x08)
	struct UPrimaryDataAsset* Asset; // 0x2c8(0x08)
	struct FMistCraftingState CraftingState; // 0x2d0(0xa0)
	char pad_370[0x8]; // 0x370(0x08)
	bool bShowHeader; // 0x378(0x01)
	char pad_379[0x7]; // 0x379(0x07)
};

// Class Mist.MistUnlockableIntroSlide
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistUnlockableIntroSlide : UMistUIWidget {
	struct UWidget* PanelFrame; // 0x2c0(0x08)
	struct UMistUnlockableItemListWidget* ListReference; // 0x2c8(0x08)
	struct UMistUnlockableTreeScreen* ParentTreeScreen; // 0x2d0(0x08)
	struct UButton* Button_5; // 0x2d8(0x08)
	struct UButton* Button_1; // 0x2e0(0x08)
	int32_t Index; // 0x2e8(0x04)
	char pad_2EC[0x4]; // 0x2ec(0x04)
	struct UCanvasPanel* QuickUnlockWrapBoxWidget; // 0x2f0(0x08)

	void OnUnhover(); // Function Mist.MistUnlockableIntroSlide.OnUnhover // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnSetListReference(); // Function Mist.MistUnlockableIntroSlide.OnSetListReference // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnHover(); // Function Mist.MistUnlockableIntroSlide.OnHover // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void GetUnlocksRecursive(struct UMistUnlockableItemNode* Node, struct TArray<struct UMistUnlockableItemNode*>& Result); // Function Mist.MistUnlockableIntroSlide.GetUnlocksRecursive // (Final|Native|Public|HasOutParms) // @ game+0x11c9770
	void EnterTree(); // Function Mist.MistUnlockableIntroSlide.EnterTree // (Final|Native|Public|BlueprintCallable) // @ game+0x11c9560
	bool CanMouseHover(); // Function Mist.MistUnlockableIntroSlide.CanMouseHover // (Final|Native|Public|BlueprintCallable) // @ game+0x11c90b0
};

// Class Mist.MistUnlockableItemListWidget
// Size: 0x460 (Inherited: 0x2c0)
struct UMistUnlockableItemListWidget : UMistUIWidget {
	struct UCanvasPanel* PanelFrame; // 0x2c0(0x08)
	char pad_2C8[0x50]; // 0x2c8(0x50)
	struct FLinearColor ActiveColor; // 0x318(0x10)
	struct FLinearColor DependencyColor; // 0x328(0x10)
	struct FLinearColor UnlockedColor; // 0x338(0x10)
	struct FLinearColor CanUnlockColor; // 0x348(0x10)
	struct FLinearColor LockedColor; // 0x358(0x10)
	struct FLinearColor SatisfyLevelColor; // 0x368(0x10)
	struct FLinearColor ActiveIconColor; // 0x378(0x10)
	struct FLinearColor UnlockedIconColor; // 0x388(0x10)
	struct FLinearColor CanUnlockIconColor; // 0x398(0x10)
	struct FLinearColor LockedIconColor; // 0x3a8(0x10)
	struct FLinearColor SatisfyLevelIconColor; // 0x3b8(0x10)
	float LineStrength; // 0x3c8(0x04)
	struct FName InternalName; // 0x3cc(0x08)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct FText ClassName; // 0x3d8(0x18)
	struct UTexture2D* ClassImage; // 0x3f0(0x08)
	struct UTexture2D* ClassImageHover; // 0x3f8(0x08)
	struct UMistUnlockableTreeItem* RootItem; // 0x400(0x08)
	struct UMistUnlockableItemNode* RootNode; // 0x408(0x08)
	char pad_410[0x4]; // 0x410(0x04)
	bool bShouldSlideIn; // 0x414(0x01)
	char pad_415[0x4b]; // 0x415(0x4b)
};

// Class Mist.MistUnlockableSelectTreeButtonWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistUnlockableSelectTreeButtonWidget : UMistUIWidget {
	struct UButton* ButtonWidget; // 0x2c0(0x08)
	struct UMistUnlockableItemListWidget* Data; // 0x2c8(0x08)
	bool bWasSelected; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct UMistUnlockableTreeScreen* Screen; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)

	void SetIsSelected(bool bSelectedTree); // Function Mist.MistUnlockableSelectTreeButtonWidget.SetIsSelected // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleButtonClicked(); // Function Mist.MistUnlockableSelectTreeButtonWidget.HandleButtonClicked // (Final|Native|Private) // @ game+0x11c9860
};

// Class Mist.MistUnlockableTooltipWidget
// Size: 0x388 (Inherited: 0x2c0)
struct UMistUnlockableTooltipWidget : UMistUIWidget {
	struct UMistUnlockableTreeItem* Item; // 0x2c0(0x08)
	struct UUniformGridPanel* ResourceCost; // 0x2c8(0x08)
	struct UScrollBox* VitaminsListWidget; // 0x2d0(0x08)
	struct UTextBlock* LevelWidget; // 0x2d8(0x08)
	struct UTextBlock* DescriptionWidget; // 0x2e0(0x08)
	struct UTextBlock* CostWidget; // 0x2e8(0x08)
	struct UTextBlock* NameWidget; // 0x2f0(0x08)
	struct UWidget* FlotillaRequiredWidget; // 0x2f8(0x08)
	struct UVerticalBox* DetailsContainerWidget; // 0x300(0x08)
	struct UVerticalBox* CraftingStationBox; // 0x308(0x08)
	struct UImage* CraftingStationIcon; // 0x310(0x08)
	struct UTextBlock* CraftingStationName; // 0x318(0x08)
	struct UProgressBar* HoldProgressBar; // 0x320(0x08)
	struct UWidget* HintWidget; // 0x328(0x08)
	struct UBorder* CostPanel; // 0x330(0x08)
	struct UWidget* UnlockedPanel; // 0x338(0x08)
	struct UImage* TechtreeIcon; // 0x340(0x08)
	struct TArray<struct FMistUnlockableTierInfo> TechTreeUnlockableTierInfo; // 0x348(0x10)
	struct FText VitaminsAndResourcesTooltip; // 0x358(0x18)
	struct FText VitaminsNoResourcesTooltip; // 0x370(0x18)

	void SetUnlockableItem(struct UMistUnlockableTreeItem* InItem, enum class EMistUnlockableItemStatus UnlockStatus); // Function Mist.MistUnlockableTooltipWidget.SetUnlockableItem // (Final|Native|Public|BlueprintCallable) // @ game+0x11ca350
	void SetHoldButton(struct UMistHoldButtonWidget* ButtonWidget); // Function Mist.MistUnlockableTooltipWidget.SetHoldButton // (Final|Native|Public|BlueprintCallable) // @ game+0x11ca2d0
	void HandleHoldProgress(float Progress); // Function Mist.MistUnlockableTooltipWidget.HandleHoldProgress // (Final|Native|Protected) // @ game+0x11c9940
};

// Class Mist.MistUnlockableTree
// Size: 0xf8 (Inherited: 0x28)
struct UMistUnlockableTree : UObject {
	struct UMistUnlockableTreeItem* UnlockableClass; // 0x28(0x08)
	struct TArray<struct UMistUnlockableTreeItem*> CachedItems; // 0x30(0x10)
	struct TArray<struct UMistUnlockableItemNode*> CachedTrees; // 0x40(0x10)
	struct TMap<struct UMistUnlockableTreeItem*, struct UMistUnlockableItemNode*> CachedTreeNodes; // 0x50(0x50)
	char pad_A0[0x58]; // 0xa0(0x58)

	void third_walk(struct UMistUnlockableItemNode* Tree, float min_x, float max_y, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.third_walk // (Final|Native|Public) // @ game+0x11caee0
	struct FVector2D second_walk(struct UMistUnlockableItemNode* V, float M, float Depth, float min_x, float max_y, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.second_walk // (Final|Native|Public|HasDefaults) // @ game+0x11cace0
	void RecursiveDebug(struct UMistUnlockableItemNode* Node, int32_t TechTierLevel, int32_t Offset); // Function Mist.MistUnlockableTree.RecursiveDebug // (Final|Native|Public) // @ game+0x11c9fe0
	struct UMistUnlockableItemNode* OffsetByNumber(struct UMistUnlockableItemNode* Node, int32_t Amount, bool bAddOrReplaceChildren); // Function Mist.MistUnlockableTree.OffsetByNumber // (Final|Native|Public) // @ game+0x11c9e50
	void move_subtree(struct UMistUnlockableItemNode* wl, struct UMistUnlockableItemNode* wr, float Shift, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.move_subtree // (Final|Native|Public) // @ game+0x11cab50
	void InitializeTree(); // Function Mist.MistUnlockableTree.InitializeTree // (Final|Native|Public) // @ game+0x11c9be0
	struct UMistUnlockableItemNode* firstwalk(struct UMistUnlockableItemNode* Node, float Distance, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.firstwalk // (Final|Native|Public) // @ game+0x11caa00
	void execute_shifts(struct UMistUnlockableItemNode* V, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.execute_shifts // (Final|Native|Public) // @ game+0x11ca900
	void Buchheim(struct UMistUnlockableItemNode* Tree, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.Buchheim // (Final|Native|Public) // @ game+0x11c8fb0
	struct UMistUnlockableItemNode* apportion(struct UMistUnlockableItemNode* V, struct UMistUnlockableItemNode* default_ancestor, float Distance, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.apportion // (Final|Native|Public) // @ game+0x11ca770
	struct UMistUnlockableItemNode* ancestor(struct UMistUnlockableItemNode* vil, struct UMistUnlockableItemNode* V, struct UMistUnlockableItemNode* default_ancestor, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableTree.ancestor // (Final|Native|Public) // @ game+0x11ca5e0
};

// Class Mist.MistUnlockableItemNode
// Size: 0x190 (Inherited: 0x28)
struct UMistUnlockableItemNode : UObject {
	struct TMap<int32_t, struct FVector2D> TechTierPosition; // 0x28(0x50)
	struct UMistUnlockableTreeItem* Item; // 0x78(0x08)
	struct UMistUnlockableItemNode* RootNode; // 0x80(0x08)
	int32_t TierOffset; // 0x88(0x04)
	int32_t TreeDepth; // 0x8c(0x04)
	struct TArray<struct UMistUnlockableItemNode*> NestedChildren; // 0x90(0x10)
	struct UMistUnlockableItemNode* Parent; // 0xa0(0x08)
	int32_t HideBelowLevel; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct TMap<int32_t, struct UMistHiddenItemNode*> HiddenChild_Hack; // 0xb0(0x50)
	struct TArray<struct UMistUnlockableItemNode*> Children; // 0x100(0x10)
	struct TMap<int32_t, struct UMistUnlockableItemNode*> TechTierHiddenChildren; // 0x110(0x50)
	struct UMistUnlockableItemNode* Thread; // 0x160(0x08)
	float Mod; // 0x168(0x04)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct UMistUnlockableItemNode* ancestor; // 0x170(0x08)
	float Change; // 0x178(0x04)
	float Shift; // 0x17c(0x04)
	struct UMistUnlockableItemNode* _Lmost_sibling; // 0x180(0x08)
	uint32_t Number; // 0x188(0x04)
	char pad_18C[0x4]; // 0x18c(0x04)

	struct UMistUnlockableItemNode* Right(int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableItemNode.Right // (Final|Native|Public) // @ game+0x11ca0e0
	struct UMistUnlockableItemNode* LeftBrother(int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableItemNode.LeftBrother // (Final|Native|Public) // @ game+0x11c9d90
	struct UMistUnlockableItemNode* Left(int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableItemNode.Left // (Final|Native|Public) // @ game+0x11c9cd0
	void InitializeNode(struct UMistUnlockableTreeItem* treeItem); // Function Mist.MistUnlockableItemNode.InitializeNode // (Final|Native|Public) // @ game+0x11c9b60
	struct UMistUnlockableItemNode* GetLeftMostSibling(int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableItemNode.GetLeftMostSibling // (Final|Native|Public) // @ game+0x11c96b0
	struct TArray<struct UMistUnlockableItemNode*> GetChildren(int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableItemNode.GetChildren // (Final|Native|Public) // @ game+0x11c9580
	void DrawTree(float Depth, int32_t numberOffset, int32_t TechTierLevel, struct AMistOasisPlayerState* PlayerState); // Function Mist.MistUnlockableItemNode.DrawTree // (Final|Native|Public) // @ game+0x11c9410
	void AddParent(struct UMistUnlockableItemNode* ParentNode); // Function Mist.MistUnlockableItemNode.AddParent // (Final|Native|Public) // @ game+0x11c8f30
};

// Class Mist.MistHiddenItemNode
// Size: 0x1b0 (Inherited: 0x190)
struct UMistHiddenItemNode : UMistUnlockableItemNode {
	int32_t NumberOfHiddenEntries; // 0x190(0x04)
	char pad_194[0x4]; // 0x194(0x04)
	struct TArray<struct UMistUnlockableItemNode*> NumberOfHiddenEntriesNames; // 0x198(0x10)
	int32_t LevelToUnlock; // 0x1a8(0x04)
	char pad_1AC[0x4]; // 0x1ac(0x04)
};

// Class Mist.MistUnlockableTreeItemWidget
// Size: 0x428 (Inherited: 0x2c0)
struct UMistUnlockableTreeItemWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UMistUnlockableTreeItem* Item; // 0x2d0(0x08)
	struct UMistUnlockableItemListWidget* ParentPanel; // 0x2d8(0x08)
	struct TArray<struct UMistUnlockableTreeItemWidget*> RequirementTreeItemWidgets; // 0x2e0(0x10)
	struct UMistUnlockableTreeItemWidget* Parent; // 0x2f0(0x08)
	enum class EMistUnlockableItemStatus Status; // 0x2f8(0x01)
	char pad_2F9[0x7]; // 0x2f9(0x07)
	struct UImage* ImageWidget; // 0x300(0x08)
	struct UTextBlock* NameWidget; // 0x308(0x08)
	struct UTextBlock* DescriptionWidget; // 0x310(0x08)
	struct UTextBlock* DependenciesWidget; // 0x318(0x08)
	struct UTextBlock* VitaminsWidget; // 0x320(0x08)
	struct UTextBlock* CostWidget; // 0x328(0x08)
	struct UMistHoldButtonWidget* ButtonWidget; // 0x330(0x08)
	struct UMistUICircularProgressBar* UnlockProgressBar; // 0x338(0x08)
	struct FLinearColor ActiveColor; // 0x340(0x10)
	struct FLinearColor DependencyColor; // 0x350(0x10)
	struct FLinearColor UnlockedColor; // 0x360(0x10)
	struct FLinearColor CanUnlockColor; // 0x370(0x10)
	struct FLinearColor LockedColor; // 0x380(0x10)
	struct FLinearColor SatisfyLevelColor; // 0x390(0x10)
	struct FLinearColor ParentingColor; // 0x3a0(0x10)
	struct TArray<struct FVector2D> ParentLines; // 0x3b0(0x10)
	struct TArray<struct UImage*> LineImages; // 0x3c0(0x10)
	struct UMistUnlockableItemNode* Node; // 0x3d0(0x08)
	char pad_3D8[0x50]; // 0x3d8(0x50)

	void HandleWidgetUnhovered(); // Function Mist.MistUnlockableTreeItemWidget.HandleWidgetUnhovered // (Final|Native|Private) // @ game+0x11cdcf0
	void HandleWidgetHovered(); // Function Mist.MistUnlockableTreeItemWidget.HandleWidgetHovered // (Final|Native|Private) // @ game+0x11cdcd0
	void HandleWidgetClicked(); // Function Mist.MistUnlockableTreeItemWidget.HandleWidgetClicked // (Final|Native|Private) // @ game+0x11cdcb0
	void HandleTreeUnlocked(struct AMistOasisPlayerState* Sender); // Function Mist.MistUnlockableTreeItemWidget.HandleTreeUnlocked // (Final|Native|Private) // @ game+0x11cdbb0
	void HandlePlayerStatsUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistUnlockableTreeItemWidget.HandlePlayerStatsUpdated // (Final|Native|Private) // @ game+0x11cd9b0
	void HandleHoldProgress(float Progress); // Function Mist.MistUnlockableTreeItemWidget.HandleHoldProgress // (Final|Native|Private) // @ game+0x11cd5f0
	void ClickedEvent__DelegateSignature(struct UMistUnlockableTreeItemWidget* Sender); // DelegateFunction Mist.MistUnlockableTreeItemWidget.ClickedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistHiddenTreeItemWidget
// Size: 0x440 (Inherited: 0x428)
struct UMistHiddenTreeItemWidget : UMistUnlockableTreeItemWidget {
	struct UTextBlock* NumberOfHiddenEntriesWidget; // 0x428(0x08)
	struct UTextBlock* LevelToUnlockWidget; // 0x430(0x08)
	struct UMistHiddenItemNode* HiddenNode; // 0x438(0x08)
};

// Class Mist.MistHiddenItemTooltip
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistHiddenItemTooltip : UMistUIWidget {
	struct UMistHiddenItemNode* Node; // 0x2c0(0x08)
	struct UTextBlock* LockedReason; // 0x2c8(0x08)
	struct UTextBlock* ListEntries; // 0x2d0(0x08)
};

// Class Mist.MistUnlockableKnowledgeItemList
// Size: 0x330 (Inherited: 0x2c0)
struct UMistUnlockableKnowledgeItemList : UMistUIWidget {
	struct TMap<struct UMistKnowledgeItemTemplate*, int32_t> KnowledgeItems; // 0x2c0(0x50)
	struct UGridPanel* KnowledgeGridPanel; // 0x310(0x08)
	struct UMistUIWidget* EmptyInfo; // 0x318(0x08)
	bool bSeparateIndividuals; // 0x320(0x01)
	char pad_321[0x3]; // 0x321(0x03)
	int32_t SlotsPerRow; // 0x324(0x04)
	int32_t MinSlots; // 0x328(0x04)
	char pad_32C[0x4]; // 0x32c(0x04)
};

// Class Mist.MistUnlockableTreeScreen
// Size: 0x5b8 (Inherited: 0x3a0)
struct UMistUnlockableTreeScreen : UMistUIScreen {
	struct FSlateSound ButtonHoverSound; // 0x3a0(0x18)
	struct FSlateSound SelectTreeSound; // 0x3b8(0x18)
	struct FSlateSound UnlockTechSound; // 0x3d0(0x18)
	struct FSlateSound UnclokNotPossibleSound; // 0x3e8(0x18)
	struct FSlateSound UnlockedClickedSound; // 0x400(0x18)
	struct FSlateSound SwitchTreeSound; // 0x418(0x18)
	struct FSlateSound BackToMainSound; // 0x430(0x18)
	struct UHorizontalBox* IntroBoxWidget; // 0x448(0x08)
	struct UMistDraggableContentWidget* TreeBoxWidget; // 0x450(0x08)
	struct UTextBlock* AvailablePointsWidget; // 0x458(0x08)
	struct UMistUnlockableKnowledgeItemList* AvailableKnowledgeItems; // 0x460(0x08)
	struct UVerticalBox* ResourceHelpBox; // 0x468(0x08)
	struct UTextBlock* LevelWidget; // 0x470(0x08)
	struct UTextBlock* PerkTreeText; // 0x478(0x08)
	struct UTextBlock* TechTreeText; // 0x480(0x08)
	struct UPanelWidget* TreeSelectionContainerWidget; // 0x488(0x08)
	struct UPanelWidget* TreeSelectionButtonListWidget; // 0x490(0x08)
	struct UButton* TreeSelectionOverviewButtonWidget; // 0x498(0x08)
	struct UButton* Tier1Button; // 0x4a0(0x08)
	struct UButton* Tier2Button; // 0x4a8(0x08)
	struct UButton* Tier3Button; // 0x4b0(0x08)
	struct UTexture2D* VerticalLineImage; // 0x4b8(0x08)
	struct UTexture2D* ShortVerticalLineImage; // 0x4c0(0x08)
	struct UTexture2D* CornerLineImage; // 0x4c8(0x08)
	struct UMistUnlockableTreeItem* UnlockableClass; // 0x4d0(0x08)
	struct FVector2D PositionScale; // 0x4d8(0x08)
	struct UCanvasPanel* TechTreeLists; // 0x4e0(0x08)
	struct TArray<struct UMistUnlockableItemListWidget*> CachedTechTreeLists; // 0x4e8(0x10)
	struct TArray<struct UMistUnlockableItemListWidget*> CachedPerkTreeLists; // 0x4f8(0x10)
	int32_t CachedTechTierLevel; // 0x508(0x04)
	char pad_50C[0x4]; // 0x50c(0x04)
	struct UCanvasPanel* PerkTreeLists; // 0x510(0x08)
	struct UMistUnlockableTree* Tree; // 0x518(0x08)
	struct TArray<struct UMistItemTemplate*> ResourceHelp; // 0x520(0x10)
	struct UMistUnlockableItemListWidget* ActiveTree; // 0x530(0x08)
	float MaxCloseHoldTime; // 0x538(0x04)
	char pad_53C[0x4]; // 0x53c(0x04)
	struct UWidget* DebugPanel; // 0x540(0x08)
	struct UCheckBox* DebugCheckBox; // 0x548(0x08)
	struct UTextBlock* DebugTechEntryName; // 0x550(0x08)
	struct UEditableTextBox* DebugTierLevel; // 0x558(0x08)
	struct UEditableTextBox* DebugCost; // 0x560(0x08)
	bool bDebugMode; // 0x568(0x01)
	char pad_569[0x7]; // 0x569(0x07)
	struct UMistUnlockableTreeItem* DebugItem; // 0x570(0x08)
	char pad_578[0x40]; // 0x578(0x40)

	void HandleTreeUnlocked(struct AMistOasisPlayerState* Sender); // Function Mist.MistUnlockableTreeScreen.HandleTreeUnlocked // (Final|Native|Public) // @ game+0x11cdc30
	void HandleTreeSelectionOverviewButtonClicked(); // Function Mist.MistUnlockableTreeScreen.HandleTreeSelectionOverviewButtonClicked // (Final|Native|Private) // @ game+0x11cdb90
	void HandleTier3ButtonClicked(); // Function Mist.MistUnlockableTreeScreen.HandleTier3ButtonClicked // (Final|Native|Private) // @ game+0x11cdb70
	void HandleTier2ButtonClicked(); // Function Mist.MistUnlockableTreeScreen.HandleTier2ButtonClicked // (Final|Native|Private) // @ game+0x11cdb50
	void HandleTier1ButtonClicked(); // Function Mist.MistUnlockableTreeScreen.HandleTier1ButtonClicked // (Final|Native|Private) // @ game+0x11cdb30
	void HandleTechPointsUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistUnlockableTreeScreen.HandleTechPointsUpdated // (Final|Native|Private) // @ game+0x11cda70
	void HandlePerkPointsUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistUnlockableTreeScreen.HandlePerkPointsUpdated // (Final|Native|Private) // @ game+0x11cd8f0
	void HandleOnItemWidgetClicked(struct UMistUnlockableTreeItemWidget* Widget); // Function Mist.MistUnlockableTreeScreen.HandleOnItemWidgetClicked // (Final|Native|Public) // @ game+0x11cd750
	void HandleLevelUpdated(struct AMistOasisPlayerState* Sender, int32_t NewValue); // Function Mist.MistUnlockableTreeScreen.HandleLevelUpdated // (Final|Native|Private) // @ game+0x11cd690
	void HandleInventoryUpdated(); // Function Mist.MistUnlockableTreeScreen.HandleInventoryUpdated // (Final|Native|Private) // @ game+0x11cd670
	void HandleDebugValueChanged(struct FText& Text, enum class ETextCommit CommitMethod); // Function Mist.MistUnlockableTreeScreen.HandleDebugValueChanged // (Final|Native|Public|HasOutParms) // @ game+0x11cd4d0
	void HandleDebugModeToggle(bool bIsChecked); // Function Mist.MistUnlockableTreeScreen.HandleDebugModeToggle // (Final|Native|Public) // @ game+0x11cd440
	void HandleDebugItemClicked(struct UMistUnlockableTreeItem* InDebugItem); // Function Mist.MistUnlockableTreeScreen.HandleDebugItemClicked // (Final|Native|Public) // @ game+0x11cd3c0
	void HandleCloseReleased(); // Function Mist.MistUnlockableTreeScreen.HandleCloseReleased // (Final|Native|Private) // @ game+0x11cd3a0
	void HandleClosePressed(); // Function Mist.MistUnlockableTreeScreen.HandleClosePressed // (Final|Native|Private) // @ game+0x11cd380
	struct TArray<struct UMistUnlockableItemNode*> GetUndefinedUnlockables(); // Function Mist.MistUnlockableTreeScreen.GetUndefinedUnlockables // (Final|Native|Public) // @ game+0x11cd300
	void ActivateTree(struct UMistUnlockableIntroSlide* Slide); // Function Mist.MistUnlockableTreeScreen.ActivateTree // (Final|Native|Public) // @ game+0x11cd190
};

// Class Mist.MistUserGameSettings
// Size: 0x88 (Inherited: 0x38)
struct UMistUserGameSettings : UMistSettingsObject {
	bool bShowSubtitles; // 0x38(0x01)
	bool bShowAttackArrows; // 0x39(0x01)
	bool bGrapplingHookCrosshairAlwaysVisible; // 0x3a(0x01)
	bool bAnonymizePlayers; // 0x3b(0x01)
	bool bAnonymizeClans; // 0x3c(0x01)
	bool bAnonymizeTiles; // 0x3d(0x01)
	bool bHideChat; // 0x3e(0x01)
	bool bCoverWorldMap; // 0x3f(0x01)
	bool bDisplayDamageInformation; // 0x40(0x01)
	bool bLockSteeringOnUnmanning; // 0x41(0x01)
	bool bUseDynamicFOV; // 0x42(0x01)
	bool bCameraUseWalkerRotation; // 0x43(0x01)
	float CameraFollowStrength; // 0x44(0x04)
	bool bShortcutsExpanded; // 0x48(0x01)
	bool bShowItemTooltips; // 0x49(0x01)
	bool bRightAlignInventory; // 0x4a(0x01)
	bool bHealthDisplay; // 0x4b(0x01)
	enum class ETutorialVisibility TutorialVisibility; // 0x4c(0x01)
	enum class EMistCameraPosition CameraPosition; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	struct FString EarlyAccessConfirmedForProjectVersion; // 0x50(0x10)
	struct FString ShopDisclaimerConfirmedForProjectVersion; // 0x60(0x10)
	int32_t AnonymizationOffset; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct TArray<struct FName> HiddenMapIconCategories; // 0x78(0x10)
};

// Class Mist.MistUserGraphicsSettings
// Size: 0x50 (Inherited: 0x38)
struct UMistUserGraphicsSettings : UMistSettingsObject {
	int32_t MaxFPS; // 0x38(0x04)
	int32_t MotionBlurQuality; // 0x3c(0x04)
	float FirstPersonFovOffsetFactor; // 0x40(0x04)
	float ThirdPersonFovOffsetFactor; // 0x44(0x04)
	enum class EAspectRatioAxisConstraint FovScaling; // 0x48(0x01)
	char pad_49[0x3]; // 0x49(0x03)
	float GammaCorrection; // 0x4c(0x04)
};

// Class Mist.MistUserInputSettings
// Size: 0xe8 (Inherited: 0x38)
struct UMistUserInputSettings : UMistSettingsObject {
	char pad_38[0x18]; // 0x38(0x18)
	float MouseSensitivity; // 0x50(0x04)
	float RightStickHorizontalSensitivity; // 0x54(0x04)
	float RightStickVerticalSensitivity; // 0x58(0x04)
	float GamepadCombatDirectionsDeadzone; // 0x5c(0x04)
	bool bInvertYAxis; // 0x60(0x01)
	bool bInvertWingSuitAxis; // 0x61(0x01)
	bool bShowLocalizedKeys; // 0x62(0x01)
	bool bEnableMouseSmoothing; // 0x63(0x01)
	float MinimapZoomScale; // 0x64(0x04)
	struct TMap<struct FString, float> CameraZoomValues; // 0x68(0x50)
	bool bEnableFluidBlocking; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float FluidBlockingHorizontalSensitivity; // 0xbc(0x04)
	float FluidBlockingVerticalSensitivity; // 0xc0(0x04)
	bool bDoubleTapMovementKeysDodging; // 0xc4(0x01)
	char pad_C5[0x3]; // 0xc5(0x03)
	struct TArray<struct FMistActionMappingBinding> ActionBindings; // 0xc8(0x10)
	struct TArray<struct FMistAxisMappingBinding> AxisBindings; // 0xd8(0x10)
};

// Class Mist.MistUserSoundSettings
// Size: 0x58 (Inherited: 0x38)
struct UMistUserSoundSettings : UMistSettingsObject {
	float MasterVolume; // 0x38(0x04)
	float MusicVolume; // 0x3c(0x04)
	float SFXVolume; // 0x40(0x04)
	float UIVolume; // 0x44(0x04)
	float SingingVolume; // 0x48(0x04)
	float NarratorVolume; // 0x4c(0x04)
	bool bMuteWhenBackground; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class Mist.MistUserVoiceChatSettings
// Size: 0x58 (Inherited: 0x38)
struct UMistUserVoiceChatSettings : UMistSettingsObject {
	bool bMuteVoiceChat; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float OutputVolume; // 0x3c(0x04)
	float InputVolume; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct FString InputDeviceId; // 0x48(0x10)
};

// Class Mist.MistVerifyRealmPasswordDialog
// Size: 0x420 (Inherited: 0x3c0)
struct UMistVerifyRealmPasswordDialog : UMistUIDialog {
	struct UPanelWidget* ContentPanelWidget; // 0x3c0(0x08)
	struct UTextBlock* ErrorMessageTextWidget; // 0x3c8(0x08)
	struct UEditableTextBox* PasswordTextBoxWidget; // 0x3d0(0x08)
	struct UMistBaseButtonWidget* OKButtonWidget; // 0x3d8(0x08)
	struct UMistBaseButtonWidget* CancelButtonWidget; // 0x3e0(0x08)
	struct UMistLoadingOverlayWidget* LoadingOverlayWidget; // 0x3e8(0x08)
	struct FText InvalidPasswordErrorMessage; // 0x3f0(0x18)
	char pad_408[0x10]; // 0x408(0x10)
	struct UMistJoinRealmVerifyRealmPasswordData* Data; // 0x418(0x08)

	void HandlePasswordTextBoxCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function Mist.MistVerifyRealmPasswordDialog.HandlePasswordTextBoxCommitted // (Final|Native|Private|HasOutParms) // @ game+0x11cd7d0
};

// Class Mist.MistVerticalMovementQuest
// Size: 0x110 (Inherited: 0x110)
struct UMistVerticalMovementQuest : UMistTutorialQuest {
};

// Class Mist.MistVirtualCollisionBodiesComponent
// Size: 0x158 (Inherited: 0xf0)
struct UMistVirtualCollisionBodiesComponent : UActorComponent {
	struct TArray<struct FCollisionBoneNamesHolder> CollisionBoneNames; // 0xf0(0x10)
	struct FMistComponentReference TriggerRef; // 0x100(0x28)
	struct UAnimSequence* ReferenceAnimation; // 0x128(0x08)
	float AnimationDefaultPosition; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct TArray<struct FMistVirtualSkeletalMesh> SkeletalMeshCache; // 0x138(0x10)
	struct TArray<struct FCollisionBodiesIndicesHolder> CollisionBodiesIndices; // 0x148(0x10)
};

// Class Mist.MistVitaminItemTemplate
// Size: 0x210 (Inherited: 0x1d8)
struct UMistVitaminItemTemplate : UMistItemTemplate {
	float Duration; // 0x1d8(0x04)
	bool bIsAffectedByDurationStat; // 0x1dc(0x01)
	char pad_1DD[0x3]; // 0x1dd(0x03)
	float DurationFactorAtMaxQuality; // 0x1e0(0x04)
	char pad_1E4[0x4]; // 0x1e4(0x04)
	struct TArray<struct UMistStatusEffect*> StatusEffects; // 0x1e8(0x10)
	struct TArray<struct UMistStatusEffect*> IndefiniteStatusEffects; // 0x1f8(0x10)
	enum class EVitaminUserClass UserClass; // 0x208(0x01)
	char pad_209[0x7]; // 0x209(0x07)
};

// Class Mist.MistVitaminsQuest
// Size: 0x110 (Inherited: 0x110)
struct UMistVitaminsQuest : UMistTutorialQuest {

	void ItemUsed(int32_t SoundId, struct UMistItemTemplate* ItemTemplate, int32_t Count); // Function Mist.MistVitaminsQuest.ItemUsed // (Final|Native|Protected) // @ game+0x112ec30
	void ContainerUpdate(struct UMistContainerComponent* OpenedContainer, int32_t Count, struct UMistItemTemplate* ItemTemplate); // Function Mist.MistVitaminsQuest.ContainerUpdate // (Final|Native|Protected) // @ game+0x115df60
	void ContainerOpened(); // Function Mist.MistVitaminsQuest.ContainerOpened // (Final|Native|Protected) // @ game+0x1192590
	void ContainerClosed(); // Function Mist.MistVitaminsQuest.ContainerClosed // (Final|Native|Protected) // @ game+0x115df20
};

// Class Mist.MistVitaminUserComponent
// Size: 0x178 (Inherited: 0x118)
struct UMistVitaminUserComponent : UMistPlayerComponent {
	char pad_118[0x30]; // 0x118(0x30)
	struct FMulticastInlineDelegate OnVitaminActivated; // 0x148(0x10)
	struct FMulticastInlineDelegate OnVitaminDeactivated; // 0x158(0x10)
	struct TArray<struct FMistActiveVitamin> ActiveVitamins; // 0x168(0x10)

	void VitaminActivatedEvent__DelegateSignature(struct UMistVitaminItemTemplate* VitaminTemplate); // DelegateFunction Mist.MistVitaminUserComponent.VitaminActivatedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void UpdateEvent__DelegateSignature(struct UMistVitaminUserComponent* Sender); // DelegateFunction Mist.MistVitaminUserComponent.UpdateEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	bool IsVitaminActive(struct UMistVitaminItemTemplate* VitaminClass); // Function Mist.MistVitaminUserComponent.IsVitaminActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11d1120
	void HandleVitaminTimerExpired(struct UMistVitaminItemTemplate* VitaminItem); // Function Mist.MistVitaminUserComponent.HandleVitaminTimerExpired // (Final|Native|Private) // @ game+0x11d10a0
	void ClientSetActiveVitamins(struct TArray<struct FMistActiveVitamin> InActiveVitamins); // Function Mist.MistVitaminUserComponent.ClientSetActiveVitamins // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11d0920
	void ClientRemoveActiveVitamin(struct UMistVitaminItemTemplate* InVitaminItem); // Function Mist.MistVitaminUserComponent.ClientRemoveActiveVitamin // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11a91f0
	void ClientAddActiveVitamin(struct FMistActiveVitamin InVitamin); // Function Mist.MistVitaminUserComponent.ClientAddActiveVitamin // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x11d0890
};

// Class Mist.MistVivoxSubsystem
// Size: 0x30 (Inherited: 0x30)
struct UMistVivoxSubsystem : UGameInstanceSubsystem {
};

// Class Mist.MistVoiceChatSettingsWidget
// Size: 0x348 (Inherited: 0x2d0)
struct UMistVoiceChatSettingsWidget : UMistSettingsWidget {
	struct UCheckBox* MuteVoiceChatCheckBoxWidget; // 0x2d0(0x08)
	struct USlider* OutputVolumeSlider; // 0x2d8(0x08)
	struct UComboBoxString* InputDeviceComboBoxWidget; // 0x2e0(0x08)
	struct UTextBlock* InputDeviceText; // 0x2e8(0x08)
	struct USlider* InputVolumeSlider; // 0x2f0(0x08)
	struct UMistLabelButtonWidget* VoiceTestButtonWidget; // 0x2f8(0x08)
	struct UMistProgressBar* VoiceTestAudioEnergyWidget; // 0x300(0x08)
	struct UMistUserVoiceChatSettings* UserVoiceChatSettings; // 0x308(0x08)
	char pad_310[0x38]; // 0x310(0x38)

	void HandleInputDeviceChanged(struct FString SelectedItem, enum class ESelectInfo SelectionType); // Function Mist.MistVoiceChatSettingsWidget.HandleInputDeviceChanged // (Final|Native|Private) // @ game+0x11d0be0
};

// Class Mist.MistWalkerConstructionSupport
// Size: 0x4b8 (Inherited: 0x4b0)
struct AMistWalkerConstructionSupport : AMistPlaceable {
	struct AMistWalker* SupportedWalker; // 0x4b0(0x08)

	void HandleWalkerDeployed(); // Function Mist.MistWalkerConstructionSupport.HandleWalkerDeployed // (Final|Native|Private) // @ game+0x11d6ad0
	void HandleLegConstructionFinished(struct AActor* NewActor, struct AActor* OldActor, struct AMistCharacter* FinishedBy); // Function Mist.MistWalkerConstructionSupport.HandleLegConstructionFinished // (Final|Native|Private) // @ game+0x11d6570
};

// Class Mist.MistWalkerCraftingSkillsWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistWalkerCraftingSkillsWidget : UMistUIWidget {
	struct UMistWalkerCraftingSkillWidget* Skill0; // 0x2c0(0x08)
	struct UMistWalkerCraftingSkillWidget* Skill1; // 0x2c8(0x08)
	struct UMistWalkerCraftingSkillWidget* Skill2; // 0x2d0(0x08)
	struct UMistWalkerCraftingSkillWidget* Skill3; // 0x2d8(0x08)
	struct UMistWalkerCraftingSkillWidget* Skill4; // 0x2e0(0x08)
	struct UMistTechTreeItem* WalkerName0; // 0x2e8(0x08)
	struct UMistTechTreeItem* WalkerName1; // 0x2f0(0x08)
	struct UMistTechTreeItem* WalkerName2; // 0x2f8(0x08)
	struct UMistTechTreeItem* WalkerName3; // 0x300(0x08)
	struct UMistTechTreeItem* WalkerName4; // 0x308(0x08)
	enum class EMistWalkerType WalkerType0; // 0x310(0x01)
	enum class EMistWalkerType WalkerType1; // 0x311(0x01)
	enum class EMistWalkerType WalkerType2; // 0x312(0x01)
	enum class EMistWalkerType WalkerType3; // 0x313(0x01)
	enum class EMistWalkerType WalkerType4; // 0x314(0x01)
	char pad_315[0x3]; // 0x315(0x03)
};

// Class Mist.MistWalkerCraftingSkillWidget
// Size: 0x368 (Inherited: 0x2c0)
struct UMistWalkerCraftingSkillWidget : UMistUIWidget {
	char pad_2C0[0x10]; // 0x2c0(0x10)
	struct UImage* IconWidget; // 0x2d0(0x08)
	struct UTextBlock* LabelTextWidget; // 0x2d8(0x08)
	struct UTextBlock* CurrentLevelText; // 0x2e0(0x08)
	struct UTextBlock* MoneyCost; // 0x2e8(0x08)
	struct UImage* MoneyIcon; // 0x2f0(0x08)
	struct UTextBlock* PrevLevelText; // 0x2f8(0x08)
	struct UTextBlock* SeparatorText; // 0x300(0x08)
	struct UTextBlock* NextLevelText; // 0x308(0x08)
	struct UButton* IncreaseSkillLevelButton; // 0x310(0x08)
	struct UImage* IconBorderImage; // 0x318(0x08)
	struct UImage* IconForegroundImage; // 0x320(0x08)
	struct UImage* TextBackgroundImage; // 0x328(0x08)
	struct UImage* LevelBackgroundImage; // 0x330(0x08)
	struct UImage* PrevLevelBackgroundImage; // 0x338(0x08)
	struct UImage* NextLevelBackgroundImage; // 0x340(0x08)
	struct UWidgetAnimation* Hover; // 0x348(0x08)
	struct USoundCue* HoverSound; // 0x350(0x08)
	struct UMistTechTreeItem* walkerName; // 0x358(0x08)
	enum class EMistWalkerType WalkerType; // 0x360(0x01)
	char pad_361[0x7]; // 0x361(0x07)

	void HandleWalkerSkillLevelsChanged(struct AMistOasisPlayerState* InSender); // Function Mist.MistWalkerCraftingSkillWidget.HandleWalkerSkillLevelsChanged // (Final|Native|Protected) // @ game+0x108b100
	void HandleSkillButtonUnhovered(); // Function Mist.MistWalkerCraftingSkillWidget.HandleSkillButtonUnhovered // (Final|Native|Protected) // @ game+0x11d6a90
	void HandleSkillButtonHovered(); // Function Mist.MistWalkerCraftingSkillWidget.HandleSkillButtonHovered // (Final|Native|Protected) // @ game+0x11d6a70
	void HandleSkillButtonClicked(); // Function Mist.MistWalkerCraftingSkillWidget.HandleSkillButtonClicked // (Final|Native|Protected) // @ game+0x11d6a50
	void ClickedEvent__DelegateSignature(struct UMistWalkerCraftingSkillWidget* Sender); // DelegateFunction Mist.MistWalkerCraftingSkillWidget.ClickedEvent__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
};

// Class Mist.MistWalkerCraftingWidget
// Size: 0x2d0 (Inherited: 0x2c0)
struct UMistWalkerCraftingWidget : UMistUIWidget {
	struct UImage* MoneyIcon; // 0x2c0(0x08)
	struct UTextBlock* MoneyQuantity; // 0x2c8(0x08)

	void HandleWalkerSkillLevelsChanged(struct AMistOasisPlayerState* InSender); // Function Mist.MistWalkerCraftingWidget.HandleWalkerSkillLevelsChanged // (Final|Native|Protected) // @ game+0x108b100
	void HandleMoneyUpdated(struct AMistOasisPlayerState* InSender, uint64_t InMoney); // Function Mist.MistWalkerCraftingWidget.HandleMoneyUpdated // (Final|Native|Protected) // @ game+0x10d1420
};

// Class Mist.MistWalkerDetailCraftingWidget
// Size: 0x2d8 (Inherited: 0x2c0)
struct UMistWalkerDetailCraftingWidget : UMistUIWidget {
	struct UMistSparePartsCraftingWidget* SparePartsCraftingWidget; // 0x2c0(0x08)
	struct UMistContainerWidget* BoostContainerWidget; // 0x2c8(0x08)
	struct AMistWalker* BoundWalker; // 0x2d0(0x08)

	struct UWidget* HandleNavToSpareParts(enum class EUINavigation Nav); // Function Mist.MistWalkerDetailCraftingWidget.HandleNavToSpareParts // (Final|Native|Private|BlueprintCallable) // @ game+0x11d6820
	struct UWidget* HandleNavToBoost(enum class EUINavigation Nav); // Function Mist.MistWalkerDetailCraftingWidget.HandleNavToBoost // (Final|Native|Private|BlueprintCallable) // @ game+0x11d6670
};

// Class Mist.MistWalkerDetailInventoryWidget
// Size: 0x340 (Inherited: 0x2c0)
struct UMistWalkerDetailInventoryWidget : UMistUIWidget {
	struct UMistContainerWidget* TorqueContainerWidget; // 0x2c0(0x08)
	struct UHorizontalBox* TorqueBox; // 0x2c8(0x08)
	struct UMistContainerWidget* WaterContainerWidget; // 0x2d0(0x08)
	struct UMistContainerWidget* HatchContainerWidget; // 0x2d8(0x08)
	struct UMistContainerWithPreviewWidget* CargoContainerWidget; // 0x2e0(0x08)
	struct TMap<enum class ESparePartsTier, struct UMistUIWidget*> TierOverlays; // 0x2e8(0x50)
	struct AMistWalker* BoundWalker; // 0x338(0x08)

	struct UWidget* HandleNavToWater(enum class EUINavigation Nav); // Function Mist.MistWalkerDetailInventoryWidget.HandleNavToWater // (Final|Native|Private|BlueprintCallable) // @ game+0x11d6940
	struct UWidget* HandleNavToTorque(enum class EUINavigation Nav); // Function Mist.MistWalkerDetailInventoryWidget.HandleNavToTorque // (Final|Native|Private|BlueprintCallable) // @ game+0x11d68b0
	struct UWidget* HandleNavToHatch(enum class EUINavigation Nav); // Function Mist.MistWalkerDetailInventoryWidget.HandleNavToHatch // (Final|Native|Private|BlueprintCallable) // @ game+0x11d6790
	struct UWidget* HandleNavToCargo(enum class EUINavigation Nav); // Function Mist.MistWalkerDetailInventoryWidget.HandleNavToCargo // (Final|Native|Private|BlueprintCallable) // @ game+0x11d6700
};

// Class Mist.MistWalkerDetailUpgradeWidget
// Size: 0x2f0 (Inherited: 0x2c0)
struct UMistWalkerDetailUpgradeWidget : UMistUIWidget {
	struct UMistBaseButtonWidget* UpgradeButton; // 0x2c0(0x08)
	struct UTextBlock* CraftingSkillLevelText; // 0x2c8(0x08)
	struct UWidget* RequirementsArea; // 0x2d0(0x08)
	struct UTextBlock* MissingInputWidget; // 0x2d8(0x08)
	struct UScrollBox* InputListWidget; // 0x2e0(0x08)
	struct AMistWalker* BoundWalker; // 0x2e8(0x08)

	void HandleWalkerStageChanged(struct AMistWalker* InWalker); // Function Mist.MistWalkerDetailUpgradeWidget.HandleWalkerStageChanged // (Final|Native|Protected) // @ game+0x108b100
	void HandleUpgradeButtonClicked(); // Function Mist.MistWalkerDetailUpgradeWidget.HandleUpgradeButtonClicked // (Final|Native|Protected) // @ game+0x11d6ab0
};

// Class Mist.MistWalkerDetailWidget
// Size: 0x320 (Inherited: 0x2c0)
struct UMistWalkerDetailWidget : UMistUIWidget {
	struct AMistWalker* Walker; // 0x2c0(0x08)
	struct UMistUITabControl* TabControl; // 0x2c8(0x08)
	struct UMistWalkerNameWidget* WalkerNameWidget; // 0x2d0(0x08)
	struct UTextBlock* SteeringLeverRequiredText; // 0x2d8(0x08)
	struct UCanvasPanel* SteeringLeverRequired; // 0x2e0(0x08)
	struct UGridPanel* ItemSlotPopupContainer; // 0x2e8(0x08)
	struct UMistWalkerDetailInventoryWidget* InventoryWidget; // 0x2f0(0x08)
	struct UMistWalkerDetailCraftingWidget* CraftingWidget; // 0x2f8(0x08)
	struct UMistStructureDetailCustomizationWidget* CustomizationWidget; // 0x300(0x08)
	struct UMistWalkerDetailUpgradeWidget* UpgradeWidget; // 0x308(0x08)
	char pad_310[0x10]; // 0x310(0x10)

	void HandleWalkerNameCommitted(); // Function Mist.MistWalkerDetailWidget.HandleWalkerNameCommitted // (Final|Native|Public) // @ game+0x11d6af0
	void HandlePreventedModuleDestruction(struct UMistBoostItemTemplate* Module); // Function Mist.MistWalkerDetailWidget.HandlePreventedModuleDestruction // (Final|Native|Public) // @ game+0x11d69d0
};

// Class Mist.MistWalkerLegNettableComponent
// Size: 0x1b0 (Inherited: 0x1a8)
struct UMistWalkerLegNettableComponent : UMistNettableComponent {
	char pad_1A8[0x8]; // 0x1a8(0x08)
};

// Class Mist.MistWalkerMigrationPreferenceIndicatorButtonWidget
// Size: 0x4c0 (Inherited: 0x2e0)
struct UMistWalkerMigrationPreferenceIndicatorButtonWidget : UMistBaseButtonWidget {
	struct UImage* PreferredIconWidget; // 0x2e0(0x08)
	struct UWidgetAnimation* ChangingPreferenceAnimation; // 0x2e8(0x08)
	bool bUseLightBrush; // 0x2f0(0x01)
	char pad_2F1[0x7]; // 0x2f1(0x07)
	struct FSlateBrush PreferredIconBrush; // 0x2f8(0x88)
	struct FSlateBrush NotPreferredIconDarkBrush; // 0x380(0x88)
	struct FSlateBrush NotPreferredIconLightBrush; // 0x408(0x88)
	struct UMistWalkerMigrationPreferencesWidgetSettings* Settings; // 0x490(0x08)
	struct UMistWalkerMigrationPreferencesData* Data; // 0x498(0x08)
	struct UMistWalkerMigrationPreferenceData* DataItem; // 0x4a0(0x08)
	char pad_4A8[0x8]; // 0x4a8(0x08)
	struct UMistActionHintToolTipWidget* ActionHintToolTipWidget; // 0x4b0(0x08)
	struct UMistWalkerMigrationPreferencesWidgetSettings* SettingsAsset; // 0x4b8(0x08)
};

// Class Mist.MistWalkerMigrationPreferencesNotPreferredWalkerItemWidget
// Size: 0x310 (Inherited: 0x2c0)
struct UMistWalkerMigrationPreferencesNotPreferredWalkerItemWidget : UMistUIWidget {
	char pad_2C0[0x8]; // 0x2c0(0x08)
	struct UTextBlock* WalkerNameWidget; // 0x2c8(0x08)
	struct UTextBlock* WalkerTypeNameWidget; // 0x2d0(0x08)
	struct UImage* WalkerIconWidget; // 0x2d8(0x08)
	struct UTextBlock* RealmTileNameWidget; // 0x2e0(0x08)
	struct UMistBaseButtonWidget* ButtonWidget; // 0x2e8(0x08)
	struct UMistWalkerMigrationPreferencesWidgetSettings* Settings; // 0x2f0(0x08)
	struct UMistWalkerMigrationPreferenceData* Data; // 0x2f8(0x08)
	struct UMistWalkerMigrationPreferencesWidgetSettings* SettingsAsset; // 0x300(0x08)
	struct UMistActionHintToolTipWidget* ActionHintToolTipWidget; // 0x308(0x08)
};

// Class Mist.MistWalkerMigrationPreferencesNotPreferredWalkersWidget
// Size: 0x330 (Inherited: 0x2c0)
struct UMistWalkerMigrationPreferencesNotPreferredWalkersWidget : UMistUIWidget {
	struct UPanelWidget* ContentPanelWidget; // 0x2c0(0x08)
	struct UMistDataLoadingIndicatorWidget* LoadingIndicatorWidget; // 0x2c8(0x08)
	struct UTextBlock* HeaderTextWidget; // 0x2d0(0x08)
	struct UListView* ListWidget; // 0x2d8(0x08)
	struct UEditableTextBox* FilterInputWidget; // 0x2e0(0x08)
	struct FText HeaderText; // 0x2e8(0x18)
	struct UMistWalkerMigrationPreferencesData* Data; // 0x300(0x08)
	struct TArray<struct UMistWalkerMigrationPreferenceData*> FilteredItems; // 0x308(0x10)
	char pad_318[0x18]; // 0x318(0x18)

	struct UWidget* HandleNavToNotPreferred(enum class EUINavigation Nav); // Function Mist.MistWalkerMigrationPreferencesNotPreferredWalkersWidget.HandleNavToNotPreferred // (Final|Native|Public|BlueprintCallable) // @ game+0x11d9fd0
	void HandleFilterInputChanged(struct FText& Text); // Function Mist.MistWalkerMigrationPreferencesNotPreferredWalkersWidget.HandleFilterInputChanged // (Final|Native|Private|HasOutParms) // @ game+0x11d9f00
};

// Class Mist.MistWalkerMigrationPreferencesPreferredWalkerItemWidget
// Size: 0x318 (Inherited: 0x2c0)
struct UMistWalkerMigrationPreferencesPreferredWalkerItemWidget : UMistUIWidget {
	struct UTextBlock* WalkerNameWidget; // 0x2c0(0x08)
	struct UTextBlock* WalkerTypeNameWidget; // 0x2c8(0x08)
	struct UImage* WalkerIconWidget; // 0x2d0(0x08)
	struct UTextBlock* RealmTileNameWidget; // 0x2d8(0x08)
	struct UPanelWidget* NoRealmTileWidget; // 0x2e0(0x08)
	struct UTextBlock* NoRealmTileTextWidget; // 0x2e8(0x08)
	struct UMistBaseButtonWidget* ButtonWidget; // 0x2f0(0x08)
	struct UMistWalkerMigrationPreferencesWidgetSettings* Settings; // 0x2f8(0x08)
	struct UMistWalkerMigrationPreferenceData* Data; // 0x300(0x08)
	struct UMistWalkerMigrationPreferencesWidgetSettings* SettingsAsset; // 0x308(0x08)
	struct UMistActionHintToolTipWidget* ActionHintToolTipWidget; // 0x310(0x08)
};

// Class Mist.MistWalkerMigrationPreferencesPreferredWalkersWidget
// Size: 0x308 (Inherited: 0x2c0)
struct UMistWalkerMigrationPreferencesPreferredWalkersWidget : UMistUIWidget {
	struct UPanelWidget* EmptyPanelWidget; // 0x2c0(0x08)
	struct UPanelWidget* ListPanelWidget; // 0x2c8(0x08)
	struct UVerticalBox* ListWidget; // 0x2d0(0x08)
	struct UScrollBox* ListScroll; // 0x2d8(0x08)
	struct UMistWalkerMigrationPreferencesData* Data; // 0x2e0(0x08)
	struct TArray<struct UMistWalkerMigrationPreferenceData*> FilteredItems; // 0x2e8(0x10)
	struct UMistWalkerMigrationPreferenceData* CurrentWalkerToFocus; // 0x2f8(0x08)
	char pad_300[0x8]; // 0x300(0x08)
};

// Class Mist.MistWalkerMigrationPreferencesWidgetSettings
// Size: 0xf0 (Inherited: 0x30)
struct UMistWalkerMigrationPreferencesWidgetSettings : UDataAsset {
	struct FText PreferredToolTipText; // 0x30(0x18)
	struct FText PreferredWithUnknownLocationToolTipText; // 0x48(0x18)
	struct FText NotPreferredToolTipText; // 0x60(0x18)
	struct FText SetPreferenceToolTipActionHintText; // 0x78(0x18)
	struct FText DeletePreferenceToolTipActionHintText; // 0x90(0x18)
	struct FText ChangingPreferenceToolTipProgressText; // 0xa8(0x18)
	struct FText NoPermissionToolTipErrorText; // 0xc0(0x18)
	struct FText NoSpotsLeftToolTipErrorText; // 0xd8(0x18)
};

// Class Mist.MistWalkerModule
// Size: 0x28 (Inherited: 0x28)
struct UMistWalkerModule : UInterface {
};

// Class Mist.MistWalkerNameWidget
// Size: 0x350 (Inherited: 0x2c0)
struct UMistWalkerNameWidget : UMistUIWidget {
	char pad_2C0[0x18]; // 0x2c0(0x18)
	struct UImage* WalkerIcon; // 0x2d8(0x08)
	struct UTextBlock* WalkerStageText; // 0x2e0(0x08)
	struct UPanelWidget* WalkerNamePanelWidget; // 0x2e8(0x08)
	struct UTextBlock* WalkerNameTextWidget; // 0x2f0(0x08)
	struct UTextBlock* WalkerTypeTextWidget; // 0x2f8(0x08)
	struct UPanelWidget* WalkerNameInputPanelWidget; // 0x300(0x08)
	struct UEditableTextBox* WalkerNameInputWidget; // 0x308(0x08)
	struct UMistBaseButtonWidget* EditWalkerNameButtonWidget; // 0x310(0x08)
	struct FText WalkerNameTooLongError; // 0x318(0x18)
	char pad_330[0x8]; // 0x330(0x08)
	struct AMistWalker* BoundWalker; // 0x338(0x08)
	char pad_340[0x10]; // 0x340(0x10)

	void HandleWalkerNameInputCommitted(struct FText& Text, enum class ETextCommit CommitMethod); // Function Mist.MistWalkerNameWidget.HandleWalkerNameInputCommitted // (Final|Native|Private|HasOutParms) // @ game+0x11da5d0
	void HandleWalkerNameInputChanged(struct FText& Text); // Function Mist.MistWalkerNameWidget.HandleWalkerNameInputChanged // (Final|Native|Private|HasOutParms) // @ game+0x11da500
};

// Class Mist.MistWalkerPackingQuest
// Size: 0x130 (Inherited: 0x110)
struct UMistWalkerPackingQuest : UMistTutorialQuest {
	struct UMistPlaceableTemplate* WalkerPackerPlaceable; // 0x110(0x08)
	struct FName BuildPackerTaskName; // 0x118(0x08)
	struct FName PackWalkerTaskName; // 0x120(0x08)
	struct FName UnpackWalkerTaskName; // 0x128(0x08)

	void ItemBuilt(struct UMistPlaceableTemplate* InPlaceableTemplate, struct AActor* PlacedActor); // Function Mist.MistWalkerPackingQuest.ItemBuilt // (Final|Native|Private) // @ game+0x11da7f0
};

// Class Mist.MistWalkerPartPlaceableTemplate
// Size: 0x1e0 (Inherited: 0x1c8)
struct UMistWalkerPartPlaceableTemplate : UMistPlaceableTemplate {
	struct TArray<struct UMistPlaceableTemplate*> PlaceableTemplates; // 0x1c8(0x10)
	enum class EMistWalkerPartAttachmentType AttachmentType; // 0x1d8(0x01)
	char pad_1D9[0x7]; // 0x1d9(0x07)
};

// Class Mist.MistWalkerPartSocketComponent
// Size: 0x830 (Inherited: 0x7e0)
struct UMistWalkerPartSocketComponent : USphereComponent {
	char pad_7E0[0x10]; // 0x7e0(0x10)
	struct FMistInteractableProperties InteractableProperties; // 0x7f0(0x14)
	char pad_804[0x4]; // 0x804(0x04)
	struct TArray<struct UMistPlaceableTemplate*> SupportedConstructionsArray; // 0x808(0x10)
	enum class EMistWalkerPartAttachmentType AttachmentType; // 0x818(0x01)
	enum class EMistWalkerPartAttachmentSide AttachmentSide; // 0x819(0x01)
	bool bCreateDefaultOnConstruction; // 0x81a(0x01)
	char pad_81B[0x5]; // 0x81b(0x05)
	struct AActor* DefaultActorOnConstruction; // 0x820(0x08)
	struct UMistPlaceableTemplate* DefaultHologramOnConstruction; // 0x828(0x08)

	void SpawnDefaultHologram(); // Function Mist.MistWalkerPartSocketComponent.SpawnDefaultHologram // (Final|Native|Public) // @ game+0x11daa50
	struct AActor* SpawnDefaultActor(); // Function Mist.MistWalkerPartSocketComponent.SpawnDefaultActor // (Final|Native|Public) // @ game+0x11daa20
	void ConstructionFinished(struct AActor* NewActor, struct AActor* OldActor, struct AMistCharacter* FinishedBy); // Function Mist.MistWalkerPartSocketComponent.ConstructionFinished // (Final|Native|Public) // @ game+0x11d9d50
};

// Class Mist.MistWalkerSettings
// Size: 0x70 (Inherited: 0x38)
struct UMistWalkerSettings : UMistSettingsObject {
	struct TSoftObjectPtr<UTexture2D> DefaultIcon; // 0x38(0x28)
	float AutoLogoutPeriod; // 0x60(0x04)
	float LogoutEnemyWalkerPeriod; // 0x64(0x04)
	float WalkerUpgradeCostMulti; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Mist.MistWalkerTorqueGeneratorComponent
// Size: 0x108 (Inherited: 0xf0)
struct UMistWalkerTorqueGeneratorComponent : UActorComponent {
	char pad_F0[0x8]; // 0xf0(0x08)
	struct AActor* CompareTorqueWith; // 0xf8(0x08)
	float Torque; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class Mist.MistWalkerSprintTorqueComponent
// Size: 0x128 (Inherited: 0x108)
struct UMistWalkerSprintTorqueComponent : UMistWalkerTorqueGeneratorComponent {
	float TorqueCostPerSecond; // 0x108(0x04)
	float TorqueStartCost; // 0x10c(0x04)
	float OperatingPower; // 0x110(0x04)
	float RpmIncreasePercentage; // 0x114(0x04)
	float AbsoluteRpmIncrease; // 0x118(0x04)
	float LeftoverTorque; // 0x11c(0x04)
	struct UMistTorqueContainerComponent* TorqueContainer; // 0x120(0x08)

	void OnRep_OperatingPower(); // Function Mist.MistWalkerSprintTorqueComponent.OnRep_OperatingPower // (Final|Native|Private) // @ game+0x11da950
	void BroadcastSetOperatingPower(float InValue); // Function Mist.MistWalkerSprintTorqueComponent.BroadcastSetOperatingPower // (Final|Net|NetReliableNative|Event|Private) // @ game+0x10d5640
};

// Class Mist.MistWalkerStationScreen
// Size: 0x3e8 (Inherited: 0x3a0)
struct UMistWalkerStationScreen : UMistUIScreen {
	struct UMistWalkerStationSkillItemWidget* SkillWidgetClass; // 0x3a0(0x08)
	struct UButton* UpgradeButtonWidget; // 0x3a8(0x08)
	struct UScrollBox* WalkerSkillsScrollWidget; // 0x3b0(0x08)
	struct UTextBlock* WalkerNameTextWidget; // 0x3b8(0x08)
	struct UTextBlock* WalkerTypeTextWidget; // 0x3c0(0x08)
	struct UTextBlock* WalkerStageTextWidget; // 0x3c8(0x08)
	struct UTextBlock* WalkerUpgradePriceTextWidget; // 0x3d0(0x08)
	struct UMistTradeStationComponent* TradeStationComponent; // 0x3d8(0x08)
	struct AMistWalker* Walker; // 0x3e0(0x08)

	void HandleWalkerStageChanged(struct AMistWalker* InWalker); // Function Mist.MistWalkerStationScreen.HandleWalkerStageChanged // (Final|Native|Private) // @ game+0x11da770
	void HandleWalkerSkillLevelsChanged(struct AMistOasisPlayerState* InSender); // Function Mist.MistWalkerStationScreen.HandleWalkerSkillLevelsChanged // (Final|Native|Private) // @ game+0x11da6f0
	void HandleUpgradeButtonClicked(); // Function Mist.MistWalkerStationScreen.HandleUpgradeButtonClicked // (Final|Native|Private) // @ game+0x11da4c0
	void HandleMoneyUpdated(struct AMistOasisPlayerState* InSender, uint64_t InMoney); // Function Mist.MistWalkerStationScreen.HandleMoneyUpdated // (Final|Native|Private) // @ game+0x115e370
};

// Class Mist.MistWalkerStationSkillItemWidget
// Size: 0x2f8 (Inherited: 0x2c0)
struct UMistWalkerStationSkillItemWidget : UMistUIWidget {
	struct UTextBlock* WalkerTypeTextWidget; // 0x2c0(0x08)
	struct UTextBlock* CurrentLevelTextWidget; // 0x2c8(0x08)
	struct UTextBlock* UpgradePriceTextWidget; // 0x2d0(0x08)
	struct UButton* UpgradeButtonWidget; // 0x2d8(0x08)
	struct UMistWalkerStationScreen* Screen; // 0x2e0(0x08)
	struct AMistPlayer* Player; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	void HandleUpgradeButtonClicked(); // Function Mist.MistWalkerStationSkillItemWidget.HandleUpgradeButtonClicked // (Final|Native|Private) // @ game+0x11da4e0
};

// Class Mist.MistWalkerWaterContainerComponent
// Size: 0x2e0 (Inherited: 0x2e0)
struct UMistWalkerWaterContainerComponent : UMistContainerComponent {
};

// Class Mist.MistWalkerWingNettableComponent
// Size: 0x1a8 (Inherited: 0x1a8)
struct UMistWalkerWingNettableComponent : UMistNettableComponent {

	void HandleNetRemoved(); // Function Mist.MistWalkerWingNettableComponent.HandleNetRemoved // (Final|Native|Private) // @ game+0x11de4c0
	void HandleNetAttached(); // Function Mist.MistWalkerWingNettableComponent.HandleNetAttached // (Final|Native|Private) // @ game+0x11de4a0
};

// Class Mist.MistWalkingQuest
// Size: 0x128 (Inherited: 0x110)
struct UMistWalkingQuest : UMistTutorialQuest {
	struct FName LeaveTaskName; // 0x110(0x08)
	struct FName WaterTaskName; // 0x118(0x08)
	struct UMistItemTemplate* WaterTemplate; // 0x120(0x08)

	void ContainerUpdate(struct UMistContainerComponent* OpenedContainer, int32_t Count, struct UMistItemTemplate* ItemTemplate); // Function Mist.MistWalkingQuest.ContainerUpdate // (Final|Native|Protected|Const) // @ game+0x115df60
	void ContainerOpened(); // Function Mist.MistWalkingQuest.ContainerOpened // (Final|Native|Protected) // @ game+0x10968b0
	void ContainerClosed(); // Function Mist.MistWalkingQuest.ContainerClosed // (Final|Native|Protected) // @ game+0x115df20
};

// Class Mist.MistWanderingBehaviorHandler
// Size: 0x30 (Inherited: 0x30)
struct UMistWanderingBehaviorHandler : UMistAiBehaviorHandler {
};

// Class Mist.MistWatermarkScreen
// Size: 0x3c0 (Inherited: 0x3a0)
struct UMistWatermarkScreen : UMistUIScreen {
	struct UTextBlock* VersionTextWidget; // 0x3a0(0x08)
	struct UTextBlock* PlayerNameTextWidget; // 0x3a8(0x08)
	struct UTextBlock* PlayerLocationTextWidget; // 0x3b0(0x08)
	char pad_3B8[0x8]; // 0x3b8(0x08)
};

// Class Mist.MistWaypoint
// Size: 0x3f0 (Inherited: 0x3c0)
struct AMistWaypoint : AActor {
	struct UStaticMeshComponent* MeshComponent; // 0x3c0(0x08)
	struct UMistClanOwnershipComponent* ClanOwnershipComponent; // 0x3c8(0x08)
	struct UMistTextWidgetComponent* NameTextComponent; // 0x3d0(0x08)
	struct FString Designation; // 0x3d8(0x10)
	struct FColor Color; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)

	void OnRep_Designation(); // Function Mist.MistWaypoint.OnRep_Designation // (Final|Native|Private) // @ game+0x11de840
	void OnRep_Color(); // Function Mist.MistWaypoint.OnRep_Color // (Final|Native|Private) // @ game+0x11de780
};

// Class Mist.MistWeaponCarryType
// Size: 0xd0 (Inherited: 0x30)
struct UMistWeaponCarryType : UDataAsset {
	struct FMistCarryInfo RightCarry; // 0x30(0x50)
	struct FMistCarryInfo LeftCarry; // 0x80(0x50)
};

// Class Mist.MistWeaponItemDetailsWidget
// Size: 0x3e0 (Inherited: 0x2e0)
struct UMistWeaponItemDetailsWidget : UMistItemDetailsWidget {
	struct UWidget* DamageBoxWidget; // 0x2e0(0x08)
	struct UTextBlock* DamageWidget; // 0x2e8(0x08)
	struct UMistDamageTypeWidget* DamageTypeWidget; // 0x2f0(0x08)
	struct UTextBlock* HandWidget; // 0x2f8(0x08)
	struct UWidget* ToolBoxWidget; // 0x300(0x08)
	struct UImage* ToolIconWidget; // 0x308(0x08)
	struct UTextBlock* ToolTierWidget; // 0x310(0x08)
	struct UWidget* PenetrationBoxWidget; // 0x318(0x08)
	struct UTextBlock* PenetrationWidget; // 0x320(0x08)
	struct UWidget* EffectivenessVsSoakBoxWidget; // 0x328(0x08)
	struct UTextBlock* EffectivenessVsSoakWidget; // 0x330(0x08)
	struct UWidget* EffectivenessVsReduceBoxWidget; // 0x338(0x08)
	struct UTextBlock* EffectivenessVsReduceWidget; // 0x340(0x08)
	struct UWidget* WeaponSpeedBoxWidget; // 0x348(0x08)
	struct UTextBlock* WeaponSpeedWidget; // 0x350(0x08)
	struct UWidget* WeaponLengthBoxWidget; // 0x358(0x08)
	struct UTextBlock* WeaponLengthWidget; // 0x360(0x08)
	struct UWidget* WeaponImpactBoxWidget; // 0x368(0x08)
	struct UTextBlock* WeaponImpactWidget; // 0x370(0x08)
	struct UWidget* WeaponStabilityBoxWidget; // 0x378(0x08)
	struct UTextBlock* WeaponStabilityWidget; // 0x380(0x08)
	struct UMistMaterialProtectionWidget* MaterialProtectionWidget; // 0x388(0x08)
	struct TMap<enum class EEquipmentTool, struct UTexture2D*> ToolIcons; // 0x390(0x50)
};

// Class Mist.MistWeaponQuest
// Size: 0x120 (Inherited: 0x110)
struct UMistWeaponQuest : UMistTutorialQuest {
	struct TArray<struct FHitTargetStruct> TargetToHit; // 0x110(0x10)

	void OnTreeHit(int32_t Count); // Function Mist.MistWeaponQuest.OnTreeHit // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void HitDealt(struct FMeleeHitInfo HitInfo); // Function Mist.MistWeaponQuest.HitDealt // (Final|Native|Private) // @ game+0x11de500
};

// Class Mist.MistWeatherContainer
// Size: 0x78 (Inherited: 0x30)
struct UMistWeatherContainer : UDataAsset {
	bool bScaleTime; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float TimeScale; // 0x34(0x04)
	float TransitionScale; // 0x38(0x04)
	float DurationScale; // 0x3c(0x04)
	struct TArray<struct FMistWeatherType> WeatherTypes; // 0x40(0x10)
	float StartAngle; // 0x50(0x04)
	float StopAngle; // 0x54(0x04)
	float TraverseTime; // 0x58(0x04)
	float InvisibleTime; // 0x5c(0x04)
	float EclipseAngle; // 0x60(0x04)
	float EclipseTime; // 0x64(0x04)
	float UpdateFrequency; // 0x68(0x04)
	float EclipseFrequency; // 0x6c(0x04)
	float AngleRandMin; // 0x70(0x04)
	float AngleRandMax; // 0x74(0x04)
};

// Class Mist.MistWeatherEffect
// Size: 0x40 (Inherited: 0x28)
struct UMistWeatherEffect : UObject {
	float EffectAlpha; // 0x28(0x04)
	float RemainingTime; // 0x2c(0x04)
	struct UMistSpawnParticleComponent* OwningParticleSpawnComponent; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)

	void UpdateEffect(); // Function Mist.MistWeatherEffect.UpdateEffect // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void EndEffect(); // Function Mist.MistWeatherEffect.EndEffect // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
	void BeginEffect(); // Function Mist.MistWeatherEffect.BeginEffect // (Event|Protected|BlueprintEvent) // @ game+0x163f1c0
};

// Class Mist.MistWeatherSystem
// Size: 0x560 (Inherited: 0x3c0)
struct AMistWeatherSystem : AActor {
	struct FMulticastInlineDelegate OnEclipseProgressUpdated; // 0x3c0(0x10)
	struct FMulticastInlineDelegate OnEclipseStarted; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnEclipseStopped; // 0x3e0(0x10)
	struct UMistWeatherContainer* WeatherConteiner; // 0x3f0(0x08)
	bool bUseWeatherSystem; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	int32_t MapArraySize; // 0x3fc(0x04)
	struct AMistSceneManager* SceneManager; // 0x400(0x08)
	struct TArray<struct FMistPresetData> CurrentPresets; // 0x408(0x10)
	float MinWindValue; // 0x418(0x04)
	float MaxWindValue; // 0x41c(0x04)
	float MinWindChangeAngle; // 0x420(0x04)
	float MaxWindChangeAngle; // 0x424(0x04)
	float LimitWindAngleBetweenRegions; // 0x428(0x04)
	float MinWetnessValue; // 0x42c(0x04)
	float MaxWetnessValue; // 0x430(0x04)
	float MinHeatValue; // 0x434(0x04)
	float MaxHeatValue; // 0x438(0x04)
	bool bDebugEnabled; // 0x43c(0x01)
	char pad_43D[0x3]; // 0x43d(0x03)
	float DebugScale; // 0x440(0x04)
	float DebugBaseHeight; // 0x444(0x04)
	float DebugArrowsArrowSize; // 0x448(0x04)
	float DebugArrowsThickness; // 0x44c(0x04)
	struct FColor DebugArrowsWindColor; // 0x450(0x04)
	struct FColor DebugArrowsWetnessColor; // 0x454(0x04)
	struct FColor DebugArrowsHeatColor; // 0x458(0x04)
	char pad_45C[0x4]; // 0x45c(0x04)
	struct ADirectionalLight* SunActor; // 0x460(0x08)
	struct AMistDynamicSky* DynamicSkyActor; // 0x468(0x08)
	struct FRotator CurrentRotation; // 0x470(0x0c)
	float CurrentEclipseProgress; // 0x47c(0x04)
	uint32_t RandomSeed; // 0x480(0x04)
	int32_t CurrentWeatherTypeIndex; // 0x484(0x04)
	float ServerWeatherChangeTime; // 0x488(0x04)
	char pad_48C[0x4]; // 0x48c(0x04)
	struct UMistWeatherTypeData* CurrentWeatherType; // 0x490(0x08)
	struct UMistWeatherTypeData* NextWeatherType; // 0x498(0x08)
	char pad_4A0[0xc0]; // 0x4a0(0xc0)

	void UpdateMovement(); // Function Mist.MistWeatherSystem.UpdateMovement // (Final|Native|Private) // @ game+0x11dea00
	void StopTraverse(); // Function Mist.MistWeatherSystem.StopTraverse // (Final|Native|Private) // @ game+0x11de9e0
	void StopEclipse(); // Function Mist.MistWeatherSystem.StopEclipse // (Final|Native|Private) // @ game+0x11de9c0
	void StartTraverse(); // Function Mist.MistWeatherSystem.StartTraverse // (Final|Native|Private) // @ game+0x11de9a0
	void StartEclipse(); // Function Mist.MistWeatherSystem.StartEclipse // (Final|Native|Private) // @ game+0x11de980
	void ReceiveEclipseProgressUpdate(float EclipseProgress); // Function Mist.MistWeatherSystem.ReceiveEclipseProgressUpdate // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_MoonRotation(); // Function Mist.MistWeatherSystem.OnRep_MoonRotation // (Final|Native|Private) // @ game+0x11de860
	void OnRep_CurrentWeatherTypeIndex(); // Function Mist.MistWeatherSystem.OnRep_CurrentWeatherTypeIndex // (Final|Native|Private) // @ game+0x11de820
	void OnRep_CurrentEclipseProgress(float PrevEclipseProgress); // Function Mist.MistWeatherSystem.OnRep_CurrentEclipseProgress // (Final|Native|Private) // @ game+0x11de7a0
	void MistEclipseStopped__DelegateSignature(); // DelegateFunction Mist.MistWeatherSystem.MistEclipseStopped__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MistEclipseStarted__DelegateSignature(); // DelegateFunction Mist.MistWeatherSystem.MistEclipseStarted__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	void MistEclipseProgressUpdated__DelegateSignature(float EclipseProgress); // DelegateFunction Mist.MistWeatherSystem.MistEclipseProgressUpdated__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x163f1c0
	struct UMistWeatherContainer* GetWeatherContainer(); // Function Mist.MistWeatherSystem.GetWeatherContainer // (Final|Native|Private|BlueprintCallable|BlueprintPure) // @ game+0x70dc00
	float GetEclipseProgress(); // Function Mist.MistWeatherSystem.GetEclipseProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11de0a0
	int32_t GetCurrentWeatherTypeIndex(); // Function Mist.MistWeatherSystem.GetCurrentWeatherTypeIndex // (Final|Native|Private|BlueprintCallable|BlueprintPure) // @ game+0x11ddfc0
};

// Class Mist.MistWeightInterface
// Size: 0x28 (Inherited: 0x28)
struct UMistWeightInterface : UInterface {
};

// Class Mist.MistWeightMapCacheComponent
// Size: 0x258 (Inherited: 0xf0)
struct UMistWeightMapCacheComponent : UActorComponent {
	struct TArray<struct FName> BiomeLayerNames; // 0xf0(0x10)
	struct TArray<struct FName> GroundLayerNames; // 0x100(0x10)
	struct TArray<struct FName> RegionLayerNames; // 0x110(0x10)
	float CellLength; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct TMap<struct FName, char> LayersIndices; // 0x128(0x50)
	struct TArray<struct FName> LayerByIndex; // 0x178(0x10)
	struct TArray<struct FWeightMapPointInfo> WeightmapData; // 0x188(0x10)
	struct TMap<struct FName, enum class EMistClimateType> ClimateLayers; // 0x198(0x50)
	struct TMap<struct FName, struct UVirtualLandscapeLayer*> LandscapeLayers; // 0x1e8(0x50)
	float SavedLength; // 0x238(0x04)
	float SavedPoints; // 0x23c(0x04)
	int32_t CountX; // 0x240(0x04)
	int32_t CountY; // 0x244(0x04)
	struct FVector2D MinCorner; // 0x248(0x08)
	struct FVector2D MaxCorner; // 0x250(0x08)

	void UpdateWeightmaps(); // Function Mist.MistWeightMapCacheComponent.UpdateWeightmaps // (Final|Native|Public|BlueprintCallable) // @ game+0x10968b0
	bool GetLayerWeightsAtLocation(struct FVector& Location, struct TArray<struct FName>& Names, struct TArray<float>& Weights); // Function Mist.MistWeightMapCacheComponent.GetLayerWeightsAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11de230
	void GetGroundLayersAtLocation(struct FVector& Location, struct TArray<struct FName>& OutNames, struct TArray<float>& Weights); // Function Mist.MistWeightMapCacheComponent.GetGroundLayersAtLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x11de0c0
	struct UVirtualLandscapeLayer* GetDominantLandscapeLayer(struct FVector& Location); // Function Mist.MistWeightMapCacheComponent.GetDominantLandscapeLayer // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11ddff0
	void GetClimateTypesInRadius(struct FVector& Location, struct TArray<enum class EMistClimateType>& OutClimates, int32_t PointsNumber, float Distance); // Function Mist.MistWeightMapCacheComponent.GetClimateTypesInRadius // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11dde30
	void GetBiomeLayersInRadius(struct FVector& Location, struct TArray<struct FName>& OutNames, int32_t PointsNumber, float Distance); // Function Mist.MistWeightMapCacheComponent.GetBiomeLayersInRadius // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x11ddca0
	void ClearWeightmaps(); // Function Mist.MistWeightMapCacheComponent.ClearWeightmaps // (Final|Native|Public|BlueprintCallable) // @ game+0x11ddbc0
};

// Class Mist.MistWeightStatusWidget
// Size: 0x328 (Inherited: 0x2e0)
struct UMistWeightStatusWidget : UMistHUDWidget {
	struct UImage* IconWidget; // 0x2e0(0x08)
	struct FLinearColor LowThresholdColor; // 0x2e8(0x10)
	struct FLinearColor HighThresholdColor; // 0x2f8(0x10)
	struct FLinearColor OverHighThresholdColor; // 0x308(0x10)
	char pad_318[0x10]; // 0x318(0x10)

	void OnWeightLowTresholdOnce(); // Function Mist.MistWeightStatusWidget.OnWeightLowTresholdOnce // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWeightLowTreshold(); // Function Mist.MistWeightStatusWidget.OnWeightLowTreshold // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWeightHighTreshold(); // Function Mist.MistWeightStatusWidget.OnWeightHighTreshold // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void HandleWeightChanged(); // Function Mist.MistWeightStatusWidget.HandleWeightChanged // (Final|Native|Private) // @ game+0x11de4e0
};

// Class Mist.MistWingsQuest
// Size: 0x130 (Inherited: 0x110)
struct UMistWingsQuest : UMistTutorialQuest {
	struct TArray<struct AMistWalkerWing*> WalkerWingToBuild; // 0x110(0x10)
	struct FName WalkerWingToBuildTaskName; // 0x120(0x08)
	struct FName WalkerToMannTaskName; // 0x128(0x08)

	void MannWalker(struct AMistCharacter* Character, struct UMistMannedControlComponent* MannedComponent); // Function Mist.MistWingsQuest.MannWalker // (Final|Native|Private) // @ game+0x11de6c0
	void Finished(struct UMistConstructionSiteComponent* Component, struct AActor* ConstructionActor); // Function Mist.MistWingsQuest.Finished // (Final|Native|Private|Const) // @ game+0x11ddbe0
};

// Class Mist.MistWingsuitComponent
// Size: 0x1b8 (Inherited: 0x128)
struct UMistWingsuitComponent : UMistPlayerEquipmentItemComponent {
	enum class EMistWingsuitState State; // 0x128(0x01)
	char pad_129[0x3]; // 0x129(0x03)
	float StateSwitchCooldown; // 0x12c(0x04)
	float FlightSpeed; // 0x130(0x04)
	float WingSpan; // 0x134(0x04)
	float WingChord; // 0x138(0x04)
	float ZeroLiftDragCoef; // 0x13c(0x04)
	float EfficiencyFactor; // 0x140(0x04)
	char pad_144[0x4]; // 0x144(0x04)
	struct UCurveFloat* LiftCoefCurve; // 0x148(0x08)
	float PitchSensitivity; // 0x150(0x04)
	float RollSensitivity; // 0x154(0x04)
	bool bDebugMode; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct UCurveFloat* SpeedSteeringCurve; // 0x160(0x08)
	float RotationChangeSpeed; // 0x168(0x04)
	float StabilizationSpeed; // 0x16c(0x04)
	float DiveFactor; // 0x170(0x04)
	float RollFactor; // 0x174(0x04)
	struct FRotator TargetRotation; // 0x178(0x0c)
	char pad_184[0x34]; // 0x184(0x34)

	void ServerSetTargetRotation(struct FRotator InTargetRotation); // Function Mist.MistWingsuitComponent.ServerSetTargetRotation // (Final|Net|Native|Event|Private|NetServer|HasDefaults) // @ game+0x11de900
	void ServerOpen(); // Function Mist.MistWingsuitComponent.ServerOpen // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x111e930
	void ServerClose(); // Function Mist.MistWingsuitComponent.ServerClose // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x1108c30
	void ReceiveOpenWingsuit(); // Function Mist.MistWingsuitComponent.ReceiveOpenWingsuit // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void ReceiveCloseWingsuit(); // Function Mist.MistWingsuitComponent.ReceiveCloseWingsuit // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_State(enum class EMistWingsuitState PrevState); // Function Mist.MistWingsuitComponent.OnRep_State // (Final|Native|Private) // @ game+0x11de880
	void MulticastSetTargetRotation(struct FRotator InTargetRotation); // Function Mist.MistWingsuitComponent.MulticastSetTargetRotation // (Final|Net|Native|Event|NetMulticast|Private|HasDefaults) // @ game+0x113b370
	void MulticastOpen(); // Function Mist.MistWingsuitComponent.MulticastOpen // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10cccf0
	void MulticastClose(); // Function Mist.MistWingsuitComponent.MulticastClose // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x10c2490
	void HandleCharacterStateChanged(struct AMistCharacter* Character, enum class EMistCharacterState PrevState, enum class EMistCharacterState NewState); // Function Mist.MistWingsuitComponent.HandleCharacterStateChanged // (Final|Native|Private) // @ game+0x11de3a0
};

// Class Mist.MistWorldDataHolder
// Size: 0x4a0 (Inherited: 0x3c0)
struct AMistWorldDataHolder : AActor {
	char pad_3C0[0x28]; // 0x3c0(0x28)
	struct TSoftClassPtr<UObject> TravelSettings; // 0x3e8(0x28)
	struct UMistWeightMapCacheComponent* WeightMapComponent; // 0x410(0x08)
	struct UMistClaimManagerComponent* ClaimManagerComponent; // 0x418(0x08)
	struct UMistFoliageQualityManager* FoliageQualityManager; // 0x420(0x08)
	struct UMistTileFoliageParametersComponent* FoliageParametersComponent; // 0x428(0x08)
	struct UMistKnowledgeObjectsManager* KnowledgeObjectsManager; // 0x430(0x08)
	struct UMistPoiSpawnComponent* PoiSpawnComponent; // 0x438(0x08)
	struct UMistDormancyGridComponent* DormancyGridComponent; // 0x440(0x08)
	struct UMistPlayerGridComponent* PlayerGridComponent; // 0x448(0x08)
	struct UMistCharacterGridComponent* CharacterGridComponent; // 0x450(0x08)
	struct UMistStructureGridComponent* StructureGridComponent; // 0x458(0x08)
	struct UMistLiquidGridComponent* LiquidGridComponent; // 0x460(0x08)
	struct UMistSkeletalMeshGridComponent* SkeletalMeshGridComponent; // 0x468(0x08)
	struct UMistDeferredFoliageLoaderComponent* DeferredFoliageLoaderComponent; // 0x470(0x08)
	struct UMistMeshPoolComponent* HighlightMeshPoolComponent; // 0x478(0x08)
	struct UMistPlacementPreviewCacheComponent* PlacementCacheComponent; // 0x480(0x08)
	struct UMistGameStatisticsComponent* GameStatisticsComponent; // 0x488(0x08)
	struct UMistWorldEventsManager* WorldEventsManager; // 0x490(0x08)
	struct UMistMapTravelSettings* CachedTravelSettings; // 0x498(0x08)
};

// Class Mist.MistWorldEventsManager
// Size: 0x120 (Inherited: 0xf0)
struct UMistWorldEventsManager : UActorComponent {
	struct TSoftClassPtr<UObject> ProfileClass; // 0xf0(0x28)
	struct UMistWorldEventsProfile* ProfileInstance; // 0x118(0x08)

	void HandleAsteroidDestroyed(struct AActor* AsteroidActor); // Function Mist.MistWorldEventsManager.HandleAsteroidDestroyed // (Final|Native|Private) // @ game+0x11e2a30
};

// Class Mist.MistWorldEventsProfile
// Size: 0x70 (Inherited: 0x30)
struct UMistWorldEventsProfile : UPrimaryDataAsset {
	bool bEnableAsteroidEventSpawn; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	struct FFloatInterval AsteroidSpawnInterval; // 0x34(0x08)
	bool bUsePoiLocationForAsteroid; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct FName AsteroidSpawnGroup; // 0x40(0x08)
	struct TSoftClassPtr<UObject> AsteroidClass; // 0x48(0x28)
};

// Class Mist.MistWorldMap2Screen
// Size: 0x650 (Inherited: 0x418)
struct UMistWorldMap2Screen : UMistMap2Screen {
	struct UWidgetAnimation* ScreenSwitchAnim; // 0x418(0x08)
	struct UButton* ShowPlayerTileButtonWidget; // 0x420(0x08)
	struct UMistBaseButtonWidget* ShowMapMigrationButtonWidget; // 0x428(0x08)
	struct UButton* ShowLocalMapButtonWidget; // 0x430(0x08)
	struct UButton* ShowWorldMapButtonWidget; // 0x438(0x08)
	struct UMistBaseButtonWidget* RemoveStreamingOverlayButtonWidget; // 0x440(0x08)
	struct UWidget* StreamingOverlayWidget; // 0x448(0x08)
	struct FText ChangeRespawnTileActionHintText; // 0x450(0x18)
	struct FText ChangeRespawnTileActionConfirmText; // 0x468(0x18)
	struct FText ChangeRespawnTileOffMapActionHintText; // 0x480(0x18)
	struct FText ChangeRespawnTileOffMapActionConfirmText; // 0x498(0x18)
	struct FText ChangeRespawnTileActionErrorText; // 0x4b0(0x18)
	struct FText ChangeRespawnTileActionUseLocalMapErrorText; // 0x4c8(0x18)
	struct FText ChangeRespawnTileActionNotOasisErrorText; // 0x4e0(0x18)
	struct FText ChangeRespawnTileActionDifferentTypeOrDifficultyErrorText; // 0x4f8(0x18)
	struct FText ChangeRespawnTileActionOfflineErrorText; // 0x510(0x18)
	struct FText ChangeRespawnTileActionNoSpawnPointsErrorText; // 0x528(0x18)
	struct FText ChangeRespawnTileActionNoParkedWalkerErrorText; // 0x540(0x18)
	struct FText ChangeRespawnTileNotEnoughMoneyErrorText; // 0x558(0x18)
	struct FText ChangeRespawnTileCoolDownText; // 0x570(0x18)
	struct FText ChangeRespawnTileActionNoReturnWarningText; // 0x588(0x18)
	struct FText ChangeRespawnTileActionDifferentRegionWarningText; // 0x5a0(0x18)
	struct FText ChangeRespawnTileProcessingText; // 0x5b8(0x18)
	struct FText ChangeRespawnTileProcessingFailedText; // 0x5d0(0x18)
	struct TSoftObjectPtr<USoundBase> ConfirmedChangeRespawnTileActionSound; // 0x5e8(0x28)
	float ConfirmedChangeRespawnTileActionSoundFadeOut; // 0x610(0x04)
	char pad_614[0x4]; // 0x614(0x04)
	struct UMistWalkerMigrationPreferencesData* WalkerMigrationPreferencesData; // 0x618(0x08)
	struct UMistPlayerWorldTravelComponent* PlayerTravelComponent; // 0x620(0x08)
	char pad_628[0x20]; // 0x628(0x20)
	struct UMistStubActionsPanelWidget* StubActionsPanelWidget; // 0x648(0x08)

	void HandleShowPlayerTileButtonClicked(); // Function Mist.MistWorldMap2Screen.HandleShowPlayerTileButtonClicked // (Final|Native|Private) // @ game+0x11e2bb0
	void HandleShowLocalMapButtonClicked(); // Function Mist.MistWorldMap2Screen.HandleShowLocalMapButtonClicked // (Final|Native|Private) // @ game+0x11e2b90
};

// Class Mist.MistWorldMapQuest
// Size: 0x118 (Inherited: 0x110)
struct UMistWorldMapQuest : UMistTutorialQuest {
	struct FName MapOpenTaskName; // 0x110(0x08)

	void HandleScreenOpen(struct UMistUIManager* UIManager, struct UMistUIScreen* UIScreen); // Function Mist.MistWorldMapQuest.HandleScreenOpen // (Final|Native|Public) // @ game+0x11e2ab0
};

// Class Mist.MistWorldObjectAdjustmentsComponent
// Size: 0x118 (Inherited: 0xf0)
struct UMistWorldObjectAdjustmentsComponent : UActorComponent {
	bool bReplicateGroundAdjustments; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TArray<struct FMistComponentLocationEntry> AdjustedToGroundComponents; // 0xf8(0x10)
	struct TArray<struct FName> RemovedComponents; // 0x108(0x10)

	void OnRep_RemovedComponents(); // Function Mist.MistWorldObjectAdjustmentsComponent.OnRep_RemovedComponents // (Final|Native|Private) // @ game+0x11e2d00
	void OnRep_AdjustedToGroundComponents(); // Function Mist.MistWorldObjectAdjustmentsComponent.OnRep_AdjustedToGroundComponents // (Final|Native|Private) // @ game+0x11e2ce0
	void MulticastSetComponents(struct TArray<struct FMistComponentLocationEntry> InAdjustedToGroundComponents, struct TArray<struct FName> InRemovedComponents); // Function Mist.MistWorldObjectAdjustmentsComponent.MulticastSetComponents // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x11e2bd0
};

// Class Mist.MistWorldSettings
// Size: 0x540 (Inherited: 0x540)
struct AMistWorldSettings : AWorldSettings {
};

// Class Mist.MistWorldTravelBlueprintLibrary
// Size: 0x28 (Inherited: 0x28)
struct UMistWorldTravelBlueprintLibrary : UBlueprintFunctionLibrary {

	float GetTravelZoneThickness(struct UObject* WorldContextObject); // Function Mist.MistWorldTravelBlueprintLibrary.GetTravelZoneThickness // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11e29a0
	float GetInitiateTravelDistance(struct UObject* WorldContextObject); // Function Mist.MistWorldTravelBlueprintLibrary.GetInitiateTravelDistance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11e2910
	float GetExecuteTravelDistance(struct UObject* WorldContextObject); // Function Mist.MistWorldTravelBlueprintLibrary.GetExecuteTravelDistance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11e2880
	struct FMistCachedWorldTravelSettings GetCurrentWorldTravelSettings(struct UObject* WorldContextObject); // Function Mist.MistWorldTravelBlueprintLibrary.GetCurrentWorldTravelSettings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x11e27e0
	float GetCurrentWorldTravelDistanceLeft(struct UObject* WorldContextObject, bool& bIsInsideZone); // Function Mist.MistWorldTravelBlueprintLibrary.GetCurrentWorldTravelDistanceLeft // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x11e2710
};

// Class Mist.MistWorldTravelComponent
// Size: 0x2b0 (Inherited: 0xf0)
struct UMistWorldTravelComponent : UActorComponent {
	char pad_F0[0x18]; // 0xf0(0x18)
	struct TMap<struct FString, struct FMistDepartingWorldTravelParty> DepartingWorldTravelPartyQueue; // 0x108(0x50)
	struct TMap<int64_t, struct FMistOffMapTransferCharacter> OffMapTransferCharacterQueue; // 0x158(0x50)
	struct TMap<int64_t, struct FMistTransferCharacter> TransferCharacterQueue; // 0x1a8(0x50)
	struct TMap<struct FString, struct FMistArrivedWorldTravelParty> ArrivedWorldTravelPartyQueue; // 0x1f8(0x50)
	struct TMap<struct FString, struct UMistSafeLogOutWorldTravelParty*> SafeLogOutPartyQueue; // 0x248(0x50)
	struct AMistSpawnProtectionBubble* SafeSpawnActor; // 0x298(0x08)
	float ScaleMultiplier; // 0x2a0(0x04)
	float NormalSize; // 0x2a4(0x04)
	float SpawnProtectionBubbleExtraRadius; // 0x2a8(0x04)
	char pad_2AC[0x4]; // 0x2ac(0x04)
};

// Class Mist.MistWorldTravelHudCenterContentWidget
// Size: 0x2e8 (Inherited: 0x2c0)
struct UMistWorldTravelHudCenterContentWidget : UMistUIWidget {
	struct UMistHexagonWithBorderWidget* TileWidget; // 0x2c0(0x08)
	struct UImage* ErrorIconWidget; // 0x2c8(0x08)
	struct UWidgetAnimation* ShowErrorAnimation; // 0x2d0(0x08)
	struct UMistWorldTravelHudWidget* Parent; // 0x2d8(0x08)
	char pad_2E0[0x8]; // 0x2e0(0x08)
};

// Class Mist.MistWorldTravelHudWidget
// Size: 0x4d8 (Inherited: 0x2e0)
struct UMistWorldTravelHudWidget : UMistHUDWidget {
	struct UMistWorldTravelHudCenterContentWidget* CenterContentWidget; // 0x2e0(0x08)
	struct UMistInputBindingHintWidget* ExecuteTravelHint; // 0x2e8(0x08)
	struct UTextBlock* StatusTextWidget; // 0x2f0(0x08)
	struct UImage* BottomSeparatorWidget; // 0x2f8(0x08)
	struct UPanelWidget* ExecuteTravelPanelWidget; // 0x300(0x08)
	struct UWidgetAnimation* ShowAnimation; // 0x308(0x08)
	struct FText DistanceText; // 0x310(0x18)
	struct FText TravelNowInfrontTextPressing; // 0x328(0x18)
	struct FText TravelNowAfterTextPressing; // 0x340(0x18)
	struct FText TravelNowInfrontTextHolding; // 0x358(0x18)
	struct FText TravelNowAfterTextHolding; // 0x370(0x18)
	struct FText SafeLogOutTimeLeftText; // 0x388(0x18)
	struct FText OperationStateRequestText; // 0x3a0(0x18)
	struct FText OperationStateProcessText; // 0x3b8(0x18)
	struct FText OperationStateRecoverText; // 0x3d0(0x18)
	float ErrorDisplayDuration; // 0x3e8(0x04)
	char pad_3EC[0x4]; // 0x3ec(0x04)
	struct FSlateColor ErrorTextTintColor; // 0x3f0(0x28)
	struct FSlateColor ErrorTintColor; // 0x418(0x28)
	float GamePadHoldTime; // 0x440(0x04)
	char pad_444[0x4]; // 0x444(0x04)
	struct AMistOasisPlayerState* BoundPlayerState; // 0x448(0x08)
	struct AMistWorldTravelZonesManager* WorldTravelZonesManager; // 0x450(0x08)
	char pad_458[0x80]; // 0x458(0x80)

	void HandleShowAnimationFinished(); // Function Mist.MistWorldTravelHudWidget.HandleShowAnimationFinished // (Final|Native|Private) // @ game+0x11e2b70
};

// Class Mist.MistWorldTravelSettings
// Size: 0x70 (Inherited: 0x38)
struct UMistWorldTravelSettings : UMistSettingsObject {
	struct TArray<struct UMistLiquidItemTemplate*> WaterLiquids; // 0x38(0x10)
	struct FMistWorldTravelCharacterTransferSettings DefaultCharacterTransfer; // 0x48(0x08)
	struct FMistWorldTravelCharacterTransferSettings EventCharacterTransfer; // 0x50(0x08)
	struct FMistWorldTravelCharacterTransferSettings ProtectedCharacterTransfer; // 0x58(0x08)
	struct FMistWorldTravelCharacterTransferSettings ClanCharacterTransfer; // 0x60(0x08)
	float RedeployPenaltyDuration; // 0x68(0x04)
	char pad_6C[0x4]; // 0x6c(0x04)
};

// Class Mist.MistWorldTravelZone
// Size: 0x3e8 (Inherited: 0x3c0)
struct AMistWorldTravelZone : AActor {
	struct UMistWorldTravelZoneData* Data; // 0x3c0(0x08)
	struct UBoxComponent* BuildingCollisionComponent; // 0x3c8(0x08)
	struct UBoxComponent* TriggerComponent; // 0x3d0(0x08)
	struct TArray<struct AMistPlayer*> OverlappingPlayers; // 0x3d8(0x10)
};

// Class Mist.MistWorldTravelZoneData
// Size: 0x90 (Inherited: 0x28)
struct UMistWorldTravelZoneData : UObject {
	int32_t Direction; // 0x28(0x04)
	char pad_2C[0x64]; // 0x2c(0x64)
};

// Class Mist.MistWorldTravelZonesManager
// Size: 0x428 (Inherited: 0x3c0)
struct AMistWorldTravelZonesManager : AActor {
	struct UMistMapTravelSettings* Settings; // 0x3c0(0x08)
	struct FMistCachedWorldTravelSettings CachedSettingsData; // 0x3c8(0x28)
	struct TArray<struct AMistWorldTravelZone*> Zones; // 0x3f0(0x10)
	struct TArray<struct UMistWorldTravelZoneData*> ZonesData; // 0x400(0x10)
	struct UMistTravelZonesMapComponent* TravelZonesMapComponent; // 0x410(0x08)
	struct UParticleSystemComponent* BorderParticleSystemComponent; // 0x418(0x08)
	struct AMistSceneManager* SceneManager; // 0x420(0x08)
};

// Class Mist.MistWeatherTypeData
// Size: 0x100 (Inherited: 0x30)
struct UMistWeatherTypeData : UDataAsset {
	int32_t Priority; // 0x30(0x04)
	struct FMistWeatherTransitionSettingsData TransitionSettings; // 0x34(0x10)
	char pad_44[0x4]; // 0x44(0x04)
	struct FMistParticleData TransitionParticleSettings; // 0x48(0x80)
	struct TArray<struct FMistPresetData> Presets; // 0xc8(0x10)
	float WindGustDuration; // 0xd8(0x04)
	float WindGustDurationDeviation; // 0xdc(0x04)
	float WindGustSpeed; // 0xe0(0x04)
	float WindGustSpeedDeviation; // 0xe4(0x04)
	struct UCurveFloat* WindGustForce; // 0xe8(0x08)
	float WindGustDirectionDeviation; // 0xf0(0x04)
	float WindGustInterval; // 0xf4(0x04)
	float WindGustIntervalDeviation; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	void NormalizeScales(); // Function Mist.MistWeatherTypeData.NormalizeScales // (Final|Native|Public) // @ game+0x11e2cc0
};

// Class Mist.MistWormAttractorComponent
// Size: 0x100 (Inherited: 0xf0)
struct UMistWormAttractorComponent : UActorComponent {
	struct AMistWormAttractorController* WormAttractorController; // 0xf0(0x08)
	struct FVector2D CraftingAggro; // 0xf8(0x08)

	void CraftingStartedAggro(struct UMistCraftingStationComponent* Sender); // Function Mist.MistWormAttractorComponent.CraftingStartedAggro // (Final|Native|Public) // @ game+0x11e4ef0
	void AggroWorm(float Aggro, float AggroNearby); // Function Mist.MistWormAttractorComponent.AggroWorm // (Final|Native|Public|BlueprintCallable) // @ game+0x11e4e30
};

// Class Mist.MistWormAttractorController
// Size: 0x418 (Inherited: 0x3c0)
struct AMistWormAttractorController : AActor {
	struct TSet<struct UMistWormAttractorComponent*> ActiveAttractorMap; // 0x3c0(0x50)
	struct AMistWormMonster* Worm; // 0x410(0x08)
};

// Class Mist.WormChainPart
// Size: 0x8c0 (Inherited: 0x850)
struct UWormChainPart : UStaticMeshComponent {
	float CapsuleRadius; // 0x850(0x04)
	float CapsuleHalfHeight; // 0x854(0x04)
	struct FVector FrontCenterOffset; // 0x858(0x0c)
	char pad_864[0x4]; // 0x864(0x04)
	struct UWormChainPart* FrontPart; // 0x868(0x08)
	struct UWormChainPart* BackPart; // 0x870(0x08)
	enum class ESurfaceStatus LimbSurfaceStatus; // 0x878(0x01)
	bool bHadContact; // 0x879(0x01)
	bool bDisableGroundCollision; // 0x87a(0x01)
	char pad_87B[0x5]; // 0x87b(0x05)
	struct TArray<struct UParticleSystemComponent*> LimbParticles; // 0x880(0x10)
	struct TArray<struct UParticleSystemComponent*> InAirParticles; // 0x890(0x10)
	int32_t LimbParticleAmount; // 0x8a0(0x04)
	struct FVector2D ParticleTraceOffset; // 0x8a4(0x08)
	float ParticleRollMin; // 0x8ac(0x04)
	float ParticleRollMax; // 0x8b0(0x04)
	char pad_8B4[0xc]; // 0x8b4(0x0c)
};

// Class Mist.MistWormDebugData
// Size: 0x78 (Inherited: 0x28)
struct UMistWormDebugData : UObject {
	float LastTimeStamp; // 0x28(0x04)
	char pad_2C[0x4]; // 0x2c(0x04)
	struct TArray<struct FMistWormDebugChainPart> DebugInfo; // 0x30(0x10)
	char pad_40[0x28]; // 0x40(0x28)
	bool bDebugDisableNetwork; // 0x68(0x01)
	bool bShowDebugLines; // 0x69(0x01)
	char pad_6A[0x2]; // 0x6a(0x02)
	float InitialStaminaPoolPercentage; // 0x6c(0x04)
	int32_t Frame; // 0x70(0x04)
	bool bKeyWasPressed; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
};

// Class Mist.MistWormHarvestableMandible
// Size: 0x890 (Inherited: 0x850)
struct UMistWormHarvestableMandible : UStaticMeshComponent {
	char pad_850[0x8]; // 0x850(0x08)
	struct TArray<struct FMistFoliageHarvestingEntry> MandibleHarvestingEntry; // 0x858(0x10)
	struct FText Name; // 0x868(0x18)
	float MandibleMaxHealth; // 0x880(0x04)
	float MandibleHealth; // 0x884(0x04)
	char pad_888[0x8]; // 0x888(0x08)

	void MulticastSetHealth(float NewHealth); // Function Mist.MistWormHarvestableMandible.MulticastSetHealth // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x112e4e0
};

// Class Mist.MistWormMonster
// Size: 0x7b0 (Inherited: 0x3d0)
struct AMistWormMonster : AStaticMeshActor {
	char pad_3D0[0xb8]; // 0x3d0(0xb8)
	struct TArray<struct FRepMovement> WormReplication; // 0x488(0x10)
	struct TArray<struct UWormChainPart*> WormBones; // 0x498(0x10)
	struct TArray<struct FVector> WormBonesSize; // 0x4a8(0x10)
	struct UMistWormSkinComponent* CachedWormSkin; // 0x4b8(0x08)
	float UnderskinDamageMultiplier; // 0x4c0(0x04)
	float WalkerImpactDamageMultiplier; // 0x4c4(0x04)
	float WalkerBaseImpactDamage; // 0x4c8(0x04)
	float ForwardForce; // 0x4cc(0x04)
	float SideForce; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct AActor* RibcageActorClass; // 0x4d8(0x08)
	struct TArray<struct UWormChainPart*> BodyParts; // 0x4e0(0x10)
	struct UWormChainPart* CenterPart; // 0x4f0(0x08)
	struct TArray<struct UPhysicsConstraintComponent*> BodyPartsConstraints; // 0x4f8(0x10)
	struct TArray<struct FConstraintInstance> BodyPartsConstraintsDefault; // 0x508(0x10)
	struct TArray<struct FTransform> BodyPartsConstraintsDefaultTransform; // 0x518(0x10)
	struct UPhysicsConstraintComponent* GroundConstraint; // 0x528(0x08)
	bool bConstraintsChanged; // 0x530(0x01)
	char pad_531[0x7]; // 0x531(0x07)
	struct FMistComponentReference MouthCollision; // 0x538(0x28)
	float MaxStaminaPool; // 0x560(0x04)
	float MaxStaminaUsagePerSecond; // 0x564(0x04)
	float TargetSpeedKmH; // 0x568(0x04)
	float TravelSpeedPercentage; // 0x56c(0x04)
	float RamSpeedPercentage; // 0x570(0x04)
	float WaveUpperAveragePercentage; // 0x574(0x04)
	float WaveLowerAveragePercentage; // 0x578(0x04)
	float WaveMaxVelocityPercentage; // 0x57c(0x04)
	int32_t FleeCycles; // 0x580(0x04)
	float WaveSinePercentage; // 0x584(0x04)
	float StaminaPool; // 0x588(0x04)
	float StaminaUsage; // 0x58c(0x04)
	struct FVector Velocity; // 0x590(0x0c)
	enum class ESurfaceStatus WormSurfaceStatus; // 0x59c(0x01)
	char pad_59D[0x3]; // 0x59d(0x03)
	float WormMouthStatusDuration; // 0x5a0(0x04)
	struct FVector MovementDestination; // 0x5a4(0x0c)
	struct AActor* TargetToAttack; // 0x5b0(0x08)
	float ForceSteeringDirection; // 0x5b8(0x04)
	enum class EWormMovement WormBehaviourMode; // 0x5bc(0x01)
	enum class EWormAgression WormAgressionMode; // 0x5bd(0x01)
	enum class EMouthStatus WormMouthStatus; // 0x5be(0x01)
	enum class EWormMovement LastWormBehaviourMode; // 0x5bf(0x01)
	enum class EWormAgression LastWormAgressionMode; // 0x5c0(0x01)
	enum class EMouthStatus LastWormMouthStatus; // 0x5c1(0x01)
	char pad_5C2[0x6]; // 0x5c2(0x06)
	struct UCameraShake* WormShakeClass; // 0x5c8(0x08)
	struct UCameraShake* ActiveWormShake; // 0x5d0(0x08)
	struct UParticleSystem* WormMovementParticle; // 0x5d8(0x08)
	struct UParticleSystem* WormInAirParticle; // 0x5e0(0x08)
	struct UMistDamageOverrideTable* WormDamageOverride; // 0x5e8(0x08)
	struct UMistDamageOverrideTable* SkinDamageOverride; // 0x5f0(0x08)
	struct UMistDamageOverrideTable* ScaleDamageOverride; // 0x5f8(0x08)
	struct UMistDamageOverrideTable* ScaleStiffnessOverride; // 0x600(0x08)
	struct UDamageType* ImpactDamageType; // 0x608(0x08)
	float MaxHealth; // 0x610(0x04)
	float Health; // 0x614(0x04)
	struct TArray<struct FMistWormScaleHealth> ScaleHealthArray; // 0x618(0x10)
	float SkinHealth; // 0x628(0x04)
	char pad_62C[0x4]; // 0x62c(0x04)
	struct TArray<struct FHitResult> TraceHits; // 0x630(0x10)
	struct TArray<float> GroundContacts; // 0x640(0x10)
	struct TArray<float> GroundTraction; // 0x650(0x10)
	struct TArray<float> ApplicableTractionForcePercentage; // 0x660(0x10)
	bool bWormIsKilled; // 0x670(0x01)
	bool bDestructionInProgress; // 0x671(0x01)
	bool bIsDying; // 0x672(0x01)
	bool bDebugStopWorm; // 0x673(0x01)
	char pad_674[0x4]; // 0x674(0x04)
	struct TMap<struct AActor*, float> AgressionMap; // 0x678(0x50)
	float CollisionDamageCount; // 0x6c8(0x04)
	float TriggerCollisionDamageCount; // 0x6cc(0x04)
	struct FText MobName; // 0x6d0(0x18)
	struct FText SkinName; // 0x6e8(0x18)
	struct UTexture2D* SkinIcon; // 0x700(0x08)
	struct FText ScaleName; // 0x708(0x18)
	struct UTexture2D* ScaleIcon; // 0x720(0x08)
	float MinDamagePercentToGetHunterAchievement; // 0x728(0x04)
	float MaxDistanceToGetHunterAchievement; // 0x72c(0x04)
	struct TMap<struct AMistOasisPlayerState*, float> PlayersDamagingWorm; // 0x730(0x50)
	struct USphereComponent* PlayerSpottedSphereDetectionComponent; // 0x780(0x08)
	struct USphereComponent* PlayerOutOfRangeSphereDetectionComponent; // 0x788(0x08)
	struct TArray<struct AMistPlayer*> InRangePlayers; // 0x790(0x10)
	char pad_7A0[0x10]; // 0x7a0(0x10)

	void WormDebugTick(float DeltaSeconds); // Function Mist.MistWormMonster.WormDebugTick // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void SetWormChain(); // Function Mist.MistWormMonster.SetWormChain // (Final|Native|Public|BlueprintCallable) // @ game+0x11e5d70
	void OnWormSurfaceStatusChanged(enum class ESurfaceStatus PrevSurface, enum class ESurfaceStatus NewSurface); // Function Mist.MistWormMonster.OnWormSurfaceStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormScaleHealthChanged(struct UMistWormScaleComponent* Scale, float PrevHealth, float NewHealth, float MaximumHealth, bool bStiffnessDamage); // Function Mist.MistWormMonster.OnWormScaleHealthChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormScaleDestroyed(struct UMistWormScaleComponent* Scale, bool bTornOff, float RemainingHealth, float MaximumHealth); // Function Mist.MistWormMonster.OnWormScaleDestroyed // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormMovementModeChanged(enum class EWormMovement PrevMovement, enum class EWormMovement NewMovement); // Function Mist.MistWormMonster.OnWormMovementModeChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormMouthStatusChanged(enum class EMouthStatus PrevMouth, enum class EMouthStatus NewMouth, float Duration); // Function Mist.MistWormMonster.OnWormMouthStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormDestruction(); // Function Mist.MistWormMonster.OnWormDestruction // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormDeath(); // Function Mist.MistWormMonster.OnWormDeath // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormDamage(float PrevHealth, float NewHealth, float MaximumHealth); // Function Mist.MistWormMonster.OnWormDamage // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnWormAggressionModeChanged(enum class EWormAgression PrevAgression, enum class EWormAgression NewAgression); // Function Mist.MistWormMonster.OnWormAggressionModeChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnTargetToAttackChanged(struct AActor* PrevTarget, struct AActor* NewTarget); // Function Mist.MistWormMonster.OnTargetToAttackChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void OnRep_TargetChange(struct AActor* PrevTarget); // Function Mist.MistWormMonster.OnRep_TargetChange // (Final|Native|Public) // @ game+0x1141b60
	void OnRep_SkinHealth(float PrevHealth); // Function Mist.MistWormMonster.OnRep_SkinHealth // (Final|Native|Public) // @ game+0x11e5cf0
	void OnRep_ScaleHealth(struct TArray<struct FMistWormScaleHealth> PrevHealth); // Function Mist.MistWormMonster.OnRep_ScaleHealth // (Final|Native|Public) // @ game+0x11e5c10
	void OnRep_ReplicatedWormMovement(); // Function Mist.MistWormMonster.OnRep_ReplicatedWormMovement // (Final|Native|Public) // @ game+0x11e5bf0
	void OnRep_MovementMode(enum class EWormMovement PrevMovement); // Function Mist.MistWormMonster.OnRep_MovementMode // (Final|Native|Public) // @ game+0x11e5b70
	void OnRep_MouthStatus(enum class EMouthStatus PrevMouthStatus); // Function Mist.MistWormMonster.OnRep_MouthStatus // (Final|Native|Public) // @ game+0x11e5af0
	void OnRep_Health(float PrevHealth); // Function Mist.MistWormMonster.OnRep_Health // (Final|Native|Public) // @ game+0x11e5a70
	void OnRep_AgressionMode(enum class EWormAgression PrevAgression); // Function Mist.MistWormMonster.OnRep_AgressionMode // (Final|Native|Public) // @ game+0x11e59f0
	void OnLimbSurfaceStatusChanged(int32_t LimbIndex, enum class ESurfaceStatus PrevSurface, enum class ESurfaceStatus NewSurface); // Function Mist.MistWormMonster.OnLimbSurfaceStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x163f1c0
	void NotifySkinHealth(struct UMistWormSkinComponent* Skin, float NewSkinHealth); // Function Mist.MistWormMonster.NotifySkinHealth // (Net|NetReliableNative|Event|Public) // @ game+0x11e5920
	void NotifyScaleHealth(struct UMistWormScaleComponent* Scale, float ScaleHealth, float ScaleStiffness); // Function Mist.MistWormMonster.NotifyScaleHealth // (Net|NetReliableNative|Event|Public) // @ game+0x11e5820
	void MulticastKillWorm(); // Function Mist.MistWormMonster.MulticastKillWorm // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x10feaf0
	bool IsWormDead(); // Function Mist.MistWormMonster.IsWormDead // (Final|Native|Public|Const) // @ game+0x11e57f0
	bool IsWormAlive(); // Function Mist.MistWormMonster.IsWormAlive // (Final|Native|Public|BlueprintCallable) // @ game+0x11e57c0
	void HandlePlayerSpottedSphereDetectionComponentEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistWormMonster.HandlePlayerSpottedSphereDetectionComponentEndTrigger // (Final|Native|Private) // @ game+0x11e5700
	void HandlePlayerSpottedSphereDetectionComponentBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistWormMonster.HandlePlayerSpottedSphereDetectionComponentBeginTrigger // (Final|Native|Private) // @ game+0x11e5640
	void HandlePlayerOutOfRangeSphereDetectionComponentEndTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistWormMonster.HandlePlayerOutOfRangeSphereDetectionComponentEndTrigger // (Final|Native|Private) // @ game+0x11e5580
	void HandlePlayerOutOfRangeSphereDetectionComponentBeginTrigger(struct UPrimitiveComponent* TriggerComponent, struct AActor* OtherActor); // Function Mist.MistWormMonster.HandlePlayerOutOfRangeSphereDetectionComponentBeginTrigger // (Final|Native|Private) // @ game+0x11e54c0
	void HandleActorHit(struct AActor* SelfActor, struct AActor* OtherActor, struct FVector NormalImpulse, struct FHitResult& Hit); // Function Mist.MistWormMonster.HandleActorHit // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x11e5330
	struct FVector GetWormVelocity(); // Function Mist.MistWormMonster.GetWormVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11e52f0
	float GetWormMaxHealth(); // Function Mist.MistWormMonster.GetWormMaxHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x11e52b0
	struct FVector GetWormLimbVelocity(int32_t Index); // Function Mist.MistWormMonster.GetWormLimbVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x11e5210
	enum class ESurfaceStatus GetWormLimbSurfaceStatus(int32_t Index); // Function Mist.MistWormMonster.GetWormLimbSurfaceStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x11e5180
	float GetWormLimbDepthAverage(int32_t Index); // Function Mist.MistWormMonster.GetWormLimbDepthAverage // (Final|Native|Public|BlueprintCallable) // @ game+0x11e50f0
	struct UWormChainPart* GetWormLimb(int32_t Index); // Function Mist.MistWormMonster.GetWormLimb // (Final|Native|Public|BlueprintCallable) // @ game+0x11e5060
	float GetWormHealth(); // Function Mist.MistWormMonster.GetWormHealth // (Final|Native|Public|BlueprintCallable) // @ game+0x11e5020
	struct AActor* GetTargetToAttack(); // Function Mist.MistWormMonster.GetTargetToAttack // (Final|Native|Public|BlueprintCallable) // @ game+0x11e4ff0
	void EnableContactModification(struct UPrimitiveComponent* InComponent); // Function Mist.MistWormMonster.EnableContactModification // (Final|Native|Public|BlueprintCallable) // @ game+0x11e4f70
	void ClientNotifyDamage(); // Function Mist.MistWormMonster.ClientNotifyDamage // (Net|Native|Event|Public|NetClient) // @ game+0x1096c90
	void AddAgressionByPlayer(struct AMistPlayer* AgressionInstigatorPlayer, float Agression); // Function Mist.MistWormMonster.AddAgressionByPlayer // (Final|Native|Public) // @ game+0x11e4d60
	void AddAgressionByActor(struct AActor* AgressionInstigatorActor, float Agression); // Function Mist.MistWormMonster.AddAgressionByActor // (Final|Native|Public) // @ game+0x11e4c90
};

// Class Mist.MistWormMound
// Size: 0x3c8 (Inherited: 0x3c0)
struct AMistWormMound : AActor {
	float Radius; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
};

// Class Mist.MistWormMovementComponent
// Size: 0x190 (Inherited: 0x190)
struct UMistWormMovementComponent : UPawnMovementComponent {
};

// Class Mist.MistWormRibcage
// Size: 0x3e8 (Inherited: 0x3c0)
struct AMistWormRibcage : AActor {
	char pad_3C0[0x28]; // 0x3c0(0x28)
};

// Class Mist.MistWormScaleComponent
// Size: 0x8c0 (Inherited: 0x850)
struct UMistWormScaleComponent : UStaticMeshComponent {
	char pad_850[0x40]; // 0x850(0x40)
	struct AMistBrokenWormScale* ScaleBrokenActor; // 0x890(0x08)
	float ScaleMaxHealth; // 0x898(0x04)
	float ScaleHealth; // 0x89c(0x04)
	float ScaleMaxStiffness; // 0x8a0(0x04)
	float ScaleStiffness; // 0x8a4(0x04)
	struct AMistBrokenWormScale* ReplacementActor; // 0x8a8(0x08)
	struct FName OverrideBoneName; // 0x8b0(0x08)
	char pad_8B8[0x8]; // 0x8b8(0x08)
};

// Class Mist.MistWormSkeletonBoneComponent
// Size: 0x860 (Inherited: 0x850)
struct UMistWormSkeletonBoneComponent : UStaticMeshComponent {
	float BoneMaxHealth; // 0x850(0x04)
	float BoneHealth; // 0x854(0x04)
	char pad_858[0x8]; // 0x858(0x08)
};

// Class Mist.MistWormSkinComponent
// Size: 0xea0 (Inherited: 0xe60)
struct UMistWormSkinComponent : USkeletalMeshComponent {
	char pad_E60[0x20]; // 0xe60(0x20)
	struct TArray<struct FMistFoliageHarvestingEntry> SkinHarvesting; // 0xe80(0x10)
	float SkinMaxHealth; // 0xe90(0x04)
	float SkinHealth; // 0xe94(0x04)
	struct UMistWormScaleComponent* CachedHitScaleComponent; // 0xe98(0x08)
};

// Class Mist.MistWormSpawner
// Size: 0x3e0 (Inherited: 0x3c0)
struct AMistWormSpawner : AActor {
	struct AMistWormMonster* MobClass; // 0x3c0(0x08)
	struct AAIController* MobController; // 0x3c8(0x08)
	float AvgSpawnInterval; // 0x3d0(0x04)
	float SpawnDistance; // 0x3d4(0x04)
	int32_t MaxWormsAlive; // 0x3d8(0x04)
	char pad_3DC[0x4]; // 0x3dc(0x04)
};

// Class Mist.MistWormTinctureVitaminItem
// Size: 0x218 (Inherited: 0x210)
struct UMistWormTinctureVitaminItem : UMistVitaminItemTemplate {
	int32_t StatPointsToAward; // 0x210(0x04)
	int32_t LevelToAwardStatpoint; // 0x214(0x04)
};

// Class Mist.SoundNodePlayerSelector
// Size: 0x48 (Inherited: 0x48)
struct USoundNodePlayerSelector : USoundNode {
};

// Class Mist.WalkerContactConfig
// Size: 0x50 (Inherited: 0x30)
struct UWalkerContactConfig : UDataAsset {
	float FrictionScale; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct FWalkerContactConfigMaterialFriction> TireFrictionScales; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
};

// Class Mist.WalkerInertiaComponent
// Size: 0x860 (Inherited: 0x850)
struct UWalkerInertiaComponent : UStaticMeshComponent {
	bool bUpdateAtRuntime; // 0x848(0x01)
	struct UWalkerVehicleMovementComponent* MovementComponent; // 0x850(0x08)
	struct UWalkerVehicleMovementComponent* DefaultMovementComponent; // 0x858(0x08)
};

// Class Mist.WalkerWheel
// Size: 0x180 (Inherited: 0x28)
struct UWalkerWheel : UObject {
	struct UStaticMesh* CollisionMesh; // 0x28(0x08)
	bool bDontCreateShape; // 0x30(0x01)
	bool bAutoAdjustCollisionSize; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	struct FVector Offset; // 0x34(0x0c)
	float ShapeRadius; // 0x40(0x04)
	float ShapeWidth; // 0x44(0x04)
	float SteerAngle; // 0x48(0x04)
	float Mass; // 0x4c(0x04)
	float DampingRate; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	struct UWalkerContactConfig* TireConfig; // 0x58(0x08)
	float LatStiffMaxLoad; // 0x60(0x04)
	float LatStiffValue; // 0x64(0x04)
	float LongStiffValue; // 0x68(0x04)
	float CamberStiffValue; // 0x6c(0x04)
	struct FRuntimeFloatCurve FrictionVsSlipGraph; // 0x70(0x88)
	float SuspensionForceOffset; // 0xf8(0x04)
	struct FVector2D SuspensionForceHorizontalOffset; // 0xfc(0x08)
	float SuspensionMaxRaise; // 0x104(0x04)
	float SuspensionMaxDrop; // 0x108(0x04)
	float SuspensionNaturalFrequency; // 0x10c(0x04)
	float SuspensionDampingRatio; // 0x110(0x04)
	enum class EWalkerWheelSweepType SweepType; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	float MaxBrakeTorque; // 0x118(0x04)
	float MaxHandBrakeTorque; // 0x11c(0x04)
	struct UWalkerVehicleMovementComponent* VehicleSim; // 0x120(0x08)
	int32_t WheelIndex; // 0x128(0x04)
	float DebugLongSlip; // 0x12c(0x04)
	float DebugLatSlip; // 0x130(0x04)
	float DebugNormalizedTireLoad; // 0x134(0x04)
	char pad_138[0x4]; // 0x138(0x04)
	float DebugWheelTorque; // 0x13c(0x04)
	float DebugLongForce; // 0x140(0x04)
	float DebugLatForce; // 0x144(0x04)
	struct FVector Location; // 0x148(0x0c)
	struct FVector OldLocation; // 0x154(0x0c)
	struct FVector Velocity; // 0x160(0x0c)
	char pad_16C[0x14]; // 0x16c(0x14)

	bool IsInAir(); // Function Mist.WalkerWheel.IsInAir // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8470
	float GetSuspensionOffset(); // Function Mist.WalkerWheel.GetSuspensionOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8350
	struct FVector GetSuspensionHitLocation(); // Function Mist.WalkerWheel.GetSuspensionHitLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8310
	float GetSteerAngle(); // Function Mist.WalkerWheel.GetSteerAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e82e0
	float GetRotationAngle(); // Function Mist.WalkerWheel.GetRotationAngle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x11e8280
};

